Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT_MULTI
    COMMENT_SINGLE
    NEWLINE
    PARAMS

Grammar

Rule 0     S' -> code
Rule 1     code -> empty
Rule 2     code -> statement
Rule 3     code -> statement terminator code
Rule 4     statement -> controlstructure
Rule 5     statement -> assignment
Rule 6     statement -> binaryexp
Rule 7     statement -> nularexp
Rule 8     statement -> unaryexp
Rule 9     terminator -> SEMI_COLON
Rule 10    terminator -> COMMA
Rule 11    controlstructure -> ifstatement
Rule 12    controlstructure -> whileloop
Rule 13    controlstructure -> forloop
Rule 14    controlstructure -> withstatement
Rule 15    controlstructure -> foreachloop
Rule 16    controlstructure -> switchstatement
Rule 17    helpertype -> iftype
Rule 18    helpertype -> whiletype
Rule 19    helpertype -> fortype
Rule 20    helpertype -> withtype
Rule 21    case -> CASE primaryexp COLON bracedexp
Rule 22    case -> CASE primaryexp
Rule 23    case -> DEFAULT bracedexp
Rule 24    switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
Rule 25    switchbody -> empty
Rule 26    switchbody -> case
Rule 27    switchbody -> case terminator switchbody
Rule 28    iftype -> IF forloop_condition
Rule 29    ifstatement -> iftype THEN bracedexp
Rule 30    ifstatement -> iftype EXITWITH bracedexp
Rule 31    ifstatement -> iftype THEN bracedexp ELSE bracedexp
Rule 32    withtype -> WITH NAMESPACE
Rule 33    withstatementinit -> withtype DO
Rule 34    withstatement -> withstatementinit bracedexp
Rule 35    whiletype -> WHILE forloop_condition
Rule 36    whileloop -> whiletype DO bracedexp
Rule 37    foreachloop -> bracedexp FOREACH array
Rule 38    foreachloop -> bracedexp FOREACH primaryexp
Rule 39    fortype -> FOR new_scope string FROM primaryexp TO primaryexp
Rule 40    fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
Rule 41    fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
Rule 42    forloop -> fortype DO bracedexp_noscope
Rule 43    forloop_condition -> LBRACE booleanexp RBRACE
Rule 44    forloop_condition -> identifier
Rule 45    bracedexp_noscope -> LBRACE code RBRACE
Rule 46    getvariable_ns -> NAMESPACE GETVARIABLE string
Rule 47    getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 48    getvariable_any -> primaryexp GETVARIABLE string
Rule 49    getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 50    setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 51    setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
Rule 52    setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 53    setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
Rule 54    param_unaray -> PARAM LSPAREN number RSPAREN
Rule 55    param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN
Rule 56    param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
Rule 57    param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 58    param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 59    param_binary -> primaryexp PARAM LSPAREN number RSPAREN
Rule 60    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
Rule 61    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
Rule 62    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 63    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 64    vardefinition -> definition
Rule 65    vardefinition -> arraydefinition
Rule 66    assignment -> assignment_code code RBRACE
Rule 67    assignment -> definition EQUAL primaryexp
Rule 68    assignment -> variable EQUAL primaryexp
Rule 69    assignment_code -> definition EQUAL LBRACE
Rule 70    assignment_code -> variable EQUAL LBRACE
Rule 71    arraydefinition -> PRIVATE stringarray
Rule 72    definition -> PRIVATE PRIVATE_ID
Rule 73    definition -> PRIVATE string
Rule 74    identifier -> PRIVATE_ID
Rule 75    identifier -> GLOBAL_ID
Rule 76    variable -> PRIVATE_ID
Rule 77    variable -> GLOBAL_ID
Rule 78    binaryexp -> primaryexp BINARY_FNC primaryexp
Rule 79    binaryexp -> primaryexp comparisonoperator primaryexp
Rule 80    binaryexp -> primaryexp mathoperator primaryexp
Rule 81    binaryexp -> getvariable_ns
Rule 82    binaryexp -> getvariable_any
Rule 83    binaryexp -> setvariable_ns
Rule 84    binaryexp -> setvariable_any
Rule 85    binaryexp -> param_binary
Rule 86    primaryexp -> number
Rule 87    primaryexp -> identifier
Rule 88    primaryexp -> helpertype
Rule 89    primaryexp -> array
Rule 90    primaryexp -> unaryexp
Rule 91    primaryexp -> nularexp
Rule 92    primaryexp -> string
Rule 93    primaryexp -> binaryexp
Rule 94    primaryexp -> bracedexp
Rule 95    primaryexp -> LPAREN binaryexp RPAREN
Rule 96    bracedexp -> LBRACE new_scope code RBRACE
Rule 97    new_scope -> <empty>
Rule 98    array -> LSPAREN RSPAREN
Rule 99    array -> LSPAREN arrayelement RSPAREN
Rule 100   arrayelement -> primaryexp
Rule 101   arrayelement -> primaryexp COMMA arrayelement
Rule 102   stringarray -> LSPAREN RSPAREN
Rule 103   stringarray -> LSPAREN stringarrayelement RSPAREN
Rule 104   stringarrayelement -> string
Rule 105   stringarrayelement -> string COMMA stringarrayelement
Rule 106   nularexp -> NULAR_FNC
Rule 107   nularexp -> identifier
Rule 108   unaryexp -> UNARY_FNC primaryexp
Rule 109   unaryexp -> PLUS primaryexp
Rule 110   unaryexp -> MINUS primaryexp
Rule 111   unaryexp -> NOT primaryexp
Rule 112   unaryexp -> vardefinition
Rule 113   unaryexp -> param_unaray
Rule 114   comparisonoperator -> LT
Rule 115   comparisonoperator -> GT
Rule 116   comparisonoperator -> LTE
Rule 117   comparisonoperator -> GTE
Rule 118   comparisonoperator -> EQUALITY
Rule 119   comparisonoperator -> INEQUALITY
Rule 120   comparisonoperator -> AND
Rule 121   comparisonoperator -> OR
Rule 122   mathoperator -> PLUS
Rule 123   mathoperator -> MINUS
Rule 124   mathoperator -> TIMES
Rule 125   mathoperator -> DIVIDE
Rule 126   mathoperator -> MOD
Rule 127   mathoperator -> POW
Rule 128   booleanexp -> primaryexp
Rule 129   booleanexp -> primaryexp comparisonoperator booleanexp
Rule 130   booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE
Rule 131   configaccessor -> GT GT
Rule 132   configaccessor -> DIVIDE
Rule 133   number -> NUMBER_REAL
Rule 134   number -> NUMBER_EXP
Rule 135   number -> NUMBER_HEX
Rule 136   string -> STRING_SINGLE
Rule 137   string -> STRING_DOUBLE
Rule 138   empty -> <empty>

Terminals, with rules where they appear

AND                  : 120
BINARY_FNC           : 78
BOOL                 : 
CASE                 : 21 22
COLON                : 21
COMMA                : 10 41 41 47 49 50 51 51 52 53 53 55 56 56 57 57 57 58 58 58 60 61 61 62 62 62 63 63 63 101 105
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DEFAULT              : 23
DIVIDE               : 125 132
DO                   : 24 33 36 42
ELSE                 : 31
EQUAL                : 67 68 69 70
EQUALITY             : 118
EXITWITH             : 30
FOR                  : 39 40 41
FOREACH              : 37 38
FROM                 : 39 40
GETVARIABLE          : 46 47 48 49
GLOBAL_ID            : 75 77
GT                   : 115 131 131
GTE                  : 117
IF                   : 28
INEQUALITY           : 119
LBRACE               : 24 43 45 69 70 96 130
LPAREN               : 24 95
LSPAREN              : 41 47 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 98 99 102 103
LT                   : 114
LTE                  : 116
MINUS                : 110 123
MOD                  : 126
NAMESPACE            : 32 46 47 50 51
NEWLINE              : 
NOT                  : 111
NULAR_FNC            : 106
NUMBER_EXP           : 134
NUMBER_HEX           : 135
NUMBER_REAL          : 133
OR                   : 121
PARAM                : 54 55 56 57 58 59 60 61 62 63
PARAMS               : 
PLUS                 : 109 122
POW                  : 127
PRIVATE              : 71 72 73
PRIVATE_ID           : 72 74 76
RBRACE               : 24 43 45 66 96 130
RPAREN               : 24 95
RSPAREN              : 41 47 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 98 99 102 103
SEMI_COLON           : 9
SETVARIABLE          : 50 51 52 53
STEP                 : 40
STRING_DOUBLE        : 137
STRING_SINGLE        : 136
SWITCH               : 24
THEN                 : 29 31
TIMES                : 124
TO                   : 39 40
UNARY_FNC            : 108
WHILE                : 35
WITH                 : 32
error                : 

Nonterminals, with rules where they appear

array                : 37 56 57 58 58 61 62 63 63 89
arraydefinition      : 65
arrayelement         : 99 101
assignment           : 5
assignment_code      : 66
binaryexp            : 6 93 95
booleanexp           : 43 51 53 129 130
bracedexp            : 21 23 29 30 31 31 34 36 37 38 94
bracedexp_noscope    : 41 41 42
case                 : 26 27
code                 : 3 45 66 96 0
comparisonoperator   : 79 129 130
configaccessor       : 
controlstructure     : 4
definition           : 64 67 69
empty                : 1 25
foreachloop          : 15
forloop              : 13
forloop_condition    : 28 35 41
fortype              : 19 42
getvariable_any      : 82
getvariable_ns       : 81
helpertype           : 88
identifier           : 44 87 107
ifstatement          : 11
iftype               : 17 29 30 31
mathoperator         : 80
new_scope            : 39 40 41 96
nularexp             : 7 91
number               : 54 55 56 57 57 58 59 60 61 62 62 63 86
param_binary         : 85
param_unaray         : 113
primaryexp           : 21 22 24 38 39 39 40 40 40 47 48 49 49 50 51 52 52 53 53 55 56 57 58 59 60 60 61 61 62 62 63 63 67 68 78 78 79 79 80 80 100 101 108 109 110 111 128 129 130
setvariable_any      : 84
setvariable_ns       : 83
statement            : 2 3
string               : 39 40 46 47 48 49 50 51 52 53 73 92 104 105
stringarray          : 71
stringarrayelement   : 103 105
switchbody           : 24 27
switchstatement      : 16
terminator           : 3 27
unaryexp             : 8 90
vardefinition        : 112
variable             : 68 70
whileloop            : 12
whiletype            : 18 36
withstatement        : 14
withstatementinit    : 34
withtype             : 20 33

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (138) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (66) assignment -> . assignment_code code RBRACE
    (67) assignment -> . definition EQUAL primaryexp
    (68) assignment -> . variable EQUAL primaryexp
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (29) ifstatement -> . iftype THEN bracedexp
    (30) ifstatement -> . iftype EXITWITH bracedexp
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (36) whileloop -> . whiletype DO bracedexp
    (42) forloop -> . fortype DO bracedexp_noscope
    (34) withstatement -> . withstatementinit bracedexp
    (37) foreachloop -> . bracedexp FOREACH array
    (38) foreachloop -> . bracedexp FOREACH primaryexp
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (69) assignment_code -> . definition EQUAL LBRACE
    (70) assignment_code -> . variable EQUAL LBRACE
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (76) variable -> . PRIVATE_ID
    (77) variable -> . GLOBAL_ID
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withstatementinit -> . withtype DO
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (71) arraydefinition -> . PRIVATE stringarray
    (32) withtype -> . WITH NAMESPACE

    $end            reduce using rule 138 (empty -> .)
    NULAR_FNC       shift and go to state 24
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    SWITCH          shift and go to state 38
    PRIVATE         shift and go to state 41
    PRIVATE_ID      shift and go to state 42
    GLOBAL_ID       shift and go to state 44
    LPAREN          shift and go to state 39
    NAMESPACE       shift and go to state 47
    PARAM           shift and go to state 49
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    LBRACE          shift and go to state 40
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    WITH            shift and go to state 60

    code                           shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    identifier                     shift and go to state 25
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    iftype                         shift and go to state 32
    bracedexp                      shift and go to state 33
    whiletype                      shift and go to state 34
    fortype                        shift and go to state 35
    withstatementinit              shift and go to state 36
    array                          shift and go to state 37
    string                         shift and go to state 43
    number                         shift and go to state 45
    helpertype                     shift and go to state 46
    arraydefinition                shift and go to state 50
    withtype                       shift and go to state 54

state 1

    (0) S' -> code .



state 2

    (1) code -> empty .

    $end            reduce using rule 1 (code -> empty .)
    RBRACE          reduce using rule 1 (code -> empty .)


state 3

    (2) code -> statement .
    (3) code -> statement . terminator code
    (9) terminator -> . SEMI_COLON
    (10) terminator -> . COMMA

    $end            reduce using rule 2 (code -> statement .)
    RBRACE          reduce using rule 2 (code -> statement .)
    SEMI_COLON      shift and go to state 62
    COMMA           shift and go to state 63

    terminator                     shift and go to state 61

state 4

    (4) statement -> controlstructure .

    SEMI_COLON      reduce using rule 4 (statement -> controlstructure .)
    COMMA           reduce using rule 4 (statement -> controlstructure .)
    $end            reduce using rule 4 (statement -> controlstructure .)
    RBRACE          reduce using rule 4 (statement -> controlstructure .)


state 5

    (5) statement -> assignment .

    SEMI_COLON      reduce using rule 5 (statement -> assignment .)
    COMMA           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> binaryexp .
    (93) primaryexp -> binaryexp .

    SEMI_COLON      reduce using rule 6 (statement -> binaryexp .)
    COMMA           reduce using rule 6 (statement -> binaryexp .)
    $end            reduce using rule 6 (statement -> binaryexp .)
    RBRACE          reduce using rule 6 (statement -> binaryexp .)
    BINARY_FNC      reduce using rule 93 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 93 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 93 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 93 (primaryexp -> binaryexp .)
    LT              reduce using rule 93 (primaryexp -> binaryexp .)
    GT              reduce using rule 93 (primaryexp -> binaryexp .)
    LTE             reduce using rule 93 (primaryexp -> binaryexp .)
    GTE             reduce using rule 93 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 93 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 93 (primaryexp -> binaryexp .)
    AND             reduce using rule 93 (primaryexp -> binaryexp .)
    OR              reduce using rule 93 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 93 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 93 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 93 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 93 (primaryexp -> binaryexp .)
    MOD             reduce using rule 93 (primaryexp -> binaryexp .)
    POW             reduce using rule 93 (primaryexp -> binaryexp .)


state 7

    (7) statement -> nularexp .
    (91) primaryexp -> nularexp .

    SEMI_COLON      reduce using rule 7 (statement -> nularexp .)
    COMMA           reduce using rule 7 (statement -> nularexp .)
    $end            reduce using rule 7 (statement -> nularexp .)
    RBRACE          reduce using rule 7 (statement -> nularexp .)
    BINARY_FNC      reduce using rule 91 (primaryexp -> nularexp .)
    GETVARIABLE     reduce using rule 91 (primaryexp -> nularexp .)
    SETVARIABLE     reduce using rule 91 (primaryexp -> nularexp .)
    PARAM           reduce using rule 91 (primaryexp -> nularexp .)
    LT              reduce using rule 91 (primaryexp -> nularexp .)
    GT              reduce using rule 91 (primaryexp -> nularexp .)
    LTE             reduce using rule 91 (primaryexp -> nularexp .)
    GTE             reduce using rule 91 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 91 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 91 (primaryexp -> nularexp .)
    AND             reduce using rule 91 (primaryexp -> nularexp .)
    OR              reduce using rule 91 (primaryexp -> nularexp .)
    PLUS            reduce using rule 91 (primaryexp -> nularexp .)
    MINUS           reduce using rule 91 (primaryexp -> nularexp .)
    TIMES           reduce using rule 91 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 91 (primaryexp -> nularexp .)
    MOD             reduce using rule 91 (primaryexp -> nularexp .)
    POW             reduce using rule 91 (primaryexp -> nularexp .)


state 8

    (8) statement -> unaryexp .
    (90) primaryexp -> unaryexp .

    SEMI_COLON      reduce using rule 8 (statement -> unaryexp .)
    COMMA           reduce using rule 8 (statement -> unaryexp .)
    $end            reduce using rule 8 (statement -> unaryexp .)
    RBRACE          reduce using rule 8 (statement -> unaryexp .)
    BINARY_FNC      reduce using rule 90 (primaryexp -> unaryexp .)
    GETVARIABLE     reduce using rule 90 (primaryexp -> unaryexp .)
    SETVARIABLE     reduce using rule 90 (primaryexp -> unaryexp .)
    PARAM           reduce using rule 90 (primaryexp -> unaryexp .)
    LT              reduce using rule 90 (primaryexp -> unaryexp .)
    GT              reduce using rule 90 (primaryexp -> unaryexp .)
    LTE             reduce using rule 90 (primaryexp -> unaryexp .)
    GTE             reduce using rule 90 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 90 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 90 (primaryexp -> unaryexp .)
    AND             reduce using rule 90 (primaryexp -> unaryexp .)
    OR              reduce using rule 90 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 90 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 90 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 90 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 90 (primaryexp -> unaryexp .)
    MOD             reduce using rule 90 (primaryexp -> unaryexp .)
    POW             reduce using rule 90 (primaryexp -> unaryexp .)


state 9

    (11) controlstructure -> ifstatement .

    SEMI_COLON      reduce using rule 11 (controlstructure -> ifstatement .)
    COMMA           reduce using rule 11 (controlstructure -> ifstatement .)
    $end            reduce using rule 11 (controlstructure -> ifstatement .)
    RBRACE          reduce using rule 11 (controlstructure -> ifstatement .)


state 10

    (12) controlstructure -> whileloop .

    SEMI_COLON      reduce using rule 12 (controlstructure -> whileloop .)
    COMMA           reduce using rule 12 (controlstructure -> whileloop .)
    $end            reduce using rule 12 (controlstructure -> whileloop .)
    RBRACE          reduce using rule 12 (controlstructure -> whileloop .)


state 11

    (13) controlstructure -> forloop .

    SEMI_COLON      reduce using rule 13 (controlstructure -> forloop .)
    COMMA           reduce using rule 13 (controlstructure -> forloop .)
    $end            reduce using rule 13 (controlstructure -> forloop .)
    RBRACE          reduce using rule 13 (controlstructure -> forloop .)


state 12

    (14) controlstructure -> withstatement .

    SEMI_COLON      reduce using rule 14 (controlstructure -> withstatement .)
    COMMA           reduce using rule 14 (controlstructure -> withstatement .)
    $end            reduce using rule 14 (controlstructure -> withstatement .)
    RBRACE          reduce using rule 14 (controlstructure -> withstatement .)


state 13

    (15) controlstructure -> foreachloop .

    SEMI_COLON      reduce using rule 15 (controlstructure -> foreachloop .)
    COMMA           reduce using rule 15 (controlstructure -> foreachloop .)
    $end            reduce using rule 15 (controlstructure -> foreachloop .)
    RBRACE          reduce using rule 15 (controlstructure -> foreachloop .)


state 14

    (16) controlstructure -> switchstatement .

    SEMI_COLON      reduce using rule 16 (controlstructure -> switchstatement .)
    COMMA           reduce using rule 16 (controlstructure -> switchstatement .)
    $end            reduce using rule 16 (controlstructure -> switchstatement .)
    RBRACE          reduce using rule 16 (controlstructure -> switchstatement .)


state 15

    (66) assignment -> assignment_code . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (138) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (66) assignment -> . assignment_code code RBRACE
    (67) assignment -> . definition EQUAL primaryexp
    (68) assignment -> . variable EQUAL primaryexp
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (29) ifstatement -> . iftype THEN bracedexp
    (30) ifstatement -> . iftype EXITWITH bracedexp
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (36) whileloop -> . whiletype DO bracedexp
    (42) forloop -> . fortype DO bracedexp_noscope
    (34) withstatement -> . withstatementinit bracedexp
    (37) foreachloop -> . bracedexp FOREACH array
    (38) foreachloop -> . bracedexp FOREACH primaryexp
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (69) assignment_code -> . definition EQUAL LBRACE
    (70) assignment_code -> . variable EQUAL LBRACE
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (76) variable -> . PRIVATE_ID
    (77) variable -> . GLOBAL_ID
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withstatementinit -> . withtype DO
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (71) arraydefinition -> . PRIVATE stringarray
    (32) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 138 (empty -> .)
    NULAR_FNC       shift and go to state 24
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    SWITCH          shift and go to state 38
    PRIVATE         shift and go to state 41
    PRIVATE_ID      shift and go to state 42
    GLOBAL_ID       shift and go to state 44
    LPAREN          shift and go to state 39
    NAMESPACE       shift and go to state 47
    PARAM           shift and go to state 49
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    LBRACE          shift and go to state 40
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    WITH            shift and go to state 60

    assignment_code                shift and go to state 15
    code                           shift and go to state 64
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    identifier                     shift and go to state 25
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    iftype                         shift and go to state 32
    bracedexp                      shift and go to state 33
    whiletype                      shift and go to state 34
    fortype                        shift and go to state 35
    withstatementinit              shift and go to state 36
    array                          shift and go to state 37
    string                         shift and go to state 43
    number                         shift and go to state 45
    helpertype                     shift and go to state 46
    arraydefinition                shift and go to state 50
    withtype                       shift and go to state 54

state 16

    (67) assignment -> definition . EQUAL primaryexp
    (69) assignment_code -> definition . EQUAL LBRACE
    (64) vardefinition -> definition .

    EQUAL           shift and go to state 65
    SEMI_COLON      reduce using rule 64 (vardefinition -> definition .)
    COMMA           reduce using rule 64 (vardefinition -> definition .)
    $end            reduce using rule 64 (vardefinition -> definition .)
    BINARY_FNC      reduce using rule 64 (vardefinition -> definition .)
    GETVARIABLE     reduce using rule 64 (vardefinition -> definition .)
    SETVARIABLE     reduce using rule 64 (vardefinition -> definition .)
    PARAM           reduce using rule 64 (vardefinition -> definition .)
    LT              reduce using rule 64 (vardefinition -> definition .)
    GT              reduce using rule 64 (vardefinition -> definition .)
    LTE             reduce using rule 64 (vardefinition -> definition .)
    GTE             reduce using rule 64 (vardefinition -> definition .)
    EQUALITY        reduce using rule 64 (vardefinition -> definition .)
    INEQUALITY      reduce using rule 64 (vardefinition -> definition .)
    AND             reduce using rule 64 (vardefinition -> definition .)
    OR              reduce using rule 64 (vardefinition -> definition .)
    PLUS            reduce using rule 64 (vardefinition -> definition .)
    MINUS           reduce using rule 64 (vardefinition -> definition .)
    TIMES           reduce using rule 64 (vardefinition -> definition .)
    DIVIDE          reduce using rule 64 (vardefinition -> definition .)
    MOD             reduce using rule 64 (vardefinition -> definition .)
    POW             reduce using rule 64 (vardefinition -> definition .)
    RBRACE          reduce using rule 64 (vardefinition -> definition .)


state 17

    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 18

    (68) assignment -> variable . EQUAL primaryexp
    (70) assignment_code -> variable . EQUAL LBRACE

    EQUAL           shift and go to state 86


state 19

    (81) binaryexp -> getvariable_ns .

    SEMI_COLON      reduce using rule 81 (binaryexp -> getvariable_ns .)
    COMMA           reduce using rule 81 (binaryexp -> getvariable_ns .)
    $end            reduce using rule 81 (binaryexp -> getvariable_ns .)
    BINARY_FNC      reduce using rule 81 (binaryexp -> getvariable_ns .)
    GETVARIABLE     reduce using rule 81 (binaryexp -> getvariable_ns .)
    SETVARIABLE     reduce using rule 81 (binaryexp -> getvariable_ns .)
    PARAM           reduce using rule 81 (binaryexp -> getvariable_ns .)
    LT              reduce using rule 81 (binaryexp -> getvariable_ns .)
    GT              reduce using rule 81 (binaryexp -> getvariable_ns .)
    LTE             reduce using rule 81 (binaryexp -> getvariable_ns .)
    GTE             reduce using rule 81 (binaryexp -> getvariable_ns .)
    EQUALITY        reduce using rule 81 (binaryexp -> getvariable_ns .)
    INEQUALITY      reduce using rule 81 (binaryexp -> getvariable_ns .)
    AND             reduce using rule 81 (binaryexp -> getvariable_ns .)
    OR              reduce using rule 81 (binaryexp -> getvariable_ns .)
    PLUS            reduce using rule 81 (binaryexp -> getvariable_ns .)
    MINUS           reduce using rule 81 (binaryexp -> getvariable_ns .)
    TIMES           reduce using rule 81 (binaryexp -> getvariable_ns .)
    DIVIDE          reduce using rule 81 (binaryexp -> getvariable_ns .)
    MOD             reduce using rule 81 (binaryexp -> getvariable_ns .)
    POW             reduce using rule 81 (binaryexp -> getvariable_ns .)
    RBRACE          reduce using rule 81 (binaryexp -> getvariable_ns .)
    RSPAREN         reduce using rule 81 (binaryexp -> getvariable_ns .)
    RPAREN          reduce using rule 81 (binaryexp -> getvariable_ns .)
    TO              reduce using rule 81 (binaryexp -> getvariable_ns .)
    STEP            reduce using rule 81 (binaryexp -> getvariable_ns .)
    DO              reduce using rule 81 (binaryexp -> getvariable_ns .)
    COLON           reduce using rule 81 (binaryexp -> getvariable_ns .)


state 20

    (82) binaryexp -> getvariable_any .

    SEMI_COLON      reduce using rule 82 (binaryexp -> getvariable_any .)
    COMMA           reduce using rule 82 (binaryexp -> getvariable_any .)
    $end            reduce using rule 82 (binaryexp -> getvariable_any .)
    BINARY_FNC      reduce using rule 82 (binaryexp -> getvariable_any .)
    GETVARIABLE     reduce using rule 82 (binaryexp -> getvariable_any .)
    SETVARIABLE     reduce using rule 82 (binaryexp -> getvariable_any .)
    PARAM           reduce using rule 82 (binaryexp -> getvariable_any .)
    LT              reduce using rule 82 (binaryexp -> getvariable_any .)
    GT              reduce using rule 82 (binaryexp -> getvariable_any .)
    LTE             reduce using rule 82 (binaryexp -> getvariable_any .)
    GTE             reduce using rule 82 (binaryexp -> getvariable_any .)
    EQUALITY        reduce using rule 82 (binaryexp -> getvariable_any .)
    INEQUALITY      reduce using rule 82 (binaryexp -> getvariable_any .)
    AND             reduce using rule 82 (binaryexp -> getvariable_any .)
    OR              reduce using rule 82 (binaryexp -> getvariable_any .)
    PLUS            reduce using rule 82 (binaryexp -> getvariable_any .)
    MINUS           reduce using rule 82 (binaryexp -> getvariable_any .)
    TIMES           reduce using rule 82 (binaryexp -> getvariable_any .)
    DIVIDE          reduce using rule 82 (binaryexp -> getvariable_any .)
    MOD             reduce using rule 82 (binaryexp -> getvariable_any .)
    POW             reduce using rule 82 (binaryexp -> getvariable_any .)
    RBRACE          reduce using rule 82 (binaryexp -> getvariable_any .)
    RSPAREN         reduce using rule 82 (binaryexp -> getvariable_any .)
    RPAREN          reduce using rule 82 (binaryexp -> getvariable_any .)
    TO              reduce using rule 82 (binaryexp -> getvariable_any .)
    STEP            reduce using rule 82 (binaryexp -> getvariable_any .)
    DO              reduce using rule 82 (binaryexp -> getvariable_any .)
    COLON           reduce using rule 82 (binaryexp -> getvariable_any .)


state 21

    (83) binaryexp -> setvariable_ns .

    SEMI_COLON      reduce using rule 83 (binaryexp -> setvariable_ns .)
    COMMA           reduce using rule 83 (binaryexp -> setvariable_ns .)
    $end            reduce using rule 83 (binaryexp -> setvariable_ns .)
    BINARY_FNC      reduce using rule 83 (binaryexp -> setvariable_ns .)
    GETVARIABLE     reduce using rule 83 (binaryexp -> setvariable_ns .)
    SETVARIABLE     reduce using rule 83 (binaryexp -> setvariable_ns .)
    PARAM           reduce using rule 83 (binaryexp -> setvariable_ns .)
    LT              reduce using rule 83 (binaryexp -> setvariable_ns .)
    GT              reduce using rule 83 (binaryexp -> setvariable_ns .)
    LTE             reduce using rule 83 (binaryexp -> setvariable_ns .)
    GTE             reduce using rule 83 (binaryexp -> setvariable_ns .)
    EQUALITY        reduce using rule 83 (binaryexp -> setvariable_ns .)
    INEQUALITY      reduce using rule 83 (binaryexp -> setvariable_ns .)
    AND             reduce using rule 83 (binaryexp -> setvariable_ns .)
    OR              reduce using rule 83 (binaryexp -> setvariable_ns .)
    PLUS            reduce using rule 83 (binaryexp -> setvariable_ns .)
    MINUS           reduce using rule 83 (binaryexp -> setvariable_ns .)
    TIMES           reduce using rule 83 (binaryexp -> setvariable_ns .)
    DIVIDE          reduce using rule 83 (binaryexp -> setvariable_ns .)
    MOD             reduce using rule 83 (binaryexp -> setvariable_ns .)
    POW             reduce using rule 83 (binaryexp -> setvariable_ns .)
    RBRACE          reduce using rule 83 (binaryexp -> setvariable_ns .)
    RSPAREN         reduce using rule 83 (binaryexp -> setvariable_ns .)
    RPAREN          reduce using rule 83 (binaryexp -> setvariable_ns .)
    TO              reduce using rule 83 (binaryexp -> setvariable_ns .)
    STEP            reduce using rule 83 (binaryexp -> setvariable_ns .)
    DO              reduce using rule 83 (binaryexp -> setvariable_ns .)
    COLON           reduce using rule 83 (binaryexp -> setvariable_ns .)


state 22

    (84) binaryexp -> setvariable_any .

    SEMI_COLON      reduce using rule 84 (binaryexp -> setvariable_any .)
    COMMA           reduce using rule 84 (binaryexp -> setvariable_any .)
    $end            reduce using rule 84 (binaryexp -> setvariable_any .)
    BINARY_FNC      reduce using rule 84 (binaryexp -> setvariable_any .)
    GETVARIABLE     reduce using rule 84 (binaryexp -> setvariable_any .)
    SETVARIABLE     reduce using rule 84 (binaryexp -> setvariable_any .)
    PARAM           reduce using rule 84 (binaryexp -> setvariable_any .)
    LT              reduce using rule 84 (binaryexp -> setvariable_any .)
    GT              reduce using rule 84 (binaryexp -> setvariable_any .)
    LTE             reduce using rule 84 (binaryexp -> setvariable_any .)
    GTE             reduce using rule 84 (binaryexp -> setvariable_any .)
    EQUALITY        reduce using rule 84 (binaryexp -> setvariable_any .)
    INEQUALITY      reduce using rule 84 (binaryexp -> setvariable_any .)
    AND             reduce using rule 84 (binaryexp -> setvariable_any .)
    OR              reduce using rule 84 (binaryexp -> setvariable_any .)
    PLUS            reduce using rule 84 (binaryexp -> setvariable_any .)
    MINUS           reduce using rule 84 (binaryexp -> setvariable_any .)
    TIMES           reduce using rule 84 (binaryexp -> setvariable_any .)
    DIVIDE          reduce using rule 84 (binaryexp -> setvariable_any .)
    MOD             reduce using rule 84 (binaryexp -> setvariable_any .)
    POW             reduce using rule 84 (binaryexp -> setvariable_any .)
    RBRACE          reduce using rule 84 (binaryexp -> setvariable_any .)
    RSPAREN         reduce using rule 84 (binaryexp -> setvariable_any .)
    RPAREN          reduce using rule 84 (binaryexp -> setvariable_any .)
    TO              reduce using rule 84 (binaryexp -> setvariable_any .)
    STEP            reduce using rule 84 (binaryexp -> setvariable_any .)
    DO              reduce using rule 84 (binaryexp -> setvariable_any .)
    COLON           reduce using rule 84 (binaryexp -> setvariable_any .)


state 23

    (85) binaryexp -> param_binary .

    SEMI_COLON      reduce using rule 85 (binaryexp -> param_binary .)
    COMMA           reduce using rule 85 (binaryexp -> param_binary .)
    $end            reduce using rule 85 (binaryexp -> param_binary .)
    BINARY_FNC      reduce using rule 85 (binaryexp -> param_binary .)
    GETVARIABLE     reduce using rule 85 (binaryexp -> param_binary .)
    SETVARIABLE     reduce using rule 85 (binaryexp -> param_binary .)
    PARAM           reduce using rule 85 (binaryexp -> param_binary .)
    LT              reduce using rule 85 (binaryexp -> param_binary .)
    GT              reduce using rule 85 (binaryexp -> param_binary .)
    LTE             reduce using rule 85 (binaryexp -> param_binary .)
    GTE             reduce using rule 85 (binaryexp -> param_binary .)
    EQUALITY        reduce using rule 85 (binaryexp -> param_binary .)
    INEQUALITY      reduce using rule 85 (binaryexp -> param_binary .)
    AND             reduce using rule 85 (binaryexp -> param_binary .)
    OR              reduce using rule 85 (binaryexp -> param_binary .)
    PLUS            reduce using rule 85 (binaryexp -> param_binary .)
    MINUS           reduce using rule 85 (binaryexp -> param_binary .)
    TIMES           reduce using rule 85 (binaryexp -> param_binary .)
    DIVIDE          reduce using rule 85 (binaryexp -> param_binary .)
    MOD             reduce using rule 85 (binaryexp -> param_binary .)
    POW             reduce using rule 85 (binaryexp -> param_binary .)
    RBRACE          reduce using rule 85 (binaryexp -> param_binary .)
    RSPAREN         reduce using rule 85 (binaryexp -> param_binary .)
    RPAREN          reduce using rule 85 (binaryexp -> param_binary .)
    TO              reduce using rule 85 (binaryexp -> param_binary .)
    STEP            reduce using rule 85 (binaryexp -> param_binary .)
    DO              reduce using rule 85 (binaryexp -> param_binary .)
    COLON           reduce using rule 85 (binaryexp -> param_binary .)


state 24

    (106) nularexp -> NULAR_FNC .

    SEMI_COLON      reduce using rule 106 (nularexp -> NULAR_FNC .)
    COMMA           reduce using rule 106 (nularexp -> NULAR_FNC .)
    $end            reduce using rule 106 (nularexp -> NULAR_FNC .)
    BINARY_FNC      reduce using rule 106 (nularexp -> NULAR_FNC .)
    GETVARIABLE     reduce using rule 106 (nularexp -> NULAR_FNC .)
    SETVARIABLE     reduce using rule 106 (nularexp -> NULAR_FNC .)
    PARAM           reduce using rule 106 (nularexp -> NULAR_FNC .)
    LT              reduce using rule 106 (nularexp -> NULAR_FNC .)
    GT              reduce using rule 106 (nularexp -> NULAR_FNC .)
    LTE             reduce using rule 106 (nularexp -> NULAR_FNC .)
    GTE             reduce using rule 106 (nularexp -> NULAR_FNC .)
    EQUALITY        reduce using rule 106 (nularexp -> NULAR_FNC .)
    INEQUALITY      reduce using rule 106 (nularexp -> NULAR_FNC .)
    AND             reduce using rule 106 (nularexp -> NULAR_FNC .)
    OR              reduce using rule 106 (nularexp -> NULAR_FNC .)
    PLUS            reduce using rule 106 (nularexp -> NULAR_FNC .)
    MINUS           reduce using rule 106 (nularexp -> NULAR_FNC .)
    TIMES           reduce using rule 106 (nularexp -> NULAR_FNC .)
    DIVIDE          reduce using rule 106 (nularexp -> NULAR_FNC .)
    MOD             reduce using rule 106 (nularexp -> NULAR_FNC .)
    POW             reduce using rule 106 (nularexp -> NULAR_FNC .)
    RBRACE          reduce using rule 106 (nularexp -> NULAR_FNC .)
    RSPAREN         reduce using rule 106 (nularexp -> NULAR_FNC .)
    RPAREN          reduce using rule 106 (nularexp -> NULAR_FNC .)
    TO              reduce using rule 106 (nularexp -> NULAR_FNC .)
    STEP            reduce using rule 106 (nularexp -> NULAR_FNC .)
    DO              reduce using rule 106 (nularexp -> NULAR_FNC .)
    COLON           reduce using rule 106 (nularexp -> NULAR_FNC .)


state 25

    (107) nularexp -> identifier .
    (87) primaryexp -> identifier .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAM resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 87 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 107 (nularexp -> identifier .)
    COMMA           reduce using rule 107 (nularexp -> identifier .)
    $end            reduce using rule 107 (nularexp -> identifier .)
    RBRACE          reduce using rule 107 (nularexp -> identifier .)
    BINARY_FNC      reduce using rule 87 (primaryexp -> identifier .)
    GETVARIABLE     reduce using rule 87 (primaryexp -> identifier .)
    SETVARIABLE     reduce using rule 87 (primaryexp -> identifier .)
    PARAM           reduce using rule 87 (primaryexp -> identifier .)
    LT              reduce using rule 87 (primaryexp -> identifier .)
    GT              reduce using rule 87 (primaryexp -> identifier .)
    LTE             reduce using rule 87 (primaryexp -> identifier .)
    GTE             reduce using rule 87 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 87 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 87 (primaryexp -> identifier .)
    AND             reduce using rule 87 (primaryexp -> identifier .)
    OR              reduce using rule 87 (primaryexp -> identifier .)
    PLUS            reduce using rule 87 (primaryexp -> identifier .)
    MINUS           reduce using rule 87 (primaryexp -> identifier .)
    TIMES           reduce using rule 87 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 87 (primaryexp -> identifier .)
    MOD             reduce using rule 87 (primaryexp -> identifier .)
    POW             reduce using rule 87 (primaryexp -> identifier .)

  ! BINARY_FNC      [ reduce using rule 107 (nularexp -> identifier .) ]
  ! GETVARIABLE     [ reduce using rule 107 (nularexp -> identifier .) ]
  ! SETVARIABLE     [ reduce using rule 107 (nularexp -> identifier .) ]
  ! PARAM           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! LT              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! GT              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! LTE             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! GTE             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! EQUALITY        [ reduce using rule 107 (nularexp -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 107 (nularexp -> identifier .) ]
  ! AND             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! OR              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! PLUS            [ reduce using rule 107 (nularexp -> identifier .) ]
  ! MINUS           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! TIMES           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! DIVIDE          [ reduce using rule 107 (nularexp -> identifier .) ]
  ! MOD             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! POW             [ reduce using rule 107 (nularexp -> identifier .) ]


state 26

    (108) unaryexp -> UNARY_FNC . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 87
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 27

    (109) unaryexp -> PLUS . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 100
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 28

    (110) unaryexp -> MINUS . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 101
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 29

    (111) unaryexp -> NOT . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 102
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 30

    (112) unaryexp -> vardefinition .

    SEMI_COLON      reduce using rule 112 (unaryexp -> vardefinition .)
    COMMA           reduce using rule 112 (unaryexp -> vardefinition .)
    $end            reduce using rule 112 (unaryexp -> vardefinition .)
    BINARY_FNC      reduce using rule 112 (unaryexp -> vardefinition .)
    GETVARIABLE     reduce using rule 112 (unaryexp -> vardefinition .)
    SETVARIABLE     reduce using rule 112 (unaryexp -> vardefinition .)
    PARAM           reduce using rule 112 (unaryexp -> vardefinition .)
    LT              reduce using rule 112 (unaryexp -> vardefinition .)
    GT              reduce using rule 112 (unaryexp -> vardefinition .)
    LTE             reduce using rule 112 (unaryexp -> vardefinition .)
    GTE             reduce using rule 112 (unaryexp -> vardefinition .)
    EQUALITY        reduce using rule 112 (unaryexp -> vardefinition .)
    INEQUALITY      reduce using rule 112 (unaryexp -> vardefinition .)
    AND             reduce using rule 112 (unaryexp -> vardefinition .)
    OR              reduce using rule 112 (unaryexp -> vardefinition .)
    PLUS            reduce using rule 112 (unaryexp -> vardefinition .)
    MINUS           reduce using rule 112 (unaryexp -> vardefinition .)
    TIMES           reduce using rule 112 (unaryexp -> vardefinition .)
    DIVIDE          reduce using rule 112 (unaryexp -> vardefinition .)
    MOD             reduce using rule 112 (unaryexp -> vardefinition .)
    POW             reduce using rule 112 (unaryexp -> vardefinition .)
    RBRACE          reduce using rule 112 (unaryexp -> vardefinition .)
    RSPAREN         reduce using rule 112 (unaryexp -> vardefinition .)
    RPAREN          reduce using rule 112 (unaryexp -> vardefinition .)
    TO              reduce using rule 112 (unaryexp -> vardefinition .)
    STEP            reduce using rule 112 (unaryexp -> vardefinition .)
    DO              reduce using rule 112 (unaryexp -> vardefinition .)
    COLON           reduce using rule 112 (unaryexp -> vardefinition .)


state 31

    (113) unaryexp -> param_unaray .

    SEMI_COLON      reduce using rule 113 (unaryexp -> param_unaray .)
    COMMA           reduce using rule 113 (unaryexp -> param_unaray .)
    $end            reduce using rule 113 (unaryexp -> param_unaray .)
    BINARY_FNC      reduce using rule 113 (unaryexp -> param_unaray .)
    GETVARIABLE     reduce using rule 113 (unaryexp -> param_unaray .)
    SETVARIABLE     reduce using rule 113 (unaryexp -> param_unaray .)
    PARAM           reduce using rule 113 (unaryexp -> param_unaray .)
    LT              reduce using rule 113 (unaryexp -> param_unaray .)
    GT              reduce using rule 113 (unaryexp -> param_unaray .)
    LTE             reduce using rule 113 (unaryexp -> param_unaray .)
    GTE             reduce using rule 113 (unaryexp -> param_unaray .)
    EQUALITY        reduce using rule 113 (unaryexp -> param_unaray .)
    INEQUALITY      reduce using rule 113 (unaryexp -> param_unaray .)
    AND             reduce using rule 113 (unaryexp -> param_unaray .)
    OR              reduce using rule 113 (unaryexp -> param_unaray .)
    PLUS            reduce using rule 113 (unaryexp -> param_unaray .)
    MINUS           reduce using rule 113 (unaryexp -> param_unaray .)
    TIMES           reduce using rule 113 (unaryexp -> param_unaray .)
    DIVIDE          reduce using rule 113 (unaryexp -> param_unaray .)
    MOD             reduce using rule 113 (unaryexp -> param_unaray .)
    POW             reduce using rule 113 (unaryexp -> param_unaray .)
    RBRACE          reduce using rule 113 (unaryexp -> param_unaray .)
    RSPAREN         reduce using rule 113 (unaryexp -> param_unaray .)
    RPAREN          reduce using rule 113 (unaryexp -> param_unaray .)
    TO              reduce using rule 113 (unaryexp -> param_unaray .)
    STEP            reduce using rule 113 (unaryexp -> param_unaray .)
    DO              reduce using rule 113 (unaryexp -> param_unaray .)
    COLON           reduce using rule 113 (unaryexp -> param_unaray .)


state 32

    (29) ifstatement -> iftype . THEN bracedexp
    (30) ifstatement -> iftype . EXITWITH bracedexp
    (31) ifstatement -> iftype . THEN bracedexp ELSE bracedexp
    (17) helpertype -> iftype .

    THEN            shift and go to state 103
    EXITWITH        shift and go to state 104
    BINARY_FNC      reduce using rule 17 (helpertype -> iftype .)
    GETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    SETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    PARAM           reduce using rule 17 (helpertype -> iftype .)
    LT              reduce using rule 17 (helpertype -> iftype .)
    GT              reduce using rule 17 (helpertype -> iftype .)
    LTE             reduce using rule 17 (helpertype -> iftype .)
    GTE             reduce using rule 17 (helpertype -> iftype .)
    EQUALITY        reduce using rule 17 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 17 (helpertype -> iftype .)
    AND             reduce using rule 17 (helpertype -> iftype .)
    OR              reduce using rule 17 (helpertype -> iftype .)
    PLUS            reduce using rule 17 (helpertype -> iftype .)
    MINUS           reduce using rule 17 (helpertype -> iftype .)
    TIMES           reduce using rule 17 (helpertype -> iftype .)
    DIVIDE          reduce using rule 17 (helpertype -> iftype .)
    MOD             reduce using rule 17 (helpertype -> iftype .)
    POW             reduce using rule 17 (helpertype -> iftype .)


state 33

    (37) foreachloop -> bracedexp . FOREACH array
    (38) foreachloop -> bracedexp . FOREACH primaryexp
    (94) primaryexp -> bracedexp .

    FOREACH         shift and go to state 105
    BINARY_FNC      reduce using rule 94 (primaryexp -> bracedexp .)
    GETVARIABLE     reduce using rule 94 (primaryexp -> bracedexp .)
    SETVARIABLE     reduce using rule 94 (primaryexp -> bracedexp .)
    PARAM           reduce using rule 94 (primaryexp -> bracedexp .)
    LT              reduce using rule 94 (primaryexp -> bracedexp .)
    GT              reduce using rule 94 (primaryexp -> bracedexp .)
    LTE             reduce using rule 94 (primaryexp -> bracedexp .)
    GTE             reduce using rule 94 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 94 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 94 (primaryexp -> bracedexp .)
    AND             reduce using rule 94 (primaryexp -> bracedexp .)
    OR              reduce using rule 94 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 94 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 94 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 94 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 94 (primaryexp -> bracedexp .)
    MOD             reduce using rule 94 (primaryexp -> bracedexp .)
    POW             reduce using rule 94 (primaryexp -> bracedexp .)


state 34

    (36) whileloop -> whiletype . DO bracedexp
    (18) helpertype -> whiletype .

    DO              shift and go to state 106
    BINARY_FNC      reduce using rule 18 (helpertype -> whiletype .)
    GETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    SETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    PARAM           reduce using rule 18 (helpertype -> whiletype .)
    LT              reduce using rule 18 (helpertype -> whiletype .)
    GT              reduce using rule 18 (helpertype -> whiletype .)
    LTE             reduce using rule 18 (helpertype -> whiletype .)
    GTE             reduce using rule 18 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 18 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 18 (helpertype -> whiletype .)
    AND             reduce using rule 18 (helpertype -> whiletype .)
    OR              reduce using rule 18 (helpertype -> whiletype .)
    PLUS            reduce using rule 18 (helpertype -> whiletype .)
    MINUS           reduce using rule 18 (helpertype -> whiletype .)
    TIMES           reduce using rule 18 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 18 (helpertype -> whiletype .)
    MOD             reduce using rule 18 (helpertype -> whiletype .)
    POW             reduce using rule 18 (helpertype -> whiletype .)


state 35

    (42) forloop -> fortype . DO bracedexp_noscope
    (19) helpertype -> fortype .

    DO              shift and go to state 107
    BINARY_FNC      reduce using rule 19 (helpertype -> fortype .)
    GETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    SETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    PARAM           reduce using rule 19 (helpertype -> fortype .)
    LT              reduce using rule 19 (helpertype -> fortype .)
    GT              reduce using rule 19 (helpertype -> fortype .)
    LTE             reduce using rule 19 (helpertype -> fortype .)
    GTE             reduce using rule 19 (helpertype -> fortype .)
    EQUALITY        reduce using rule 19 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 19 (helpertype -> fortype .)
    AND             reduce using rule 19 (helpertype -> fortype .)
    OR              reduce using rule 19 (helpertype -> fortype .)
    PLUS            reduce using rule 19 (helpertype -> fortype .)
    MINUS           reduce using rule 19 (helpertype -> fortype .)
    TIMES           reduce using rule 19 (helpertype -> fortype .)
    DIVIDE          reduce using rule 19 (helpertype -> fortype .)
    MOD             reduce using rule 19 (helpertype -> fortype .)
    POW             reduce using rule 19 (helpertype -> fortype .)


state 36

    (34) withstatement -> withstatementinit . bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 108

state 37

    (89) primaryexp -> array .

    BINARY_FNC      reduce using rule 89 (primaryexp -> array .)
    GETVARIABLE     reduce using rule 89 (primaryexp -> array .)
    SETVARIABLE     reduce using rule 89 (primaryexp -> array .)
    PARAM           reduce using rule 89 (primaryexp -> array .)
    LT              reduce using rule 89 (primaryexp -> array .)
    GT              reduce using rule 89 (primaryexp -> array .)
    LTE             reduce using rule 89 (primaryexp -> array .)
    GTE             reduce using rule 89 (primaryexp -> array .)
    EQUALITY        reduce using rule 89 (primaryexp -> array .)
    INEQUALITY      reduce using rule 89 (primaryexp -> array .)
    AND             reduce using rule 89 (primaryexp -> array .)
    OR              reduce using rule 89 (primaryexp -> array .)
    PLUS            reduce using rule 89 (primaryexp -> array .)
    MINUS           reduce using rule 89 (primaryexp -> array .)
    TIMES           reduce using rule 89 (primaryexp -> array .)
    DIVIDE          reduce using rule 89 (primaryexp -> array .)
    MOD             reduce using rule 89 (primaryexp -> array .)
    POW             reduce using rule 89 (primaryexp -> array .)
    SEMI_COLON      reduce using rule 89 (primaryexp -> array .)
    COMMA           reduce using rule 89 (primaryexp -> array .)
    $end            reduce using rule 89 (primaryexp -> array .)
    RBRACE          reduce using rule 89 (primaryexp -> array .)
    RSPAREN         reduce using rule 89 (primaryexp -> array .)
    RPAREN          reduce using rule 89 (primaryexp -> array .)
    TO              reduce using rule 89 (primaryexp -> array .)
    STEP            reduce using rule 89 (primaryexp -> array .)
    DO              reduce using rule 89 (primaryexp -> array .)
    COLON           reduce using rule 89 (primaryexp -> array .)


state 38

    (24) switchstatement -> SWITCH . LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE

    LPAREN          shift and go to state 109


state 39

    (95) primaryexp -> LPAREN . binaryexp RPAREN
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NAMESPACE       shift and go to state 47
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    PRIVATE         shift and go to state 41

    binaryexp                      shift and go to state 110
    primaryexp                     shift and go to state 17
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 40

    (96) bracedexp -> LBRACE . new_scope code RBRACE
    (97) new_scope -> .

    NULAR_FNC       reduce using rule 97 (new_scope -> .)
    UNARY_FNC       reduce using rule 97 (new_scope -> .)
    PLUS            reduce using rule 97 (new_scope -> .)
    MINUS           reduce using rule 97 (new_scope -> .)
    NOT             reduce using rule 97 (new_scope -> .)
    SWITCH          reduce using rule 97 (new_scope -> .)
    PRIVATE         reduce using rule 97 (new_scope -> .)
    PRIVATE_ID      reduce using rule 97 (new_scope -> .)
    GLOBAL_ID       reduce using rule 97 (new_scope -> .)
    LPAREN          reduce using rule 97 (new_scope -> .)
    NAMESPACE       reduce using rule 97 (new_scope -> .)
    PARAM           reduce using rule 97 (new_scope -> .)
    IF              reduce using rule 97 (new_scope -> .)
    WHILE           reduce using rule 97 (new_scope -> .)
    FOR             reduce using rule 97 (new_scope -> .)
    LBRACE          reduce using rule 97 (new_scope -> .)
    NUMBER_REAL     reduce using rule 97 (new_scope -> .)
    NUMBER_EXP      reduce using rule 97 (new_scope -> .)
    NUMBER_HEX      reduce using rule 97 (new_scope -> .)
    LSPAREN         reduce using rule 97 (new_scope -> .)
    STRING_SINGLE   reduce using rule 97 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 97 (new_scope -> .)
    WITH            reduce using rule 97 (new_scope -> .)
    RBRACE          reduce using rule 97 (new_scope -> .)

    new_scope                      shift and go to state 111

state 41

    (72) definition -> PRIVATE . PRIVATE_ID
    (73) definition -> PRIVATE . string
    (71) arraydefinition -> PRIVATE . stringarray
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (102) stringarray -> . LSPAREN RSPAREN
    (103) stringarray -> . LSPAREN stringarrayelement RSPAREN

    PRIVATE_ID      shift and go to state 112
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LSPAREN         shift and go to state 115

    string                         shift and go to state 113
    stringarray                    shift and go to state 114

state 42

    (76) variable -> PRIVATE_ID .
    (74) identifier -> PRIVATE_ID .

    EQUAL           reduce using rule 76 (variable -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 74 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 74 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 74 (identifier -> PRIVATE_ID .)
    BINARY_FNC      reduce using rule 74 (identifier -> PRIVATE_ID .)
    GETVARIABLE     reduce using rule 74 (identifier -> PRIVATE_ID .)
    SETVARIABLE     reduce using rule 74 (identifier -> PRIVATE_ID .)
    PARAM           reduce using rule 74 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 74 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 74 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 74 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 74 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 74 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 74 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 74 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 74 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 74 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 74 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 74 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 74 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 74 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 74 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 74 (identifier -> PRIVATE_ID .)


state 43

    (92) primaryexp -> string .

    BINARY_FNC      reduce using rule 92 (primaryexp -> string .)
    GETVARIABLE     reduce using rule 92 (primaryexp -> string .)
    SETVARIABLE     reduce using rule 92 (primaryexp -> string .)
    PARAM           reduce using rule 92 (primaryexp -> string .)
    LT              reduce using rule 92 (primaryexp -> string .)
    GT              reduce using rule 92 (primaryexp -> string .)
    LTE             reduce using rule 92 (primaryexp -> string .)
    GTE             reduce using rule 92 (primaryexp -> string .)
    EQUALITY        reduce using rule 92 (primaryexp -> string .)
    INEQUALITY      reduce using rule 92 (primaryexp -> string .)
    AND             reduce using rule 92 (primaryexp -> string .)
    OR              reduce using rule 92 (primaryexp -> string .)
    PLUS            reduce using rule 92 (primaryexp -> string .)
    MINUS           reduce using rule 92 (primaryexp -> string .)
    TIMES           reduce using rule 92 (primaryexp -> string .)
    DIVIDE          reduce using rule 92 (primaryexp -> string .)
    MOD             reduce using rule 92 (primaryexp -> string .)
    POW             reduce using rule 92 (primaryexp -> string .)
    SEMI_COLON      reduce using rule 92 (primaryexp -> string .)
    COMMA           reduce using rule 92 (primaryexp -> string .)
    $end            reduce using rule 92 (primaryexp -> string .)
    RBRACE          reduce using rule 92 (primaryexp -> string .)
    RSPAREN         reduce using rule 92 (primaryexp -> string .)
    RPAREN          reduce using rule 92 (primaryexp -> string .)
    TO              reduce using rule 92 (primaryexp -> string .)
    STEP            reduce using rule 92 (primaryexp -> string .)
    DO              reduce using rule 92 (primaryexp -> string .)
    COLON           reduce using rule 92 (primaryexp -> string .)


state 44

    (77) variable -> GLOBAL_ID .
    (75) identifier -> GLOBAL_ID .

    EQUAL           reduce using rule 77 (variable -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 75 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 75 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 75 (identifier -> GLOBAL_ID .)
    BINARY_FNC      reduce using rule 75 (identifier -> GLOBAL_ID .)
    GETVARIABLE     reduce using rule 75 (identifier -> GLOBAL_ID .)
    SETVARIABLE     reduce using rule 75 (identifier -> GLOBAL_ID .)
    PARAM           reduce using rule 75 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 75 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 75 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 75 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 75 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 75 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 75 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 75 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 75 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 75 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 75 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 75 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 75 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 75 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 75 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 75 (identifier -> GLOBAL_ID .)


state 45

    (86) primaryexp -> number .

    BINARY_FNC      reduce using rule 86 (primaryexp -> number .)
    GETVARIABLE     reduce using rule 86 (primaryexp -> number .)
    SETVARIABLE     reduce using rule 86 (primaryexp -> number .)
    PARAM           reduce using rule 86 (primaryexp -> number .)
    LT              reduce using rule 86 (primaryexp -> number .)
    GT              reduce using rule 86 (primaryexp -> number .)
    LTE             reduce using rule 86 (primaryexp -> number .)
    GTE             reduce using rule 86 (primaryexp -> number .)
    EQUALITY        reduce using rule 86 (primaryexp -> number .)
    INEQUALITY      reduce using rule 86 (primaryexp -> number .)
    AND             reduce using rule 86 (primaryexp -> number .)
    OR              reduce using rule 86 (primaryexp -> number .)
    PLUS            reduce using rule 86 (primaryexp -> number .)
    MINUS           reduce using rule 86 (primaryexp -> number .)
    TIMES           reduce using rule 86 (primaryexp -> number .)
    DIVIDE          reduce using rule 86 (primaryexp -> number .)
    MOD             reduce using rule 86 (primaryexp -> number .)
    POW             reduce using rule 86 (primaryexp -> number .)
    SEMI_COLON      reduce using rule 86 (primaryexp -> number .)
    COMMA           reduce using rule 86 (primaryexp -> number .)
    $end            reduce using rule 86 (primaryexp -> number .)
    RBRACE          reduce using rule 86 (primaryexp -> number .)
    RSPAREN         reduce using rule 86 (primaryexp -> number .)
    RPAREN          reduce using rule 86 (primaryexp -> number .)
    TO              reduce using rule 86 (primaryexp -> number .)
    STEP            reduce using rule 86 (primaryexp -> number .)
    DO              reduce using rule 86 (primaryexp -> number .)
    COLON           reduce using rule 86 (primaryexp -> number .)


state 46

    (88) primaryexp -> helpertype .

    BINARY_FNC      reduce using rule 88 (primaryexp -> helpertype .)
    GETVARIABLE     reduce using rule 88 (primaryexp -> helpertype .)
    SETVARIABLE     reduce using rule 88 (primaryexp -> helpertype .)
    PARAM           reduce using rule 88 (primaryexp -> helpertype .)
    LT              reduce using rule 88 (primaryexp -> helpertype .)
    GT              reduce using rule 88 (primaryexp -> helpertype .)
    LTE             reduce using rule 88 (primaryexp -> helpertype .)
    GTE             reduce using rule 88 (primaryexp -> helpertype .)
    EQUALITY        reduce using rule 88 (primaryexp -> helpertype .)
    INEQUALITY      reduce using rule 88 (primaryexp -> helpertype .)
    AND             reduce using rule 88 (primaryexp -> helpertype .)
    OR              reduce using rule 88 (primaryexp -> helpertype .)
    PLUS            reduce using rule 88 (primaryexp -> helpertype .)
    MINUS           reduce using rule 88 (primaryexp -> helpertype .)
    TIMES           reduce using rule 88 (primaryexp -> helpertype .)
    DIVIDE          reduce using rule 88 (primaryexp -> helpertype .)
    MOD             reduce using rule 88 (primaryexp -> helpertype .)
    POW             reduce using rule 88 (primaryexp -> helpertype .)
    SEMI_COLON      reduce using rule 88 (primaryexp -> helpertype .)
    COMMA           reduce using rule 88 (primaryexp -> helpertype .)
    $end            reduce using rule 88 (primaryexp -> helpertype .)
    RBRACE          reduce using rule 88 (primaryexp -> helpertype .)
    RSPAREN         reduce using rule 88 (primaryexp -> helpertype .)
    RPAREN          reduce using rule 88 (primaryexp -> helpertype .)
    TO              reduce using rule 88 (primaryexp -> helpertype .)
    STEP            reduce using rule 88 (primaryexp -> helpertype .)
    DO              reduce using rule 88 (primaryexp -> helpertype .)
    COLON           reduce using rule 88 (primaryexp -> helpertype .)


state 47

    (46) getvariable_ns -> NAMESPACE . GETVARIABLE string
    (47) getvariable_ns -> NAMESPACE . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> NAMESPACE . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> NAMESPACE . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    GETVARIABLE     shift and go to state 116
    SETVARIABLE     shift and go to state 117


state 48

    (98) array -> LSPAREN . RSPAREN
    (99) array -> LSPAREN . arrayelement RSPAREN
    (100) arrayelement -> . primaryexp
    (101) arrayelement -> . primaryexp COMMA arrayelement
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    RSPAREN         shift and go to state 118
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    arrayelement                   shift and go to state 119
    primaryexp                     shift and go to state 120
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 49

    (54) param_unaray -> PARAM . LSPAREN number RSPAREN
    (55) param_unaray -> PARAM . LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> PARAM . LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN

    LSPAREN         shift and go to state 121


state 50

    (65) vardefinition -> arraydefinition .

    SEMI_COLON      reduce using rule 65 (vardefinition -> arraydefinition .)
    COMMA           reduce using rule 65 (vardefinition -> arraydefinition .)
    $end            reduce using rule 65 (vardefinition -> arraydefinition .)
    BINARY_FNC      reduce using rule 65 (vardefinition -> arraydefinition .)
    GETVARIABLE     reduce using rule 65 (vardefinition -> arraydefinition .)
    SETVARIABLE     reduce using rule 65 (vardefinition -> arraydefinition .)
    PARAM           reduce using rule 65 (vardefinition -> arraydefinition .)
    LT              reduce using rule 65 (vardefinition -> arraydefinition .)
    GT              reduce using rule 65 (vardefinition -> arraydefinition .)
    LTE             reduce using rule 65 (vardefinition -> arraydefinition .)
    GTE             reduce using rule 65 (vardefinition -> arraydefinition .)
    EQUALITY        reduce using rule 65 (vardefinition -> arraydefinition .)
    INEQUALITY      reduce using rule 65 (vardefinition -> arraydefinition .)
    AND             reduce using rule 65 (vardefinition -> arraydefinition .)
    OR              reduce using rule 65 (vardefinition -> arraydefinition .)
    PLUS            reduce using rule 65 (vardefinition -> arraydefinition .)
    MINUS           reduce using rule 65 (vardefinition -> arraydefinition .)
    TIMES           reduce using rule 65 (vardefinition -> arraydefinition .)
    DIVIDE          reduce using rule 65 (vardefinition -> arraydefinition .)
    MOD             reduce using rule 65 (vardefinition -> arraydefinition .)
    POW             reduce using rule 65 (vardefinition -> arraydefinition .)
    RBRACE          reduce using rule 65 (vardefinition -> arraydefinition .)
    RSPAREN         reduce using rule 65 (vardefinition -> arraydefinition .)
    RPAREN          reduce using rule 65 (vardefinition -> arraydefinition .)
    TO              reduce using rule 65 (vardefinition -> arraydefinition .)
    STEP            reduce using rule 65 (vardefinition -> arraydefinition .)
    DO              reduce using rule 65 (vardefinition -> arraydefinition .)
    COLON           reduce using rule 65 (vardefinition -> arraydefinition .)


state 51

    (28) iftype -> IF . forloop_condition
    (43) forloop_condition -> . LBRACE booleanexp RBRACE
    (44) forloop_condition -> . identifier
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 123
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94

    forloop_condition              shift and go to state 122
    identifier                     shift and go to state 124

state 52

    (35) whiletype -> WHILE . forloop_condition
    (43) forloop_condition -> . LBRACE booleanexp RBRACE
    (44) forloop_condition -> . identifier
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 123
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94

    forloop_condition              shift and go to state 125
    identifier                     shift and go to state 124

state 53

    (39) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> FOR . new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (97) new_scope -> .

    LSPAREN         reduce using rule 97 (new_scope -> .)
    STRING_SINGLE   reduce using rule 97 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 97 (new_scope -> .)

    new_scope                      shift and go to state 126

state 54

    (33) withstatementinit -> withtype . DO
    (20) helpertype -> withtype .

    DO              shift and go to state 127
    BINARY_FNC      reduce using rule 20 (helpertype -> withtype .)
    GETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    SETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    PARAM           reduce using rule 20 (helpertype -> withtype .)
    LT              reduce using rule 20 (helpertype -> withtype .)
    GT              reduce using rule 20 (helpertype -> withtype .)
    LTE             reduce using rule 20 (helpertype -> withtype .)
    GTE             reduce using rule 20 (helpertype -> withtype .)
    EQUALITY        reduce using rule 20 (helpertype -> withtype .)
    INEQUALITY      reduce using rule 20 (helpertype -> withtype .)
    AND             reduce using rule 20 (helpertype -> withtype .)
    OR              reduce using rule 20 (helpertype -> withtype .)
    PLUS            reduce using rule 20 (helpertype -> withtype .)
    MINUS           reduce using rule 20 (helpertype -> withtype .)
    TIMES           reduce using rule 20 (helpertype -> withtype .)
    DIVIDE          reduce using rule 20 (helpertype -> withtype .)
    MOD             reduce using rule 20 (helpertype -> withtype .)
    POW             reduce using rule 20 (helpertype -> withtype .)


state 55

    (133) number -> NUMBER_REAL .

    BINARY_FNC      reduce using rule 133 (number -> NUMBER_REAL .)
    GETVARIABLE     reduce using rule 133 (number -> NUMBER_REAL .)
    SETVARIABLE     reduce using rule 133 (number -> NUMBER_REAL .)
    PARAM           reduce using rule 133 (number -> NUMBER_REAL .)
    LT              reduce using rule 133 (number -> NUMBER_REAL .)
    GT              reduce using rule 133 (number -> NUMBER_REAL .)
    LTE             reduce using rule 133 (number -> NUMBER_REAL .)
    GTE             reduce using rule 133 (number -> NUMBER_REAL .)
    EQUALITY        reduce using rule 133 (number -> NUMBER_REAL .)
    INEQUALITY      reduce using rule 133 (number -> NUMBER_REAL .)
    AND             reduce using rule 133 (number -> NUMBER_REAL .)
    OR              reduce using rule 133 (number -> NUMBER_REAL .)
    PLUS            reduce using rule 133 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 133 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 133 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 133 (number -> NUMBER_REAL .)
    MOD             reduce using rule 133 (number -> NUMBER_REAL .)
    POW             reduce using rule 133 (number -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 133 (number -> NUMBER_REAL .)
    COMMA           reduce using rule 133 (number -> NUMBER_REAL .)
    $end            reduce using rule 133 (number -> NUMBER_REAL .)
    RBRACE          reduce using rule 133 (number -> NUMBER_REAL .)
    RSPAREN         reduce using rule 133 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 133 (number -> NUMBER_REAL .)
    TO              reduce using rule 133 (number -> NUMBER_REAL .)
    STEP            reduce using rule 133 (number -> NUMBER_REAL .)
    DO              reduce using rule 133 (number -> NUMBER_REAL .)
    COLON           reduce using rule 133 (number -> NUMBER_REAL .)


state 56

    (134) number -> NUMBER_EXP .

    BINARY_FNC      reduce using rule 134 (number -> NUMBER_EXP .)
    GETVARIABLE     reduce using rule 134 (number -> NUMBER_EXP .)
    SETVARIABLE     reduce using rule 134 (number -> NUMBER_EXP .)
    PARAM           reduce using rule 134 (number -> NUMBER_EXP .)
    LT              reduce using rule 134 (number -> NUMBER_EXP .)
    GT              reduce using rule 134 (number -> NUMBER_EXP .)
    LTE             reduce using rule 134 (number -> NUMBER_EXP .)
    GTE             reduce using rule 134 (number -> NUMBER_EXP .)
    EQUALITY        reduce using rule 134 (number -> NUMBER_EXP .)
    INEQUALITY      reduce using rule 134 (number -> NUMBER_EXP .)
    AND             reduce using rule 134 (number -> NUMBER_EXP .)
    OR              reduce using rule 134 (number -> NUMBER_EXP .)
    PLUS            reduce using rule 134 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 134 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 134 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 134 (number -> NUMBER_EXP .)
    MOD             reduce using rule 134 (number -> NUMBER_EXP .)
    POW             reduce using rule 134 (number -> NUMBER_EXP .)
    SEMI_COLON      reduce using rule 134 (number -> NUMBER_EXP .)
    COMMA           reduce using rule 134 (number -> NUMBER_EXP .)
    $end            reduce using rule 134 (number -> NUMBER_EXP .)
    RBRACE          reduce using rule 134 (number -> NUMBER_EXP .)
    RSPAREN         reduce using rule 134 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 134 (number -> NUMBER_EXP .)
    TO              reduce using rule 134 (number -> NUMBER_EXP .)
    STEP            reduce using rule 134 (number -> NUMBER_EXP .)
    DO              reduce using rule 134 (number -> NUMBER_EXP .)
    COLON           reduce using rule 134 (number -> NUMBER_EXP .)


state 57

    (135) number -> NUMBER_HEX .

    BINARY_FNC      reduce using rule 135 (number -> NUMBER_HEX .)
    GETVARIABLE     reduce using rule 135 (number -> NUMBER_HEX .)
    SETVARIABLE     reduce using rule 135 (number -> NUMBER_HEX .)
    PARAM           reduce using rule 135 (number -> NUMBER_HEX .)
    LT              reduce using rule 135 (number -> NUMBER_HEX .)
    GT              reduce using rule 135 (number -> NUMBER_HEX .)
    LTE             reduce using rule 135 (number -> NUMBER_HEX .)
    GTE             reduce using rule 135 (number -> NUMBER_HEX .)
    EQUALITY        reduce using rule 135 (number -> NUMBER_HEX .)
    INEQUALITY      reduce using rule 135 (number -> NUMBER_HEX .)
    AND             reduce using rule 135 (number -> NUMBER_HEX .)
    OR              reduce using rule 135 (number -> NUMBER_HEX .)
    PLUS            reduce using rule 135 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 135 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 135 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 135 (number -> NUMBER_HEX .)
    MOD             reduce using rule 135 (number -> NUMBER_HEX .)
    POW             reduce using rule 135 (number -> NUMBER_HEX .)
    SEMI_COLON      reduce using rule 135 (number -> NUMBER_HEX .)
    COMMA           reduce using rule 135 (number -> NUMBER_HEX .)
    $end            reduce using rule 135 (number -> NUMBER_HEX .)
    RBRACE          reduce using rule 135 (number -> NUMBER_HEX .)
    RSPAREN         reduce using rule 135 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 135 (number -> NUMBER_HEX .)
    TO              reduce using rule 135 (number -> NUMBER_HEX .)
    STEP            reduce using rule 135 (number -> NUMBER_HEX .)
    DO              reduce using rule 135 (number -> NUMBER_HEX .)
    COLON           reduce using rule 135 (number -> NUMBER_HEX .)


state 58

    (136) string -> STRING_SINGLE .

    BINARY_FNC      reduce using rule 136 (string -> STRING_SINGLE .)
    GETVARIABLE     reduce using rule 136 (string -> STRING_SINGLE .)
    SETVARIABLE     reduce using rule 136 (string -> STRING_SINGLE .)
    PARAM           reduce using rule 136 (string -> STRING_SINGLE .)
    LT              reduce using rule 136 (string -> STRING_SINGLE .)
    GT              reduce using rule 136 (string -> STRING_SINGLE .)
    LTE             reduce using rule 136 (string -> STRING_SINGLE .)
    GTE             reduce using rule 136 (string -> STRING_SINGLE .)
    EQUALITY        reduce using rule 136 (string -> STRING_SINGLE .)
    INEQUALITY      reduce using rule 136 (string -> STRING_SINGLE .)
    AND             reduce using rule 136 (string -> STRING_SINGLE .)
    OR              reduce using rule 136 (string -> STRING_SINGLE .)
    PLUS            reduce using rule 136 (string -> STRING_SINGLE .)
    MINUS           reduce using rule 136 (string -> STRING_SINGLE .)
    TIMES           reduce using rule 136 (string -> STRING_SINGLE .)
    DIVIDE          reduce using rule 136 (string -> STRING_SINGLE .)
    MOD             reduce using rule 136 (string -> STRING_SINGLE .)
    POW             reduce using rule 136 (string -> STRING_SINGLE .)
    SEMI_COLON      reduce using rule 136 (string -> STRING_SINGLE .)
    COMMA           reduce using rule 136 (string -> STRING_SINGLE .)
    $end            reduce using rule 136 (string -> STRING_SINGLE .)
    RBRACE          reduce using rule 136 (string -> STRING_SINGLE .)
    RSPAREN         reduce using rule 136 (string -> STRING_SINGLE .)
    RPAREN          reduce using rule 136 (string -> STRING_SINGLE .)
    TO              reduce using rule 136 (string -> STRING_SINGLE .)
    STEP            reduce using rule 136 (string -> STRING_SINGLE .)
    DO              reduce using rule 136 (string -> STRING_SINGLE .)
    COLON           reduce using rule 136 (string -> STRING_SINGLE .)
    EQUAL           reduce using rule 136 (string -> STRING_SINGLE .)
    FROM            reduce using rule 136 (string -> STRING_SINGLE .)


state 59

    (137) string -> STRING_DOUBLE .

    BINARY_FNC      reduce using rule 137 (string -> STRING_DOUBLE .)
    GETVARIABLE     reduce using rule 137 (string -> STRING_DOUBLE .)
    SETVARIABLE     reduce using rule 137 (string -> STRING_DOUBLE .)
    PARAM           reduce using rule 137 (string -> STRING_DOUBLE .)
    LT              reduce using rule 137 (string -> STRING_DOUBLE .)
    GT              reduce using rule 137 (string -> STRING_DOUBLE .)
    LTE             reduce using rule 137 (string -> STRING_DOUBLE .)
    GTE             reduce using rule 137 (string -> STRING_DOUBLE .)
    EQUALITY        reduce using rule 137 (string -> STRING_DOUBLE .)
    INEQUALITY      reduce using rule 137 (string -> STRING_DOUBLE .)
    AND             reduce using rule 137 (string -> STRING_DOUBLE .)
    OR              reduce using rule 137 (string -> STRING_DOUBLE .)
    PLUS            reduce using rule 137 (string -> STRING_DOUBLE .)
    MINUS           reduce using rule 137 (string -> STRING_DOUBLE .)
    TIMES           reduce using rule 137 (string -> STRING_DOUBLE .)
    DIVIDE          reduce using rule 137 (string -> STRING_DOUBLE .)
    MOD             reduce using rule 137 (string -> STRING_DOUBLE .)
    POW             reduce using rule 137 (string -> STRING_DOUBLE .)
    SEMI_COLON      reduce using rule 137 (string -> STRING_DOUBLE .)
    COMMA           reduce using rule 137 (string -> STRING_DOUBLE .)
    $end            reduce using rule 137 (string -> STRING_DOUBLE .)
    RBRACE          reduce using rule 137 (string -> STRING_DOUBLE .)
    RSPAREN         reduce using rule 137 (string -> STRING_DOUBLE .)
    RPAREN          reduce using rule 137 (string -> STRING_DOUBLE .)
    TO              reduce using rule 137 (string -> STRING_DOUBLE .)
    STEP            reduce using rule 137 (string -> STRING_DOUBLE .)
    DO              reduce using rule 137 (string -> STRING_DOUBLE .)
    COLON           reduce using rule 137 (string -> STRING_DOUBLE .)
    EQUAL           reduce using rule 137 (string -> STRING_DOUBLE .)
    FROM            reduce using rule 137 (string -> STRING_DOUBLE .)


state 60

    (32) withtype -> WITH . NAMESPACE

    NAMESPACE       shift and go to state 128


state 61

    (3) code -> statement terminator . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (138) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (66) assignment -> . assignment_code code RBRACE
    (67) assignment -> . definition EQUAL primaryexp
    (68) assignment -> . variable EQUAL primaryexp
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (29) ifstatement -> . iftype THEN bracedexp
    (30) ifstatement -> . iftype EXITWITH bracedexp
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (36) whileloop -> . whiletype DO bracedexp
    (42) forloop -> . fortype DO bracedexp_noscope
    (34) withstatement -> . withstatementinit bracedexp
    (37) foreachloop -> . bracedexp FOREACH array
    (38) foreachloop -> . bracedexp FOREACH primaryexp
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (69) assignment_code -> . definition EQUAL LBRACE
    (70) assignment_code -> . variable EQUAL LBRACE
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (76) variable -> . PRIVATE_ID
    (77) variable -> . GLOBAL_ID
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withstatementinit -> . withtype DO
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (71) arraydefinition -> . PRIVATE stringarray
    (32) withtype -> . WITH NAMESPACE

    $end            reduce using rule 138 (empty -> .)
    RBRACE          reduce using rule 138 (empty -> .)
    NULAR_FNC       shift and go to state 24
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    SWITCH          shift and go to state 38
    PRIVATE         shift and go to state 41
    PRIVATE_ID      shift and go to state 42
    GLOBAL_ID       shift and go to state 44
    LPAREN          shift and go to state 39
    NAMESPACE       shift and go to state 47
    PARAM           shift and go to state 49
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    LBRACE          shift and go to state 40
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    WITH            shift and go to state 60

    statement                      shift and go to state 3
    code                           shift and go to state 129
    empty                          shift and go to state 2
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    identifier                     shift and go to state 25
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    iftype                         shift and go to state 32
    bracedexp                      shift and go to state 33
    whiletype                      shift and go to state 34
    fortype                        shift and go to state 35
    withstatementinit              shift and go to state 36
    array                          shift and go to state 37
    string                         shift and go to state 43
    number                         shift and go to state 45
    helpertype                     shift and go to state 46
    arraydefinition                shift and go to state 50
    withtype                       shift and go to state 54

state 62

    (9) terminator -> SEMI_COLON .

    NULAR_FNC       reduce using rule 9 (terminator -> SEMI_COLON .)
    UNARY_FNC       reduce using rule 9 (terminator -> SEMI_COLON .)
    PLUS            reduce using rule 9 (terminator -> SEMI_COLON .)
    MINUS           reduce using rule 9 (terminator -> SEMI_COLON .)
    NOT             reduce using rule 9 (terminator -> SEMI_COLON .)
    SWITCH          reduce using rule 9 (terminator -> SEMI_COLON .)
    PRIVATE         reduce using rule 9 (terminator -> SEMI_COLON .)
    PRIVATE_ID      reduce using rule 9 (terminator -> SEMI_COLON .)
    GLOBAL_ID       reduce using rule 9 (terminator -> SEMI_COLON .)
    LPAREN          reduce using rule 9 (terminator -> SEMI_COLON .)
    NAMESPACE       reduce using rule 9 (terminator -> SEMI_COLON .)
    PARAM           reduce using rule 9 (terminator -> SEMI_COLON .)
    IF              reduce using rule 9 (terminator -> SEMI_COLON .)
    WHILE           reduce using rule 9 (terminator -> SEMI_COLON .)
    FOR             reduce using rule 9 (terminator -> SEMI_COLON .)
    LBRACE          reduce using rule 9 (terminator -> SEMI_COLON .)
    NUMBER_REAL     reduce using rule 9 (terminator -> SEMI_COLON .)
    NUMBER_EXP      reduce using rule 9 (terminator -> SEMI_COLON .)
    NUMBER_HEX      reduce using rule 9 (terminator -> SEMI_COLON .)
    LSPAREN         reduce using rule 9 (terminator -> SEMI_COLON .)
    STRING_SINGLE   reduce using rule 9 (terminator -> SEMI_COLON .)
    STRING_DOUBLE   reduce using rule 9 (terminator -> SEMI_COLON .)
    WITH            reduce using rule 9 (terminator -> SEMI_COLON .)
    $end            reduce using rule 9 (terminator -> SEMI_COLON .)
    RBRACE          reduce using rule 9 (terminator -> SEMI_COLON .)
    CASE            reduce using rule 9 (terminator -> SEMI_COLON .)
    DEFAULT         reduce using rule 9 (terminator -> SEMI_COLON .)


state 63

    (10) terminator -> COMMA .

    NULAR_FNC       reduce using rule 10 (terminator -> COMMA .)
    UNARY_FNC       reduce using rule 10 (terminator -> COMMA .)
    PLUS            reduce using rule 10 (terminator -> COMMA .)
    MINUS           reduce using rule 10 (terminator -> COMMA .)
    NOT             reduce using rule 10 (terminator -> COMMA .)
    SWITCH          reduce using rule 10 (terminator -> COMMA .)
    PRIVATE         reduce using rule 10 (terminator -> COMMA .)
    PRIVATE_ID      reduce using rule 10 (terminator -> COMMA .)
    GLOBAL_ID       reduce using rule 10 (terminator -> COMMA .)
    LPAREN          reduce using rule 10 (terminator -> COMMA .)
    NAMESPACE       reduce using rule 10 (terminator -> COMMA .)
    PARAM           reduce using rule 10 (terminator -> COMMA .)
    IF              reduce using rule 10 (terminator -> COMMA .)
    WHILE           reduce using rule 10 (terminator -> COMMA .)
    FOR             reduce using rule 10 (terminator -> COMMA .)
    LBRACE          reduce using rule 10 (terminator -> COMMA .)
    NUMBER_REAL     reduce using rule 10 (terminator -> COMMA .)
    NUMBER_EXP      reduce using rule 10 (terminator -> COMMA .)
    NUMBER_HEX      reduce using rule 10 (terminator -> COMMA .)
    LSPAREN         reduce using rule 10 (terminator -> COMMA .)
    STRING_SINGLE   reduce using rule 10 (terminator -> COMMA .)
    STRING_DOUBLE   reduce using rule 10 (terminator -> COMMA .)
    WITH            reduce using rule 10 (terminator -> COMMA .)
    $end            reduce using rule 10 (terminator -> COMMA .)
    RBRACE          reduce using rule 10 (terminator -> COMMA .)
    CASE            reduce using rule 10 (terminator -> COMMA .)
    DEFAULT         reduce using rule 10 (terminator -> COMMA .)


state 64

    (66) assignment -> assignment_code code . RBRACE

    RBRACE          shift and go to state 130


state 65

    (67) assignment -> definition EQUAL . primaryexp
    (69) assignment_code -> definition EQUAL . LBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 132
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    definition                     shift and go to state 99
    primaryexp                     shift and go to state 131
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    arraydefinition                shift and go to state 50

state 66

    (78) binaryexp -> primaryexp BINARY_FNC . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 133
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 67

    (79) binaryexp -> primaryexp comparisonoperator . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 134
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 68

    (80) binaryexp -> primaryexp mathoperator . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 135
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 69

    (48) getvariable_any -> primaryexp GETVARIABLE . string
    (49) getvariable_any -> primaryexp GETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 137
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 136

state 70

    (52) setvariable_any -> primaryexp SETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp SETVARIABLE . LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    LSPAREN         shift and go to state 138


state 71

    (59) param_binary -> primaryexp PARAM . LSPAREN number RSPAREN
    (60) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN

    LSPAREN         shift and go to state 139


state 72

    (114) comparisonoperator -> LT .

    LPAREN          reduce using rule 114 (comparisonoperator -> LT .)
    NUMBER_REAL     reduce using rule 114 (comparisonoperator -> LT .)
    NUMBER_EXP      reduce using rule 114 (comparisonoperator -> LT .)
    NUMBER_HEX      reduce using rule 114 (comparisonoperator -> LT .)
    PRIVATE_ID      reduce using rule 114 (comparisonoperator -> LT .)
    GLOBAL_ID       reduce using rule 114 (comparisonoperator -> LT .)
    LSPAREN         reduce using rule 114 (comparisonoperator -> LT .)
    UNARY_FNC       reduce using rule 114 (comparisonoperator -> LT .)
    PLUS            reduce using rule 114 (comparisonoperator -> LT .)
    MINUS           reduce using rule 114 (comparisonoperator -> LT .)
    NOT             reduce using rule 114 (comparisonoperator -> LT .)
    NULAR_FNC       reduce using rule 114 (comparisonoperator -> LT .)
    STRING_SINGLE   reduce using rule 114 (comparisonoperator -> LT .)
    STRING_DOUBLE   reduce using rule 114 (comparisonoperator -> LT .)
    LBRACE          reduce using rule 114 (comparisonoperator -> LT .)
    IF              reduce using rule 114 (comparisonoperator -> LT .)
    WHILE           reduce using rule 114 (comparisonoperator -> LT .)
    FOR             reduce using rule 114 (comparisonoperator -> LT .)
    WITH            reduce using rule 114 (comparisonoperator -> LT .)
    PARAM           reduce using rule 114 (comparisonoperator -> LT .)
    NAMESPACE       reduce using rule 114 (comparisonoperator -> LT .)
    PRIVATE         reduce using rule 114 (comparisonoperator -> LT .)


state 73

    (115) comparisonoperator -> GT .

    LPAREN          reduce using rule 115 (comparisonoperator -> GT .)
    NUMBER_REAL     reduce using rule 115 (comparisonoperator -> GT .)
    NUMBER_EXP      reduce using rule 115 (comparisonoperator -> GT .)
    NUMBER_HEX      reduce using rule 115 (comparisonoperator -> GT .)
    PRIVATE_ID      reduce using rule 115 (comparisonoperator -> GT .)
    GLOBAL_ID       reduce using rule 115 (comparisonoperator -> GT .)
    LSPAREN         reduce using rule 115 (comparisonoperator -> GT .)
    UNARY_FNC       reduce using rule 115 (comparisonoperator -> GT .)
    PLUS            reduce using rule 115 (comparisonoperator -> GT .)
    MINUS           reduce using rule 115 (comparisonoperator -> GT .)
    NOT             reduce using rule 115 (comparisonoperator -> GT .)
    NULAR_FNC       reduce using rule 115 (comparisonoperator -> GT .)
    STRING_SINGLE   reduce using rule 115 (comparisonoperator -> GT .)
    STRING_DOUBLE   reduce using rule 115 (comparisonoperator -> GT .)
    LBRACE          reduce using rule 115 (comparisonoperator -> GT .)
    IF              reduce using rule 115 (comparisonoperator -> GT .)
    WHILE           reduce using rule 115 (comparisonoperator -> GT .)
    FOR             reduce using rule 115 (comparisonoperator -> GT .)
    WITH            reduce using rule 115 (comparisonoperator -> GT .)
    PARAM           reduce using rule 115 (comparisonoperator -> GT .)
    NAMESPACE       reduce using rule 115 (comparisonoperator -> GT .)
    PRIVATE         reduce using rule 115 (comparisonoperator -> GT .)


state 74

    (116) comparisonoperator -> LTE .

    LPAREN          reduce using rule 116 (comparisonoperator -> LTE .)
    NUMBER_REAL     reduce using rule 116 (comparisonoperator -> LTE .)
    NUMBER_EXP      reduce using rule 116 (comparisonoperator -> LTE .)
    NUMBER_HEX      reduce using rule 116 (comparisonoperator -> LTE .)
    PRIVATE_ID      reduce using rule 116 (comparisonoperator -> LTE .)
    GLOBAL_ID       reduce using rule 116 (comparisonoperator -> LTE .)
    LSPAREN         reduce using rule 116 (comparisonoperator -> LTE .)
    UNARY_FNC       reduce using rule 116 (comparisonoperator -> LTE .)
    PLUS            reduce using rule 116 (comparisonoperator -> LTE .)
    MINUS           reduce using rule 116 (comparisonoperator -> LTE .)
    NOT             reduce using rule 116 (comparisonoperator -> LTE .)
    NULAR_FNC       reduce using rule 116 (comparisonoperator -> LTE .)
    STRING_SINGLE   reduce using rule 116 (comparisonoperator -> LTE .)
    STRING_DOUBLE   reduce using rule 116 (comparisonoperator -> LTE .)
    LBRACE          reduce using rule 116 (comparisonoperator -> LTE .)
    IF              reduce using rule 116 (comparisonoperator -> LTE .)
    WHILE           reduce using rule 116 (comparisonoperator -> LTE .)
    FOR             reduce using rule 116 (comparisonoperator -> LTE .)
    WITH            reduce using rule 116 (comparisonoperator -> LTE .)
    PARAM           reduce using rule 116 (comparisonoperator -> LTE .)
    NAMESPACE       reduce using rule 116 (comparisonoperator -> LTE .)
    PRIVATE         reduce using rule 116 (comparisonoperator -> LTE .)


state 75

    (117) comparisonoperator -> GTE .

    LPAREN          reduce using rule 117 (comparisonoperator -> GTE .)
    NUMBER_REAL     reduce using rule 117 (comparisonoperator -> GTE .)
    NUMBER_EXP      reduce using rule 117 (comparisonoperator -> GTE .)
    NUMBER_HEX      reduce using rule 117 (comparisonoperator -> GTE .)
    PRIVATE_ID      reduce using rule 117 (comparisonoperator -> GTE .)
    GLOBAL_ID       reduce using rule 117 (comparisonoperator -> GTE .)
    LSPAREN         reduce using rule 117 (comparisonoperator -> GTE .)
    UNARY_FNC       reduce using rule 117 (comparisonoperator -> GTE .)
    PLUS            reduce using rule 117 (comparisonoperator -> GTE .)
    MINUS           reduce using rule 117 (comparisonoperator -> GTE .)
    NOT             reduce using rule 117 (comparisonoperator -> GTE .)
    NULAR_FNC       reduce using rule 117 (comparisonoperator -> GTE .)
    STRING_SINGLE   reduce using rule 117 (comparisonoperator -> GTE .)
    STRING_DOUBLE   reduce using rule 117 (comparisonoperator -> GTE .)
    LBRACE          reduce using rule 117 (comparisonoperator -> GTE .)
    IF              reduce using rule 117 (comparisonoperator -> GTE .)
    WHILE           reduce using rule 117 (comparisonoperator -> GTE .)
    FOR             reduce using rule 117 (comparisonoperator -> GTE .)
    WITH            reduce using rule 117 (comparisonoperator -> GTE .)
    PARAM           reduce using rule 117 (comparisonoperator -> GTE .)
    NAMESPACE       reduce using rule 117 (comparisonoperator -> GTE .)
    PRIVATE         reduce using rule 117 (comparisonoperator -> GTE .)


state 76

    (118) comparisonoperator -> EQUALITY .

    LPAREN          reduce using rule 118 (comparisonoperator -> EQUALITY .)
    NUMBER_REAL     reduce using rule 118 (comparisonoperator -> EQUALITY .)
    NUMBER_EXP      reduce using rule 118 (comparisonoperator -> EQUALITY .)
    NUMBER_HEX      reduce using rule 118 (comparisonoperator -> EQUALITY .)
    PRIVATE_ID      reduce using rule 118 (comparisonoperator -> EQUALITY .)
    GLOBAL_ID       reduce using rule 118 (comparisonoperator -> EQUALITY .)
    LSPAREN         reduce using rule 118 (comparisonoperator -> EQUALITY .)
    UNARY_FNC       reduce using rule 118 (comparisonoperator -> EQUALITY .)
    PLUS            reduce using rule 118 (comparisonoperator -> EQUALITY .)
    MINUS           reduce using rule 118 (comparisonoperator -> EQUALITY .)
    NOT             reduce using rule 118 (comparisonoperator -> EQUALITY .)
    NULAR_FNC       reduce using rule 118 (comparisonoperator -> EQUALITY .)
    STRING_SINGLE   reduce using rule 118 (comparisonoperator -> EQUALITY .)
    STRING_DOUBLE   reduce using rule 118 (comparisonoperator -> EQUALITY .)
    LBRACE          reduce using rule 118 (comparisonoperator -> EQUALITY .)
    IF              reduce using rule 118 (comparisonoperator -> EQUALITY .)
    WHILE           reduce using rule 118 (comparisonoperator -> EQUALITY .)
    FOR             reduce using rule 118 (comparisonoperator -> EQUALITY .)
    WITH            reduce using rule 118 (comparisonoperator -> EQUALITY .)
    PARAM           reduce using rule 118 (comparisonoperator -> EQUALITY .)
    NAMESPACE       reduce using rule 118 (comparisonoperator -> EQUALITY .)
    PRIVATE         reduce using rule 118 (comparisonoperator -> EQUALITY .)


state 77

    (119) comparisonoperator -> INEQUALITY .

    LPAREN          reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    NUMBER_REAL     reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    NUMBER_EXP      reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    NUMBER_HEX      reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    PRIVATE_ID      reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    GLOBAL_ID       reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    LSPAREN         reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    UNARY_FNC       reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    PLUS            reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    MINUS           reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    NOT             reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    NULAR_FNC       reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    STRING_SINGLE   reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    STRING_DOUBLE   reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    LBRACE          reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    IF              reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    WHILE           reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    FOR             reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    WITH            reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    PARAM           reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    NAMESPACE       reduce using rule 119 (comparisonoperator -> INEQUALITY .)
    PRIVATE         reduce using rule 119 (comparisonoperator -> INEQUALITY .)


state 78

    (120) comparisonoperator -> AND .

    LPAREN          reduce using rule 120 (comparisonoperator -> AND .)
    NUMBER_REAL     reduce using rule 120 (comparisonoperator -> AND .)
    NUMBER_EXP      reduce using rule 120 (comparisonoperator -> AND .)
    NUMBER_HEX      reduce using rule 120 (comparisonoperator -> AND .)
    PRIVATE_ID      reduce using rule 120 (comparisonoperator -> AND .)
    GLOBAL_ID       reduce using rule 120 (comparisonoperator -> AND .)
    LSPAREN         reduce using rule 120 (comparisonoperator -> AND .)
    UNARY_FNC       reduce using rule 120 (comparisonoperator -> AND .)
    PLUS            reduce using rule 120 (comparisonoperator -> AND .)
    MINUS           reduce using rule 120 (comparisonoperator -> AND .)
    NOT             reduce using rule 120 (comparisonoperator -> AND .)
    NULAR_FNC       reduce using rule 120 (comparisonoperator -> AND .)
    STRING_SINGLE   reduce using rule 120 (comparisonoperator -> AND .)
    STRING_DOUBLE   reduce using rule 120 (comparisonoperator -> AND .)
    LBRACE          reduce using rule 120 (comparisonoperator -> AND .)
    IF              reduce using rule 120 (comparisonoperator -> AND .)
    WHILE           reduce using rule 120 (comparisonoperator -> AND .)
    FOR             reduce using rule 120 (comparisonoperator -> AND .)
    WITH            reduce using rule 120 (comparisonoperator -> AND .)
    PARAM           reduce using rule 120 (comparisonoperator -> AND .)
    NAMESPACE       reduce using rule 120 (comparisonoperator -> AND .)
    PRIVATE         reduce using rule 120 (comparisonoperator -> AND .)


state 79

    (121) comparisonoperator -> OR .

    LPAREN          reduce using rule 121 (comparisonoperator -> OR .)
    NUMBER_REAL     reduce using rule 121 (comparisonoperator -> OR .)
    NUMBER_EXP      reduce using rule 121 (comparisonoperator -> OR .)
    NUMBER_HEX      reduce using rule 121 (comparisonoperator -> OR .)
    PRIVATE_ID      reduce using rule 121 (comparisonoperator -> OR .)
    GLOBAL_ID       reduce using rule 121 (comparisonoperator -> OR .)
    LSPAREN         reduce using rule 121 (comparisonoperator -> OR .)
    UNARY_FNC       reduce using rule 121 (comparisonoperator -> OR .)
    PLUS            reduce using rule 121 (comparisonoperator -> OR .)
    MINUS           reduce using rule 121 (comparisonoperator -> OR .)
    NOT             reduce using rule 121 (comparisonoperator -> OR .)
    NULAR_FNC       reduce using rule 121 (comparisonoperator -> OR .)
    STRING_SINGLE   reduce using rule 121 (comparisonoperator -> OR .)
    STRING_DOUBLE   reduce using rule 121 (comparisonoperator -> OR .)
    LBRACE          reduce using rule 121 (comparisonoperator -> OR .)
    IF              reduce using rule 121 (comparisonoperator -> OR .)
    WHILE           reduce using rule 121 (comparisonoperator -> OR .)
    FOR             reduce using rule 121 (comparisonoperator -> OR .)
    WITH            reduce using rule 121 (comparisonoperator -> OR .)
    PARAM           reduce using rule 121 (comparisonoperator -> OR .)
    NAMESPACE       reduce using rule 121 (comparisonoperator -> OR .)
    PRIVATE         reduce using rule 121 (comparisonoperator -> OR .)


state 80

    (122) mathoperator -> PLUS .

    LPAREN          reduce using rule 122 (mathoperator -> PLUS .)
    NUMBER_REAL     reduce using rule 122 (mathoperator -> PLUS .)
    NUMBER_EXP      reduce using rule 122 (mathoperator -> PLUS .)
    NUMBER_HEX      reduce using rule 122 (mathoperator -> PLUS .)
    PRIVATE_ID      reduce using rule 122 (mathoperator -> PLUS .)
    GLOBAL_ID       reduce using rule 122 (mathoperator -> PLUS .)
    LSPAREN         reduce using rule 122 (mathoperator -> PLUS .)
    UNARY_FNC       reduce using rule 122 (mathoperator -> PLUS .)
    PLUS            reduce using rule 122 (mathoperator -> PLUS .)
    MINUS           reduce using rule 122 (mathoperator -> PLUS .)
    NOT             reduce using rule 122 (mathoperator -> PLUS .)
    NULAR_FNC       reduce using rule 122 (mathoperator -> PLUS .)
    STRING_SINGLE   reduce using rule 122 (mathoperator -> PLUS .)
    STRING_DOUBLE   reduce using rule 122 (mathoperator -> PLUS .)
    LBRACE          reduce using rule 122 (mathoperator -> PLUS .)
    IF              reduce using rule 122 (mathoperator -> PLUS .)
    WHILE           reduce using rule 122 (mathoperator -> PLUS .)
    FOR             reduce using rule 122 (mathoperator -> PLUS .)
    WITH            reduce using rule 122 (mathoperator -> PLUS .)
    PARAM           reduce using rule 122 (mathoperator -> PLUS .)
    NAMESPACE       reduce using rule 122 (mathoperator -> PLUS .)
    PRIVATE         reduce using rule 122 (mathoperator -> PLUS .)


state 81

    (123) mathoperator -> MINUS .

    LPAREN          reduce using rule 123 (mathoperator -> MINUS .)
    NUMBER_REAL     reduce using rule 123 (mathoperator -> MINUS .)
    NUMBER_EXP      reduce using rule 123 (mathoperator -> MINUS .)
    NUMBER_HEX      reduce using rule 123 (mathoperator -> MINUS .)
    PRIVATE_ID      reduce using rule 123 (mathoperator -> MINUS .)
    GLOBAL_ID       reduce using rule 123 (mathoperator -> MINUS .)
    LSPAREN         reduce using rule 123 (mathoperator -> MINUS .)
    UNARY_FNC       reduce using rule 123 (mathoperator -> MINUS .)
    PLUS            reduce using rule 123 (mathoperator -> MINUS .)
    MINUS           reduce using rule 123 (mathoperator -> MINUS .)
    NOT             reduce using rule 123 (mathoperator -> MINUS .)
    NULAR_FNC       reduce using rule 123 (mathoperator -> MINUS .)
    STRING_SINGLE   reduce using rule 123 (mathoperator -> MINUS .)
    STRING_DOUBLE   reduce using rule 123 (mathoperator -> MINUS .)
    LBRACE          reduce using rule 123 (mathoperator -> MINUS .)
    IF              reduce using rule 123 (mathoperator -> MINUS .)
    WHILE           reduce using rule 123 (mathoperator -> MINUS .)
    FOR             reduce using rule 123 (mathoperator -> MINUS .)
    WITH            reduce using rule 123 (mathoperator -> MINUS .)
    PARAM           reduce using rule 123 (mathoperator -> MINUS .)
    NAMESPACE       reduce using rule 123 (mathoperator -> MINUS .)
    PRIVATE         reduce using rule 123 (mathoperator -> MINUS .)


state 82

    (124) mathoperator -> TIMES .

    LPAREN          reduce using rule 124 (mathoperator -> TIMES .)
    NUMBER_REAL     reduce using rule 124 (mathoperator -> TIMES .)
    NUMBER_EXP      reduce using rule 124 (mathoperator -> TIMES .)
    NUMBER_HEX      reduce using rule 124 (mathoperator -> TIMES .)
    PRIVATE_ID      reduce using rule 124 (mathoperator -> TIMES .)
    GLOBAL_ID       reduce using rule 124 (mathoperator -> TIMES .)
    LSPAREN         reduce using rule 124 (mathoperator -> TIMES .)
    UNARY_FNC       reduce using rule 124 (mathoperator -> TIMES .)
    PLUS            reduce using rule 124 (mathoperator -> TIMES .)
    MINUS           reduce using rule 124 (mathoperator -> TIMES .)
    NOT             reduce using rule 124 (mathoperator -> TIMES .)
    NULAR_FNC       reduce using rule 124 (mathoperator -> TIMES .)
    STRING_SINGLE   reduce using rule 124 (mathoperator -> TIMES .)
    STRING_DOUBLE   reduce using rule 124 (mathoperator -> TIMES .)
    LBRACE          reduce using rule 124 (mathoperator -> TIMES .)
    IF              reduce using rule 124 (mathoperator -> TIMES .)
    WHILE           reduce using rule 124 (mathoperator -> TIMES .)
    FOR             reduce using rule 124 (mathoperator -> TIMES .)
    WITH            reduce using rule 124 (mathoperator -> TIMES .)
    PARAM           reduce using rule 124 (mathoperator -> TIMES .)
    NAMESPACE       reduce using rule 124 (mathoperator -> TIMES .)
    PRIVATE         reduce using rule 124 (mathoperator -> TIMES .)


state 83

    (125) mathoperator -> DIVIDE .

    LPAREN          reduce using rule 125 (mathoperator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 125 (mathoperator -> DIVIDE .)
    NUMBER_EXP      reduce using rule 125 (mathoperator -> DIVIDE .)
    NUMBER_HEX      reduce using rule 125 (mathoperator -> DIVIDE .)
    PRIVATE_ID      reduce using rule 125 (mathoperator -> DIVIDE .)
    GLOBAL_ID       reduce using rule 125 (mathoperator -> DIVIDE .)
    LSPAREN         reduce using rule 125 (mathoperator -> DIVIDE .)
    UNARY_FNC       reduce using rule 125 (mathoperator -> DIVIDE .)
    PLUS            reduce using rule 125 (mathoperator -> DIVIDE .)
    MINUS           reduce using rule 125 (mathoperator -> DIVIDE .)
    NOT             reduce using rule 125 (mathoperator -> DIVIDE .)
    NULAR_FNC       reduce using rule 125 (mathoperator -> DIVIDE .)
    STRING_SINGLE   reduce using rule 125 (mathoperator -> DIVIDE .)
    STRING_DOUBLE   reduce using rule 125 (mathoperator -> DIVIDE .)
    LBRACE          reduce using rule 125 (mathoperator -> DIVIDE .)
    IF              reduce using rule 125 (mathoperator -> DIVIDE .)
    WHILE           reduce using rule 125 (mathoperator -> DIVIDE .)
    FOR             reduce using rule 125 (mathoperator -> DIVIDE .)
    WITH            reduce using rule 125 (mathoperator -> DIVIDE .)
    PARAM           reduce using rule 125 (mathoperator -> DIVIDE .)
    NAMESPACE       reduce using rule 125 (mathoperator -> DIVIDE .)
    PRIVATE         reduce using rule 125 (mathoperator -> DIVIDE .)


state 84

    (126) mathoperator -> MOD .

    LPAREN          reduce using rule 126 (mathoperator -> MOD .)
    NUMBER_REAL     reduce using rule 126 (mathoperator -> MOD .)
    NUMBER_EXP      reduce using rule 126 (mathoperator -> MOD .)
    NUMBER_HEX      reduce using rule 126 (mathoperator -> MOD .)
    PRIVATE_ID      reduce using rule 126 (mathoperator -> MOD .)
    GLOBAL_ID       reduce using rule 126 (mathoperator -> MOD .)
    LSPAREN         reduce using rule 126 (mathoperator -> MOD .)
    UNARY_FNC       reduce using rule 126 (mathoperator -> MOD .)
    PLUS            reduce using rule 126 (mathoperator -> MOD .)
    MINUS           reduce using rule 126 (mathoperator -> MOD .)
    NOT             reduce using rule 126 (mathoperator -> MOD .)
    NULAR_FNC       reduce using rule 126 (mathoperator -> MOD .)
    STRING_SINGLE   reduce using rule 126 (mathoperator -> MOD .)
    STRING_DOUBLE   reduce using rule 126 (mathoperator -> MOD .)
    LBRACE          reduce using rule 126 (mathoperator -> MOD .)
    IF              reduce using rule 126 (mathoperator -> MOD .)
    WHILE           reduce using rule 126 (mathoperator -> MOD .)
    FOR             reduce using rule 126 (mathoperator -> MOD .)
    WITH            reduce using rule 126 (mathoperator -> MOD .)
    PARAM           reduce using rule 126 (mathoperator -> MOD .)
    NAMESPACE       reduce using rule 126 (mathoperator -> MOD .)
    PRIVATE         reduce using rule 126 (mathoperator -> MOD .)


state 85

    (127) mathoperator -> POW .

    LPAREN          reduce using rule 127 (mathoperator -> POW .)
    NUMBER_REAL     reduce using rule 127 (mathoperator -> POW .)
    NUMBER_EXP      reduce using rule 127 (mathoperator -> POW .)
    NUMBER_HEX      reduce using rule 127 (mathoperator -> POW .)
    PRIVATE_ID      reduce using rule 127 (mathoperator -> POW .)
    GLOBAL_ID       reduce using rule 127 (mathoperator -> POW .)
    LSPAREN         reduce using rule 127 (mathoperator -> POW .)
    UNARY_FNC       reduce using rule 127 (mathoperator -> POW .)
    PLUS            reduce using rule 127 (mathoperator -> POW .)
    MINUS           reduce using rule 127 (mathoperator -> POW .)
    NOT             reduce using rule 127 (mathoperator -> POW .)
    NULAR_FNC       reduce using rule 127 (mathoperator -> POW .)
    STRING_SINGLE   reduce using rule 127 (mathoperator -> POW .)
    STRING_DOUBLE   reduce using rule 127 (mathoperator -> POW .)
    LBRACE          reduce using rule 127 (mathoperator -> POW .)
    IF              reduce using rule 127 (mathoperator -> POW .)
    WHILE           reduce using rule 127 (mathoperator -> POW .)
    FOR             reduce using rule 127 (mathoperator -> POW .)
    WITH            reduce using rule 127 (mathoperator -> POW .)
    PARAM           reduce using rule 127 (mathoperator -> POW .)
    NAMESPACE       reduce using rule 127 (mathoperator -> POW .)
    PRIVATE         reduce using rule 127 (mathoperator -> POW .)


state 86

    (68) assignment -> variable EQUAL . primaryexp
    (70) assignment_code -> variable EQUAL . LBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 141
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 140
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 87

    (108) unaryexp -> UNARY_FNC primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    COMMA           reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    $end            reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    BINARY_FNC      reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    GETVARIABLE     reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    SETVARIABLE     reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    PARAM           reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    LT              reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    GT              reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    LTE             reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    GTE             reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    EQUALITY        reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    INEQUALITY      reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    AND             reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    OR              reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    PLUS            reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    MINUS           reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    TIMES           reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    DIVIDE          reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    MOD             reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    POW             reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    RBRACE          reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    RSPAREN         reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    RPAREN          reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    TO              reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    STEP            reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    DO              reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)
    COLON           reduce using rule 108 (unaryexp -> UNARY_FNC primaryexp .)

  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! POW             [ shift and go to state 85 ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 88

    (87) primaryexp -> identifier .
    (107) nularexp -> identifier .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAM resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for STEP resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 87 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 87 (primaryexp -> identifier .)
    BINARY_FNC      reduce using rule 87 (primaryexp -> identifier .)
    GETVARIABLE     reduce using rule 87 (primaryexp -> identifier .)
    SETVARIABLE     reduce using rule 87 (primaryexp -> identifier .)
    PARAM           reduce using rule 87 (primaryexp -> identifier .)
    LT              reduce using rule 87 (primaryexp -> identifier .)
    GT              reduce using rule 87 (primaryexp -> identifier .)
    LTE             reduce using rule 87 (primaryexp -> identifier .)
    GTE             reduce using rule 87 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 87 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 87 (primaryexp -> identifier .)
    AND             reduce using rule 87 (primaryexp -> identifier .)
    OR              reduce using rule 87 (primaryexp -> identifier .)
    PLUS            reduce using rule 87 (primaryexp -> identifier .)
    MINUS           reduce using rule 87 (primaryexp -> identifier .)
    TIMES           reduce using rule 87 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 87 (primaryexp -> identifier .)
    MOD             reduce using rule 87 (primaryexp -> identifier .)
    POW             reduce using rule 87 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 87 (primaryexp -> identifier .)
    COMMA           reduce using rule 87 (primaryexp -> identifier .)
    $end            reduce using rule 87 (primaryexp -> identifier .)
    RBRACE          reduce using rule 87 (primaryexp -> identifier .)
    RSPAREN         reduce using rule 87 (primaryexp -> identifier .)
    RPAREN          reduce using rule 87 (primaryexp -> identifier .)
    TO              reduce using rule 87 (primaryexp -> identifier .)
    STEP            reduce using rule 87 (primaryexp -> identifier .)
    DO              reduce using rule 87 (primaryexp -> identifier .)
    COLON           reduce using rule 87 (primaryexp -> identifier .)

  ! BINARY_FNC      [ reduce using rule 107 (nularexp -> identifier .) ]
  ! GETVARIABLE     [ reduce using rule 107 (nularexp -> identifier .) ]
  ! SETVARIABLE     [ reduce using rule 107 (nularexp -> identifier .) ]
  ! PARAM           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! LT              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! GT              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! LTE             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! GTE             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! EQUALITY        [ reduce using rule 107 (nularexp -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 107 (nularexp -> identifier .) ]
  ! AND             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! OR              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! PLUS            [ reduce using rule 107 (nularexp -> identifier .) ]
  ! MINUS           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! TIMES           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! DIVIDE          [ reduce using rule 107 (nularexp -> identifier .) ]
  ! MOD             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! POW             [ reduce using rule 107 (nularexp -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 107 (nularexp -> identifier .) ]
  ! COMMA           [ reduce using rule 107 (nularexp -> identifier .) ]
  ! $end            [ reduce using rule 107 (nularexp -> identifier .) ]
  ! RBRACE          [ reduce using rule 107 (nularexp -> identifier .) ]
  ! RSPAREN         [ reduce using rule 107 (nularexp -> identifier .) ]
  ! RPAREN          [ reduce using rule 107 (nularexp -> identifier .) ]
  ! TO              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! STEP            [ reduce using rule 107 (nularexp -> identifier .) ]
  ! DO              [ reduce using rule 107 (nularexp -> identifier .) ]
  ! COLON           [ reduce using rule 107 (nularexp -> identifier .) ]


state 89

    (90) primaryexp -> unaryexp .

    BINARY_FNC      reduce using rule 90 (primaryexp -> unaryexp .)
    GETVARIABLE     reduce using rule 90 (primaryexp -> unaryexp .)
    SETVARIABLE     reduce using rule 90 (primaryexp -> unaryexp .)
    PARAM           reduce using rule 90 (primaryexp -> unaryexp .)
    LT              reduce using rule 90 (primaryexp -> unaryexp .)
    GT              reduce using rule 90 (primaryexp -> unaryexp .)
    LTE             reduce using rule 90 (primaryexp -> unaryexp .)
    GTE             reduce using rule 90 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 90 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 90 (primaryexp -> unaryexp .)
    AND             reduce using rule 90 (primaryexp -> unaryexp .)
    OR              reduce using rule 90 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 90 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 90 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 90 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 90 (primaryexp -> unaryexp .)
    MOD             reduce using rule 90 (primaryexp -> unaryexp .)
    POW             reduce using rule 90 (primaryexp -> unaryexp .)
    SEMI_COLON      reduce using rule 90 (primaryexp -> unaryexp .)
    COMMA           reduce using rule 90 (primaryexp -> unaryexp .)
    $end            reduce using rule 90 (primaryexp -> unaryexp .)
    RBRACE          reduce using rule 90 (primaryexp -> unaryexp .)
    RSPAREN         reduce using rule 90 (primaryexp -> unaryexp .)
    RPAREN          reduce using rule 90 (primaryexp -> unaryexp .)
    TO              reduce using rule 90 (primaryexp -> unaryexp .)
    STEP            reduce using rule 90 (primaryexp -> unaryexp .)
    DO              reduce using rule 90 (primaryexp -> unaryexp .)
    COLON           reduce using rule 90 (primaryexp -> unaryexp .)


state 90

    (91) primaryexp -> nularexp .

    BINARY_FNC      reduce using rule 91 (primaryexp -> nularexp .)
    GETVARIABLE     reduce using rule 91 (primaryexp -> nularexp .)
    SETVARIABLE     reduce using rule 91 (primaryexp -> nularexp .)
    PARAM           reduce using rule 91 (primaryexp -> nularexp .)
    LT              reduce using rule 91 (primaryexp -> nularexp .)
    GT              reduce using rule 91 (primaryexp -> nularexp .)
    LTE             reduce using rule 91 (primaryexp -> nularexp .)
    GTE             reduce using rule 91 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 91 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 91 (primaryexp -> nularexp .)
    AND             reduce using rule 91 (primaryexp -> nularexp .)
    OR              reduce using rule 91 (primaryexp -> nularexp .)
    PLUS            reduce using rule 91 (primaryexp -> nularexp .)
    MINUS           reduce using rule 91 (primaryexp -> nularexp .)
    TIMES           reduce using rule 91 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 91 (primaryexp -> nularexp .)
    MOD             reduce using rule 91 (primaryexp -> nularexp .)
    POW             reduce using rule 91 (primaryexp -> nularexp .)
    SEMI_COLON      reduce using rule 91 (primaryexp -> nularexp .)
    COMMA           reduce using rule 91 (primaryexp -> nularexp .)
    $end            reduce using rule 91 (primaryexp -> nularexp .)
    RBRACE          reduce using rule 91 (primaryexp -> nularexp .)
    RSPAREN         reduce using rule 91 (primaryexp -> nularexp .)
    RPAREN          reduce using rule 91 (primaryexp -> nularexp .)
    TO              reduce using rule 91 (primaryexp -> nularexp .)
    STEP            reduce using rule 91 (primaryexp -> nularexp .)
    DO              reduce using rule 91 (primaryexp -> nularexp .)
    COLON           reduce using rule 91 (primaryexp -> nularexp .)


state 91

    (93) primaryexp -> binaryexp .

    BINARY_FNC      reduce using rule 93 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 93 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 93 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 93 (primaryexp -> binaryexp .)
    LT              reduce using rule 93 (primaryexp -> binaryexp .)
    GT              reduce using rule 93 (primaryexp -> binaryexp .)
    LTE             reduce using rule 93 (primaryexp -> binaryexp .)
    GTE             reduce using rule 93 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 93 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 93 (primaryexp -> binaryexp .)
    AND             reduce using rule 93 (primaryexp -> binaryexp .)
    OR              reduce using rule 93 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 93 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 93 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 93 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 93 (primaryexp -> binaryexp .)
    MOD             reduce using rule 93 (primaryexp -> binaryexp .)
    POW             reduce using rule 93 (primaryexp -> binaryexp .)
    SEMI_COLON      reduce using rule 93 (primaryexp -> binaryexp .)
    COMMA           reduce using rule 93 (primaryexp -> binaryexp .)
    $end            reduce using rule 93 (primaryexp -> binaryexp .)
    RBRACE          reduce using rule 93 (primaryexp -> binaryexp .)
    RSPAREN         reduce using rule 93 (primaryexp -> binaryexp .)
    RPAREN          reduce using rule 93 (primaryexp -> binaryexp .)
    TO              reduce using rule 93 (primaryexp -> binaryexp .)
    STEP            reduce using rule 93 (primaryexp -> binaryexp .)
    DO              reduce using rule 93 (primaryexp -> binaryexp .)
    COLON           reduce using rule 93 (primaryexp -> binaryexp .)


state 92

    (94) primaryexp -> bracedexp .

    BINARY_FNC      reduce using rule 94 (primaryexp -> bracedexp .)
    GETVARIABLE     reduce using rule 94 (primaryexp -> bracedexp .)
    SETVARIABLE     reduce using rule 94 (primaryexp -> bracedexp .)
    PARAM           reduce using rule 94 (primaryexp -> bracedexp .)
    LT              reduce using rule 94 (primaryexp -> bracedexp .)
    GT              reduce using rule 94 (primaryexp -> bracedexp .)
    LTE             reduce using rule 94 (primaryexp -> bracedexp .)
    GTE             reduce using rule 94 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 94 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 94 (primaryexp -> bracedexp .)
    AND             reduce using rule 94 (primaryexp -> bracedexp .)
    OR              reduce using rule 94 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 94 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 94 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 94 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 94 (primaryexp -> bracedexp .)
    MOD             reduce using rule 94 (primaryexp -> bracedexp .)
    POW             reduce using rule 94 (primaryexp -> bracedexp .)
    SEMI_COLON      reduce using rule 94 (primaryexp -> bracedexp .)
    COMMA           reduce using rule 94 (primaryexp -> bracedexp .)
    $end            reduce using rule 94 (primaryexp -> bracedexp .)
    RBRACE          reduce using rule 94 (primaryexp -> bracedexp .)
    RSPAREN         reduce using rule 94 (primaryexp -> bracedexp .)
    RPAREN          reduce using rule 94 (primaryexp -> bracedexp .)
    TO              reduce using rule 94 (primaryexp -> bracedexp .)
    STEP            reduce using rule 94 (primaryexp -> bracedexp .)
    DO              reduce using rule 94 (primaryexp -> bracedexp .)
    COLON           reduce using rule 94 (primaryexp -> bracedexp .)


state 93

    (74) identifier -> PRIVATE_ID .

    BINARY_FNC      reduce using rule 74 (identifier -> PRIVATE_ID .)
    GETVARIABLE     reduce using rule 74 (identifier -> PRIVATE_ID .)
    SETVARIABLE     reduce using rule 74 (identifier -> PRIVATE_ID .)
    PARAM           reduce using rule 74 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 74 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 74 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 74 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 74 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 74 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 74 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 74 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 74 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 74 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 74 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 74 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 74 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 74 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 74 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 74 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 74 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 74 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 74 (identifier -> PRIVATE_ID .)
    RSPAREN         reduce using rule 74 (identifier -> PRIVATE_ID .)
    RPAREN          reduce using rule 74 (identifier -> PRIVATE_ID .)
    TO              reduce using rule 74 (identifier -> PRIVATE_ID .)
    STEP            reduce using rule 74 (identifier -> PRIVATE_ID .)
    DO              reduce using rule 74 (identifier -> PRIVATE_ID .)
    COLON           reduce using rule 74 (identifier -> PRIVATE_ID .)
    THEN            reduce using rule 74 (identifier -> PRIVATE_ID .)
    EXITWITH        reduce using rule 74 (identifier -> PRIVATE_ID .)


state 94

    (75) identifier -> GLOBAL_ID .

    BINARY_FNC      reduce using rule 75 (identifier -> GLOBAL_ID .)
    GETVARIABLE     reduce using rule 75 (identifier -> GLOBAL_ID .)
    SETVARIABLE     reduce using rule 75 (identifier -> GLOBAL_ID .)
    PARAM           reduce using rule 75 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 75 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 75 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 75 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 75 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 75 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 75 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 75 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 75 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 75 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 75 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 75 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 75 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 75 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 75 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 75 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 75 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 75 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 75 (identifier -> GLOBAL_ID .)
    RSPAREN         reduce using rule 75 (identifier -> GLOBAL_ID .)
    RPAREN          reduce using rule 75 (identifier -> GLOBAL_ID .)
    TO              reduce using rule 75 (identifier -> GLOBAL_ID .)
    STEP            reduce using rule 75 (identifier -> GLOBAL_ID .)
    DO              reduce using rule 75 (identifier -> GLOBAL_ID .)
    COLON           reduce using rule 75 (identifier -> GLOBAL_ID .)
    THEN            reduce using rule 75 (identifier -> GLOBAL_ID .)
    EXITWITH        reduce using rule 75 (identifier -> GLOBAL_ID .)


state 95

    (17) helpertype -> iftype .

    BINARY_FNC      reduce using rule 17 (helpertype -> iftype .)
    GETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    SETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    PARAM           reduce using rule 17 (helpertype -> iftype .)
    LT              reduce using rule 17 (helpertype -> iftype .)
    GT              reduce using rule 17 (helpertype -> iftype .)
    LTE             reduce using rule 17 (helpertype -> iftype .)
    GTE             reduce using rule 17 (helpertype -> iftype .)
    EQUALITY        reduce using rule 17 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 17 (helpertype -> iftype .)
    AND             reduce using rule 17 (helpertype -> iftype .)
    OR              reduce using rule 17 (helpertype -> iftype .)
    PLUS            reduce using rule 17 (helpertype -> iftype .)
    MINUS           reduce using rule 17 (helpertype -> iftype .)
    TIMES           reduce using rule 17 (helpertype -> iftype .)
    DIVIDE          reduce using rule 17 (helpertype -> iftype .)
    MOD             reduce using rule 17 (helpertype -> iftype .)
    POW             reduce using rule 17 (helpertype -> iftype .)
    SEMI_COLON      reduce using rule 17 (helpertype -> iftype .)
    COMMA           reduce using rule 17 (helpertype -> iftype .)
    $end            reduce using rule 17 (helpertype -> iftype .)
    RBRACE          reduce using rule 17 (helpertype -> iftype .)
    RSPAREN         reduce using rule 17 (helpertype -> iftype .)
    RPAREN          reduce using rule 17 (helpertype -> iftype .)
    TO              reduce using rule 17 (helpertype -> iftype .)
    STEP            reduce using rule 17 (helpertype -> iftype .)
    DO              reduce using rule 17 (helpertype -> iftype .)
    COLON           reduce using rule 17 (helpertype -> iftype .)


state 96

    (18) helpertype -> whiletype .

    BINARY_FNC      reduce using rule 18 (helpertype -> whiletype .)
    GETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    SETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    PARAM           reduce using rule 18 (helpertype -> whiletype .)
    LT              reduce using rule 18 (helpertype -> whiletype .)
    GT              reduce using rule 18 (helpertype -> whiletype .)
    LTE             reduce using rule 18 (helpertype -> whiletype .)
    GTE             reduce using rule 18 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 18 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 18 (helpertype -> whiletype .)
    AND             reduce using rule 18 (helpertype -> whiletype .)
    OR              reduce using rule 18 (helpertype -> whiletype .)
    PLUS            reduce using rule 18 (helpertype -> whiletype .)
    MINUS           reduce using rule 18 (helpertype -> whiletype .)
    TIMES           reduce using rule 18 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 18 (helpertype -> whiletype .)
    MOD             reduce using rule 18 (helpertype -> whiletype .)
    POW             reduce using rule 18 (helpertype -> whiletype .)
    SEMI_COLON      reduce using rule 18 (helpertype -> whiletype .)
    COMMA           reduce using rule 18 (helpertype -> whiletype .)
    $end            reduce using rule 18 (helpertype -> whiletype .)
    RBRACE          reduce using rule 18 (helpertype -> whiletype .)
    RSPAREN         reduce using rule 18 (helpertype -> whiletype .)
    RPAREN          reduce using rule 18 (helpertype -> whiletype .)
    TO              reduce using rule 18 (helpertype -> whiletype .)
    STEP            reduce using rule 18 (helpertype -> whiletype .)
    DO              reduce using rule 18 (helpertype -> whiletype .)
    COLON           reduce using rule 18 (helpertype -> whiletype .)


state 97

    (19) helpertype -> fortype .

    BINARY_FNC      reduce using rule 19 (helpertype -> fortype .)
    GETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    SETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    PARAM           reduce using rule 19 (helpertype -> fortype .)
    LT              reduce using rule 19 (helpertype -> fortype .)
    GT              reduce using rule 19 (helpertype -> fortype .)
    LTE             reduce using rule 19 (helpertype -> fortype .)
    GTE             reduce using rule 19 (helpertype -> fortype .)
    EQUALITY        reduce using rule 19 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 19 (helpertype -> fortype .)
    AND             reduce using rule 19 (helpertype -> fortype .)
    OR              reduce using rule 19 (helpertype -> fortype .)
    PLUS            reduce using rule 19 (helpertype -> fortype .)
    MINUS           reduce using rule 19 (helpertype -> fortype .)
    TIMES           reduce using rule 19 (helpertype -> fortype .)
    DIVIDE          reduce using rule 19 (helpertype -> fortype .)
    MOD             reduce using rule 19 (helpertype -> fortype .)
    POW             reduce using rule 19 (helpertype -> fortype .)
    SEMI_COLON      reduce using rule 19 (helpertype -> fortype .)
    COMMA           reduce using rule 19 (helpertype -> fortype .)
    $end            reduce using rule 19 (helpertype -> fortype .)
    RBRACE          reduce using rule 19 (helpertype -> fortype .)
    RSPAREN         reduce using rule 19 (helpertype -> fortype .)
    RPAREN          reduce using rule 19 (helpertype -> fortype .)
    TO              reduce using rule 19 (helpertype -> fortype .)
    STEP            reduce using rule 19 (helpertype -> fortype .)
    DO              reduce using rule 19 (helpertype -> fortype .)
    COLON           reduce using rule 19 (helpertype -> fortype .)


state 98

    (20) helpertype -> withtype .

    BINARY_FNC      reduce using rule 20 (helpertype -> withtype .)
    GETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    SETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    PARAM           reduce using rule 20 (helpertype -> withtype .)
    LT              reduce using rule 20 (helpertype -> withtype .)
    GT              reduce using rule 20 (helpertype -> withtype .)
    LTE             reduce using rule 20 (helpertype -> withtype .)
    GTE             reduce using rule 20 (helpertype -> withtype .)
    EQUALITY        reduce using rule 20 (helpertype -> withtype .)
    INEQUALITY      reduce using rule 20 (helpertype -> withtype .)
    AND             reduce using rule 20 (helpertype -> withtype .)
    OR              reduce using rule 20 (helpertype -> withtype .)
    PLUS            reduce using rule 20 (helpertype -> withtype .)
    MINUS           reduce using rule 20 (helpertype -> withtype .)
    TIMES           reduce using rule 20 (helpertype -> withtype .)
    DIVIDE          reduce using rule 20 (helpertype -> withtype .)
    MOD             reduce using rule 20 (helpertype -> withtype .)
    POW             reduce using rule 20 (helpertype -> withtype .)
    SEMI_COLON      reduce using rule 20 (helpertype -> withtype .)
    COMMA           reduce using rule 20 (helpertype -> withtype .)
    $end            reduce using rule 20 (helpertype -> withtype .)
    RBRACE          reduce using rule 20 (helpertype -> withtype .)
    RSPAREN         reduce using rule 20 (helpertype -> withtype .)
    RPAREN          reduce using rule 20 (helpertype -> withtype .)
    TO              reduce using rule 20 (helpertype -> withtype .)
    STEP            reduce using rule 20 (helpertype -> withtype .)
    DO              reduce using rule 20 (helpertype -> withtype .)
    COLON           reduce using rule 20 (helpertype -> withtype .)


state 99

    (64) vardefinition -> definition .

    BINARY_FNC      reduce using rule 64 (vardefinition -> definition .)
    GETVARIABLE     reduce using rule 64 (vardefinition -> definition .)
    SETVARIABLE     reduce using rule 64 (vardefinition -> definition .)
    PARAM           reduce using rule 64 (vardefinition -> definition .)
    LT              reduce using rule 64 (vardefinition -> definition .)
    GT              reduce using rule 64 (vardefinition -> definition .)
    LTE             reduce using rule 64 (vardefinition -> definition .)
    GTE             reduce using rule 64 (vardefinition -> definition .)
    EQUALITY        reduce using rule 64 (vardefinition -> definition .)
    INEQUALITY      reduce using rule 64 (vardefinition -> definition .)
    AND             reduce using rule 64 (vardefinition -> definition .)
    OR              reduce using rule 64 (vardefinition -> definition .)
    PLUS            reduce using rule 64 (vardefinition -> definition .)
    MINUS           reduce using rule 64 (vardefinition -> definition .)
    TIMES           reduce using rule 64 (vardefinition -> definition .)
    DIVIDE          reduce using rule 64 (vardefinition -> definition .)
    MOD             reduce using rule 64 (vardefinition -> definition .)
    POW             reduce using rule 64 (vardefinition -> definition .)
    SEMI_COLON      reduce using rule 64 (vardefinition -> definition .)
    COMMA           reduce using rule 64 (vardefinition -> definition .)
    $end            reduce using rule 64 (vardefinition -> definition .)
    RBRACE          reduce using rule 64 (vardefinition -> definition .)
    RSPAREN         reduce using rule 64 (vardefinition -> definition .)
    RPAREN          reduce using rule 64 (vardefinition -> definition .)
    TO              reduce using rule 64 (vardefinition -> definition .)
    STEP            reduce using rule 64 (vardefinition -> definition .)
    DO              reduce using rule 64 (vardefinition -> definition .)
    COLON           reduce using rule 64 (vardefinition -> definition .)


state 100

    (109) unaryexp -> PLUS primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    COMMA           reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    $end            reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    BINARY_FNC      reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    GETVARIABLE     reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    SETVARIABLE     reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    PARAM           reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    LT              reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    GT              reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    LTE             reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    GTE             reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    EQUALITY        reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    INEQUALITY      reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    AND             reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    OR              reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    PLUS            reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    MINUS           reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    TIMES           reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    DIVIDE          reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    MOD             reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    POW             reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    RBRACE          reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    RSPAREN         reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    RPAREN          reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    TO              reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    STEP            reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    DO              reduce using rule 109 (unaryexp -> PLUS primaryexp .)
    COLON           reduce using rule 109 (unaryexp -> PLUS primaryexp .)

  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! POW             [ shift and go to state 85 ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 101

    (110) unaryexp -> MINUS primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    COMMA           reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    $end            reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    BINARY_FNC      reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    GETVARIABLE     reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    SETVARIABLE     reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    PARAM           reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    LT              reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    GT              reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    LTE             reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    GTE             reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    EQUALITY        reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    INEQUALITY      reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    AND             reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    OR              reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    PLUS            reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    MINUS           reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    TIMES           reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    DIVIDE          reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    MOD             reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    POW             reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    RBRACE          reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    RSPAREN         reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    RPAREN          reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    TO              reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    STEP            reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    DO              reduce using rule 110 (unaryexp -> MINUS primaryexp .)
    COLON           reduce using rule 110 (unaryexp -> MINUS primaryexp .)

  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! POW             [ shift and go to state 85 ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 102

    (111) unaryexp -> NOT primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 111 (unaryexp -> NOT primaryexp .)
    COMMA           reduce using rule 111 (unaryexp -> NOT primaryexp .)
    $end            reduce using rule 111 (unaryexp -> NOT primaryexp .)
    BINARY_FNC      reduce using rule 111 (unaryexp -> NOT primaryexp .)
    GETVARIABLE     reduce using rule 111 (unaryexp -> NOT primaryexp .)
    SETVARIABLE     reduce using rule 111 (unaryexp -> NOT primaryexp .)
    PARAM           reduce using rule 111 (unaryexp -> NOT primaryexp .)
    LT              reduce using rule 111 (unaryexp -> NOT primaryexp .)
    GT              reduce using rule 111 (unaryexp -> NOT primaryexp .)
    LTE             reduce using rule 111 (unaryexp -> NOT primaryexp .)
    GTE             reduce using rule 111 (unaryexp -> NOT primaryexp .)
    EQUALITY        reduce using rule 111 (unaryexp -> NOT primaryexp .)
    INEQUALITY      reduce using rule 111 (unaryexp -> NOT primaryexp .)
    AND             reduce using rule 111 (unaryexp -> NOT primaryexp .)
    OR              reduce using rule 111 (unaryexp -> NOT primaryexp .)
    PLUS            reduce using rule 111 (unaryexp -> NOT primaryexp .)
    MINUS           reduce using rule 111 (unaryexp -> NOT primaryexp .)
    TIMES           reduce using rule 111 (unaryexp -> NOT primaryexp .)
    DIVIDE          reduce using rule 111 (unaryexp -> NOT primaryexp .)
    MOD             reduce using rule 111 (unaryexp -> NOT primaryexp .)
    POW             reduce using rule 111 (unaryexp -> NOT primaryexp .)
    RBRACE          reduce using rule 111 (unaryexp -> NOT primaryexp .)
    RSPAREN         reduce using rule 111 (unaryexp -> NOT primaryexp .)
    RPAREN          reduce using rule 111 (unaryexp -> NOT primaryexp .)
    TO              reduce using rule 111 (unaryexp -> NOT primaryexp .)
    STEP            reduce using rule 111 (unaryexp -> NOT primaryexp .)
    DO              reduce using rule 111 (unaryexp -> NOT primaryexp .)
    COLON           reduce using rule 111 (unaryexp -> NOT primaryexp .)

  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! PLUS            [ shift and go to state 80 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! POW             [ shift and go to state 85 ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 103

    (29) ifstatement -> iftype THEN . bracedexp
    (31) ifstatement -> iftype THEN . bracedexp ELSE bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 142

state 104

    (30) ifstatement -> iftype EXITWITH . bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 143

state 105

    (37) foreachloop -> bracedexp FOREACH . array
    (38) foreachloop -> bracedexp FOREACH . primaryexp
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LSPAREN         shift and go to state 48
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    bracedexp                      shift and go to state 92
    array                          shift and go to state 144
    primaryexp                     shift and go to state 145
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 106

    (36) whileloop -> whiletype DO . bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 146

state 107

    (42) forloop -> fortype DO . bracedexp_noscope
    (45) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 148

    bracedexp_noscope              shift and go to state 147

state 108

    (34) withstatement -> withstatementinit bracedexp .

    SEMI_COLON      reduce using rule 34 (withstatement -> withstatementinit bracedexp .)
    COMMA           reduce using rule 34 (withstatement -> withstatementinit bracedexp .)
    $end            reduce using rule 34 (withstatement -> withstatementinit bracedexp .)
    RBRACE          reduce using rule 34 (withstatement -> withstatementinit bracedexp .)


state 109

    (24) switchstatement -> SWITCH LPAREN . primaryexp RPAREN DO LBRACE switchbody RBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 149
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 110

    (95) primaryexp -> LPAREN binaryexp . RPAREN
    (93) primaryexp -> binaryexp .

    RPAREN          shift and go to state 150
    BINARY_FNC      reduce using rule 93 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 93 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 93 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 93 (primaryexp -> binaryexp .)
    LT              reduce using rule 93 (primaryexp -> binaryexp .)
    GT              reduce using rule 93 (primaryexp -> binaryexp .)
    LTE             reduce using rule 93 (primaryexp -> binaryexp .)
    GTE             reduce using rule 93 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 93 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 93 (primaryexp -> binaryexp .)
    AND             reduce using rule 93 (primaryexp -> binaryexp .)
    OR              reduce using rule 93 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 93 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 93 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 93 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 93 (primaryexp -> binaryexp .)
    MOD             reduce using rule 93 (primaryexp -> binaryexp .)
    POW             reduce using rule 93 (primaryexp -> binaryexp .)


state 111

    (96) bracedexp -> LBRACE new_scope . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (138) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (66) assignment -> . assignment_code code RBRACE
    (67) assignment -> . definition EQUAL primaryexp
    (68) assignment -> . variable EQUAL primaryexp
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (29) ifstatement -> . iftype THEN bracedexp
    (30) ifstatement -> . iftype EXITWITH bracedexp
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (36) whileloop -> . whiletype DO bracedexp
    (42) forloop -> . fortype DO bracedexp_noscope
    (34) withstatement -> . withstatementinit bracedexp
    (37) foreachloop -> . bracedexp FOREACH array
    (38) foreachloop -> . bracedexp FOREACH primaryexp
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (69) assignment_code -> . definition EQUAL LBRACE
    (70) assignment_code -> . variable EQUAL LBRACE
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (76) variable -> . PRIVATE_ID
    (77) variable -> . GLOBAL_ID
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withstatementinit -> . withtype DO
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (71) arraydefinition -> . PRIVATE stringarray
    (32) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 138 (empty -> .)
    NULAR_FNC       shift and go to state 24
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    SWITCH          shift and go to state 38
    PRIVATE         shift and go to state 41
    PRIVATE_ID      shift and go to state 42
    GLOBAL_ID       shift and go to state 44
    LPAREN          shift and go to state 39
    NAMESPACE       shift and go to state 47
    PARAM           shift and go to state 49
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    LBRACE          shift and go to state 40
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    WITH            shift and go to state 60

    code                           shift and go to state 151
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    identifier                     shift and go to state 25
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    iftype                         shift and go to state 32
    bracedexp                      shift and go to state 33
    whiletype                      shift and go to state 34
    fortype                        shift and go to state 35
    withstatementinit              shift and go to state 36
    array                          shift and go to state 37
    string                         shift and go to state 43
    number                         shift and go to state 45
    helpertype                     shift and go to state 46
    arraydefinition                shift and go to state 50
    withtype                       shift and go to state 54

state 112

    (72) definition -> PRIVATE PRIVATE_ID .

    EQUAL           reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    SEMI_COLON      reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    COMMA           reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    $end            reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    BINARY_FNC      reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    GETVARIABLE     reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    SETVARIABLE     reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    PARAM           reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    LT              reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    GT              reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    LTE             reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    GTE             reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    EQUALITY        reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    INEQUALITY      reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    AND             reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    OR              reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    PLUS            reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    MINUS           reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    TIMES           reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    DIVIDE          reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    MOD             reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    POW             reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    RBRACE          reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    RSPAREN         reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    RPAREN          reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    TO              reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    STEP            reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    DO              reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)
    COLON           reduce using rule 72 (definition -> PRIVATE PRIVATE_ID .)


state 113

    (73) definition -> PRIVATE string .

    EQUAL           reduce using rule 73 (definition -> PRIVATE string .)
    SEMI_COLON      reduce using rule 73 (definition -> PRIVATE string .)
    COMMA           reduce using rule 73 (definition -> PRIVATE string .)
    $end            reduce using rule 73 (definition -> PRIVATE string .)
    BINARY_FNC      reduce using rule 73 (definition -> PRIVATE string .)
    GETVARIABLE     reduce using rule 73 (definition -> PRIVATE string .)
    SETVARIABLE     reduce using rule 73 (definition -> PRIVATE string .)
    PARAM           reduce using rule 73 (definition -> PRIVATE string .)
    LT              reduce using rule 73 (definition -> PRIVATE string .)
    GT              reduce using rule 73 (definition -> PRIVATE string .)
    LTE             reduce using rule 73 (definition -> PRIVATE string .)
    GTE             reduce using rule 73 (definition -> PRIVATE string .)
    EQUALITY        reduce using rule 73 (definition -> PRIVATE string .)
    INEQUALITY      reduce using rule 73 (definition -> PRIVATE string .)
    AND             reduce using rule 73 (definition -> PRIVATE string .)
    OR              reduce using rule 73 (definition -> PRIVATE string .)
    PLUS            reduce using rule 73 (definition -> PRIVATE string .)
    MINUS           reduce using rule 73 (definition -> PRIVATE string .)
    TIMES           reduce using rule 73 (definition -> PRIVATE string .)
    DIVIDE          reduce using rule 73 (definition -> PRIVATE string .)
    MOD             reduce using rule 73 (definition -> PRIVATE string .)
    POW             reduce using rule 73 (definition -> PRIVATE string .)
    RBRACE          reduce using rule 73 (definition -> PRIVATE string .)
    RSPAREN         reduce using rule 73 (definition -> PRIVATE string .)
    RPAREN          reduce using rule 73 (definition -> PRIVATE string .)
    TO              reduce using rule 73 (definition -> PRIVATE string .)
    STEP            reduce using rule 73 (definition -> PRIVATE string .)
    DO              reduce using rule 73 (definition -> PRIVATE string .)
    COLON           reduce using rule 73 (definition -> PRIVATE string .)


state 114

    (71) arraydefinition -> PRIVATE stringarray .

    SEMI_COLON      reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    COMMA           reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    $end            reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    BINARY_FNC      reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    GETVARIABLE     reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    SETVARIABLE     reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    PARAM           reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    LT              reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    GT              reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    LTE             reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    GTE             reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    EQUALITY        reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    INEQUALITY      reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    AND             reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    OR              reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    PLUS            reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    MINUS           reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    TIMES           reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    DIVIDE          reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    MOD             reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    POW             reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    RBRACE          reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    RSPAREN         reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    RPAREN          reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    TO              reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    STEP            reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    DO              reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)
    COLON           reduce using rule 71 (arraydefinition -> PRIVATE stringarray .)


state 115

    (102) stringarray -> LSPAREN . RSPAREN
    (103) stringarray -> LSPAREN . stringarrayelement RSPAREN
    (104) stringarrayelement -> . string
    (105) stringarrayelement -> . string COMMA stringarrayelement
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    RSPAREN         shift and go to state 152
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    stringarrayelement             shift and go to state 153
    string                         shift and go to state 154

state 116

    (46) getvariable_ns -> NAMESPACE GETVARIABLE . string
    (47) getvariable_ns -> NAMESPACE GETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 156
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 155

state 117

    (50) setvariable_ns -> NAMESPACE SETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> NAMESPACE SETVARIABLE . LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    LSPAREN         shift and go to state 157


state 118

    (98) array -> LSPAREN RSPAREN .

    BINARY_FNC      reduce using rule 98 (array -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 98 (array -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 98 (array -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 98 (array -> LSPAREN RSPAREN .)
    LT              reduce using rule 98 (array -> LSPAREN RSPAREN .)
    GT              reduce using rule 98 (array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 98 (array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 98 (array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 98 (array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 98 (array -> LSPAREN RSPAREN .)
    AND             reduce using rule 98 (array -> LSPAREN RSPAREN .)
    OR              reduce using rule 98 (array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 98 (array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 98 (array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 98 (array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 98 (array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 98 (array -> LSPAREN RSPAREN .)
    POW             reduce using rule 98 (array -> LSPAREN RSPAREN .)
    SEMI_COLON      reduce using rule 98 (array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 98 (array -> LSPAREN RSPAREN .)
    $end            reduce using rule 98 (array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 98 (array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 98 (array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 98 (array -> LSPAREN RSPAREN .)
    TO              reduce using rule 98 (array -> LSPAREN RSPAREN .)
    STEP            reduce using rule 98 (array -> LSPAREN RSPAREN .)
    DO              reduce using rule 98 (array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 98 (array -> LSPAREN RSPAREN .)


state 119

    (99) array -> LSPAREN arrayelement . RSPAREN

    RSPAREN         shift and go to state 158


state 120

    (100) arrayelement -> primaryexp .
    (101) arrayelement -> primaryexp . COMMA arrayelement
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         reduce using rule 100 (arrayelement -> primaryexp .)
    COMMA           shift and go to state 159
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 121

    (54) param_unaray -> PARAM LSPAREN . number RSPAREN
    (55) param_unaray -> PARAM LSPAREN . number COMMA primaryexp RSPAREN
    (56) param_unaray -> PARAM LSPAREN . number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA array RSPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX

    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57

    number                         shift and go to state 160

state 122

    (28) iftype -> IF forloop_condition .

    THEN            reduce using rule 28 (iftype -> IF forloop_condition .)
    EXITWITH        reduce using rule 28 (iftype -> IF forloop_condition .)
    BINARY_FNC      reduce using rule 28 (iftype -> IF forloop_condition .)
    GETVARIABLE     reduce using rule 28 (iftype -> IF forloop_condition .)
    SETVARIABLE     reduce using rule 28 (iftype -> IF forloop_condition .)
    PARAM           reduce using rule 28 (iftype -> IF forloop_condition .)
    LT              reduce using rule 28 (iftype -> IF forloop_condition .)
    GT              reduce using rule 28 (iftype -> IF forloop_condition .)
    LTE             reduce using rule 28 (iftype -> IF forloop_condition .)
    GTE             reduce using rule 28 (iftype -> IF forloop_condition .)
    EQUALITY        reduce using rule 28 (iftype -> IF forloop_condition .)
    INEQUALITY      reduce using rule 28 (iftype -> IF forloop_condition .)
    AND             reduce using rule 28 (iftype -> IF forloop_condition .)
    OR              reduce using rule 28 (iftype -> IF forloop_condition .)
    PLUS            reduce using rule 28 (iftype -> IF forloop_condition .)
    MINUS           reduce using rule 28 (iftype -> IF forloop_condition .)
    TIMES           reduce using rule 28 (iftype -> IF forloop_condition .)
    DIVIDE          reduce using rule 28 (iftype -> IF forloop_condition .)
    MOD             reduce using rule 28 (iftype -> IF forloop_condition .)
    POW             reduce using rule 28 (iftype -> IF forloop_condition .)
    SEMI_COLON      reduce using rule 28 (iftype -> IF forloop_condition .)
    COMMA           reduce using rule 28 (iftype -> IF forloop_condition .)
    $end            reduce using rule 28 (iftype -> IF forloop_condition .)
    RBRACE          reduce using rule 28 (iftype -> IF forloop_condition .)
    RSPAREN         reduce using rule 28 (iftype -> IF forloop_condition .)
    RPAREN          reduce using rule 28 (iftype -> IF forloop_condition .)
    TO              reduce using rule 28 (iftype -> IF forloop_condition .)
    STEP            reduce using rule 28 (iftype -> IF forloop_condition .)
    DO              reduce using rule 28 (iftype -> IF forloop_condition .)
    COLON           reduce using rule 28 (iftype -> IF forloop_condition .)


state 123

    (43) forloop_condition -> LBRACE . booleanexp RBRACE
    (128) booleanexp -> . primaryexp
    (129) booleanexp -> . primaryexp comparisonoperator booleanexp
    (130) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    booleanexp                     shift and go to state 161
    primaryexp                     shift and go to state 162
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 124

    (44) forloop_condition -> identifier .

    THEN            reduce using rule 44 (forloop_condition -> identifier .)
    EXITWITH        reduce using rule 44 (forloop_condition -> identifier .)
    BINARY_FNC      reduce using rule 44 (forloop_condition -> identifier .)
    GETVARIABLE     reduce using rule 44 (forloop_condition -> identifier .)
    SETVARIABLE     reduce using rule 44 (forloop_condition -> identifier .)
    PARAM           reduce using rule 44 (forloop_condition -> identifier .)
    LT              reduce using rule 44 (forloop_condition -> identifier .)
    GT              reduce using rule 44 (forloop_condition -> identifier .)
    LTE             reduce using rule 44 (forloop_condition -> identifier .)
    GTE             reduce using rule 44 (forloop_condition -> identifier .)
    EQUALITY        reduce using rule 44 (forloop_condition -> identifier .)
    INEQUALITY      reduce using rule 44 (forloop_condition -> identifier .)
    AND             reduce using rule 44 (forloop_condition -> identifier .)
    OR              reduce using rule 44 (forloop_condition -> identifier .)
    PLUS            reduce using rule 44 (forloop_condition -> identifier .)
    MINUS           reduce using rule 44 (forloop_condition -> identifier .)
    TIMES           reduce using rule 44 (forloop_condition -> identifier .)
    DIVIDE          reduce using rule 44 (forloop_condition -> identifier .)
    MOD             reduce using rule 44 (forloop_condition -> identifier .)
    POW             reduce using rule 44 (forloop_condition -> identifier .)
    SEMI_COLON      reduce using rule 44 (forloop_condition -> identifier .)
    COMMA           reduce using rule 44 (forloop_condition -> identifier .)
    $end            reduce using rule 44 (forloop_condition -> identifier .)
    RBRACE          reduce using rule 44 (forloop_condition -> identifier .)
    RSPAREN         reduce using rule 44 (forloop_condition -> identifier .)
    RPAREN          reduce using rule 44 (forloop_condition -> identifier .)
    TO              reduce using rule 44 (forloop_condition -> identifier .)
    STEP            reduce using rule 44 (forloop_condition -> identifier .)
    DO              reduce using rule 44 (forloop_condition -> identifier .)
    COLON           reduce using rule 44 (forloop_condition -> identifier .)


state 125

    (35) whiletype -> WHILE forloop_condition .

    DO              reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    BINARY_FNC      reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    GETVARIABLE     reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    SETVARIABLE     reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    PARAM           reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    LT              reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    GT              reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    LTE             reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    GTE             reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    EQUALITY        reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    INEQUALITY      reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    AND             reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    OR              reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    PLUS            reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    MINUS           reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    TIMES           reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    DIVIDE          reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    MOD             reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    POW             reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    SEMI_COLON      reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    COMMA           reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    $end            reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    RBRACE          reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    RSPAREN         reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    RPAREN          reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    TO              reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    STEP            reduce using rule 35 (whiletype -> WHILE forloop_condition .)
    COLON           reduce using rule 35 (whiletype -> WHILE forloop_condition .)


state 126

    (39) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp
    (40) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> FOR new_scope . LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 164
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 163

state 127

    (33) withstatementinit -> withtype DO .

    LBRACE          reduce using rule 33 (withstatementinit -> withtype DO .)


state 128

    (32) withtype -> WITH NAMESPACE .

    DO              reduce using rule 32 (withtype -> WITH NAMESPACE .)
    BINARY_FNC      reduce using rule 32 (withtype -> WITH NAMESPACE .)
    GETVARIABLE     reduce using rule 32 (withtype -> WITH NAMESPACE .)
    SETVARIABLE     reduce using rule 32 (withtype -> WITH NAMESPACE .)
    PARAM           reduce using rule 32 (withtype -> WITH NAMESPACE .)
    LT              reduce using rule 32 (withtype -> WITH NAMESPACE .)
    GT              reduce using rule 32 (withtype -> WITH NAMESPACE .)
    LTE             reduce using rule 32 (withtype -> WITH NAMESPACE .)
    GTE             reduce using rule 32 (withtype -> WITH NAMESPACE .)
    EQUALITY        reduce using rule 32 (withtype -> WITH NAMESPACE .)
    INEQUALITY      reduce using rule 32 (withtype -> WITH NAMESPACE .)
    AND             reduce using rule 32 (withtype -> WITH NAMESPACE .)
    OR              reduce using rule 32 (withtype -> WITH NAMESPACE .)
    PLUS            reduce using rule 32 (withtype -> WITH NAMESPACE .)
    MINUS           reduce using rule 32 (withtype -> WITH NAMESPACE .)
    TIMES           reduce using rule 32 (withtype -> WITH NAMESPACE .)
    DIVIDE          reduce using rule 32 (withtype -> WITH NAMESPACE .)
    MOD             reduce using rule 32 (withtype -> WITH NAMESPACE .)
    POW             reduce using rule 32 (withtype -> WITH NAMESPACE .)
    SEMI_COLON      reduce using rule 32 (withtype -> WITH NAMESPACE .)
    COMMA           reduce using rule 32 (withtype -> WITH NAMESPACE .)
    $end            reduce using rule 32 (withtype -> WITH NAMESPACE .)
    RBRACE          reduce using rule 32 (withtype -> WITH NAMESPACE .)
    RSPAREN         reduce using rule 32 (withtype -> WITH NAMESPACE .)
    RPAREN          reduce using rule 32 (withtype -> WITH NAMESPACE .)
    TO              reduce using rule 32 (withtype -> WITH NAMESPACE .)
    STEP            reduce using rule 32 (withtype -> WITH NAMESPACE .)
    COLON           reduce using rule 32 (withtype -> WITH NAMESPACE .)


state 129

    (3) code -> statement terminator code .

    $end            reduce using rule 3 (code -> statement terminator code .)
    RBRACE          reduce using rule 3 (code -> statement terminator code .)


state 130

    (66) assignment -> assignment_code code RBRACE .

    SEMI_COLON      reduce using rule 66 (assignment -> assignment_code code RBRACE .)
    COMMA           reduce using rule 66 (assignment -> assignment_code code RBRACE .)
    $end            reduce using rule 66 (assignment -> assignment_code code RBRACE .)
    RBRACE          reduce using rule 66 (assignment -> assignment_code code RBRACE .)


state 131

    (67) assignment -> definition EQUAL primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 67 (assignment -> definition EQUAL primaryexp .)
    COMMA           reduce using rule 67 (assignment -> definition EQUAL primaryexp .)
    $end            reduce using rule 67 (assignment -> definition EQUAL primaryexp .)
    RBRACE          reduce using rule 67 (assignment -> definition EQUAL primaryexp .)
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 132

    (69) assignment_code -> definition EQUAL LBRACE .
    (96) bracedexp -> LBRACE . new_scope code RBRACE
    (97) new_scope -> .

  ! reduce/reduce conflict for NULAR_FNC resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for UNARY_FNC resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PLUS resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NOT resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAM resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for WITH resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    NULAR_FNC       reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    UNARY_FNC       reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    PLUS            reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    MINUS           reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    NOT             reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    SWITCH          reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    PRIVATE         reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    PRIVATE_ID      reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    GLOBAL_ID       reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    LPAREN          reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    NAMESPACE       reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    PARAM           reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    IF              reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    WHILE           reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    FOR             reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    LBRACE          reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_REAL     reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_EXP      reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_HEX      reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    LSPAREN         reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    STRING_SINGLE   reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    STRING_DOUBLE   reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    WITH            reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)
    RBRACE          reduce using rule 69 (assignment_code -> definition EQUAL LBRACE .)

  ! NULAR_FNC       [ reduce using rule 97 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 97 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 97 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 97 (new_scope -> .) ]
  ! NOT             [ reduce using rule 97 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 97 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 97 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 97 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 97 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 97 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 97 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 97 (new_scope -> .) ]
  ! IF              [ reduce using rule 97 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 97 (new_scope -> .) ]
  ! FOR             [ reduce using rule 97 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 97 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 97 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 97 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 97 (new_scope -> .) ]
  ! WITH            [ reduce using rule 97 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 97 (new_scope -> .) ]

    new_scope                      shift and go to state 111

state 133

    (78) binaryexp -> primaryexp BINARY_FNC primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    COMMA           reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    $end            reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    BINARY_FNC      reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GETVARIABLE     reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    SETVARIABLE     reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PARAM           reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    LT              reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GT              reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    LTE             reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GTE             reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    EQUALITY        reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    INEQUALITY      reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    AND             reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    OR              reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RBRACE          reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RSPAREN         reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RPAREN          reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    TO              reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    STEP            reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    DO              reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    COLON           reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

  ! PLUS            [ reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! MINUS           [ reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! TIMES           [ reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! DIVIDE          [ reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! MOD             [ reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! POW             [ reduce using rule 78 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 134

    (79) binaryexp -> primaryexp comparisonoperator primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    COMMA           reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    $end            reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    BINARY_FNC      reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GETVARIABLE     reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    SETVARIABLE     reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAM           reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LT              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GT              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LTE             reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GTE             reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    EQUALITY        reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    INEQUALITY      reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    AND             reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    OR              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RBRACE          reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RSPAREN         reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RPAREN          reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    TO              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    STEP            reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    DO              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    COLON           reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

  ! PLUS            [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MOD             [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! POW             [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 135

    (80) binaryexp -> primaryexp mathoperator primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    COMMA           reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    $end            reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    BINARY_FNC      reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    GETVARIABLE     reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    SETVARIABLE     reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    PARAM           reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    LT              reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    GT              reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    LTE             reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    GTE             reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    EQUALITY        reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    INEQUALITY      reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    AND             reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    OR              reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    RBRACE          reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    RSPAREN         reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    RPAREN          reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    TO              reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    STEP            reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    DO              reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    COLON           reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

  ! PLUS            [ reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! MOD             [ reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! POW             [ reduce using rule 80 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]

    mathoperator                   shift and go to state 68
    comparisonoperator             shift and go to state 67

state 136

    (48) getvariable_any -> primaryexp GETVARIABLE string .

    SEMI_COLON      reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    COMMA           reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    $end            reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    BINARY_FNC      reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    GETVARIABLE     reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    SETVARIABLE     reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    PARAM           reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    LT              reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    GT              reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    LTE             reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    GTE             reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    EQUALITY        reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    INEQUALITY      reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    AND             reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    OR              reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    PLUS            reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    MINUS           reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    TIMES           reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    DIVIDE          reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    MOD             reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    POW             reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    RBRACE          reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    RSPAREN         reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    RPAREN          reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    TO              reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    STEP            reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    DO              reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)
    COLON           reduce using rule 48 (getvariable_any -> primaryexp GETVARIABLE string .)


state 137

    (49) getvariable_any -> primaryexp GETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 165

state 138

    (52) setvariable_any -> primaryexp SETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN . string COMMA primaryexp COMMA booleanexp RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 166

state 139

    (59) param_binary -> primaryexp PARAM LSPAREN . number RSPAREN
    (60) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA array RSPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX

    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57

    number                         shift and go to state 167

state 140

    (68) assignment -> variable EQUAL primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 68 (assignment -> variable EQUAL primaryexp .)
    COMMA           reduce using rule 68 (assignment -> variable EQUAL primaryexp .)
    $end            reduce using rule 68 (assignment -> variable EQUAL primaryexp .)
    RBRACE          reduce using rule 68 (assignment -> variable EQUAL primaryexp .)
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 141

    (70) assignment_code -> variable EQUAL LBRACE .
    (96) bracedexp -> LBRACE . new_scope code RBRACE
    (97) new_scope -> .

  ! reduce/reduce conflict for NULAR_FNC resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for UNARY_FNC resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PLUS resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NOT resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAM resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for WITH resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    NULAR_FNC       reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    UNARY_FNC       reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    PLUS            reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    MINUS           reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    NOT             reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    SWITCH          reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    PRIVATE         reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    PRIVATE_ID      reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    GLOBAL_ID       reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    LPAREN          reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    NAMESPACE       reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    PARAM           reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    IF              reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    WHILE           reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    FOR             reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    LBRACE          reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_REAL     reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_EXP      reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_HEX      reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    LSPAREN         reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    STRING_SINGLE   reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    STRING_DOUBLE   reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    WITH            reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)
    RBRACE          reduce using rule 70 (assignment_code -> variable EQUAL LBRACE .)

  ! NULAR_FNC       [ reduce using rule 97 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 97 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 97 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 97 (new_scope -> .) ]
  ! NOT             [ reduce using rule 97 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 97 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 97 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 97 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 97 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 97 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 97 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 97 (new_scope -> .) ]
  ! IF              [ reduce using rule 97 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 97 (new_scope -> .) ]
  ! FOR             [ reduce using rule 97 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 97 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 97 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 97 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 97 (new_scope -> .) ]
  ! WITH            [ reduce using rule 97 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 97 (new_scope -> .) ]

    new_scope                      shift and go to state 111

state 142

    (29) ifstatement -> iftype THEN bracedexp .
    (31) ifstatement -> iftype THEN bracedexp . ELSE bracedexp

    SEMI_COLON      reduce using rule 29 (ifstatement -> iftype THEN bracedexp .)
    COMMA           reduce using rule 29 (ifstatement -> iftype THEN bracedexp .)
    $end            reduce using rule 29 (ifstatement -> iftype THEN bracedexp .)
    RBRACE          reduce using rule 29 (ifstatement -> iftype THEN bracedexp .)
    ELSE            shift and go to state 168


state 143

    (30) ifstatement -> iftype EXITWITH bracedexp .

    SEMI_COLON      reduce using rule 30 (ifstatement -> iftype EXITWITH bracedexp .)
    COMMA           reduce using rule 30 (ifstatement -> iftype EXITWITH bracedexp .)
    $end            reduce using rule 30 (ifstatement -> iftype EXITWITH bracedexp .)
    RBRACE          reduce using rule 30 (ifstatement -> iftype EXITWITH bracedexp .)


state 144

    (37) foreachloop -> bracedexp FOREACH array .
    (89) primaryexp -> array .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 37 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for $end resolved using rule 37 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (foreachloop -> bracedexp FOREACH array .)
    SEMI_COLON      reduce using rule 37 (foreachloop -> bracedexp FOREACH array .)
    COMMA           reduce using rule 37 (foreachloop -> bracedexp FOREACH array .)
    $end            reduce using rule 37 (foreachloop -> bracedexp FOREACH array .)
    RBRACE          reduce using rule 37 (foreachloop -> bracedexp FOREACH array .)
    BINARY_FNC      reduce using rule 89 (primaryexp -> array .)
    GETVARIABLE     reduce using rule 89 (primaryexp -> array .)
    SETVARIABLE     reduce using rule 89 (primaryexp -> array .)
    PARAM           reduce using rule 89 (primaryexp -> array .)
    LT              reduce using rule 89 (primaryexp -> array .)
    GT              reduce using rule 89 (primaryexp -> array .)
    LTE             reduce using rule 89 (primaryexp -> array .)
    GTE             reduce using rule 89 (primaryexp -> array .)
    EQUALITY        reduce using rule 89 (primaryexp -> array .)
    INEQUALITY      reduce using rule 89 (primaryexp -> array .)
    AND             reduce using rule 89 (primaryexp -> array .)
    OR              reduce using rule 89 (primaryexp -> array .)
    PLUS            reduce using rule 89 (primaryexp -> array .)
    MINUS           reduce using rule 89 (primaryexp -> array .)
    TIMES           reduce using rule 89 (primaryexp -> array .)
    DIVIDE          reduce using rule 89 (primaryexp -> array .)
    MOD             reduce using rule 89 (primaryexp -> array .)
    POW             reduce using rule 89 (primaryexp -> array .)

  ! SEMI_COLON      [ reduce using rule 89 (primaryexp -> array .) ]
  ! COMMA           [ reduce using rule 89 (primaryexp -> array .) ]
  ! $end            [ reduce using rule 89 (primaryexp -> array .) ]
  ! RBRACE          [ reduce using rule 89 (primaryexp -> array .) ]


state 145

    (38) foreachloop -> bracedexp FOREACH primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    SEMI_COLON      reduce using rule 38 (foreachloop -> bracedexp FOREACH primaryexp .)
    COMMA           reduce using rule 38 (foreachloop -> bracedexp FOREACH primaryexp .)
    $end            reduce using rule 38 (foreachloop -> bracedexp FOREACH primaryexp .)
    RBRACE          reduce using rule 38 (foreachloop -> bracedexp FOREACH primaryexp .)
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 146

    (36) whileloop -> whiletype DO bracedexp .

    SEMI_COLON      reduce using rule 36 (whileloop -> whiletype DO bracedexp .)
    COMMA           reduce using rule 36 (whileloop -> whiletype DO bracedexp .)
    $end            reduce using rule 36 (whileloop -> whiletype DO bracedexp .)
    RBRACE          reduce using rule 36 (whileloop -> whiletype DO bracedexp .)


state 147

    (42) forloop -> fortype DO bracedexp_noscope .

    SEMI_COLON      reduce using rule 42 (forloop -> fortype DO bracedexp_noscope .)
    COMMA           reduce using rule 42 (forloop -> fortype DO bracedexp_noscope .)
    $end            reduce using rule 42 (forloop -> fortype DO bracedexp_noscope .)
    RBRACE          reduce using rule 42 (forloop -> fortype DO bracedexp_noscope .)


state 148

    (45) bracedexp_noscope -> LBRACE . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (138) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (66) assignment -> . assignment_code code RBRACE
    (67) assignment -> . definition EQUAL primaryexp
    (68) assignment -> . variable EQUAL primaryexp
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (29) ifstatement -> . iftype THEN bracedexp
    (30) ifstatement -> . iftype EXITWITH bracedexp
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (36) whileloop -> . whiletype DO bracedexp
    (42) forloop -> . fortype DO bracedexp_noscope
    (34) withstatement -> . withstatementinit bracedexp
    (37) foreachloop -> . bracedexp FOREACH array
    (38) foreachloop -> . bracedexp FOREACH primaryexp
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (69) assignment_code -> . definition EQUAL LBRACE
    (70) assignment_code -> . variable EQUAL LBRACE
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (76) variable -> . PRIVATE_ID
    (77) variable -> . GLOBAL_ID
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withstatementinit -> . withtype DO
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (71) arraydefinition -> . PRIVATE stringarray
    (32) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 138 (empty -> .)
    NULAR_FNC       shift and go to state 24
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    SWITCH          shift and go to state 38
    PRIVATE         shift and go to state 41
    PRIVATE_ID      shift and go to state 42
    GLOBAL_ID       shift and go to state 44
    LPAREN          shift and go to state 39
    NAMESPACE       shift and go to state 47
    PARAM           shift and go to state 49
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    LBRACE          shift and go to state 40
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    WITH            shift and go to state 60

    code                           shift and go to state 169
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    identifier                     shift and go to state 25
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    iftype                         shift and go to state 32
    bracedexp                      shift and go to state 33
    whiletype                      shift and go to state 34
    fortype                        shift and go to state 35
    withstatementinit              shift and go to state 36
    array                          shift and go to state 37
    string                         shift and go to state 43
    number                         shift and go to state 45
    helpertype                     shift and go to state 46
    arraydefinition                shift and go to state 50
    withtype                       shift and go to state 54

state 149

    (24) switchstatement -> SWITCH LPAREN primaryexp . RPAREN DO LBRACE switchbody RBRACE
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RPAREN          shift and go to state 170
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 150

    (95) primaryexp -> LPAREN binaryexp RPAREN .

    BINARY_FNC      reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    GETVARIABLE     reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    SETVARIABLE     reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    PARAM           reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    LT              reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    GT              reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    LTE             reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    GTE             reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    EQUALITY        reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    INEQUALITY      reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    AND             reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    OR              reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    PLUS            reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    MINUS           reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    TIMES           reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    DIVIDE          reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    MOD             reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    POW             reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    SEMI_COLON      reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    COMMA           reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    $end            reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    RBRACE          reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    RSPAREN         reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    RPAREN          reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    TO              reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    STEP            reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    DO              reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)
    COLON           reduce using rule 95 (primaryexp -> LPAREN binaryexp RPAREN .)


state 151

    (96) bracedexp -> LBRACE new_scope code . RBRACE

    RBRACE          shift and go to state 171


state 152

    (102) stringarray -> LSPAREN RSPAREN .

    SEMI_COLON      reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    $end            reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    BINARY_FNC      reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    LT              reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    GT              reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    LTE             reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    GTE             reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    AND             reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    OR              reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    MOD             reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    POW             reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    TO              reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    STEP            reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    DO              reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)
    COLON           reduce using rule 102 (stringarray -> LSPAREN RSPAREN .)


state 153

    (103) stringarray -> LSPAREN stringarrayelement . RSPAREN

    RSPAREN         shift and go to state 172


state 154

    (104) stringarrayelement -> string .
    (105) stringarrayelement -> string . COMMA stringarrayelement

    RSPAREN         reduce using rule 104 (stringarrayelement -> string .)
    COMMA           shift and go to state 173


state 155

    (46) getvariable_ns -> NAMESPACE GETVARIABLE string .

    SEMI_COLON      reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    COMMA           reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    $end            reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    BINARY_FNC      reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GETVARIABLE     reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    SETVARIABLE     reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PARAM           reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    LT              reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GT              reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    LTE             reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GTE             reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    EQUALITY        reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    INEQUALITY      reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    AND             reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    OR              reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PLUS            reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    MINUS           reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    TIMES           reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    DIVIDE          reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    MOD             reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    POW             reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RBRACE          reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RSPAREN         reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RPAREN          reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    TO              reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    STEP            reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    DO              reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    COLON           reduce using rule 46 (getvariable_ns -> NAMESPACE GETVARIABLE string .)


state 156

    (47) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 174

state 157

    (50) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN . string COMMA primaryexp COMMA booleanexp RSPAREN
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 175

state 158

    (99) array -> LSPAREN arrayelement RSPAREN .

    BINARY_FNC      reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    GETVARIABLE     reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    SETVARIABLE     reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    PARAM           reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    LT              reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    GT              reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    LTE             reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    GTE             reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    EQUALITY        reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    INEQUALITY      reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    AND             reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    OR              reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    PLUS            reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    MINUS           reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    TIMES           reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    DIVIDE          reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    MOD             reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    POW             reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    SEMI_COLON      reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    COMMA           reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    $end            reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    RBRACE          reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    RSPAREN         reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    RPAREN          reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    TO              reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    STEP            reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    DO              reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)
    COLON           reduce using rule 99 (array -> LSPAREN arrayelement RSPAREN .)


state 159

    (101) arrayelement -> primaryexp COMMA . arrayelement
    (100) arrayelement -> . primaryexp
    (101) arrayelement -> . primaryexp COMMA arrayelement
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 120
    arrayelement                   shift and go to state 176
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 160

    (54) param_unaray -> PARAM LSPAREN number . RSPAREN
    (55) param_unaray -> PARAM LSPAREN number . COMMA primaryexp RSPAREN
    (56) param_unaray -> PARAM LSPAREN number . COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA array RSPAREN

    RSPAREN         shift and go to state 177
    COMMA           shift and go to state 178


state 161

    (43) forloop_condition -> LBRACE booleanexp . RBRACE

    RBRACE          shift and go to state 179


state 162

    (128) booleanexp -> primaryexp .
    (129) booleanexp -> primaryexp . comparisonoperator booleanexp
    (130) booleanexp -> primaryexp . comparisonoperator LBRACE booleanexp RBRACE
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RBRACE          reduce using rule 128 (booleanexp -> primaryexp .)
    RSPAREN         reduce using rule 128 (booleanexp -> primaryexp .)
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 180
    mathoperator                   shift and go to state 68

state 163

    (39) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp
    (40) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp STEP primaryexp

    FROM            shift and go to state 181


state 164

    (41) fortype -> FOR new_scope LSPAREN . bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (45) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 148

    bracedexp_noscope              shift and go to state 182

state 165

    (49) getvariable_any -> primaryexp GETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN

    COMMA           shift and go to state 183


state 166

    (52) setvariable_any -> primaryexp SETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN string . COMMA primaryexp COMMA booleanexp RSPAREN

    COMMA           shift and go to state 184


state 167

    (59) param_binary -> primaryexp PARAM LSPAREN number . RSPAREN
    (60) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA array RSPAREN

    RSPAREN         shift and go to state 185
    COMMA           shift and go to state 186


state 168

    (31) ifstatement -> iftype THEN bracedexp ELSE . bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 187

state 169

    (45) bracedexp_noscope -> LBRACE code . RBRACE

    RBRACE          shift and go to state 188


state 170

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN . DO LBRACE switchbody RBRACE

    DO              shift and go to state 189


state 171

    (96) bracedexp -> LBRACE new_scope code RBRACE .

    FOREACH         reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    BINARY_FNC      reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    GETVARIABLE     reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    SETVARIABLE     reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    PARAM           reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    LT              reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    GT              reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    LTE             reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    GTE             reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    EQUALITY        reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    INEQUALITY      reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    AND             reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    OR              reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    PLUS            reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    MINUS           reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    TIMES           reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    DIVIDE          reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    MOD             reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    POW             reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    SEMI_COLON      reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    COMMA           reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    $end            reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    RBRACE          reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    RSPAREN         reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    RPAREN          reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    TO              reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    STEP            reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    DO              reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    COLON           reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)
    ELSE            reduce using rule 96 (bracedexp -> LBRACE new_scope code RBRACE .)


state 172

    (103) stringarray -> LSPAREN stringarrayelement RSPAREN .

    SEMI_COLON      reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    COMMA           reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    $end            reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    BINARY_FNC      reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GETVARIABLE     reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    SETVARIABLE     reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PARAM           reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    LT              reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GT              reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    LTE             reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GTE             reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    EQUALITY        reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    INEQUALITY      reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    AND             reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    OR              reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PLUS            reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    MINUS           reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    TIMES           reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    DIVIDE          reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    MOD             reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    POW             reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RBRACE          reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RSPAREN         reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RPAREN          reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    TO              reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    STEP            reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    DO              reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    COLON           reduce using rule 103 (stringarray -> LSPAREN stringarrayelement RSPAREN .)


state 173

    (105) stringarrayelement -> string COMMA . stringarrayelement
    (104) stringarrayelement -> . string
    (105) stringarrayelement -> . string COMMA stringarrayelement
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 154
    stringarrayelement             shift and go to state 190

state 174

    (47) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN

    COMMA           shift and go to state 191


state 175

    (50) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN
    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string . COMMA primaryexp COMMA booleanexp RSPAREN

    COMMA           shift and go to state 192


state 176

    (101) arrayelement -> primaryexp COMMA arrayelement .

    RSPAREN         reduce using rule 101 (arrayelement -> primaryexp COMMA arrayelement .)


state 177

    (54) param_unaray -> PARAM LSPAREN number RSPAREN .

    SEMI_COLON      reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    COMMA           reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    $end            reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    BINARY_FNC      reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    GETVARIABLE     reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    SETVARIABLE     reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    PARAM           reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    LT              reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    GT              reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    LTE             reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    GTE             reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    EQUALITY        reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    INEQUALITY      reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    AND             reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    OR              reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    PLUS            reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    MINUS           reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    TIMES           reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    DIVIDE          reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    MOD             reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    POW             reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    RBRACE          reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    RSPAREN         reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    RPAREN          reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    TO              reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    STEP            reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    DO              reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)
    COLON           reduce using rule 54 (param_unaray -> PARAM LSPAREN number RSPAREN .)


state 178

    (55) param_unaray -> PARAM LSPAREN number COMMA . primaryexp RSPAREN
    (56) param_unaray -> PARAM LSPAREN number COMMA . primaryexp COMMA array RSPAREN
    (57) param_unaray -> PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA array RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    number                         shift and go to state 45
    primaryexp                     shift and go to state 193
    array                          shift and go to state 37
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 179

    (43) forloop_condition -> LBRACE booleanexp RBRACE .

    THEN            reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    EXITWITH        reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    BINARY_FNC      reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    GETVARIABLE     reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    SETVARIABLE     reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    PARAM           reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    LT              reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    GT              reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    LTE             reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    GTE             reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    EQUALITY        reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    INEQUALITY      reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    AND             reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    OR              reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    PLUS            reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    MINUS           reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    TIMES           reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    DIVIDE          reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    MOD             reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    POW             reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    SEMI_COLON      reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    COMMA           reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    $end            reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    RBRACE          reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    RSPAREN         reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    RPAREN          reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    TO              reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    STEP            reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    DO              reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)
    COLON           reduce using rule 43 (forloop_condition -> LBRACE booleanexp RBRACE .)


state 180

    (129) booleanexp -> primaryexp comparisonoperator . booleanexp
    (130) booleanexp -> primaryexp comparisonoperator . LBRACE booleanexp RBRACE
    (79) binaryexp -> primaryexp comparisonoperator . primaryexp
    (128) booleanexp -> . primaryexp
    (129) booleanexp -> . primaryexp comparisonoperator booleanexp
    (130) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 196
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 194
    booleanexp                     shift and go to state 195
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 181

    (39) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp
    (40) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp STEP primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    string                         shift and go to state 43
    primaryexp                     shift and go to state 197
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 182

    (41) fortype -> FOR new_scope LSPAREN bracedexp_noscope . COMMA forloop_condition COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 198


state 183

    (49) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 199
    string                         shift and go to state 43
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 184

    (52) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA . primaryexp COMMA booleanexp RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 200
    string                         shift and go to state 43
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 185

    (59) param_binary -> primaryexp PARAM LSPAREN number RSPAREN .

    SEMI_COLON      reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    COMMA           reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    $end            reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    BINARY_FNC      reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GETVARIABLE     reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    SETVARIABLE     reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PARAM           reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    LT              reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GT              reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    LTE             reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GTE             reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    EQUALITY        reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    INEQUALITY      reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    AND             reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    OR              reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PLUS            reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    MINUS           reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    TIMES           reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    DIVIDE          reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    MOD             reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    POW             reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RBRACE          reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RSPAREN         reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RPAREN          reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    TO              reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    STEP            reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    DO              reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    COLON           reduce using rule 59 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)


state 186

    (60) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp RSPAREN
    (61) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA array RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 201
    number                         shift and go to state 45
    array                          shift and go to state 37
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 187

    (31) ifstatement -> iftype THEN bracedexp ELSE bracedexp .

    SEMI_COLON      reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    COMMA           reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    $end            reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    RBRACE          reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)


state 188

    (45) bracedexp_noscope -> LBRACE code RBRACE .

    SEMI_COLON      reduce using rule 45 (bracedexp_noscope -> LBRACE code RBRACE .)
    COMMA           reduce using rule 45 (bracedexp_noscope -> LBRACE code RBRACE .)
    $end            reduce using rule 45 (bracedexp_noscope -> LBRACE code RBRACE .)
    RBRACE          reduce using rule 45 (bracedexp_noscope -> LBRACE code RBRACE .)
    RSPAREN         reduce using rule 45 (bracedexp_noscope -> LBRACE code RBRACE .)


state 189

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO . LBRACE switchbody RBRACE

    LBRACE          shift and go to state 202


state 190

    (105) stringarrayelement -> string COMMA stringarrayelement .

    RSPAREN         reduce using rule 105 (stringarrayelement -> string COMMA stringarrayelement .)


state 191

    (47) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    string                         shift and go to state 43
    primaryexp                     shift and go to state 203
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 192

    (50) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA . primaryexp COMMA booleanexp RSPAREN
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    string                         shift and go to state 43
    primaryexp                     shift and go to state 204
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 193

    (55) param_unaray -> PARAM LSPAREN number COMMA primaryexp . RSPAREN
    (56) param_unaray -> PARAM LSPAREN number COMMA primaryexp . COMMA array RSPAREN
    (57) param_unaray -> PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA number RSPAREN
    (58) param_unaray -> PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA array RSPAREN
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         shift and go to state 206
    COMMA           shift and go to state 205
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 194

    (79) binaryexp -> primaryexp comparisonoperator primaryexp .
    (128) booleanexp -> primaryexp .
    (129) booleanexp -> primaryexp . comparisonoperator booleanexp
    (130) booleanexp -> primaryexp . comparisonoperator LBRACE booleanexp RBRACE
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

  ! reduce/reduce conflict for RBRACE resolved using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    BINARY_FNC      reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GETVARIABLE     reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    SETVARIABLE     reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAM           reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LT              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GT              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LTE             reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GTE             reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    EQUALITY        reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    INEQUALITY      reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    AND             reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    OR              reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RBRACE          reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RSPAREN         reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

  ! PLUS            [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MOD             [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! POW             [ reduce using rule 79 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! RBRACE          [ reduce using rule 128 (booleanexp -> primaryexp .) ]
  ! RSPAREN         [ reduce using rule 128 (booleanexp -> primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 66 ]
  ! GETVARIABLE     [ shift and go to state 69 ]
  ! SETVARIABLE     [ shift and go to state 70 ]
  ! PARAM           [ shift and go to state 71 ]
  ! LT              [ shift and go to state 72 ]
  ! GT              [ shift and go to state 73 ]
  ! LTE             [ shift and go to state 74 ]
  ! GTE             [ shift and go to state 75 ]
  ! EQUALITY        [ shift and go to state 76 ]
  ! INEQUALITY      [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]

    comparisonoperator             shift and go to state 180
    mathoperator                   shift and go to state 68

state 195

    (129) booleanexp -> primaryexp comparisonoperator booleanexp .

    RBRACE          reduce using rule 129 (booleanexp -> primaryexp comparisonoperator booleanexp .)
    RSPAREN         reduce using rule 129 (booleanexp -> primaryexp comparisonoperator booleanexp .)


state 196

    (130) booleanexp -> primaryexp comparisonoperator LBRACE . booleanexp RBRACE
    (96) bracedexp -> LBRACE . new_scope code RBRACE
    (128) booleanexp -> . primaryexp
    (129) booleanexp -> . primaryexp comparisonoperator booleanexp
    (130) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (97) new_scope -> .
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER_REAL resolved as shift
  ! shift/reduce conflict for NUMBER_EXP resolved as shift
  ! shift/reduce conflict for NUMBER_HEX resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
  ! shift/reduce conflict for UNARY_FNC resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULAR_FNC resolved as shift
  ! shift/reduce conflict for STRING_SINGLE resolved as shift
  ! shift/reduce conflict for STRING_DOUBLE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    SWITCH          reduce using rule 97 (new_scope -> .)
    RBRACE          reduce using rule 97 (new_scope -> .)
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

  ! NULAR_FNC       [ reduce using rule 97 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 97 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 97 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 97 (new_scope -> .) ]
  ! NOT             [ reduce using rule 97 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 97 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 97 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 97 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 97 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 97 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 97 (new_scope -> .) ]
  ! IF              [ reduce using rule 97 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 97 (new_scope -> .) ]
  ! FOR             [ reduce using rule 97 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 97 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 97 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 97 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 97 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 97 (new_scope -> .) ]
  ! WITH            [ reduce using rule 97 (new_scope -> .) ]

    primaryexp                     shift and go to state 162
    booleanexp                     shift and go to state 207
    new_scope                      shift and go to state 111
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 197

    (39) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp
    (40) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp STEP primaryexp
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    TO              shift and go to state 208
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 198

    (41) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA . forloop_condition COMMA bracedexp_noscope RSPAREN
    (43) forloop_condition -> . LBRACE booleanexp RBRACE
    (44) forloop_condition -> . identifier
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 123
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94

    forloop_condition              shift and go to state 209
    identifier                     shift and go to state 124

state 199

    (49) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         shift and go to state 210
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 200

    (52) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp . COMMA booleanexp RSPAREN
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         shift and go to state 212
    COMMA           shift and go to state 211
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 201

    (60) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . RSPAREN
    (61) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA array RSPAREN
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         shift and go to state 214
    COMMA           shift and go to state 213
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 202

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE . switchbody RBRACE
    (25) switchbody -> . empty
    (26) switchbody -> . case
    (27) switchbody -> . case terminator switchbody
    (138) empty -> .
    (21) case -> . CASE primaryexp COLON bracedexp
    (22) case -> . CASE primaryexp
    (23) case -> . DEFAULT bracedexp

    RBRACE          reduce using rule 138 (empty -> .)
    CASE            shift and go to state 218
    DEFAULT         shift and go to state 219

    switchbody                     shift and go to state 215
    empty                          shift and go to state 216
    case                           shift and go to state 217

state 203

    (47) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         shift and go to state 220
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 204

    (50) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp . COMMA booleanexp RSPAREN
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    RSPAREN         shift and go to state 222
    COMMA           shift and go to state 221
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 205

    (56) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA . array RSPAREN
    (57) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA number RSPAREN
    (58) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA array RSPAREN
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 48

    array                          shift and go to state 223

state 206

    (55) param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    $end            reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LT              reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GT              reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    AND             reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    OR              reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    POW             reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TO              reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DO              reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 55 (param_unaray -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)


state 207

    (130) booleanexp -> primaryexp comparisonoperator LBRACE booleanexp . RBRACE

    RBRACE          shift and go to state 224


state 208

    (39) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp
    (40) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp STEP primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    string                         shift and go to state 43
    primaryexp                     shift and go to state 225
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 209

    (41) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition . COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 226


state 210

    (49) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 49 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 211

    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA . booleanexp RSPAREN
    (128) booleanexp -> . primaryexp
    (129) booleanexp -> . primaryexp comparisonoperator booleanexp
    (130) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 162
    string                         shift and go to state 43
    booleanexp                     shift and go to state 227
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 212

    (52) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 52 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 213

    (61) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA array RSPAREN
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 48

    array                          shift and go to state 228

state 214

    (60) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    $end            reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LT              reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GT              reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    AND             reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    OR              reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    POW             reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TO              reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DO              reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 60 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)


state 215

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody . RBRACE

    RBRACE          shift and go to state 229


state 216

    (25) switchbody -> empty .

    RBRACE          reduce using rule 25 (switchbody -> empty .)


state 217

    (26) switchbody -> case .
    (27) switchbody -> case . terminator switchbody
    (9) terminator -> . SEMI_COLON
    (10) terminator -> . COMMA

    RBRACE          reduce using rule 26 (switchbody -> case .)
    SEMI_COLON      shift and go to state 62
    COMMA           shift and go to state 63

    terminator                     shift and go to state 230

state 218

    (21) case -> CASE . primaryexp COLON bracedexp
    (22) case -> CASE . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    primaryexp                     shift and go to state 231
    bracedexp                      shift and go to state 92
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    string                         shift and go to state 43
    binaryexp                      shift and go to state 91
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 219

    (23) case -> DEFAULT . bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 232

state 220

    (47) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 47 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 221

    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA . booleanexp RSPAREN
    (128) booleanexp -> . primaryexp
    (129) booleanexp -> . primaryexp comparisonoperator booleanexp
    (130) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    string                         shift and go to state 43
    primaryexp                     shift and go to state 162
    booleanexp                     shift and go to state 233
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 222

    (50) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 50 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 223

    (56) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array . RSPAREN
    (57) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA number RSPAREN
    (58) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 235
    COMMA           shift and go to state 234


state 224

    (130) booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .

    RBRACE          reduce using rule 130 (booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .)
    RSPAREN         reduce using rule 130 (booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .)


state 225

    (39) fortype -> FOR new_scope string FROM primaryexp TO primaryexp .
    (40) fortype -> FOR new_scope string FROM primaryexp TO primaryexp . STEP primaryexp
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

  ! shift/reduce conflict for STEP resolved as shift
  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    DO              reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    SEMI_COLON      reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COMMA           reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    $end            reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RBRACE          reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RSPAREN         reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RPAREN          reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    TO              reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COLON           reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    STEP            shift and go to state 236
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

  ! BINARY_FNC      [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PARAM           [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! LT              [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GT              [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! LTE             [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GTE             [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! EQUALITY        [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! AND             [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! OR              [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PLUS            [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! MINUS           [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! TIMES           [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! DIVIDE          [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! MOD             [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! POW             [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! STEP            [ reduce using rule 39 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 226

    (41) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA . bracedexp_noscope RSPAREN
    (45) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 148

    bracedexp_noscope              shift and go to state 237

state 227

    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp . RSPAREN

    RSPAREN         shift and go to state 238


state 228

    (61) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 240
    COMMA           shift and go to state 239


state 229

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .

    SEMI_COLON      reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    COMMA           reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    $end            reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    RBRACE          reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)


state 230

    (27) switchbody -> case terminator . switchbody
    (25) switchbody -> . empty
    (26) switchbody -> . case
    (27) switchbody -> . case terminator switchbody
    (138) empty -> .
    (21) case -> . CASE primaryexp COLON bracedexp
    (22) case -> . CASE primaryexp
    (23) case -> . DEFAULT bracedexp

    RBRACE          reduce using rule 138 (empty -> .)
    CASE            shift and go to state 218
    DEFAULT         shift and go to state 219

    case                           shift and go to state 217
    switchbody                     shift and go to state 241
    empty                          shift and go to state 216

state 231

    (21) case -> CASE primaryexp . COLON bracedexp
    (22) case -> CASE primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

    COLON           shift and go to state 242
    SEMI_COLON      reduce using rule 22 (case -> CASE primaryexp .)
    COMMA           reduce using rule 22 (case -> CASE primaryexp .)
    RBRACE          reduce using rule 22 (case -> CASE primaryexp .)
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 232

    (23) case -> DEFAULT bracedexp .

    SEMI_COLON      reduce using rule 23 (case -> DEFAULT bracedexp .)
    COMMA           reduce using rule 23 (case -> DEFAULT bracedexp .)
    RBRACE          reduce using rule 23 (case -> DEFAULT bracedexp .)


state 233

    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp . RSPAREN

    RSPAREN         shift and go to state 243


state 234

    (57) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . number RSPAREN
    (58) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . array RSPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48

    number                         shift and go to state 244
    array                          shift and go to state 245

state 235

    (56) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COMMA           reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    $end            reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAM           reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LT              reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GT              reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LTE             reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GTE             reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    EQUALITY        reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    AND             reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    OR              reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PLUS            reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MINUS           reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TIMES           reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DIVIDE          reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MOD             reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    POW             reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RBRACE          reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RPAREN          reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TO              reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    STEP            reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DO              reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COLON           reduce using rule 56 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)


state 236

    (40) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP . primaryexp
    (86) primaryexp -> . number
    (87) primaryexp -> . identifier
    (88) primaryexp -> . helpertype
    (89) primaryexp -> . array
    (90) primaryexp -> . unaryexp
    (91) primaryexp -> . nularexp
    (92) primaryexp -> . string
    (93) primaryexp -> . binaryexp
    (94) primaryexp -> . bracedexp
    (95) primaryexp -> . LPAREN binaryexp RPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (74) identifier -> . PRIVATE_ID
    (75) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN
    (108) unaryexp -> . UNARY_FNC primaryexp
    (109) unaryexp -> . PLUS primaryexp
    (110) unaryexp -> . MINUS primaryexp
    (111) unaryexp -> . NOT primaryexp
    (112) unaryexp -> . vardefinition
    (113) unaryexp -> . param_unaray
    (106) nularexp -> . NULAR_FNC
    (107) nularexp -> . identifier
    (136) string -> . STRING_SINGLE
    (137) string -> . STRING_DOUBLE
    (78) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (79) binaryexp -> . primaryexp comparisonoperator primaryexp
    (80) binaryexp -> . primaryexp mathoperator primaryexp
    (81) binaryexp -> . getvariable_ns
    (82) binaryexp -> . getvariable_any
    (83) binaryexp -> . setvariable_ns
    (84) binaryexp -> . setvariable_any
    (85) binaryexp -> . param_binary
    (96) bracedexp -> . LBRACE new_scope code RBRACE
    (28) iftype -> . IF forloop_condition
    (35) whiletype -> . WHILE forloop_condition
    (39) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (40) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (41) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (32) withtype -> . WITH NAMESPACE
    (64) vardefinition -> . definition
    (65) vardefinition -> . arraydefinition
    (54) param_unaray -> . PARAM LSPAREN number RSPAREN
    (55) param_unaray -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (56) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (57) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (58) param_unaray -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (46) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (47) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (48) getvariable_any -> . primaryexp GETVARIABLE string
    (49) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (52) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (60) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (72) definition -> . PRIVATE PRIVATE_ID
    (73) definition -> . PRIVATE string
    (71) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    PRIVATE_ID      shift and go to state 93
    GLOBAL_ID       shift and go to state 94
    LSPAREN         shift and go to state 48
    UNARY_FNC       shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    NULAR_FNC       shift and go to state 24
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 40
    IF              shift and go to state 51
    WHILE           shift and go to state 52
    FOR             shift and go to state 53
    WITH            shift and go to state 60
    PARAM           shift and go to state 49
    NAMESPACE       shift and go to state 47
    PRIVATE         shift and go to state 41

    string                         shift and go to state 43
    primaryexp                     shift and go to state 246
    number                         shift and go to state 45
    identifier                     shift and go to state 88
    helpertype                     shift and go to state 46
    array                          shift and go to state 37
    unaryexp                       shift and go to state 89
    nularexp                       shift and go to state 90
    binaryexp                      shift and go to state 91
    bracedexp                      shift and go to state 92
    iftype                         shift and go to state 95
    whiletype                      shift and go to state 96
    fortype                        shift and go to state 97
    withtype                       shift and go to state 98
    vardefinition                  shift and go to state 30
    param_unaray                   shift and go to state 31
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    definition                     shift and go to state 99
    arraydefinition                shift and go to state 50

state 237

    (41) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope . RSPAREN

    RSPAREN         shift and go to state 247


state 238

    (53) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .

    SEMI_COLON      reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COMMA           reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    $end            reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    BINARY_FNC      reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GETVARIABLE     reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    SETVARIABLE     reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAM           reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LT              reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GT              reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LTE             reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GTE             reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    EQUALITY        reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    INEQUALITY      reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    AND             reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    OR              reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PLUS            reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MINUS           reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TIMES           reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DIVIDE          reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MOD             reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    POW             reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RBRACE          reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RSPAREN         reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RPAREN          reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TO              reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    STEP            reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DO              reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COLON           reduce using rule 53 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)


state 239

    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . array RSPAREN
    (133) number -> . NUMBER_REAL
    (134) number -> . NUMBER_EXP
    (135) number -> . NUMBER_HEX
    (98) array -> . LSPAREN RSPAREN
    (99) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 55
    NUMBER_EXP      shift and go to state 56
    NUMBER_HEX      shift and go to state 57
    LSPAREN         shift and go to state 48

    number                         shift and go to state 248
    array                          shift and go to state 249

state 240

    (61) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COMMA           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    $end            reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAM           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LT              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GT              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LTE             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GTE             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    EQUALITY        reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    AND             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    OR              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PLUS            reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MINUS           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TIMES           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DIVIDE          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MOD             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    POW             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RBRACE          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RPAREN          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TO              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    STEP            reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DO              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COLON           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)


state 241

    (27) switchbody -> case terminator switchbody .

    RBRACE          reduce using rule 27 (switchbody -> case terminator switchbody .)


state 242

    (21) case -> CASE primaryexp COLON . bracedexp
    (96) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 40

    bracedexp                      shift and go to state 250

state 243

    (51) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .

    SEMI_COLON      reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COMMA           reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    $end            reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    BINARY_FNC      reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GETVARIABLE     reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    SETVARIABLE     reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAM           reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LT              reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GT              reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LTE             reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GTE             reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    EQUALITY        reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    INEQUALITY      reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    AND             reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    OR              reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PLUS            reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MINUS           reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TIMES           reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DIVIDE          reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MOD             reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    POW             reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RBRACE          reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RSPAREN         reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RPAREN          reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TO              reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    STEP            reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DO              reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COLON           reduce using rule 51 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)


state 244

    (57) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 251


state 245

    (58) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 252


state 246

    (40) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .
    (78) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (79) binaryexp -> primaryexp . comparisonoperator primaryexp
    (80) binaryexp -> primaryexp . mathoperator primaryexp
    (48) getvariable_any -> primaryexp . GETVARIABLE string
    (49) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (59) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (60) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (114) comparisonoperator -> . LT
    (115) comparisonoperator -> . GT
    (116) comparisonoperator -> . LTE
    (117) comparisonoperator -> . GTE
    (118) comparisonoperator -> . EQUALITY
    (119) comparisonoperator -> . INEQUALITY
    (120) comparisonoperator -> . AND
    (121) comparisonoperator -> . OR
    (122) mathoperator -> . PLUS
    (123) mathoperator -> . MINUS
    (124) mathoperator -> . TIMES
    (125) mathoperator -> . DIVIDE
    (126) mathoperator -> . MOD
    (127) mathoperator -> . POW

  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    DO              reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    SEMI_COLON      reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COMMA           reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    $end            reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RBRACE          reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RSPAREN         reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RPAREN          reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    TO              reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    STEP            reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COLON           reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    BINARY_FNC      shift and go to state 66
    GETVARIABLE     shift and go to state 69
    SETVARIABLE     shift and go to state 70
    PARAM           shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LTE             shift and go to state 74
    GTE             shift and go to state 75
    EQUALITY        shift and go to state 76
    INEQUALITY      shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    MOD             shift and go to state 84
    POW             shift and go to state 85

  ! BINARY_FNC      [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PARAM           [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! LT              [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GT              [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! LTE             [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GTE             [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! EQUALITY        [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! AND             [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! OR              [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PLUS            [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! MINUS           [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! TIMES           [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! DIVIDE          [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! MOD             [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! POW             [ reduce using rule 40 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]

    comparisonoperator             shift and go to state 67
    mathoperator                   shift and go to state 68

state 247

    (41) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .

    DO              reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    BINARY_FNC      reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    GETVARIABLE     reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    SETVARIABLE     reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    PARAM           reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    LT              reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    GT              reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    LTE             reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    GTE             reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    EQUALITY        reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    INEQUALITY      reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    AND             reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    OR              reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    PLUS            reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    MINUS           reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    TIMES           reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    DIVIDE          reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    MOD             reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    POW             reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    SEMI_COLON      reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    COMMA           reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    $end            reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    RBRACE          reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    RSPAREN         reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    RPAREN          reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    TO              reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    STEP            reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    COLON           reduce using rule 41 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)


state 248

    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 253


state 249

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 254


state 250

    (21) case -> CASE primaryexp COLON bracedexp .

    SEMI_COLON      reduce using rule 21 (case -> CASE primaryexp COLON bracedexp .)
    COMMA           reduce using rule 21 (case -> CASE primaryexp COLON bracedexp .)
    RBRACE          reduce using rule 21 (case -> CASE primaryexp COLON bracedexp .)


state 251

    (57) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .

    SEMI_COLON      reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COMMA           reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    $end            reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    BINARY_FNC      reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GETVARIABLE     reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    SETVARIABLE     reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAM           reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LT              reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GT              reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LTE             reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GTE             reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    EQUALITY        reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    INEQUALITY      reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    AND             reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    OR              reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PLUS            reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MINUS           reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TIMES           reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DIVIDE          reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MOD             reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    POW             reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RBRACE          reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RPAREN          reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TO              reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    STEP            reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DO              reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COLON           reduce using rule 57 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)


state 252

    (58) param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COMMA           reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    $end            reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAM           reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LT              reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GT              reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LTE             reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GTE             reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    EQUALITY        reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    AND             reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    OR              reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PLUS            reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MINUS           reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TIMES           reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DIVIDE          reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MOD             reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    POW             reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RBRACE          reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RPAREN          reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TO              reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    STEP            reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DO              reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COLON           reduce using rule 58 (param_unaray -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 253

    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .

    SEMI_COLON      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COMMA           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    $end            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    BINARY_FNC      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GETVARIABLE     reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    SETVARIABLE     reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAM           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LT              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GT              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LTE             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GTE             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    EQUALITY        reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    INEQUALITY      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    AND             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    OR              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PLUS            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MINUS           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TIMES           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DIVIDE          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MOD             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    POW             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RBRACE          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RPAREN          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TO              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    STEP            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DO              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COLON           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)


state 254

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COMMA           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    $end            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAM           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LT              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GT              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LTE             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GTE             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    EQUALITY        reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    AND             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    OR              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PLUS            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MINUS           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TIMES           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DIVIDE          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MOD             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    POW             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RBRACE          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RPAREN          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TO              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    STEP            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DO              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COLON           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 196 resolved as shift
WARNING: shift/reduce conflict for NUMBER_REAL in state 196 resolved as shift
WARNING: shift/reduce conflict for NUMBER_EXP in state 196 resolved as shift
WARNING: shift/reduce conflict for NUMBER_HEX in state 196 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 196 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 196 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 196 resolved as shift
WARNING: shift/reduce conflict for UNARY_FNC in state 196 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 196 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 196 resolved as shift
WARNING: shift/reduce conflict for NOT in state 196 resolved as shift
WARNING: shift/reduce conflict for NULAR_FNC in state 196 resolved as shift
WARNING: shift/reduce conflict for STRING_SINGLE in state 196 resolved as shift
WARNING: shift/reduce conflict for STRING_DOUBLE in state 196 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 196 resolved as shift
WARNING: shift/reduce conflict for IF in state 196 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 196 resolved as shift
WARNING: shift/reduce conflict for FOR in state 196 resolved as shift
WARNING: shift/reduce conflict for WITH in state 196 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 196 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 196 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 196 resolved as shift
WARNING: shift/reduce conflict for STEP in state 225 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 225 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 225 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 225 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 225 resolved as shift
WARNING: shift/reduce conflict for LT in state 225 resolved as shift
WARNING: shift/reduce conflict for GT in state 225 resolved as shift
WARNING: shift/reduce conflict for LTE in state 225 resolved as shift
WARNING: shift/reduce conflict for GTE in state 225 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 225 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 225 resolved as shift
WARNING: shift/reduce conflict for AND in state 225 resolved as shift
WARNING: shift/reduce conflict for OR in state 225 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 225 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 225 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 225 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 225 resolved as shift
WARNING: shift/reduce conflict for MOD in state 225 resolved as shift
WARNING: shift/reduce conflict for POW in state 225 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 246 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 246 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 246 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 246 resolved as shift
WARNING: shift/reduce conflict for LT in state 246 resolved as shift
WARNING: shift/reduce conflict for GT in state 246 resolved as shift
WARNING: shift/reduce conflict for LTE in state 246 resolved as shift
WARNING: shift/reduce conflict for GTE in state 246 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 246 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 246 resolved as shift
WARNING: shift/reduce conflict for AND in state 246 resolved as shift
WARNING: shift/reduce conflict for OR in state 246 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 246 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 246 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 246 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 246 resolved as shift
WARNING: shift/reduce conflict for MOD in state 246 resolved as shift
WARNING: shift/reduce conflict for POW in state 246 resolved as shift
WARNING: reduce/reduce conflict in state 25 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (nularexp -> identifier) in state 25
WARNING: reduce/reduce conflict in state 88 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (nularexp -> identifier) in state 88
WARNING: reduce/reduce conflict in state 132 resolved using rule (assignment_code -> definition EQUAL LBRACE)
WARNING: rejected rule (new_scope -> <empty>) in state 132
WARNING: reduce/reduce conflict in state 141 resolved using rule (assignment_code -> variable EQUAL LBRACE)
WARNING: rejected rule (new_scope -> <empty>) in state 141
WARNING: reduce/reduce conflict in state 144 resolved using rule (foreachloop -> bracedexp FOREACH array)
WARNING: rejected rule (primaryexp -> array) in state 144
WARNING: reduce/reduce conflict in state 194 resolved using rule (binaryexp -> primaryexp comparisonoperator primaryexp)
WARNING: rejected rule (booleanexp -> primaryexp) in state 194
