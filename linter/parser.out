Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT_MULTI
    COMMENT_SINGLE
    NEWLINE

Grammar

Rule 0     S' -> code
Rule 1     code -> empty
Rule 2     code -> statement
Rule 3     code -> statement terminator code
Rule 4     statement -> controlstructure
Rule 5     statement -> assignment
Rule 6     statement -> binaryexp
Rule 7     statement -> nularexp
Rule 8     statement -> unaryexp
Rule 9     statement -> primaryexp
Rule 10    terminator -> SEMI_COLON
Rule 11    terminator -> COMMA
Rule 12    controlstructure -> ifstatement
Rule 13    controlstructure -> whileloop
Rule 14    controlstructure -> forloop
Rule 15    controlstructure -> withstatement
Rule 16    controlstructure -> foreachloop
Rule 17    controlstructure -> switchstatement
Rule 18    helpertype -> iftype
Rule 19    helpertype -> whiletype
Rule 20    helpertype -> fortype
Rule 21    helpertype -> withtype
Rule 22    case -> CASE primaryexp COLON bracedexp
Rule 23    case -> CASE primaryexp
Rule 24    case -> DEFAULT bracedexp
Rule 25    switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
Rule 26    switchbody -> empty
Rule 27    switchbody -> case
Rule 28    switchbody -> case terminator switchbody
Rule 29    iftype -> IF bracedexp_condition
Rule 30    iftype -> IF LPAREN primaryexp RPAREN
Rule 31    ifstatement -> iftype THEN bracedexp ELSE bracedexp
Rule 32    ifstatement -> iftype THEN bracedexp
Rule 33    ifstatement -> iftype EXITWITH bracedexp
Rule 34    withtype -> WITH NAMESPACE
Rule 35    withstatementinit -> withtype DO
Rule 36    withstatement -> withstatementinit bracedexp
Rule 37    whiletype -> WHILE bracedexp_condition
Rule 38    whileloop -> whiletype DO bracedexp
Rule 39    foreachloop -> bracedexp FOREACH array
Rule 40    foreachloop -> bracedexp FOREACH primaryexp
Rule 41    foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN
Rule 42    fortype -> FOR new_scope string FROM primaryexp TO primaryexp
Rule 43    fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
Rule 44    fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
Rule 45    forloop -> fortype DO bracedexp_noscope
Rule 46    bracedexp_condition -> LBRACE booleanexp RBRACE
Rule 47    bracedexp_condition -> identifier
Rule 48    bracedexp_noscope -> LBRACE code RBRACE
Rule 49    getvariable_ns -> NAMESPACE GETVARIABLE string
Rule 50    getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 51    getvariable_any -> primaryexp GETVARIABLE string
Rule 52    getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 53    setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 54    setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
Rule 55    setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 56    setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
Rule 57    param_unary -> PARAM LSPAREN number RSPAREN
Rule 58    param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN
Rule 59    param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
Rule 60    param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 61    param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 62    param_binary -> primaryexp PARAM LSPAREN number RSPAREN
Rule 63    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
Rule 64    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
Rule 65    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 66    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 67    params_unary -> PARAMS params_array
Rule 68    params_binary -> primaryexp PARAMS params_array
Rule 69    params_array -> LSPAREN RSPAREN
Rule 70    params_array -> LSPAREN params_element RSPAREN
Rule 71    params_element -> params_array_entry
Rule 72    params_element -> params_array_entry COMMA params_element
Rule 73    params_array_entry -> string
Rule 74    params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN
Rule 75    params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN
Rule 76    params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 77    params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 78    vardefinition -> definition
Rule 79    vardefinition -> arraydefinition
Rule 80    assignment -> assignment_code code RBRACE
Rule 81    assignment -> definition EQUAL primaryexp
Rule 82    assignment -> variable EQUAL primaryexp
Rule 83    assignment_code -> definition EQUAL LBRACE
Rule 84    assignment_code -> variable EQUAL LBRACE
Rule 85    arraydefinition -> PRIVATE stringarray
Rule 86    definition -> PRIVATE PRIVATE_ID
Rule 87    definition -> PRIVATE string
Rule 88    identifier -> PRIVATE_ID
Rule 89    identifier -> GLOBAL_ID
Rule 90    variable -> PRIVATE_ID
Rule 91    variable -> GLOBAL_ID
Rule 92    binaryexp -> primaryexp BINARY_FNC primaryexp
Rule 93    binaryexp -> primaryexp comparisonoperator primaryexp
Rule 94    binaryexp -> primaryexp mathoperator primaryexp
Rule 95    binaryexp -> getvariable_ns
Rule 96    binaryexp -> getvariable_any
Rule 97    binaryexp -> setvariable_ns
Rule 98    binaryexp -> setvariable_any
Rule 99    binaryexp -> param_binary
Rule 100   binaryexp -> params_binary
Rule 101   primaryexp -> number
Rule 102   primaryexp -> identifier
Rule 103   primaryexp -> controlstructure
Rule 104   primaryexp -> helpertype
Rule 105   primaryexp -> array
Rule 106   primaryexp -> unaryexp
Rule 107   primaryexp -> nularexp
Rule 108   primaryexp -> string
Rule 109   primaryexp -> binaryexp
Rule 110   primaryexp -> bracedexp
Rule 111   primaryexp -> LPAREN primaryexp RPAREN
Rule 112   bracedexp -> LBRACE new_scope code RBRACE
Rule 113   bracedexp -> LBRACE RBRACE
Rule 114   new_scope -> <empty>
Rule 115   array -> LSPAREN RSPAREN
Rule 116   array -> LSPAREN arrayelement RSPAREN
Rule 117   arrayelement -> primaryexp
Rule 118   arrayelement -> primaryexp COMMA arrayelement
Rule 119   stringarray -> LSPAREN RSPAREN
Rule 120   stringarray -> LSPAREN stringarrayelement RSPAREN
Rule 121   stringarrayelement -> string
Rule 122   stringarrayelement -> string COMMA stringarrayelement
Rule 123   nularexp -> NULAR_FNC
Rule 124   nularexp -> identifier
Rule 125   unaryexp -> UNARY_FNC primaryexp
Rule 126   unaryexp -> PLUS primaryexp
Rule 127   unaryexp -> MINUS primaryexp
Rule 128   unaryexp -> NOT primaryexp
Rule 129   unaryexp -> vardefinition
Rule 130   unaryexp -> param_unary
Rule 131   unaryexp -> params_unary
Rule 132   comparisonoperator -> LT
Rule 133   comparisonoperator -> GT
Rule 134   comparisonoperator -> LTE
Rule 135   comparisonoperator -> GTE
Rule 136   comparisonoperator -> EQUALITY
Rule 137   comparisonoperator -> INEQUALITY
Rule 138   comparisonoperator -> AND
Rule 139   comparisonoperator -> OR
Rule 140   mathoperator -> PLUS
Rule 141   mathoperator -> MINUS
Rule 142   mathoperator -> TIMES
Rule 143   mathoperator -> DIVIDE
Rule 144   mathoperator -> MOD
Rule 145   mathoperator -> POW
Rule 146   booleanexp -> primaryexp
Rule 147   booleanexp -> primaryexp comparisonoperator booleanexp
Rule 148   booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE
Rule 149   configaccessor -> GT GT
Rule 150   configaccessor -> DIVIDE
Rule 151   number -> NUMBER_REAL
Rule 152   number -> NUMBER_EXP
Rule 153   number -> NUMBER_HEX
Rule 154   string -> STRING_SINGLE
Rule 155   string -> STRING_DOUBLE
Rule 156   empty -> <empty>

Terminals, with rules where they appear

AND                  : 138
BINARY_FNC           : 92
BOOL                 : 
CASE                 : 22 23
COLON                : 22
COMMA                : 11 44 44 50 52 53 54 54 55 56 56 58 59 59 60 60 60 61 61 61 63 64 64 65 65 65 66 66 66 72 74 75 75 76 76 76 77 77 77 118 122
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DEFAULT              : 24
DIVIDE               : 143 150
DO                   : 25 35 38 45
ELSE                 : 31
EQUAL                : 81 82 83 84
EQUALITY             : 136
EXITWITH             : 33
FOR                  : 42 43 44
FOREACH              : 39 40 41
FROM                 : 42 43
GETVARIABLE          : 49 50 51 52
GLOBAL_ID            : 89 91
GT                   : 133 149 149
GTE                  : 135
IF                   : 29 30
INEQUALITY           : 137
LBRACE               : 25 46 48 83 84 112 113 148
LPAREN               : 25 30 41 111
LSPAREN              : 44 50 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 69 70 74 75 76 77 115 116 119 120
LT                   : 132
LTE                  : 134
MINUS                : 127 141
MOD                  : 144
NAMESPACE            : 34 49 50 53 54
NEWLINE              : 
NOT                  : 128
NULAR_FNC            : 123
NUMBER_EXP           : 152
NUMBER_HEX           : 153
NUMBER_REAL          : 151
OR                   : 139
PARAM                : 57 58 59 60 61 62 63 64 65 66
PARAMS               : 67 68
PLUS                 : 126 140
POW                  : 145
PRIVATE              : 85 86 87
PRIVATE_ID           : 86 88 90
RBRACE               : 25 46 48 80 112 113 148
RPAREN               : 25 30 41 111
RSPAREN              : 44 50 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 69 70 74 75 76 77 115 116 119 120
SEMI_COLON           : 10
SETVARIABLE          : 53 54 55 56
STEP                 : 43
STRING_DOUBLE        : 155
STRING_SINGLE        : 154
SWITCH               : 25
THEN                 : 31 32
TIMES                : 142
TO                   : 42 43
UNARY_FNC            : 125
WHILE                : 37
WITH                 : 34
error                : 

Nonterminals, with rules where they appear

array                : 39 59 60 61 61 64 65 66 66 75 76 77 77 105
arraydefinition      : 79
arrayelement         : 116 118
assignment           : 5
assignment_code      : 80
binaryexp            : 6 109
booleanexp           : 46 54 56 147 148
bracedexp            : 22 24 31 31 32 33 36 38 39 40 41 110
bracedexp_condition  : 29 37 44
bracedexp_noscope    : 44 44 45
case                 : 27 28
code                 : 3 48 80 112 0
comparisonoperator   : 93 147 148
configaccessor       : 
controlstructure     : 4 103
definition           : 78 81 83
empty                : 1 26
foreachloop          : 16
forloop              : 14
fortype              : 20 45
getvariable_any      : 96
getvariable_ns       : 95
helpertype           : 104
identifier           : 47 102 124
ifstatement          : 12
iftype               : 18 31 32 33
mathoperator         : 94
new_scope            : 42 43 44 112
nularexp             : 7 107
number               : 57 58 59 60 60 61 62 63 64 65 65 66 76 101
param_binary         : 99
param_unary          : 130
params_array         : 67 68
params_array_entry   : 71 72
params_binary        : 100
params_element       : 70 72
params_unary         : 131
primaryexp           : 9 22 23 25 30 40 41 42 42 43 43 43 50 51 52 52 53 54 55 55 56 56 58 59 60 61 62 63 63 64 64 65 65 66 66 68 74 75 76 77 81 82 92 92 93 93 94 94 111 117 118 125 126 127 128 146 147 148
setvariable_any      : 98
setvariable_ns       : 97
statement            : 2 3
string               : 42 43 49 50 51 52 53 54 55 56 73 74 75 76 77 87 108 121 122
stringarray          : 85
stringarrayelement   : 120 122
switchbody           : 25 28
switchstatement      : 17
terminator           : 3 28
unaryexp             : 8 106
vardefinition        : 129
variable             : 82 84
whileloop            : 13
whiletype            : 19 38
withstatement        : 15
withstatementinit    : 36
withtype             : 21 35

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (156) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (9) statement -> . primaryexp
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (80) assignment -> . assignment_code code RBRACE
    (81) assignment -> . definition EQUAL primaryexp
    (82) assignment -> . variable EQUAL primaryexp
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (83) assignment_code -> . definition EQUAL LBRACE
    (84) assignment_code -> . variable EQUAL LBRACE
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (90) variable -> . PRIVATE_ID
    (91) variable -> . GLOBAL_ID
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (35) withstatementinit -> . withtype DO
    (85) arraydefinition -> . PRIVATE stringarray
    (34) withtype -> . WITH NAMESPACE

    $end            reduce using rule 156 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    LPAREN          shift and go to state 39
    SWITCH          shift and go to state 44
    PRIVATE         shift and go to state 46
    PRIVATE_ID      shift and go to state 47
    GLOBAL_ID       shift and go to state 48
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63

    code                           shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    primaryexp                     shift and go to state 9
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    assignment_code                shift and go to state 16
    definition                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    number                         shift and go to state 34
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    string                         shift and go to state 37
    bracedexp                      shift and go to state 38
    iftype                         shift and go to state 40
    whiletype                      shift and go to state 41
    fortype                        shift and go to state 42
    withstatementinit              shift and go to state 43
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 1

    (0) S' -> code .



state 2

    (1) code -> empty .

    $end            reduce using rule 1 (code -> empty .)
    RBRACE          reduce using rule 1 (code -> empty .)


state 3

    (2) code -> statement .
    (3) code -> statement . terminator code
    (10) terminator -> . SEMI_COLON
    (11) terminator -> . COMMA

    $end            reduce using rule 2 (code -> statement .)
    RBRACE          reduce using rule 2 (code -> statement .)
    SEMI_COLON      shift and go to state 65
    COMMA           shift and go to state 66

    terminator                     shift and go to state 64

state 4

    (4) statement -> controlstructure .
    (103) primaryexp -> controlstructure .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 4 (statement -> controlstructure .)
  ! reduce/reduce conflict for COMMA resolved using rule 4 (statement -> controlstructure .)
  ! reduce/reduce conflict for $end resolved using rule 4 (statement -> controlstructure .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (statement -> controlstructure .)
    SEMI_COLON      reduce using rule 4 (statement -> controlstructure .)
    COMMA           reduce using rule 4 (statement -> controlstructure .)
    $end            reduce using rule 4 (statement -> controlstructure .)
    RBRACE          reduce using rule 4 (statement -> controlstructure .)
    BINARY_FNC      reduce using rule 103 (primaryexp -> controlstructure .)
    GETVARIABLE     reduce using rule 103 (primaryexp -> controlstructure .)
    SETVARIABLE     reduce using rule 103 (primaryexp -> controlstructure .)
    PARAM           reduce using rule 103 (primaryexp -> controlstructure .)
    PARAMS          reduce using rule 103 (primaryexp -> controlstructure .)
    LT              reduce using rule 103 (primaryexp -> controlstructure .)
    GT              reduce using rule 103 (primaryexp -> controlstructure .)
    LTE             reduce using rule 103 (primaryexp -> controlstructure .)
    GTE             reduce using rule 103 (primaryexp -> controlstructure .)
    EQUALITY        reduce using rule 103 (primaryexp -> controlstructure .)
    INEQUALITY      reduce using rule 103 (primaryexp -> controlstructure .)
    AND             reduce using rule 103 (primaryexp -> controlstructure .)
    OR              reduce using rule 103 (primaryexp -> controlstructure .)
    PLUS            reduce using rule 103 (primaryexp -> controlstructure .)
    MINUS           reduce using rule 103 (primaryexp -> controlstructure .)
    TIMES           reduce using rule 103 (primaryexp -> controlstructure .)
    DIVIDE          reduce using rule 103 (primaryexp -> controlstructure .)
    MOD             reduce using rule 103 (primaryexp -> controlstructure .)
    POW             reduce using rule 103 (primaryexp -> controlstructure .)

  ! SEMI_COLON      [ reduce using rule 103 (primaryexp -> controlstructure .) ]
  ! COMMA           [ reduce using rule 103 (primaryexp -> controlstructure .) ]
  ! $end            [ reduce using rule 103 (primaryexp -> controlstructure .) ]
  ! RBRACE          [ reduce using rule 103 (primaryexp -> controlstructure .) ]


state 5

    (5) statement -> assignment .

    SEMI_COLON      reduce using rule 5 (statement -> assignment .)
    COMMA           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> binaryexp .
    (109) primaryexp -> binaryexp .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 6 (statement -> binaryexp .)
  ! reduce/reduce conflict for COMMA resolved using rule 6 (statement -> binaryexp .)
  ! reduce/reduce conflict for $end resolved using rule 6 (statement -> binaryexp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 6 (statement -> binaryexp .)
    SEMI_COLON      reduce using rule 6 (statement -> binaryexp .)
    COMMA           reduce using rule 6 (statement -> binaryexp .)
    $end            reduce using rule 6 (statement -> binaryexp .)
    RBRACE          reduce using rule 6 (statement -> binaryexp .)
    BINARY_FNC      reduce using rule 109 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 109 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 109 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 109 (primaryexp -> binaryexp .)
    PARAMS          reduce using rule 109 (primaryexp -> binaryexp .)
    LT              reduce using rule 109 (primaryexp -> binaryexp .)
    GT              reduce using rule 109 (primaryexp -> binaryexp .)
    LTE             reduce using rule 109 (primaryexp -> binaryexp .)
    GTE             reduce using rule 109 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 109 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 109 (primaryexp -> binaryexp .)
    AND             reduce using rule 109 (primaryexp -> binaryexp .)
    OR              reduce using rule 109 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 109 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 109 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 109 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 109 (primaryexp -> binaryexp .)
    MOD             reduce using rule 109 (primaryexp -> binaryexp .)
    POW             reduce using rule 109 (primaryexp -> binaryexp .)

  ! SEMI_COLON      [ reduce using rule 109 (primaryexp -> binaryexp .) ]
  ! COMMA           [ reduce using rule 109 (primaryexp -> binaryexp .) ]
  ! $end            [ reduce using rule 109 (primaryexp -> binaryexp .) ]
  ! RBRACE          [ reduce using rule 109 (primaryexp -> binaryexp .) ]


state 7

    (7) statement -> nularexp .
    (107) primaryexp -> nularexp .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 7 (statement -> nularexp .)
  ! reduce/reduce conflict for COMMA resolved using rule 7 (statement -> nularexp .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> nularexp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (statement -> nularexp .)
    SEMI_COLON      reduce using rule 7 (statement -> nularexp .)
    COMMA           reduce using rule 7 (statement -> nularexp .)
    $end            reduce using rule 7 (statement -> nularexp .)
    RBRACE          reduce using rule 7 (statement -> nularexp .)
    BINARY_FNC      reduce using rule 107 (primaryexp -> nularexp .)
    GETVARIABLE     reduce using rule 107 (primaryexp -> nularexp .)
    SETVARIABLE     reduce using rule 107 (primaryexp -> nularexp .)
    PARAM           reduce using rule 107 (primaryexp -> nularexp .)
    PARAMS          reduce using rule 107 (primaryexp -> nularexp .)
    LT              reduce using rule 107 (primaryexp -> nularexp .)
    GT              reduce using rule 107 (primaryexp -> nularexp .)
    LTE             reduce using rule 107 (primaryexp -> nularexp .)
    GTE             reduce using rule 107 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 107 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 107 (primaryexp -> nularexp .)
    AND             reduce using rule 107 (primaryexp -> nularexp .)
    OR              reduce using rule 107 (primaryexp -> nularexp .)
    PLUS            reduce using rule 107 (primaryexp -> nularexp .)
    MINUS           reduce using rule 107 (primaryexp -> nularexp .)
    TIMES           reduce using rule 107 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 107 (primaryexp -> nularexp .)
    MOD             reduce using rule 107 (primaryexp -> nularexp .)
    POW             reduce using rule 107 (primaryexp -> nularexp .)

  ! SEMI_COLON      [ reduce using rule 107 (primaryexp -> nularexp .) ]
  ! COMMA           [ reduce using rule 107 (primaryexp -> nularexp .) ]
  ! $end            [ reduce using rule 107 (primaryexp -> nularexp .) ]
  ! RBRACE          [ reduce using rule 107 (primaryexp -> nularexp .) ]


state 8

    (8) statement -> unaryexp .
    (106) primaryexp -> unaryexp .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 8 (statement -> unaryexp .)
  ! reduce/reduce conflict for COMMA resolved using rule 8 (statement -> unaryexp .)
  ! reduce/reduce conflict for $end resolved using rule 8 (statement -> unaryexp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 8 (statement -> unaryexp .)
    SEMI_COLON      reduce using rule 8 (statement -> unaryexp .)
    COMMA           reduce using rule 8 (statement -> unaryexp .)
    $end            reduce using rule 8 (statement -> unaryexp .)
    RBRACE          reduce using rule 8 (statement -> unaryexp .)
    BINARY_FNC      reduce using rule 106 (primaryexp -> unaryexp .)
    GETVARIABLE     reduce using rule 106 (primaryexp -> unaryexp .)
    SETVARIABLE     reduce using rule 106 (primaryexp -> unaryexp .)
    PARAM           reduce using rule 106 (primaryexp -> unaryexp .)
    PARAMS          reduce using rule 106 (primaryexp -> unaryexp .)
    LT              reduce using rule 106 (primaryexp -> unaryexp .)
    GT              reduce using rule 106 (primaryexp -> unaryexp .)
    LTE             reduce using rule 106 (primaryexp -> unaryexp .)
    GTE             reduce using rule 106 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 106 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 106 (primaryexp -> unaryexp .)
    AND             reduce using rule 106 (primaryexp -> unaryexp .)
    OR              reduce using rule 106 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 106 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 106 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 106 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 106 (primaryexp -> unaryexp .)
    MOD             reduce using rule 106 (primaryexp -> unaryexp .)
    POW             reduce using rule 106 (primaryexp -> unaryexp .)

  ! SEMI_COLON      [ reduce using rule 106 (primaryexp -> unaryexp .) ]
  ! COMMA           [ reduce using rule 106 (primaryexp -> unaryexp .) ]
  ! $end            [ reduce using rule 106 (primaryexp -> unaryexp .) ]
  ! RBRACE          [ reduce using rule 106 (primaryexp -> unaryexp .) ]


state 9

    (9) statement -> primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 9 (statement -> primaryexp .)
    COMMA           reduce using rule 9 (statement -> primaryexp .)
    $end            reduce using rule 9 (statement -> primaryexp .)
    RBRACE          reduce using rule 9 (statement -> primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 10

    (12) controlstructure -> ifstatement .

    SEMI_COLON      reduce using rule 12 (controlstructure -> ifstatement .)
    COMMA           reduce using rule 12 (controlstructure -> ifstatement .)
    $end            reduce using rule 12 (controlstructure -> ifstatement .)
    BINARY_FNC      reduce using rule 12 (controlstructure -> ifstatement .)
    GETVARIABLE     reduce using rule 12 (controlstructure -> ifstatement .)
    SETVARIABLE     reduce using rule 12 (controlstructure -> ifstatement .)
    PARAM           reduce using rule 12 (controlstructure -> ifstatement .)
    PARAMS          reduce using rule 12 (controlstructure -> ifstatement .)
    LT              reduce using rule 12 (controlstructure -> ifstatement .)
    GT              reduce using rule 12 (controlstructure -> ifstatement .)
    LTE             reduce using rule 12 (controlstructure -> ifstatement .)
    GTE             reduce using rule 12 (controlstructure -> ifstatement .)
    EQUALITY        reduce using rule 12 (controlstructure -> ifstatement .)
    INEQUALITY      reduce using rule 12 (controlstructure -> ifstatement .)
    AND             reduce using rule 12 (controlstructure -> ifstatement .)
    OR              reduce using rule 12 (controlstructure -> ifstatement .)
    PLUS            reduce using rule 12 (controlstructure -> ifstatement .)
    MINUS           reduce using rule 12 (controlstructure -> ifstatement .)
    TIMES           reduce using rule 12 (controlstructure -> ifstatement .)
    DIVIDE          reduce using rule 12 (controlstructure -> ifstatement .)
    MOD             reduce using rule 12 (controlstructure -> ifstatement .)
    POW             reduce using rule 12 (controlstructure -> ifstatement .)
    RBRACE          reduce using rule 12 (controlstructure -> ifstatement .)
    RPAREN          reduce using rule 12 (controlstructure -> ifstatement .)
    RSPAREN         reduce using rule 12 (controlstructure -> ifstatement .)
    TO              reduce using rule 12 (controlstructure -> ifstatement .)
    STEP            reduce using rule 12 (controlstructure -> ifstatement .)
    DO              reduce using rule 12 (controlstructure -> ifstatement .)
    COLON           reduce using rule 12 (controlstructure -> ifstatement .)


state 11

    (13) controlstructure -> whileloop .

    SEMI_COLON      reduce using rule 13 (controlstructure -> whileloop .)
    COMMA           reduce using rule 13 (controlstructure -> whileloop .)
    $end            reduce using rule 13 (controlstructure -> whileloop .)
    BINARY_FNC      reduce using rule 13 (controlstructure -> whileloop .)
    GETVARIABLE     reduce using rule 13 (controlstructure -> whileloop .)
    SETVARIABLE     reduce using rule 13 (controlstructure -> whileloop .)
    PARAM           reduce using rule 13 (controlstructure -> whileloop .)
    PARAMS          reduce using rule 13 (controlstructure -> whileloop .)
    LT              reduce using rule 13 (controlstructure -> whileloop .)
    GT              reduce using rule 13 (controlstructure -> whileloop .)
    LTE             reduce using rule 13 (controlstructure -> whileloop .)
    GTE             reduce using rule 13 (controlstructure -> whileloop .)
    EQUALITY        reduce using rule 13 (controlstructure -> whileloop .)
    INEQUALITY      reduce using rule 13 (controlstructure -> whileloop .)
    AND             reduce using rule 13 (controlstructure -> whileloop .)
    OR              reduce using rule 13 (controlstructure -> whileloop .)
    PLUS            reduce using rule 13 (controlstructure -> whileloop .)
    MINUS           reduce using rule 13 (controlstructure -> whileloop .)
    TIMES           reduce using rule 13 (controlstructure -> whileloop .)
    DIVIDE          reduce using rule 13 (controlstructure -> whileloop .)
    MOD             reduce using rule 13 (controlstructure -> whileloop .)
    POW             reduce using rule 13 (controlstructure -> whileloop .)
    RBRACE          reduce using rule 13 (controlstructure -> whileloop .)
    RPAREN          reduce using rule 13 (controlstructure -> whileloop .)
    RSPAREN         reduce using rule 13 (controlstructure -> whileloop .)
    TO              reduce using rule 13 (controlstructure -> whileloop .)
    STEP            reduce using rule 13 (controlstructure -> whileloop .)
    DO              reduce using rule 13 (controlstructure -> whileloop .)
    COLON           reduce using rule 13 (controlstructure -> whileloop .)


state 12

    (14) controlstructure -> forloop .

    SEMI_COLON      reduce using rule 14 (controlstructure -> forloop .)
    COMMA           reduce using rule 14 (controlstructure -> forloop .)
    $end            reduce using rule 14 (controlstructure -> forloop .)
    BINARY_FNC      reduce using rule 14 (controlstructure -> forloop .)
    GETVARIABLE     reduce using rule 14 (controlstructure -> forloop .)
    SETVARIABLE     reduce using rule 14 (controlstructure -> forloop .)
    PARAM           reduce using rule 14 (controlstructure -> forloop .)
    PARAMS          reduce using rule 14 (controlstructure -> forloop .)
    LT              reduce using rule 14 (controlstructure -> forloop .)
    GT              reduce using rule 14 (controlstructure -> forloop .)
    LTE             reduce using rule 14 (controlstructure -> forloop .)
    GTE             reduce using rule 14 (controlstructure -> forloop .)
    EQUALITY        reduce using rule 14 (controlstructure -> forloop .)
    INEQUALITY      reduce using rule 14 (controlstructure -> forloop .)
    AND             reduce using rule 14 (controlstructure -> forloop .)
    OR              reduce using rule 14 (controlstructure -> forloop .)
    PLUS            reduce using rule 14 (controlstructure -> forloop .)
    MINUS           reduce using rule 14 (controlstructure -> forloop .)
    TIMES           reduce using rule 14 (controlstructure -> forloop .)
    DIVIDE          reduce using rule 14 (controlstructure -> forloop .)
    MOD             reduce using rule 14 (controlstructure -> forloop .)
    POW             reduce using rule 14 (controlstructure -> forloop .)
    RBRACE          reduce using rule 14 (controlstructure -> forloop .)
    RPAREN          reduce using rule 14 (controlstructure -> forloop .)
    RSPAREN         reduce using rule 14 (controlstructure -> forloop .)
    TO              reduce using rule 14 (controlstructure -> forloop .)
    STEP            reduce using rule 14 (controlstructure -> forloop .)
    DO              reduce using rule 14 (controlstructure -> forloop .)
    COLON           reduce using rule 14 (controlstructure -> forloop .)


state 13

    (15) controlstructure -> withstatement .

    SEMI_COLON      reduce using rule 15 (controlstructure -> withstatement .)
    COMMA           reduce using rule 15 (controlstructure -> withstatement .)
    $end            reduce using rule 15 (controlstructure -> withstatement .)
    BINARY_FNC      reduce using rule 15 (controlstructure -> withstatement .)
    GETVARIABLE     reduce using rule 15 (controlstructure -> withstatement .)
    SETVARIABLE     reduce using rule 15 (controlstructure -> withstatement .)
    PARAM           reduce using rule 15 (controlstructure -> withstatement .)
    PARAMS          reduce using rule 15 (controlstructure -> withstatement .)
    LT              reduce using rule 15 (controlstructure -> withstatement .)
    GT              reduce using rule 15 (controlstructure -> withstatement .)
    LTE             reduce using rule 15 (controlstructure -> withstatement .)
    GTE             reduce using rule 15 (controlstructure -> withstatement .)
    EQUALITY        reduce using rule 15 (controlstructure -> withstatement .)
    INEQUALITY      reduce using rule 15 (controlstructure -> withstatement .)
    AND             reduce using rule 15 (controlstructure -> withstatement .)
    OR              reduce using rule 15 (controlstructure -> withstatement .)
    PLUS            reduce using rule 15 (controlstructure -> withstatement .)
    MINUS           reduce using rule 15 (controlstructure -> withstatement .)
    TIMES           reduce using rule 15 (controlstructure -> withstatement .)
    DIVIDE          reduce using rule 15 (controlstructure -> withstatement .)
    MOD             reduce using rule 15 (controlstructure -> withstatement .)
    POW             reduce using rule 15 (controlstructure -> withstatement .)
    RBRACE          reduce using rule 15 (controlstructure -> withstatement .)
    RPAREN          reduce using rule 15 (controlstructure -> withstatement .)
    RSPAREN         reduce using rule 15 (controlstructure -> withstatement .)
    TO              reduce using rule 15 (controlstructure -> withstatement .)
    STEP            reduce using rule 15 (controlstructure -> withstatement .)
    DO              reduce using rule 15 (controlstructure -> withstatement .)
    COLON           reduce using rule 15 (controlstructure -> withstatement .)


state 14

    (16) controlstructure -> foreachloop .

    SEMI_COLON      reduce using rule 16 (controlstructure -> foreachloop .)
    COMMA           reduce using rule 16 (controlstructure -> foreachloop .)
    $end            reduce using rule 16 (controlstructure -> foreachloop .)
    BINARY_FNC      reduce using rule 16 (controlstructure -> foreachloop .)
    GETVARIABLE     reduce using rule 16 (controlstructure -> foreachloop .)
    SETVARIABLE     reduce using rule 16 (controlstructure -> foreachloop .)
    PARAM           reduce using rule 16 (controlstructure -> foreachloop .)
    PARAMS          reduce using rule 16 (controlstructure -> foreachloop .)
    LT              reduce using rule 16 (controlstructure -> foreachloop .)
    GT              reduce using rule 16 (controlstructure -> foreachloop .)
    LTE             reduce using rule 16 (controlstructure -> foreachloop .)
    GTE             reduce using rule 16 (controlstructure -> foreachloop .)
    EQUALITY        reduce using rule 16 (controlstructure -> foreachloop .)
    INEQUALITY      reduce using rule 16 (controlstructure -> foreachloop .)
    AND             reduce using rule 16 (controlstructure -> foreachloop .)
    OR              reduce using rule 16 (controlstructure -> foreachloop .)
    PLUS            reduce using rule 16 (controlstructure -> foreachloop .)
    MINUS           reduce using rule 16 (controlstructure -> foreachloop .)
    TIMES           reduce using rule 16 (controlstructure -> foreachloop .)
    DIVIDE          reduce using rule 16 (controlstructure -> foreachloop .)
    MOD             reduce using rule 16 (controlstructure -> foreachloop .)
    POW             reduce using rule 16 (controlstructure -> foreachloop .)
    RBRACE          reduce using rule 16 (controlstructure -> foreachloop .)
    RPAREN          reduce using rule 16 (controlstructure -> foreachloop .)
    RSPAREN         reduce using rule 16 (controlstructure -> foreachloop .)
    TO              reduce using rule 16 (controlstructure -> foreachloop .)
    STEP            reduce using rule 16 (controlstructure -> foreachloop .)
    DO              reduce using rule 16 (controlstructure -> foreachloop .)
    COLON           reduce using rule 16 (controlstructure -> foreachloop .)


state 15

    (17) controlstructure -> switchstatement .

    SEMI_COLON      reduce using rule 17 (controlstructure -> switchstatement .)
    COMMA           reduce using rule 17 (controlstructure -> switchstatement .)
    $end            reduce using rule 17 (controlstructure -> switchstatement .)
    BINARY_FNC      reduce using rule 17 (controlstructure -> switchstatement .)
    GETVARIABLE     reduce using rule 17 (controlstructure -> switchstatement .)
    SETVARIABLE     reduce using rule 17 (controlstructure -> switchstatement .)
    PARAM           reduce using rule 17 (controlstructure -> switchstatement .)
    PARAMS          reduce using rule 17 (controlstructure -> switchstatement .)
    LT              reduce using rule 17 (controlstructure -> switchstatement .)
    GT              reduce using rule 17 (controlstructure -> switchstatement .)
    LTE             reduce using rule 17 (controlstructure -> switchstatement .)
    GTE             reduce using rule 17 (controlstructure -> switchstatement .)
    EQUALITY        reduce using rule 17 (controlstructure -> switchstatement .)
    INEQUALITY      reduce using rule 17 (controlstructure -> switchstatement .)
    AND             reduce using rule 17 (controlstructure -> switchstatement .)
    OR              reduce using rule 17 (controlstructure -> switchstatement .)
    PLUS            reduce using rule 17 (controlstructure -> switchstatement .)
    MINUS           reduce using rule 17 (controlstructure -> switchstatement .)
    TIMES           reduce using rule 17 (controlstructure -> switchstatement .)
    DIVIDE          reduce using rule 17 (controlstructure -> switchstatement .)
    MOD             reduce using rule 17 (controlstructure -> switchstatement .)
    POW             reduce using rule 17 (controlstructure -> switchstatement .)
    RBRACE          reduce using rule 17 (controlstructure -> switchstatement .)
    RPAREN          reduce using rule 17 (controlstructure -> switchstatement .)
    RSPAREN         reduce using rule 17 (controlstructure -> switchstatement .)
    TO              reduce using rule 17 (controlstructure -> switchstatement .)
    STEP            reduce using rule 17 (controlstructure -> switchstatement .)
    DO              reduce using rule 17 (controlstructure -> switchstatement .)
    COLON           reduce using rule 17 (controlstructure -> switchstatement .)


state 16

    (80) assignment -> assignment_code . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (156) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (9) statement -> . primaryexp
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (80) assignment -> . assignment_code code RBRACE
    (81) assignment -> . definition EQUAL primaryexp
    (82) assignment -> . variable EQUAL primaryexp
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (83) assignment_code -> . definition EQUAL LBRACE
    (84) assignment_code -> . variable EQUAL LBRACE
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (90) variable -> . PRIVATE_ID
    (91) variable -> . GLOBAL_ID
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (35) withstatementinit -> . withtype DO
    (85) arraydefinition -> . PRIVATE stringarray
    (34) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 156 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    LPAREN          shift and go to state 39
    SWITCH          shift and go to state 44
    PRIVATE         shift and go to state 46
    PRIVATE_ID      shift and go to state 47
    GLOBAL_ID       shift and go to state 48
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63

    assignment_code                shift and go to state 16
    code                           shift and go to state 88
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    primaryexp                     shift and go to state 9
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    definition                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    number                         shift and go to state 34
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    string                         shift and go to state 37
    bracedexp                      shift and go to state 38
    iftype                         shift and go to state 40
    whiletype                      shift and go to state 41
    fortype                        shift and go to state 42
    withstatementinit              shift and go to state 43
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 17

    (81) assignment -> definition . EQUAL primaryexp
    (83) assignment_code -> definition . EQUAL LBRACE
    (78) vardefinition -> definition .

    EQUAL           shift and go to state 89
    SEMI_COLON      reduce using rule 78 (vardefinition -> definition .)
    COMMA           reduce using rule 78 (vardefinition -> definition .)
    $end            reduce using rule 78 (vardefinition -> definition .)
    BINARY_FNC      reduce using rule 78 (vardefinition -> definition .)
    GETVARIABLE     reduce using rule 78 (vardefinition -> definition .)
    SETVARIABLE     reduce using rule 78 (vardefinition -> definition .)
    PARAM           reduce using rule 78 (vardefinition -> definition .)
    PARAMS          reduce using rule 78 (vardefinition -> definition .)
    LT              reduce using rule 78 (vardefinition -> definition .)
    GT              reduce using rule 78 (vardefinition -> definition .)
    LTE             reduce using rule 78 (vardefinition -> definition .)
    GTE             reduce using rule 78 (vardefinition -> definition .)
    EQUALITY        reduce using rule 78 (vardefinition -> definition .)
    INEQUALITY      reduce using rule 78 (vardefinition -> definition .)
    AND             reduce using rule 78 (vardefinition -> definition .)
    OR              reduce using rule 78 (vardefinition -> definition .)
    PLUS            reduce using rule 78 (vardefinition -> definition .)
    MINUS           reduce using rule 78 (vardefinition -> definition .)
    TIMES           reduce using rule 78 (vardefinition -> definition .)
    DIVIDE          reduce using rule 78 (vardefinition -> definition .)
    MOD             reduce using rule 78 (vardefinition -> definition .)
    POW             reduce using rule 78 (vardefinition -> definition .)
    RBRACE          reduce using rule 78 (vardefinition -> definition .)


state 18

    (82) assignment -> variable . EQUAL primaryexp
    (84) assignment_code -> variable . EQUAL LBRACE

    EQUAL           shift and go to state 90


state 19

    (95) binaryexp -> getvariable_ns .

    SEMI_COLON      reduce using rule 95 (binaryexp -> getvariable_ns .)
    COMMA           reduce using rule 95 (binaryexp -> getvariable_ns .)
    $end            reduce using rule 95 (binaryexp -> getvariable_ns .)
    BINARY_FNC      reduce using rule 95 (binaryexp -> getvariable_ns .)
    GETVARIABLE     reduce using rule 95 (binaryexp -> getvariable_ns .)
    SETVARIABLE     reduce using rule 95 (binaryexp -> getvariable_ns .)
    PARAM           reduce using rule 95 (binaryexp -> getvariable_ns .)
    PARAMS          reduce using rule 95 (binaryexp -> getvariable_ns .)
    LT              reduce using rule 95 (binaryexp -> getvariable_ns .)
    GT              reduce using rule 95 (binaryexp -> getvariable_ns .)
    LTE             reduce using rule 95 (binaryexp -> getvariable_ns .)
    GTE             reduce using rule 95 (binaryexp -> getvariable_ns .)
    EQUALITY        reduce using rule 95 (binaryexp -> getvariable_ns .)
    INEQUALITY      reduce using rule 95 (binaryexp -> getvariable_ns .)
    AND             reduce using rule 95 (binaryexp -> getvariable_ns .)
    OR              reduce using rule 95 (binaryexp -> getvariable_ns .)
    PLUS            reduce using rule 95 (binaryexp -> getvariable_ns .)
    MINUS           reduce using rule 95 (binaryexp -> getvariable_ns .)
    TIMES           reduce using rule 95 (binaryexp -> getvariable_ns .)
    DIVIDE          reduce using rule 95 (binaryexp -> getvariable_ns .)
    MOD             reduce using rule 95 (binaryexp -> getvariable_ns .)
    POW             reduce using rule 95 (binaryexp -> getvariable_ns .)
    RBRACE          reduce using rule 95 (binaryexp -> getvariable_ns .)
    RPAREN          reduce using rule 95 (binaryexp -> getvariable_ns .)
    RSPAREN         reduce using rule 95 (binaryexp -> getvariable_ns .)
    TO              reduce using rule 95 (binaryexp -> getvariable_ns .)
    STEP            reduce using rule 95 (binaryexp -> getvariable_ns .)
    DO              reduce using rule 95 (binaryexp -> getvariable_ns .)
    COLON           reduce using rule 95 (binaryexp -> getvariable_ns .)


state 20

    (96) binaryexp -> getvariable_any .

    SEMI_COLON      reduce using rule 96 (binaryexp -> getvariable_any .)
    COMMA           reduce using rule 96 (binaryexp -> getvariable_any .)
    $end            reduce using rule 96 (binaryexp -> getvariable_any .)
    BINARY_FNC      reduce using rule 96 (binaryexp -> getvariable_any .)
    GETVARIABLE     reduce using rule 96 (binaryexp -> getvariable_any .)
    SETVARIABLE     reduce using rule 96 (binaryexp -> getvariable_any .)
    PARAM           reduce using rule 96 (binaryexp -> getvariable_any .)
    PARAMS          reduce using rule 96 (binaryexp -> getvariable_any .)
    LT              reduce using rule 96 (binaryexp -> getvariable_any .)
    GT              reduce using rule 96 (binaryexp -> getvariable_any .)
    LTE             reduce using rule 96 (binaryexp -> getvariable_any .)
    GTE             reduce using rule 96 (binaryexp -> getvariable_any .)
    EQUALITY        reduce using rule 96 (binaryexp -> getvariable_any .)
    INEQUALITY      reduce using rule 96 (binaryexp -> getvariable_any .)
    AND             reduce using rule 96 (binaryexp -> getvariable_any .)
    OR              reduce using rule 96 (binaryexp -> getvariable_any .)
    PLUS            reduce using rule 96 (binaryexp -> getvariable_any .)
    MINUS           reduce using rule 96 (binaryexp -> getvariable_any .)
    TIMES           reduce using rule 96 (binaryexp -> getvariable_any .)
    DIVIDE          reduce using rule 96 (binaryexp -> getvariable_any .)
    MOD             reduce using rule 96 (binaryexp -> getvariable_any .)
    POW             reduce using rule 96 (binaryexp -> getvariable_any .)
    RBRACE          reduce using rule 96 (binaryexp -> getvariable_any .)
    RPAREN          reduce using rule 96 (binaryexp -> getvariable_any .)
    RSPAREN         reduce using rule 96 (binaryexp -> getvariable_any .)
    TO              reduce using rule 96 (binaryexp -> getvariable_any .)
    STEP            reduce using rule 96 (binaryexp -> getvariable_any .)
    DO              reduce using rule 96 (binaryexp -> getvariable_any .)
    COLON           reduce using rule 96 (binaryexp -> getvariable_any .)


state 21

    (97) binaryexp -> setvariable_ns .

    SEMI_COLON      reduce using rule 97 (binaryexp -> setvariable_ns .)
    COMMA           reduce using rule 97 (binaryexp -> setvariable_ns .)
    $end            reduce using rule 97 (binaryexp -> setvariable_ns .)
    BINARY_FNC      reduce using rule 97 (binaryexp -> setvariable_ns .)
    GETVARIABLE     reduce using rule 97 (binaryexp -> setvariable_ns .)
    SETVARIABLE     reduce using rule 97 (binaryexp -> setvariable_ns .)
    PARAM           reduce using rule 97 (binaryexp -> setvariable_ns .)
    PARAMS          reduce using rule 97 (binaryexp -> setvariable_ns .)
    LT              reduce using rule 97 (binaryexp -> setvariable_ns .)
    GT              reduce using rule 97 (binaryexp -> setvariable_ns .)
    LTE             reduce using rule 97 (binaryexp -> setvariable_ns .)
    GTE             reduce using rule 97 (binaryexp -> setvariable_ns .)
    EQUALITY        reduce using rule 97 (binaryexp -> setvariable_ns .)
    INEQUALITY      reduce using rule 97 (binaryexp -> setvariable_ns .)
    AND             reduce using rule 97 (binaryexp -> setvariable_ns .)
    OR              reduce using rule 97 (binaryexp -> setvariable_ns .)
    PLUS            reduce using rule 97 (binaryexp -> setvariable_ns .)
    MINUS           reduce using rule 97 (binaryexp -> setvariable_ns .)
    TIMES           reduce using rule 97 (binaryexp -> setvariable_ns .)
    DIVIDE          reduce using rule 97 (binaryexp -> setvariable_ns .)
    MOD             reduce using rule 97 (binaryexp -> setvariable_ns .)
    POW             reduce using rule 97 (binaryexp -> setvariable_ns .)
    RBRACE          reduce using rule 97 (binaryexp -> setvariable_ns .)
    RPAREN          reduce using rule 97 (binaryexp -> setvariable_ns .)
    RSPAREN         reduce using rule 97 (binaryexp -> setvariable_ns .)
    TO              reduce using rule 97 (binaryexp -> setvariable_ns .)
    STEP            reduce using rule 97 (binaryexp -> setvariable_ns .)
    DO              reduce using rule 97 (binaryexp -> setvariable_ns .)
    COLON           reduce using rule 97 (binaryexp -> setvariable_ns .)


state 22

    (98) binaryexp -> setvariable_any .

    SEMI_COLON      reduce using rule 98 (binaryexp -> setvariable_any .)
    COMMA           reduce using rule 98 (binaryexp -> setvariable_any .)
    $end            reduce using rule 98 (binaryexp -> setvariable_any .)
    BINARY_FNC      reduce using rule 98 (binaryexp -> setvariable_any .)
    GETVARIABLE     reduce using rule 98 (binaryexp -> setvariable_any .)
    SETVARIABLE     reduce using rule 98 (binaryexp -> setvariable_any .)
    PARAM           reduce using rule 98 (binaryexp -> setvariable_any .)
    PARAMS          reduce using rule 98 (binaryexp -> setvariable_any .)
    LT              reduce using rule 98 (binaryexp -> setvariable_any .)
    GT              reduce using rule 98 (binaryexp -> setvariable_any .)
    LTE             reduce using rule 98 (binaryexp -> setvariable_any .)
    GTE             reduce using rule 98 (binaryexp -> setvariable_any .)
    EQUALITY        reduce using rule 98 (binaryexp -> setvariable_any .)
    INEQUALITY      reduce using rule 98 (binaryexp -> setvariable_any .)
    AND             reduce using rule 98 (binaryexp -> setvariable_any .)
    OR              reduce using rule 98 (binaryexp -> setvariable_any .)
    PLUS            reduce using rule 98 (binaryexp -> setvariable_any .)
    MINUS           reduce using rule 98 (binaryexp -> setvariable_any .)
    TIMES           reduce using rule 98 (binaryexp -> setvariable_any .)
    DIVIDE          reduce using rule 98 (binaryexp -> setvariable_any .)
    MOD             reduce using rule 98 (binaryexp -> setvariable_any .)
    POW             reduce using rule 98 (binaryexp -> setvariable_any .)
    RBRACE          reduce using rule 98 (binaryexp -> setvariable_any .)
    RPAREN          reduce using rule 98 (binaryexp -> setvariable_any .)
    RSPAREN         reduce using rule 98 (binaryexp -> setvariable_any .)
    TO              reduce using rule 98 (binaryexp -> setvariable_any .)
    STEP            reduce using rule 98 (binaryexp -> setvariable_any .)
    DO              reduce using rule 98 (binaryexp -> setvariable_any .)
    COLON           reduce using rule 98 (binaryexp -> setvariable_any .)


state 23

    (99) binaryexp -> param_binary .

    SEMI_COLON      reduce using rule 99 (binaryexp -> param_binary .)
    COMMA           reduce using rule 99 (binaryexp -> param_binary .)
    $end            reduce using rule 99 (binaryexp -> param_binary .)
    BINARY_FNC      reduce using rule 99 (binaryexp -> param_binary .)
    GETVARIABLE     reduce using rule 99 (binaryexp -> param_binary .)
    SETVARIABLE     reduce using rule 99 (binaryexp -> param_binary .)
    PARAM           reduce using rule 99 (binaryexp -> param_binary .)
    PARAMS          reduce using rule 99 (binaryexp -> param_binary .)
    LT              reduce using rule 99 (binaryexp -> param_binary .)
    GT              reduce using rule 99 (binaryexp -> param_binary .)
    LTE             reduce using rule 99 (binaryexp -> param_binary .)
    GTE             reduce using rule 99 (binaryexp -> param_binary .)
    EQUALITY        reduce using rule 99 (binaryexp -> param_binary .)
    INEQUALITY      reduce using rule 99 (binaryexp -> param_binary .)
    AND             reduce using rule 99 (binaryexp -> param_binary .)
    OR              reduce using rule 99 (binaryexp -> param_binary .)
    PLUS            reduce using rule 99 (binaryexp -> param_binary .)
    MINUS           reduce using rule 99 (binaryexp -> param_binary .)
    TIMES           reduce using rule 99 (binaryexp -> param_binary .)
    DIVIDE          reduce using rule 99 (binaryexp -> param_binary .)
    MOD             reduce using rule 99 (binaryexp -> param_binary .)
    POW             reduce using rule 99 (binaryexp -> param_binary .)
    RBRACE          reduce using rule 99 (binaryexp -> param_binary .)
    RPAREN          reduce using rule 99 (binaryexp -> param_binary .)
    RSPAREN         reduce using rule 99 (binaryexp -> param_binary .)
    TO              reduce using rule 99 (binaryexp -> param_binary .)
    STEP            reduce using rule 99 (binaryexp -> param_binary .)
    DO              reduce using rule 99 (binaryexp -> param_binary .)
    COLON           reduce using rule 99 (binaryexp -> param_binary .)


state 24

    (100) binaryexp -> params_binary .

    SEMI_COLON      reduce using rule 100 (binaryexp -> params_binary .)
    COMMA           reduce using rule 100 (binaryexp -> params_binary .)
    $end            reduce using rule 100 (binaryexp -> params_binary .)
    BINARY_FNC      reduce using rule 100 (binaryexp -> params_binary .)
    GETVARIABLE     reduce using rule 100 (binaryexp -> params_binary .)
    SETVARIABLE     reduce using rule 100 (binaryexp -> params_binary .)
    PARAM           reduce using rule 100 (binaryexp -> params_binary .)
    PARAMS          reduce using rule 100 (binaryexp -> params_binary .)
    LT              reduce using rule 100 (binaryexp -> params_binary .)
    GT              reduce using rule 100 (binaryexp -> params_binary .)
    LTE             reduce using rule 100 (binaryexp -> params_binary .)
    GTE             reduce using rule 100 (binaryexp -> params_binary .)
    EQUALITY        reduce using rule 100 (binaryexp -> params_binary .)
    INEQUALITY      reduce using rule 100 (binaryexp -> params_binary .)
    AND             reduce using rule 100 (binaryexp -> params_binary .)
    OR              reduce using rule 100 (binaryexp -> params_binary .)
    PLUS            reduce using rule 100 (binaryexp -> params_binary .)
    MINUS           reduce using rule 100 (binaryexp -> params_binary .)
    TIMES           reduce using rule 100 (binaryexp -> params_binary .)
    DIVIDE          reduce using rule 100 (binaryexp -> params_binary .)
    MOD             reduce using rule 100 (binaryexp -> params_binary .)
    POW             reduce using rule 100 (binaryexp -> params_binary .)
    RBRACE          reduce using rule 100 (binaryexp -> params_binary .)
    RPAREN          reduce using rule 100 (binaryexp -> params_binary .)
    RSPAREN         reduce using rule 100 (binaryexp -> params_binary .)
    TO              reduce using rule 100 (binaryexp -> params_binary .)
    STEP            reduce using rule 100 (binaryexp -> params_binary .)
    DO              reduce using rule 100 (binaryexp -> params_binary .)
    COLON           reduce using rule 100 (binaryexp -> params_binary .)


state 25

    (123) nularexp -> NULAR_FNC .

    SEMI_COLON      reduce using rule 123 (nularexp -> NULAR_FNC .)
    COMMA           reduce using rule 123 (nularexp -> NULAR_FNC .)
    $end            reduce using rule 123 (nularexp -> NULAR_FNC .)
    BINARY_FNC      reduce using rule 123 (nularexp -> NULAR_FNC .)
    GETVARIABLE     reduce using rule 123 (nularexp -> NULAR_FNC .)
    SETVARIABLE     reduce using rule 123 (nularexp -> NULAR_FNC .)
    PARAM           reduce using rule 123 (nularexp -> NULAR_FNC .)
    PARAMS          reduce using rule 123 (nularexp -> NULAR_FNC .)
    LT              reduce using rule 123 (nularexp -> NULAR_FNC .)
    GT              reduce using rule 123 (nularexp -> NULAR_FNC .)
    LTE             reduce using rule 123 (nularexp -> NULAR_FNC .)
    GTE             reduce using rule 123 (nularexp -> NULAR_FNC .)
    EQUALITY        reduce using rule 123 (nularexp -> NULAR_FNC .)
    INEQUALITY      reduce using rule 123 (nularexp -> NULAR_FNC .)
    AND             reduce using rule 123 (nularexp -> NULAR_FNC .)
    OR              reduce using rule 123 (nularexp -> NULAR_FNC .)
    PLUS            reduce using rule 123 (nularexp -> NULAR_FNC .)
    MINUS           reduce using rule 123 (nularexp -> NULAR_FNC .)
    TIMES           reduce using rule 123 (nularexp -> NULAR_FNC .)
    DIVIDE          reduce using rule 123 (nularexp -> NULAR_FNC .)
    MOD             reduce using rule 123 (nularexp -> NULAR_FNC .)
    POW             reduce using rule 123 (nularexp -> NULAR_FNC .)
    RBRACE          reduce using rule 123 (nularexp -> NULAR_FNC .)
    RPAREN          reduce using rule 123 (nularexp -> NULAR_FNC .)
    RSPAREN         reduce using rule 123 (nularexp -> NULAR_FNC .)
    TO              reduce using rule 123 (nularexp -> NULAR_FNC .)
    STEP            reduce using rule 123 (nularexp -> NULAR_FNC .)
    DO              reduce using rule 123 (nularexp -> NULAR_FNC .)
    COLON           reduce using rule 123 (nularexp -> NULAR_FNC .)


state 26

    (124) nularexp -> identifier .
    (102) primaryexp -> identifier .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAM resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAMS resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 102 (primaryexp -> identifier .)
    BINARY_FNC      reduce using rule 102 (primaryexp -> identifier .)
    GETVARIABLE     reduce using rule 102 (primaryexp -> identifier .)
    SETVARIABLE     reduce using rule 102 (primaryexp -> identifier .)
    PARAM           reduce using rule 102 (primaryexp -> identifier .)
    PARAMS          reduce using rule 102 (primaryexp -> identifier .)
    LT              reduce using rule 102 (primaryexp -> identifier .)
    GT              reduce using rule 102 (primaryexp -> identifier .)
    LTE             reduce using rule 102 (primaryexp -> identifier .)
    GTE             reduce using rule 102 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 102 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 102 (primaryexp -> identifier .)
    AND             reduce using rule 102 (primaryexp -> identifier .)
    OR              reduce using rule 102 (primaryexp -> identifier .)
    PLUS            reduce using rule 102 (primaryexp -> identifier .)
    MINUS           reduce using rule 102 (primaryexp -> identifier .)
    TIMES           reduce using rule 102 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 102 (primaryexp -> identifier .)
    MOD             reduce using rule 102 (primaryexp -> identifier .)
    POW             reduce using rule 102 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 102 (primaryexp -> identifier .)
    COMMA           reduce using rule 102 (primaryexp -> identifier .)
    $end            reduce using rule 102 (primaryexp -> identifier .)
    RBRACE          reduce using rule 102 (primaryexp -> identifier .)

  ! SEMI_COLON      [ reduce using rule 124 (nularexp -> identifier .) ]
  ! COMMA           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! $end            [ reduce using rule 124 (nularexp -> identifier .) ]
  ! BINARY_FNC      [ reduce using rule 124 (nularexp -> identifier .) ]
  ! GETVARIABLE     [ reduce using rule 124 (nularexp -> identifier .) ]
  ! SETVARIABLE     [ reduce using rule 124 (nularexp -> identifier .) ]
  ! PARAM           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! PARAMS          [ reduce using rule 124 (nularexp -> identifier .) ]
  ! LT              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! GT              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! LTE             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! GTE             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! EQUALITY        [ reduce using rule 124 (nularexp -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 124 (nularexp -> identifier .) ]
  ! AND             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! OR              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! PLUS            [ reduce using rule 124 (nularexp -> identifier .) ]
  ! MINUS           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! TIMES           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! DIVIDE          [ reduce using rule 124 (nularexp -> identifier .) ]
  ! MOD             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! POW             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! RBRACE          [ reduce using rule 124 (nularexp -> identifier .) ]


state 27

    (125) unaryexp -> UNARY_FNC . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 91
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 28

    (126) unaryexp -> PLUS . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 103
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 29

    (127) unaryexp -> MINUS . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 104
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 30

    (128) unaryexp -> NOT . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 105
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 31

    (129) unaryexp -> vardefinition .

    SEMI_COLON      reduce using rule 129 (unaryexp -> vardefinition .)
    COMMA           reduce using rule 129 (unaryexp -> vardefinition .)
    $end            reduce using rule 129 (unaryexp -> vardefinition .)
    BINARY_FNC      reduce using rule 129 (unaryexp -> vardefinition .)
    GETVARIABLE     reduce using rule 129 (unaryexp -> vardefinition .)
    SETVARIABLE     reduce using rule 129 (unaryexp -> vardefinition .)
    PARAM           reduce using rule 129 (unaryexp -> vardefinition .)
    PARAMS          reduce using rule 129 (unaryexp -> vardefinition .)
    LT              reduce using rule 129 (unaryexp -> vardefinition .)
    GT              reduce using rule 129 (unaryexp -> vardefinition .)
    LTE             reduce using rule 129 (unaryexp -> vardefinition .)
    GTE             reduce using rule 129 (unaryexp -> vardefinition .)
    EQUALITY        reduce using rule 129 (unaryexp -> vardefinition .)
    INEQUALITY      reduce using rule 129 (unaryexp -> vardefinition .)
    AND             reduce using rule 129 (unaryexp -> vardefinition .)
    OR              reduce using rule 129 (unaryexp -> vardefinition .)
    PLUS            reduce using rule 129 (unaryexp -> vardefinition .)
    MINUS           reduce using rule 129 (unaryexp -> vardefinition .)
    TIMES           reduce using rule 129 (unaryexp -> vardefinition .)
    DIVIDE          reduce using rule 129 (unaryexp -> vardefinition .)
    MOD             reduce using rule 129 (unaryexp -> vardefinition .)
    POW             reduce using rule 129 (unaryexp -> vardefinition .)
    RBRACE          reduce using rule 129 (unaryexp -> vardefinition .)
    RPAREN          reduce using rule 129 (unaryexp -> vardefinition .)
    RSPAREN         reduce using rule 129 (unaryexp -> vardefinition .)
    TO              reduce using rule 129 (unaryexp -> vardefinition .)
    STEP            reduce using rule 129 (unaryexp -> vardefinition .)
    DO              reduce using rule 129 (unaryexp -> vardefinition .)
    COLON           reduce using rule 129 (unaryexp -> vardefinition .)


state 32

    (130) unaryexp -> param_unary .

    SEMI_COLON      reduce using rule 130 (unaryexp -> param_unary .)
    COMMA           reduce using rule 130 (unaryexp -> param_unary .)
    $end            reduce using rule 130 (unaryexp -> param_unary .)
    BINARY_FNC      reduce using rule 130 (unaryexp -> param_unary .)
    GETVARIABLE     reduce using rule 130 (unaryexp -> param_unary .)
    SETVARIABLE     reduce using rule 130 (unaryexp -> param_unary .)
    PARAM           reduce using rule 130 (unaryexp -> param_unary .)
    PARAMS          reduce using rule 130 (unaryexp -> param_unary .)
    LT              reduce using rule 130 (unaryexp -> param_unary .)
    GT              reduce using rule 130 (unaryexp -> param_unary .)
    LTE             reduce using rule 130 (unaryexp -> param_unary .)
    GTE             reduce using rule 130 (unaryexp -> param_unary .)
    EQUALITY        reduce using rule 130 (unaryexp -> param_unary .)
    INEQUALITY      reduce using rule 130 (unaryexp -> param_unary .)
    AND             reduce using rule 130 (unaryexp -> param_unary .)
    OR              reduce using rule 130 (unaryexp -> param_unary .)
    PLUS            reduce using rule 130 (unaryexp -> param_unary .)
    MINUS           reduce using rule 130 (unaryexp -> param_unary .)
    TIMES           reduce using rule 130 (unaryexp -> param_unary .)
    DIVIDE          reduce using rule 130 (unaryexp -> param_unary .)
    MOD             reduce using rule 130 (unaryexp -> param_unary .)
    POW             reduce using rule 130 (unaryexp -> param_unary .)
    RBRACE          reduce using rule 130 (unaryexp -> param_unary .)
    RPAREN          reduce using rule 130 (unaryexp -> param_unary .)
    RSPAREN         reduce using rule 130 (unaryexp -> param_unary .)
    TO              reduce using rule 130 (unaryexp -> param_unary .)
    STEP            reduce using rule 130 (unaryexp -> param_unary .)
    DO              reduce using rule 130 (unaryexp -> param_unary .)
    COLON           reduce using rule 130 (unaryexp -> param_unary .)


state 33

    (131) unaryexp -> params_unary .

    SEMI_COLON      reduce using rule 131 (unaryexp -> params_unary .)
    COMMA           reduce using rule 131 (unaryexp -> params_unary .)
    $end            reduce using rule 131 (unaryexp -> params_unary .)
    BINARY_FNC      reduce using rule 131 (unaryexp -> params_unary .)
    GETVARIABLE     reduce using rule 131 (unaryexp -> params_unary .)
    SETVARIABLE     reduce using rule 131 (unaryexp -> params_unary .)
    PARAM           reduce using rule 131 (unaryexp -> params_unary .)
    PARAMS          reduce using rule 131 (unaryexp -> params_unary .)
    LT              reduce using rule 131 (unaryexp -> params_unary .)
    GT              reduce using rule 131 (unaryexp -> params_unary .)
    LTE             reduce using rule 131 (unaryexp -> params_unary .)
    GTE             reduce using rule 131 (unaryexp -> params_unary .)
    EQUALITY        reduce using rule 131 (unaryexp -> params_unary .)
    INEQUALITY      reduce using rule 131 (unaryexp -> params_unary .)
    AND             reduce using rule 131 (unaryexp -> params_unary .)
    OR              reduce using rule 131 (unaryexp -> params_unary .)
    PLUS            reduce using rule 131 (unaryexp -> params_unary .)
    MINUS           reduce using rule 131 (unaryexp -> params_unary .)
    TIMES           reduce using rule 131 (unaryexp -> params_unary .)
    DIVIDE          reduce using rule 131 (unaryexp -> params_unary .)
    MOD             reduce using rule 131 (unaryexp -> params_unary .)
    POW             reduce using rule 131 (unaryexp -> params_unary .)
    RBRACE          reduce using rule 131 (unaryexp -> params_unary .)
    RPAREN          reduce using rule 131 (unaryexp -> params_unary .)
    RSPAREN         reduce using rule 131 (unaryexp -> params_unary .)
    TO              reduce using rule 131 (unaryexp -> params_unary .)
    STEP            reduce using rule 131 (unaryexp -> params_unary .)
    DO              reduce using rule 131 (unaryexp -> params_unary .)
    COLON           reduce using rule 131 (unaryexp -> params_unary .)


state 34

    (101) primaryexp -> number .

    BINARY_FNC      reduce using rule 101 (primaryexp -> number .)
    GETVARIABLE     reduce using rule 101 (primaryexp -> number .)
    SETVARIABLE     reduce using rule 101 (primaryexp -> number .)
    PARAM           reduce using rule 101 (primaryexp -> number .)
    PARAMS          reduce using rule 101 (primaryexp -> number .)
    LT              reduce using rule 101 (primaryexp -> number .)
    GT              reduce using rule 101 (primaryexp -> number .)
    LTE             reduce using rule 101 (primaryexp -> number .)
    GTE             reduce using rule 101 (primaryexp -> number .)
    EQUALITY        reduce using rule 101 (primaryexp -> number .)
    INEQUALITY      reduce using rule 101 (primaryexp -> number .)
    AND             reduce using rule 101 (primaryexp -> number .)
    OR              reduce using rule 101 (primaryexp -> number .)
    PLUS            reduce using rule 101 (primaryexp -> number .)
    MINUS           reduce using rule 101 (primaryexp -> number .)
    TIMES           reduce using rule 101 (primaryexp -> number .)
    DIVIDE          reduce using rule 101 (primaryexp -> number .)
    MOD             reduce using rule 101 (primaryexp -> number .)
    POW             reduce using rule 101 (primaryexp -> number .)
    SEMI_COLON      reduce using rule 101 (primaryexp -> number .)
    COMMA           reduce using rule 101 (primaryexp -> number .)
    $end            reduce using rule 101 (primaryexp -> number .)
    RBRACE          reduce using rule 101 (primaryexp -> number .)
    RPAREN          reduce using rule 101 (primaryexp -> number .)
    RSPAREN         reduce using rule 101 (primaryexp -> number .)
    TO              reduce using rule 101 (primaryexp -> number .)
    STEP            reduce using rule 101 (primaryexp -> number .)
    DO              reduce using rule 101 (primaryexp -> number .)
    COLON           reduce using rule 101 (primaryexp -> number .)


state 35

    (104) primaryexp -> helpertype .

    BINARY_FNC      reduce using rule 104 (primaryexp -> helpertype .)
    GETVARIABLE     reduce using rule 104 (primaryexp -> helpertype .)
    SETVARIABLE     reduce using rule 104 (primaryexp -> helpertype .)
    PARAM           reduce using rule 104 (primaryexp -> helpertype .)
    PARAMS          reduce using rule 104 (primaryexp -> helpertype .)
    LT              reduce using rule 104 (primaryexp -> helpertype .)
    GT              reduce using rule 104 (primaryexp -> helpertype .)
    LTE             reduce using rule 104 (primaryexp -> helpertype .)
    GTE             reduce using rule 104 (primaryexp -> helpertype .)
    EQUALITY        reduce using rule 104 (primaryexp -> helpertype .)
    INEQUALITY      reduce using rule 104 (primaryexp -> helpertype .)
    AND             reduce using rule 104 (primaryexp -> helpertype .)
    OR              reduce using rule 104 (primaryexp -> helpertype .)
    PLUS            reduce using rule 104 (primaryexp -> helpertype .)
    MINUS           reduce using rule 104 (primaryexp -> helpertype .)
    TIMES           reduce using rule 104 (primaryexp -> helpertype .)
    DIVIDE          reduce using rule 104 (primaryexp -> helpertype .)
    MOD             reduce using rule 104 (primaryexp -> helpertype .)
    POW             reduce using rule 104 (primaryexp -> helpertype .)
    SEMI_COLON      reduce using rule 104 (primaryexp -> helpertype .)
    COMMA           reduce using rule 104 (primaryexp -> helpertype .)
    $end            reduce using rule 104 (primaryexp -> helpertype .)
    RBRACE          reduce using rule 104 (primaryexp -> helpertype .)
    RPAREN          reduce using rule 104 (primaryexp -> helpertype .)
    RSPAREN         reduce using rule 104 (primaryexp -> helpertype .)
    TO              reduce using rule 104 (primaryexp -> helpertype .)
    STEP            reduce using rule 104 (primaryexp -> helpertype .)
    DO              reduce using rule 104 (primaryexp -> helpertype .)
    COLON           reduce using rule 104 (primaryexp -> helpertype .)


state 36

    (105) primaryexp -> array .

    BINARY_FNC      reduce using rule 105 (primaryexp -> array .)
    GETVARIABLE     reduce using rule 105 (primaryexp -> array .)
    SETVARIABLE     reduce using rule 105 (primaryexp -> array .)
    PARAM           reduce using rule 105 (primaryexp -> array .)
    PARAMS          reduce using rule 105 (primaryexp -> array .)
    LT              reduce using rule 105 (primaryexp -> array .)
    GT              reduce using rule 105 (primaryexp -> array .)
    LTE             reduce using rule 105 (primaryexp -> array .)
    GTE             reduce using rule 105 (primaryexp -> array .)
    EQUALITY        reduce using rule 105 (primaryexp -> array .)
    INEQUALITY      reduce using rule 105 (primaryexp -> array .)
    AND             reduce using rule 105 (primaryexp -> array .)
    OR              reduce using rule 105 (primaryexp -> array .)
    PLUS            reduce using rule 105 (primaryexp -> array .)
    MINUS           reduce using rule 105 (primaryexp -> array .)
    TIMES           reduce using rule 105 (primaryexp -> array .)
    DIVIDE          reduce using rule 105 (primaryexp -> array .)
    MOD             reduce using rule 105 (primaryexp -> array .)
    POW             reduce using rule 105 (primaryexp -> array .)
    SEMI_COLON      reduce using rule 105 (primaryexp -> array .)
    COMMA           reduce using rule 105 (primaryexp -> array .)
    $end            reduce using rule 105 (primaryexp -> array .)
    RBRACE          reduce using rule 105 (primaryexp -> array .)
    RPAREN          reduce using rule 105 (primaryexp -> array .)
    RSPAREN         reduce using rule 105 (primaryexp -> array .)
    TO              reduce using rule 105 (primaryexp -> array .)
    STEP            reduce using rule 105 (primaryexp -> array .)
    DO              reduce using rule 105 (primaryexp -> array .)
    COLON           reduce using rule 105 (primaryexp -> array .)


state 37

    (108) primaryexp -> string .

    BINARY_FNC      reduce using rule 108 (primaryexp -> string .)
    GETVARIABLE     reduce using rule 108 (primaryexp -> string .)
    SETVARIABLE     reduce using rule 108 (primaryexp -> string .)
    PARAM           reduce using rule 108 (primaryexp -> string .)
    PARAMS          reduce using rule 108 (primaryexp -> string .)
    LT              reduce using rule 108 (primaryexp -> string .)
    GT              reduce using rule 108 (primaryexp -> string .)
    LTE             reduce using rule 108 (primaryexp -> string .)
    GTE             reduce using rule 108 (primaryexp -> string .)
    EQUALITY        reduce using rule 108 (primaryexp -> string .)
    INEQUALITY      reduce using rule 108 (primaryexp -> string .)
    AND             reduce using rule 108 (primaryexp -> string .)
    OR              reduce using rule 108 (primaryexp -> string .)
    PLUS            reduce using rule 108 (primaryexp -> string .)
    MINUS           reduce using rule 108 (primaryexp -> string .)
    TIMES           reduce using rule 108 (primaryexp -> string .)
    DIVIDE          reduce using rule 108 (primaryexp -> string .)
    MOD             reduce using rule 108 (primaryexp -> string .)
    POW             reduce using rule 108 (primaryexp -> string .)
    SEMI_COLON      reduce using rule 108 (primaryexp -> string .)
    COMMA           reduce using rule 108 (primaryexp -> string .)
    $end            reduce using rule 108 (primaryexp -> string .)
    RBRACE          reduce using rule 108 (primaryexp -> string .)
    RPAREN          reduce using rule 108 (primaryexp -> string .)
    RSPAREN         reduce using rule 108 (primaryexp -> string .)
    TO              reduce using rule 108 (primaryexp -> string .)
    STEP            reduce using rule 108 (primaryexp -> string .)
    DO              reduce using rule 108 (primaryexp -> string .)
    COLON           reduce using rule 108 (primaryexp -> string .)


state 38

    (110) primaryexp -> bracedexp .
    (39) foreachloop -> bracedexp . FOREACH array
    (40) foreachloop -> bracedexp . FOREACH primaryexp
    (41) foreachloop -> bracedexp . FOREACH LPAREN primaryexp RPAREN

    BINARY_FNC      reduce using rule 110 (primaryexp -> bracedexp .)
    GETVARIABLE     reduce using rule 110 (primaryexp -> bracedexp .)
    SETVARIABLE     reduce using rule 110 (primaryexp -> bracedexp .)
    PARAM           reduce using rule 110 (primaryexp -> bracedexp .)
    PARAMS          reduce using rule 110 (primaryexp -> bracedexp .)
    LT              reduce using rule 110 (primaryexp -> bracedexp .)
    GT              reduce using rule 110 (primaryexp -> bracedexp .)
    LTE             reduce using rule 110 (primaryexp -> bracedexp .)
    GTE             reduce using rule 110 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 110 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 110 (primaryexp -> bracedexp .)
    AND             reduce using rule 110 (primaryexp -> bracedexp .)
    OR              reduce using rule 110 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 110 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 110 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 110 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 110 (primaryexp -> bracedexp .)
    MOD             reduce using rule 110 (primaryexp -> bracedexp .)
    POW             reduce using rule 110 (primaryexp -> bracedexp .)
    SEMI_COLON      reduce using rule 110 (primaryexp -> bracedexp .)
    COMMA           reduce using rule 110 (primaryexp -> bracedexp .)
    $end            reduce using rule 110 (primaryexp -> bracedexp .)
    RBRACE          reduce using rule 110 (primaryexp -> bracedexp .)
    RPAREN          reduce using rule 110 (primaryexp -> bracedexp .)
    RSPAREN         reduce using rule 110 (primaryexp -> bracedexp .)
    TO              reduce using rule 110 (primaryexp -> bracedexp .)
    STEP            reduce using rule 110 (primaryexp -> bracedexp .)
    DO              reduce using rule 110 (primaryexp -> bracedexp .)
    COLON           reduce using rule 110 (primaryexp -> bracedexp .)
    FOREACH         shift and go to state 106


state 39

    (111) primaryexp -> LPAREN . primaryexp RPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 107
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 40

    (31) ifstatement -> iftype . THEN bracedexp ELSE bracedexp
    (32) ifstatement -> iftype . THEN bracedexp
    (33) ifstatement -> iftype . EXITWITH bracedexp
    (18) helpertype -> iftype .

    THEN            shift and go to state 108
    EXITWITH        shift and go to state 109
    BINARY_FNC      reduce using rule 18 (helpertype -> iftype .)
    GETVARIABLE     reduce using rule 18 (helpertype -> iftype .)
    SETVARIABLE     reduce using rule 18 (helpertype -> iftype .)
    PARAM           reduce using rule 18 (helpertype -> iftype .)
    PARAMS          reduce using rule 18 (helpertype -> iftype .)
    LT              reduce using rule 18 (helpertype -> iftype .)
    GT              reduce using rule 18 (helpertype -> iftype .)
    LTE             reduce using rule 18 (helpertype -> iftype .)
    GTE             reduce using rule 18 (helpertype -> iftype .)
    EQUALITY        reduce using rule 18 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 18 (helpertype -> iftype .)
    AND             reduce using rule 18 (helpertype -> iftype .)
    OR              reduce using rule 18 (helpertype -> iftype .)
    PLUS            reduce using rule 18 (helpertype -> iftype .)
    MINUS           reduce using rule 18 (helpertype -> iftype .)
    TIMES           reduce using rule 18 (helpertype -> iftype .)
    DIVIDE          reduce using rule 18 (helpertype -> iftype .)
    MOD             reduce using rule 18 (helpertype -> iftype .)
    POW             reduce using rule 18 (helpertype -> iftype .)
    SEMI_COLON      reduce using rule 18 (helpertype -> iftype .)
    COMMA           reduce using rule 18 (helpertype -> iftype .)
    $end            reduce using rule 18 (helpertype -> iftype .)
    RBRACE          reduce using rule 18 (helpertype -> iftype .)


state 41

    (38) whileloop -> whiletype . DO bracedexp
    (19) helpertype -> whiletype .

    DO              shift and go to state 110
    BINARY_FNC      reduce using rule 19 (helpertype -> whiletype .)
    GETVARIABLE     reduce using rule 19 (helpertype -> whiletype .)
    SETVARIABLE     reduce using rule 19 (helpertype -> whiletype .)
    PARAM           reduce using rule 19 (helpertype -> whiletype .)
    PARAMS          reduce using rule 19 (helpertype -> whiletype .)
    LT              reduce using rule 19 (helpertype -> whiletype .)
    GT              reduce using rule 19 (helpertype -> whiletype .)
    LTE             reduce using rule 19 (helpertype -> whiletype .)
    GTE             reduce using rule 19 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 19 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 19 (helpertype -> whiletype .)
    AND             reduce using rule 19 (helpertype -> whiletype .)
    OR              reduce using rule 19 (helpertype -> whiletype .)
    PLUS            reduce using rule 19 (helpertype -> whiletype .)
    MINUS           reduce using rule 19 (helpertype -> whiletype .)
    TIMES           reduce using rule 19 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 19 (helpertype -> whiletype .)
    MOD             reduce using rule 19 (helpertype -> whiletype .)
    POW             reduce using rule 19 (helpertype -> whiletype .)
    SEMI_COLON      reduce using rule 19 (helpertype -> whiletype .)
    COMMA           reduce using rule 19 (helpertype -> whiletype .)
    $end            reduce using rule 19 (helpertype -> whiletype .)
    RBRACE          reduce using rule 19 (helpertype -> whiletype .)


state 42

    (45) forloop -> fortype . DO bracedexp_noscope
    (20) helpertype -> fortype .

    DO              shift and go to state 111
    BINARY_FNC      reduce using rule 20 (helpertype -> fortype .)
    GETVARIABLE     reduce using rule 20 (helpertype -> fortype .)
    SETVARIABLE     reduce using rule 20 (helpertype -> fortype .)
    PARAM           reduce using rule 20 (helpertype -> fortype .)
    PARAMS          reduce using rule 20 (helpertype -> fortype .)
    LT              reduce using rule 20 (helpertype -> fortype .)
    GT              reduce using rule 20 (helpertype -> fortype .)
    LTE             reduce using rule 20 (helpertype -> fortype .)
    GTE             reduce using rule 20 (helpertype -> fortype .)
    EQUALITY        reduce using rule 20 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 20 (helpertype -> fortype .)
    AND             reduce using rule 20 (helpertype -> fortype .)
    OR              reduce using rule 20 (helpertype -> fortype .)
    PLUS            reduce using rule 20 (helpertype -> fortype .)
    MINUS           reduce using rule 20 (helpertype -> fortype .)
    TIMES           reduce using rule 20 (helpertype -> fortype .)
    DIVIDE          reduce using rule 20 (helpertype -> fortype .)
    MOD             reduce using rule 20 (helpertype -> fortype .)
    POW             reduce using rule 20 (helpertype -> fortype .)
    SEMI_COLON      reduce using rule 20 (helpertype -> fortype .)
    COMMA           reduce using rule 20 (helpertype -> fortype .)
    $end            reduce using rule 20 (helpertype -> fortype .)
    RBRACE          reduce using rule 20 (helpertype -> fortype .)


state 43

    (36) withstatement -> withstatementinit . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 112

state 44

    (25) switchstatement -> SWITCH . LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE

    LPAREN          shift and go to state 113


state 45

    (112) bracedexp -> LBRACE . new_scope code RBRACE
    (113) bracedexp -> LBRACE . RBRACE
    (114) new_scope -> .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 115
    NULAR_FNC       reduce using rule 114 (new_scope -> .)
    UNARY_FNC       reduce using rule 114 (new_scope -> .)
    PLUS            reduce using rule 114 (new_scope -> .)
    MINUS           reduce using rule 114 (new_scope -> .)
    NOT             reduce using rule 114 (new_scope -> .)
    LPAREN          reduce using rule 114 (new_scope -> .)
    SWITCH          reduce using rule 114 (new_scope -> .)
    PRIVATE         reduce using rule 114 (new_scope -> .)
    PRIVATE_ID      reduce using rule 114 (new_scope -> .)
    GLOBAL_ID       reduce using rule 114 (new_scope -> .)
    NAMESPACE       reduce using rule 114 (new_scope -> .)
    PARAM           reduce using rule 114 (new_scope -> .)
    PARAMS          reduce using rule 114 (new_scope -> .)
    NUMBER_REAL     reduce using rule 114 (new_scope -> .)
    NUMBER_EXP      reduce using rule 114 (new_scope -> .)
    NUMBER_HEX      reduce using rule 114 (new_scope -> .)
    LSPAREN         reduce using rule 114 (new_scope -> .)
    STRING_SINGLE   reduce using rule 114 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 114 (new_scope -> .)
    LBRACE          reduce using rule 114 (new_scope -> .)
    IF              reduce using rule 114 (new_scope -> .)
    WHILE           reduce using rule 114 (new_scope -> .)
    FOR             reduce using rule 114 (new_scope -> .)
    WITH            reduce using rule 114 (new_scope -> .)

  ! RBRACE          [ reduce using rule 114 (new_scope -> .) ]

    new_scope                      shift and go to state 114

state 46

    (86) definition -> PRIVATE . PRIVATE_ID
    (87) definition -> PRIVATE . string
    (85) arraydefinition -> PRIVATE . stringarray
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (119) stringarray -> . LSPAREN RSPAREN
    (120) stringarray -> . LSPAREN stringarrayelement RSPAREN

    PRIVATE_ID      shift and go to state 116
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LSPAREN         shift and go to state 119

    string                         shift and go to state 117
    stringarray                    shift and go to state 118

state 47

    (90) variable -> PRIVATE_ID .
    (88) identifier -> PRIVATE_ID .

    EQUAL           reduce using rule 90 (variable -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 88 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 88 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 88 (identifier -> PRIVATE_ID .)
    BINARY_FNC      reduce using rule 88 (identifier -> PRIVATE_ID .)
    GETVARIABLE     reduce using rule 88 (identifier -> PRIVATE_ID .)
    SETVARIABLE     reduce using rule 88 (identifier -> PRIVATE_ID .)
    PARAM           reduce using rule 88 (identifier -> PRIVATE_ID .)
    PARAMS          reduce using rule 88 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 88 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 88 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 88 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 88 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 88 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 88 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 88 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 88 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 88 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 88 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 88 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 88 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 88 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 88 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 88 (identifier -> PRIVATE_ID .)


state 48

    (91) variable -> GLOBAL_ID .
    (89) identifier -> GLOBAL_ID .

    EQUAL           reduce using rule 91 (variable -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 89 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 89 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 89 (identifier -> GLOBAL_ID .)
    BINARY_FNC      reduce using rule 89 (identifier -> GLOBAL_ID .)
    GETVARIABLE     reduce using rule 89 (identifier -> GLOBAL_ID .)
    SETVARIABLE     reduce using rule 89 (identifier -> GLOBAL_ID .)
    PARAM           reduce using rule 89 (identifier -> GLOBAL_ID .)
    PARAMS          reduce using rule 89 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 89 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 89 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 89 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 89 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 89 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 89 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 89 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 89 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 89 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 89 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 89 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 89 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 89 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 89 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 89 (identifier -> GLOBAL_ID .)


state 49

    (49) getvariable_ns -> NAMESPACE . GETVARIABLE string
    (50) getvariable_ns -> NAMESPACE . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> NAMESPACE . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> NAMESPACE . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    GETVARIABLE     shift and go to state 120
    SETVARIABLE     shift and go to state 121


state 50

    (115) array -> LSPAREN . RSPAREN
    (116) array -> LSPAREN . arrayelement RSPAREN
    (117) arrayelement -> . primaryexp
    (118) arrayelement -> . primaryexp COMMA arrayelement
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    RSPAREN         shift and go to state 122
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    arrayelement                   shift and go to state 123
    primaryexp                     shift and go to state 124
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 51

    (57) param_unary -> PARAM . LSPAREN number RSPAREN
    (58) param_unary -> PARAM . LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> PARAM . LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN

    LSPAREN         shift and go to state 125


state 52

    (67) params_unary -> PARAMS . params_array
    (69) params_array -> . LSPAREN RSPAREN
    (70) params_array -> . LSPAREN params_element RSPAREN

    LSPAREN         shift and go to state 127

    params_array                   shift and go to state 126

state 53

    (79) vardefinition -> arraydefinition .

    SEMI_COLON      reduce using rule 79 (vardefinition -> arraydefinition .)
    COMMA           reduce using rule 79 (vardefinition -> arraydefinition .)
    $end            reduce using rule 79 (vardefinition -> arraydefinition .)
    BINARY_FNC      reduce using rule 79 (vardefinition -> arraydefinition .)
    GETVARIABLE     reduce using rule 79 (vardefinition -> arraydefinition .)
    SETVARIABLE     reduce using rule 79 (vardefinition -> arraydefinition .)
    PARAM           reduce using rule 79 (vardefinition -> arraydefinition .)
    PARAMS          reduce using rule 79 (vardefinition -> arraydefinition .)
    LT              reduce using rule 79 (vardefinition -> arraydefinition .)
    GT              reduce using rule 79 (vardefinition -> arraydefinition .)
    LTE             reduce using rule 79 (vardefinition -> arraydefinition .)
    GTE             reduce using rule 79 (vardefinition -> arraydefinition .)
    EQUALITY        reduce using rule 79 (vardefinition -> arraydefinition .)
    INEQUALITY      reduce using rule 79 (vardefinition -> arraydefinition .)
    AND             reduce using rule 79 (vardefinition -> arraydefinition .)
    OR              reduce using rule 79 (vardefinition -> arraydefinition .)
    PLUS            reduce using rule 79 (vardefinition -> arraydefinition .)
    MINUS           reduce using rule 79 (vardefinition -> arraydefinition .)
    TIMES           reduce using rule 79 (vardefinition -> arraydefinition .)
    DIVIDE          reduce using rule 79 (vardefinition -> arraydefinition .)
    MOD             reduce using rule 79 (vardefinition -> arraydefinition .)
    POW             reduce using rule 79 (vardefinition -> arraydefinition .)
    RBRACE          reduce using rule 79 (vardefinition -> arraydefinition .)
    RPAREN          reduce using rule 79 (vardefinition -> arraydefinition .)
    RSPAREN         reduce using rule 79 (vardefinition -> arraydefinition .)
    TO              reduce using rule 79 (vardefinition -> arraydefinition .)
    STEP            reduce using rule 79 (vardefinition -> arraydefinition .)
    DO              reduce using rule 79 (vardefinition -> arraydefinition .)
    COLON           reduce using rule 79 (vardefinition -> arraydefinition .)


state 54

    (151) number -> NUMBER_REAL .

    BINARY_FNC      reduce using rule 151 (number -> NUMBER_REAL .)
    GETVARIABLE     reduce using rule 151 (number -> NUMBER_REAL .)
    SETVARIABLE     reduce using rule 151 (number -> NUMBER_REAL .)
    PARAM           reduce using rule 151 (number -> NUMBER_REAL .)
    PARAMS          reduce using rule 151 (number -> NUMBER_REAL .)
    LT              reduce using rule 151 (number -> NUMBER_REAL .)
    GT              reduce using rule 151 (number -> NUMBER_REAL .)
    LTE             reduce using rule 151 (number -> NUMBER_REAL .)
    GTE             reduce using rule 151 (number -> NUMBER_REAL .)
    EQUALITY        reduce using rule 151 (number -> NUMBER_REAL .)
    INEQUALITY      reduce using rule 151 (number -> NUMBER_REAL .)
    AND             reduce using rule 151 (number -> NUMBER_REAL .)
    OR              reduce using rule 151 (number -> NUMBER_REAL .)
    PLUS            reduce using rule 151 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 151 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 151 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 151 (number -> NUMBER_REAL .)
    MOD             reduce using rule 151 (number -> NUMBER_REAL .)
    POW             reduce using rule 151 (number -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 151 (number -> NUMBER_REAL .)
    COMMA           reduce using rule 151 (number -> NUMBER_REAL .)
    $end            reduce using rule 151 (number -> NUMBER_REAL .)
    RBRACE          reduce using rule 151 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 151 (number -> NUMBER_REAL .)
    RSPAREN         reduce using rule 151 (number -> NUMBER_REAL .)
    TO              reduce using rule 151 (number -> NUMBER_REAL .)
    STEP            reduce using rule 151 (number -> NUMBER_REAL .)
    DO              reduce using rule 151 (number -> NUMBER_REAL .)
    COLON           reduce using rule 151 (number -> NUMBER_REAL .)


state 55

    (152) number -> NUMBER_EXP .

    BINARY_FNC      reduce using rule 152 (number -> NUMBER_EXP .)
    GETVARIABLE     reduce using rule 152 (number -> NUMBER_EXP .)
    SETVARIABLE     reduce using rule 152 (number -> NUMBER_EXP .)
    PARAM           reduce using rule 152 (number -> NUMBER_EXP .)
    PARAMS          reduce using rule 152 (number -> NUMBER_EXP .)
    LT              reduce using rule 152 (number -> NUMBER_EXP .)
    GT              reduce using rule 152 (number -> NUMBER_EXP .)
    LTE             reduce using rule 152 (number -> NUMBER_EXP .)
    GTE             reduce using rule 152 (number -> NUMBER_EXP .)
    EQUALITY        reduce using rule 152 (number -> NUMBER_EXP .)
    INEQUALITY      reduce using rule 152 (number -> NUMBER_EXP .)
    AND             reduce using rule 152 (number -> NUMBER_EXP .)
    OR              reduce using rule 152 (number -> NUMBER_EXP .)
    PLUS            reduce using rule 152 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 152 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 152 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 152 (number -> NUMBER_EXP .)
    MOD             reduce using rule 152 (number -> NUMBER_EXP .)
    POW             reduce using rule 152 (number -> NUMBER_EXP .)
    SEMI_COLON      reduce using rule 152 (number -> NUMBER_EXP .)
    COMMA           reduce using rule 152 (number -> NUMBER_EXP .)
    $end            reduce using rule 152 (number -> NUMBER_EXP .)
    RBRACE          reduce using rule 152 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 152 (number -> NUMBER_EXP .)
    RSPAREN         reduce using rule 152 (number -> NUMBER_EXP .)
    TO              reduce using rule 152 (number -> NUMBER_EXP .)
    STEP            reduce using rule 152 (number -> NUMBER_EXP .)
    DO              reduce using rule 152 (number -> NUMBER_EXP .)
    COLON           reduce using rule 152 (number -> NUMBER_EXP .)


state 56

    (153) number -> NUMBER_HEX .

    BINARY_FNC      reduce using rule 153 (number -> NUMBER_HEX .)
    GETVARIABLE     reduce using rule 153 (number -> NUMBER_HEX .)
    SETVARIABLE     reduce using rule 153 (number -> NUMBER_HEX .)
    PARAM           reduce using rule 153 (number -> NUMBER_HEX .)
    PARAMS          reduce using rule 153 (number -> NUMBER_HEX .)
    LT              reduce using rule 153 (number -> NUMBER_HEX .)
    GT              reduce using rule 153 (number -> NUMBER_HEX .)
    LTE             reduce using rule 153 (number -> NUMBER_HEX .)
    GTE             reduce using rule 153 (number -> NUMBER_HEX .)
    EQUALITY        reduce using rule 153 (number -> NUMBER_HEX .)
    INEQUALITY      reduce using rule 153 (number -> NUMBER_HEX .)
    AND             reduce using rule 153 (number -> NUMBER_HEX .)
    OR              reduce using rule 153 (number -> NUMBER_HEX .)
    PLUS            reduce using rule 153 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 153 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 153 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 153 (number -> NUMBER_HEX .)
    MOD             reduce using rule 153 (number -> NUMBER_HEX .)
    POW             reduce using rule 153 (number -> NUMBER_HEX .)
    SEMI_COLON      reduce using rule 153 (number -> NUMBER_HEX .)
    COMMA           reduce using rule 153 (number -> NUMBER_HEX .)
    $end            reduce using rule 153 (number -> NUMBER_HEX .)
    RBRACE          reduce using rule 153 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 153 (number -> NUMBER_HEX .)
    RSPAREN         reduce using rule 153 (number -> NUMBER_HEX .)
    TO              reduce using rule 153 (number -> NUMBER_HEX .)
    STEP            reduce using rule 153 (number -> NUMBER_HEX .)
    DO              reduce using rule 153 (number -> NUMBER_HEX .)
    COLON           reduce using rule 153 (number -> NUMBER_HEX .)


state 57

    (21) helpertype -> withtype .
    (35) withstatementinit -> withtype . DO

  ! shift/reduce conflict for DO resolved as shift
    BINARY_FNC      reduce using rule 21 (helpertype -> withtype .)
    GETVARIABLE     reduce using rule 21 (helpertype -> withtype .)
    SETVARIABLE     reduce using rule 21 (helpertype -> withtype .)
    PARAM           reduce using rule 21 (helpertype -> withtype .)
    PARAMS          reduce using rule 21 (helpertype -> withtype .)
    LT              reduce using rule 21 (helpertype -> withtype .)
    GT              reduce using rule 21 (helpertype -> withtype .)
    LTE             reduce using rule 21 (helpertype -> withtype .)
    GTE             reduce using rule 21 (helpertype -> withtype .)
    EQUALITY        reduce using rule 21 (helpertype -> withtype .)
    INEQUALITY      reduce using rule 21 (helpertype -> withtype .)
    AND             reduce using rule 21 (helpertype -> withtype .)
    OR              reduce using rule 21 (helpertype -> withtype .)
    PLUS            reduce using rule 21 (helpertype -> withtype .)
    MINUS           reduce using rule 21 (helpertype -> withtype .)
    TIMES           reduce using rule 21 (helpertype -> withtype .)
    DIVIDE          reduce using rule 21 (helpertype -> withtype .)
    MOD             reduce using rule 21 (helpertype -> withtype .)
    POW             reduce using rule 21 (helpertype -> withtype .)
    SEMI_COLON      reduce using rule 21 (helpertype -> withtype .)
    COMMA           reduce using rule 21 (helpertype -> withtype .)
    $end            reduce using rule 21 (helpertype -> withtype .)
    RBRACE          reduce using rule 21 (helpertype -> withtype .)
    RPAREN          reduce using rule 21 (helpertype -> withtype .)
    RSPAREN         reduce using rule 21 (helpertype -> withtype .)
    TO              reduce using rule 21 (helpertype -> withtype .)
    STEP            reduce using rule 21 (helpertype -> withtype .)
    COLON           reduce using rule 21 (helpertype -> withtype .)
    DO              shift and go to state 128

  ! DO              [ reduce using rule 21 (helpertype -> withtype .) ]


state 58

    (154) string -> STRING_SINGLE .

    BINARY_FNC      reduce using rule 154 (string -> STRING_SINGLE .)
    GETVARIABLE     reduce using rule 154 (string -> STRING_SINGLE .)
    SETVARIABLE     reduce using rule 154 (string -> STRING_SINGLE .)
    PARAM           reduce using rule 154 (string -> STRING_SINGLE .)
    PARAMS          reduce using rule 154 (string -> STRING_SINGLE .)
    LT              reduce using rule 154 (string -> STRING_SINGLE .)
    GT              reduce using rule 154 (string -> STRING_SINGLE .)
    LTE             reduce using rule 154 (string -> STRING_SINGLE .)
    GTE             reduce using rule 154 (string -> STRING_SINGLE .)
    EQUALITY        reduce using rule 154 (string -> STRING_SINGLE .)
    INEQUALITY      reduce using rule 154 (string -> STRING_SINGLE .)
    AND             reduce using rule 154 (string -> STRING_SINGLE .)
    OR              reduce using rule 154 (string -> STRING_SINGLE .)
    PLUS            reduce using rule 154 (string -> STRING_SINGLE .)
    MINUS           reduce using rule 154 (string -> STRING_SINGLE .)
    TIMES           reduce using rule 154 (string -> STRING_SINGLE .)
    DIVIDE          reduce using rule 154 (string -> STRING_SINGLE .)
    MOD             reduce using rule 154 (string -> STRING_SINGLE .)
    POW             reduce using rule 154 (string -> STRING_SINGLE .)
    SEMI_COLON      reduce using rule 154 (string -> STRING_SINGLE .)
    COMMA           reduce using rule 154 (string -> STRING_SINGLE .)
    $end            reduce using rule 154 (string -> STRING_SINGLE .)
    RBRACE          reduce using rule 154 (string -> STRING_SINGLE .)
    RPAREN          reduce using rule 154 (string -> STRING_SINGLE .)
    RSPAREN         reduce using rule 154 (string -> STRING_SINGLE .)
    TO              reduce using rule 154 (string -> STRING_SINGLE .)
    STEP            reduce using rule 154 (string -> STRING_SINGLE .)
    DO              reduce using rule 154 (string -> STRING_SINGLE .)
    COLON           reduce using rule 154 (string -> STRING_SINGLE .)
    EQUAL           reduce using rule 154 (string -> STRING_SINGLE .)
    FROM            reduce using rule 154 (string -> STRING_SINGLE .)


state 59

    (155) string -> STRING_DOUBLE .

    BINARY_FNC      reduce using rule 155 (string -> STRING_DOUBLE .)
    GETVARIABLE     reduce using rule 155 (string -> STRING_DOUBLE .)
    SETVARIABLE     reduce using rule 155 (string -> STRING_DOUBLE .)
    PARAM           reduce using rule 155 (string -> STRING_DOUBLE .)
    PARAMS          reduce using rule 155 (string -> STRING_DOUBLE .)
    LT              reduce using rule 155 (string -> STRING_DOUBLE .)
    GT              reduce using rule 155 (string -> STRING_DOUBLE .)
    LTE             reduce using rule 155 (string -> STRING_DOUBLE .)
    GTE             reduce using rule 155 (string -> STRING_DOUBLE .)
    EQUALITY        reduce using rule 155 (string -> STRING_DOUBLE .)
    INEQUALITY      reduce using rule 155 (string -> STRING_DOUBLE .)
    AND             reduce using rule 155 (string -> STRING_DOUBLE .)
    OR              reduce using rule 155 (string -> STRING_DOUBLE .)
    PLUS            reduce using rule 155 (string -> STRING_DOUBLE .)
    MINUS           reduce using rule 155 (string -> STRING_DOUBLE .)
    TIMES           reduce using rule 155 (string -> STRING_DOUBLE .)
    DIVIDE          reduce using rule 155 (string -> STRING_DOUBLE .)
    MOD             reduce using rule 155 (string -> STRING_DOUBLE .)
    POW             reduce using rule 155 (string -> STRING_DOUBLE .)
    SEMI_COLON      reduce using rule 155 (string -> STRING_DOUBLE .)
    COMMA           reduce using rule 155 (string -> STRING_DOUBLE .)
    $end            reduce using rule 155 (string -> STRING_DOUBLE .)
    RBRACE          reduce using rule 155 (string -> STRING_DOUBLE .)
    RPAREN          reduce using rule 155 (string -> STRING_DOUBLE .)
    RSPAREN         reduce using rule 155 (string -> STRING_DOUBLE .)
    TO              reduce using rule 155 (string -> STRING_DOUBLE .)
    STEP            reduce using rule 155 (string -> STRING_DOUBLE .)
    DO              reduce using rule 155 (string -> STRING_DOUBLE .)
    COLON           reduce using rule 155 (string -> STRING_DOUBLE .)
    EQUAL           reduce using rule 155 (string -> STRING_DOUBLE .)
    FROM            reduce using rule 155 (string -> STRING_DOUBLE .)


state 60

    (29) iftype -> IF . bracedexp_condition
    (30) iftype -> IF . LPAREN primaryexp RPAREN
    (46) bracedexp_condition -> . LBRACE booleanexp RBRACE
    (47) bracedexp_condition -> . identifier
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID

    LPAREN          shift and go to state 130
    LBRACE          shift and go to state 131
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98

    bracedexp_condition            shift and go to state 129
    identifier                     shift and go to state 132

state 61

    (37) whiletype -> WHILE . bracedexp_condition
    (46) bracedexp_condition -> . LBRACE booleanexp RBRACE
    (47) bracedexp_condition -> . identifier
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 131
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98

    bracedexp_condition            shift and go to state 133
    identifier                     shift and go to state 132

state 62

    (42) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> FOR . new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (114) new_scope -> .

    LSPAREN         reduce using rule 114 (new_scope -> .)
    STRING_SINGLE   reduce using rule 114 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 114 (new_scope -> .)

    new_scope                      shift and go to state 134

state 63

    (34) withtype -> WITH . NAMESPACE

    NAMESPACE       shift and go to state 135


state 64

    (3) code -> statement terminator . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (156) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (9) statement -> . primaryexp
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (80) assignment -> . assignment_code code RBRACE
    (81) assignment -> . definition EQUAL primaryexp
    (82) assignment -> . variable EQUAL primaryexp
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (83) assignment_code -> . definition EQUAL LBRACE
    (84) assignment_code -> . variable EQUAL LBRACE
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (90) variable -> . PRIVATE_ID
    (91) variable -> . GLOBAL_ID
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (35) withstatementinit -> . withtype DO
    (85) arraydefinition -> . PRIVATE stringarray
    (34) withtype -> . WITH NAMESPACE

    $end            reduce using rule 156 (empty -> .)
    RBRACE          reduce using rule 156 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    LPAREN          shift and go to state 39
    SWITCH          shift and go to state 44
    PRIVATE         shift and go to state 46
    PRIVATE_ID      shift and go to state 47
    GLOBAL_ID       shift and go to state 48
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63

    statement                      shift and go to state 3
    code                           shift and go to state 136
    empty                          shift and go to state 2
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    primaryexp                     shift and go to state 9
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    assignment_code                shift and go to state 16
    definition                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    number                         shift and go to state 34
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    string                         shift and go to state 37
    bracedexp                      shift and go to state 38
    iftype                         shift and go to state 40
    whiletype                      shift and go to state 41
    fortype                        shift and go to state 42
    withstatementinit              shift and go to state 43
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 65

    (10) terminator -> SEMI_COLON .

    NULAR_FNC       reduce using rule 10 (terminator -> SEMI_COLON .)
    UNARY_FNC       reduce using rule 10 (terminator -> SEMI_COLON .)
    PLUS            reduce using rule 10 (terminator -> SEMI_COLON .)
    MINUS           reduce using rule 10 (terminator -> SEMI_COLON .)
    NOT             reduce using rule 10 (terminator -> SEMI_COLON .)
    LPAREN          reduce using rule 10 (terminator -> SEMI_COLON .)
    SWITCH          reduce using rule 10 (terminator -> SEMI_COLON .)
    PRIVATE         reduce using rule 10 (terminator -> SEMI_COLON .)
    PRIVATE_ID      reduce using rule 10 (terminator -> SEMI_COLON .)
    GLOBAL_ID       reduce using rule 10 (terminator -> SEMI_COLON .)
    NAMESPACE       reduce using rule 10 (terminator -> SEMI_COLON .)
    PARAM           reduce using rule 10 (terminator -> SEMI_COLON .)
    PARAMS          reduce using rule 10 (terminator -> SEMI_COLON .)
    NUMBER_REAL     reduce using rule 10 (terminator -> SEMI_COLON .)
    NUMBER_EXP      reduce using rule 10 (terminator -> SEMI_COLON .)
    NUMBER_HEX      reduce using rule 10 (terminator -> SEMI_COLON .)
    LSPAREN         reduce using rule 10 (terminator -> SEMI_COLON .)
    STRING_SINGLE   reduce using rule 10 (terminator -> SEMI_COLON .)
    STRING_DOUBLE   reduce using rule 10 (terminator -> SEMI_COLON .)
    LBRACE          reduce using rule 10 (terminator -> SEMI_COLON .)
    IF              reduce using rule 10 (terminator -> SEMI_COLON .)
    WHILE           reduce using rule 10 (terminator -> SEMI_COLON .)
    FOR             reduce using rule 10 (terminator -> SEMI_COLON .)
    WITH            reduce using rule 10 (terminator -> SEMI_COLON .)
    $end            reduce using rule 10 (terminator -> SEMI_COLON .)
    RBRACE          reduce using rule 10 (terminator -> SEMI_COLON .)
    CASE            reduce using rule 10 (terminator -> SEMI_COLON .)
    DEFAULT         reduce using rule 10 (terminator -> SEMI_COLON .)


state 66

    (11) terminator -> COMMA .

    NULAR_FNC       reduce using rule 11 (terminator -> COMMA .)
    UNARY_FNC       reduce using rule 11 (terminator -> COMMA .)
    PLUS            reduce using rule 11 (terminator -> COMMA .)
    MINUS           reduce using rule 11 (terminator -> COMMA .)
    NOT             reduce using rule 11 (terminator -> COMMA .)
    LPAREN          reduce using rule 11 (terminator -> COMMA .)
    SWITCH          reduce using rule 11 (terminator -> COMMA .)
    PRIVATE         reduce using rule 11 (terminator -> COMMA .)
    PRIVATE_ID      reduce using rule 11 (terminator -> COMMA .)
    GLOBAL_ID       reduce using rule 11 (terminator -> COMMA .)
    NAMESPACE       reduce using rule 11 (terminator -> COMMA .)
    PARAM           reduce using rule 11 (terminator -> COMMA .)
    PARAMS          reduce using rule 11 (terminator -> COMMA .)
    NUMBER_REAL     reduce using rule 11 (terminator -> COMMA .)
    NUMBER_EXP      reduce using rule 11 (terminator -> COMMA .)
    NUMBER_HEX      reduce using rule 11 (terminator -> COMMA .)
    LSPAREN         reduce using rule 11 (terminator -> COMMA .)
    STRING_SINGLE   reduce using rule 11 (terminator -> COMMA .)
    STRING_DOUBLE   reduce using rule 11 (terminator -> COMMA .)
    LBRACE          reduce using rule 11 (terminator -> COMMA .)
    IF              reduce using rule 11 (terminator -> COMMA .)
    WHILE           reduce using rule 11 (terminator -> COMMA .)
    FOR             reduce using rule 11 (terminator -> COMMA .)
    WITH            reduce using rule 11 (terminator -> COMMA .)
    $end            reduce using rule 11 (terminator -> COMMA .)
    RBRACE          reduce using rule 11 (terminator -> COMMA .)
    CASE            reduce using rule 11 (terminator -> COMMA .)
    DEFAULT         reduce using rule 11 (terminator -> COMMA .)


state 67

    (92) binaryexp -> primaryexp BINARY_FNC . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 137
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 68

    (93) binaryexp -> primaryexp comparisonoperator . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 138
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 69

    (94) binaryexp -> primaryexp mathoperator . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 139
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 70

    (51) getvariable_any -> primaryexp GETVARIABLE . string
    (52) getvariable_any -> primaryexp GETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 141
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 140

state 71

    (55) setvariable_any -> primaryexp SETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp SETVARIABLE . LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    LSPAREN         shift and go to state 142


state 72

    (62) param_binary -> primaryexp PARAM . LSPAREN number RSPAREN
    (63) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN

    LSPAREN         shift and go to state 143


state 73

    (68) params_binary -> primaryexp PARAMS . params_array
    (69) params_array -> . LSPAREN RSPAREN
    (70) params_array -> . LSPAREN params_element RSPAREN

    LSPAREN         shift and go to state 127

    params_array                   shift and go to state 144

state 74

    (132) comparisonoperator -> LT .

    LPAREN          reduce using rule 132 (comparisonoperator -> LT .)
    NUMBER_REAL     reduce using rule 132 (comparisonoperator -> LT .)
    NUMBER_EXP      reduce using rule 132 (comparisonoperator -> LT .)
    NUMBER_HEX      reduce using rule 132 (comparisonoperator -> LT .)
    PRIVATE_ID      reduce using rule 132 (comparisonoperator -> LT .)
    GLOBAL_ID       reduce using rule 132 (comparisonoperator -> LT .)
    LSPAREN         reduce using rule 132 (comparisonoperator -> LT .)
    UNARY_FNC       reduce using rule 132 (comparisonoperator -> LT .)
    PLUS            reduce using rule 132 (comparisonoperator -> LT .)
    MINUS           reduce using rule 132 (comparisonoperator -> LT .)
    NOT             reduce using rule 132 (comparisonoperator -> LT .)
    NULAR_FNC       reduce using rule 132 (comparisonoperator -> LT .)
    STRING_SINGLE   reduce using rule 132 (comparisonoperator -> LT .)
    STRING_DOUBLE   reduce using rule 132 (comparisonoperator -> LT .)
    LBRACE          reduce using rule 132 (comparisonoperator -> LT .)
    SWITCH          reduce using rule 132 (comparisonoperator -> LT .)
    IF              reduce using rule 132 (comparisonoperator -> LT .)
    WHILE           reduce using rule 132 (comparisonoperator -> LT .)
    FOR             reduce using rule 132 (comparisonoperator -> LT .)
    WITH            reduce using rule 132 (comparisonoperator -> LT .)
    PARAM           reduce using rule 132 (comparisonoperator -> LT .)
    PARAMS          reduce using rule 132 (comparisonoperator -> LT .)
    NAMESPACE       reduce using rule 132 (comparisonoperator -> LT .)
    PRIVATE         reduce using rule 132 (comparisonoperator -> LT .)


state 75

    (133) comparisonoperator -> GT .

    LPAREN          reduce using rule 133 (comparisonoperator -> GT .)
    NUMBER_REAL     reduce using rule 133 (comparisonoperator -> GT .)
    NUMBER_EXP      reduce using rule 133 (comparisonoperator -> GT .)
    NUMBER_HEX      reduce using rule 133 (comparisonoperator -> GT .)
    PRIVATE_ID      reduce using rule 133 (comparisonoperator -> GT .)
    GLOBAL_ID       reduce using rule 133 (comparisonoperator -> GT .)
    LSPAREN         reduce using rule 133 (comparisonoperator -> GT .)
    UNARY_FNC       reduce using rule 133 (comparisonoperator -> GT .)
    PLUS            reduce using rule 133 (comparisonoperator -> GT .)
    MINUS           reduce using rule 133 (comparisonoperator -> GT .)
    NOT             reduce using rule 133 (comparisonoperator -> GT .)
    NULAR_FNC       reduce using rule 133 (comparisonoperator -> GT .)
    STRING_SINGLE   reduce using rule 133 (comparisonoperator -> GT .)
    STRING_DOUBLE   reduce using rule 133 (comparisonoperator -> GT .)
    LBRACE          reduce using rule 133 (comparisonoperator -> GT .)
    SWITCH          reduce using rule 133 (comparisonoperator -> GT .)
    IF              reduce using rule 133 (comparisonoperator -> GT .)
    WHILE           reduce using rule 133 (comparisonoperator -> GT .)
    FOR             reduce using rule 133 (comparisonoperator -> GT .)
    WITH            reduce using rule 133 (comparisonoperator -> GT .)
    PARAM           reduce using rule 133 (comparisonoperator -> GT .)
    PARAMS          reduce using rule 133 (comparisonoperator -> GT .)
    NAMESPACE       reduce using rule 133 (comparisonoperator -> GT .)
    PRIVATE         reduce using rule 133 (comparisonoperator -> GT .)


state 76

    (134) comparisonoperator -> LTE .

    LPAREN          reduce using rule 134 (comparisonoperator -> LTE .)
    NUMBER_REAL     reduce using rule 134 (comparisonoperator -> LTE .)
    NUMBER_EXP      reduce using rule 134 (comparisonoperator -> LTE .)
    NUMBER_HEX      reduce using rule 134 (comparisonoperator -> LTE .)
    PRIVATE_ID      reduce using rule 134 (comparisonoperator -> LTE .)
    GLOBAL_ID       reduce using rule 134 (comparisonoperator -> LTE .)
    LSPAREN         reduce using rule 134 (comparisonoperator -> LTE .)
    UNARY_FNC       reduce using rule 134 (comparisonoperator -> LTE .)
    PLUS            reduce using rule 134 (comparisonoperator -> LTE .)
    MINUS           reduce using rule 134 (comparisonoperator -> LTE .)
    NOT             reduce using rule 134 (comparisonoperator -> LTE .)
    NULAR_FNC       reduce using rule 134 (comparisonoperator -> LTE .)
    STRING_SINGLE   reduce using rule 134 (comparisonoperator -> LTE .)
    STRING_DOUBLE   reduce using rule 134 (comparisonoperator -> LTE .)
    LBRACE          reduce using rule 134 (comparisonoperator -> LTE .)
    SWITCH          reduce using rule 134 (comparisonoperator -> LTE .)
    IF              reduce using rule 134 (comparisonoperator -> LTE .)
    WHILE           reduce using rule 134 (comparisonoperator -> LTE .)
    FOR             reduce using rule 134 (comparisonoperator -> LTE .)
    WITH            reduce using rule 134 (comparisonoperator -> LTE .)
    PARAM           reduce using rule 134 (comparisonoperator -> LTE .)
    PARAMS          reduce using rule 134 (comparisonoperator -> LTE .)
    NAMESPACE       reduce using rule 134 (comparisonoperator -> LTE .)
    PRIVATE         reduce using rule 134 (comparisonoperator -> LTE .)


state 77

    (135) comparisonoperator -> GTE .

    LPAREN          reduce using rule 135 (comparisonoperator -> GTE .)
    NUMBER_REAL     reduce using rule 135 (comparisonoperator -> GTE .)
    NUMBER_EXP      reduce using rule 135 (comparisonoperator -> GTE .)
    NUMBER_HEX      reduce using rule 135 (comparisonoperator -> GTE .)
    PRIVATE_ID      reduce using rule 135 (comparisonoperator -> GTE .)
    GLOBAL_ID       reduce using rule 135 (comparisonoperator -> GTE .)
    LSPAREN         reduce using rule 135 (comparisonoperator -> GTE .)
    UNARY_FNC       reduce using rule 135 (comparisonoperator -> GTE .)
    PLUS            reduce using rule 135 (comparisonoperator -> GTE .)
    MINUS           reduce using rule 135 (comparisonoperator -> GTE .)
    NOT             reduce using rule 135 (comparisonoperator -> GTE .)
    NULAR_FNC       reduce using rule 135 (comparisonoperator -> GTE .)
    STRING_SINGLE   reduce using rule 135 (comparisonoperator -> GTE .)
    STRING_DOUBLE   reduce using rule 135 (comparisonoperator -> GTE .)
    LBRACE          reduce using rule 135 (comparisonoperator -> GTE .)
    SWITCH          reduce using rule 135 (comparisonoperator -> GTE .)
    IF              reduce using rule 135 (comparisonoperator -> GTE .)
    WHILE           reduce using rule 135 (comparisonoperator -> GTE .)
    FOR             reduce using rule 135 (comparisonoperator -> GTE .)
    WITH            reduce using rule 135 (comparisonoperator -> GTE .)
    PARAM           reduce using rule 135 (comparisonoperator -> GTE .)
    PARAMS          reduce using rule 135 (comparisonoperator -> GTE .)
    NAMESPACE       reduce using rule 135 (comparisonoperator -> GTE .)
    PRIVATE         reduce using rule 135 (comparisonoperator -> GTE .)


state 78

    (136) comparisonoperator -> EQUALITY .

    LPAREN          reduce using rule 136 (comparisonoperator -> EQUALITY .)
    NUMBER_REAL     reduce using rule 136 (comparisonoperator -> EQUALITY .)
    NUMBER_EXP      reduce using rule 136 (comparisonoperator -> EQUALITY .)
    NUMBER_HEX      reduce using rule 136 (comparisonoperator -> EQUALITY .)
    PRIVATE_ID      reduce using rule 136 (comparisonoperator -> EQUALITY .)
    GLOBAL_ID       reduce using rule 136 (comparisonoperator -> EQUALITY .)
    LSPAREN         reduce using rule 136 (comparisonoperator -> EQUALITY .)
    UNARY_FNC       reduce using rule 136 (comparisonoperator -> EQUALITY .)
    PLUS            reduce using rule 136 (comparisonoperator -> EQUALITY .)
    MINUS           reduce using rule 136 (comparisonoperator -> EQUALITY .)
    NOT             reduce using rule 136 (comparisonoperator -> EQUALITY .)
    NULAR_FNC       reduce using rule 136 (comparisonoperator -> EQUALITY .)
    STRING_SINGLE   reduce using rule 136 (comparisonoperator -> EQUALITY .)
    STRING_DOUBLE   reduce using rule 136 (comparisonoperator -> EQUALITY .)
    LBRACE          reduce using rule 136 (comparisonoperator -> EQUALITY .)
    SWITCH          reduce using rule 136 (comparisonoperator -> EQUALITY .)
    IF              reduce using rule 136 (comparisonoperator -> EQUALITY .)
    WHILE           reduce using rule 136 (comparisonoperator -> EQUALITY .)
    FOR             reduce using rule 136 (comparisonoperator -> EQUALITY .)
    WITH            reduce using rule 136 (comparisonoperator -> EQUALITY .)
    PARAM           reduce using rule 136 (comparisonoperator -> EQUALITY .)
    PARAMS          reduce using rule 136 (comparisonoperator -> EQUALITY .)
    NAMESPACE       reduce using rule 136 (comparisonoperator -> EQUALITY .)
    PRIVATE         reduce using rule 136 (comparisonoperator -> EQUALITY .)


state 79

    (137) comparisonoperator -> INEQUALITY .

    LPAREN          reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    NUMBER_REAL     reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    NUMBER_EXP      reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    NUMBER_HEX      reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    PRIVATE_ID      reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    GLOBAL_ID       reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    LSPAREN         reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    UNARY_FNC       reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    PLUS            reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    MINUS           reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    NOT             reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    NULAR_FNC       reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    STRING_SINGLE   reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    STRING_DOUBLE   reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    LBRACE          reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    SWITCH          reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    IF              reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    WHILE           reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    FOR             reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    WITH            reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    PARAM           reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    PARAMS          reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    NAMESPACE       reduce using rule 137 (comparisonoperator -> INEQUALITY .)
    PRIVATE         reduce using rule 137 (comparisonoperator -> INEQUALITY .)


state 80

    (138) comparisonoperator -> AND .

    LPAREN          reduce using rule 138 (comparisonoperator -> AND .)
    NUMBER_REAL     reduce using rule 138 (comparisonoperator -> AND .)
    NUMBER_EXP      reduce using rule 138 (comparisonoperator -> AND .)
    NUMBER_HEX      reduce using rule 138 (comparisonoperator -> AND .)
    PRIVATE_ID      reduce using rule 138 (comparisonoperator -> AND .)
    GLOBAL_ID       reduce using rule 138 (comparisonoperator -> AND .)
    LSPAREN         reduce using rule 138 (comparisonoperator -> AND .)
    UNARY_FNC       reduce using rule 138 (comparisonoperator -> AND .)
    PLUS            reduce using rule 138 (comparisonoperator -> AND .)
    MINUS           reduce using rule 138 (comparisonoperator -> AND .)
    NOT             reduce using rule 138 (comparisonoperator -> AND .)
    NULAR_FNC       reduce using rule 138 (comparisonoperator -> AND .)
    STRING_SINGLE   reduce using rule 138 (comparisonoperator -> AND .)
    STRING_DOUBLE   reduce using rule 138 (comparisonoperator -> AND .)
    LBRACE          reduce using rule 138 (comparisonoperator -> AND .)
    SWITCH          reduce using rule 138 (comparisonoperator -> AND .)
    IF              reduce using rule 138 (comparisonoperator -> AND .)
    WHILE           reduce using rule 138 (comparisonoperator -> AND .)
    FOR             reduce using rule 138 (comparisonoperator -> AND .)
    WITH            reduce using rule 138 (comparisonoperator -> AND .)
    PARAM           reduce using rule 138 (comparisonoperator -> AND .)
    PARAMS          reduce using rule 138 (comparisonoperator -> AND .)
    NAMESPACE       reduce using rule 138 (comparisonoperator -> AND .)
    PRIVATE         reduce using rule 138 (comparisonoperator -> AND .)


state 81

    (139) comparisonoperator -> OR .

    LPAREN          reduce using rule 139 (comparisonoperator -> OR .)
    NUMBER_REAL     reduce using rule 139 (comparisonoperator -> OR .)
    NUMBER_EXP      reduce using rule 139 (comparisonoperator -> OR .)
    NUMBER_HEX      reduce using rule 139 (comparisonoperator -> OR .)
    PRIVATE_ID      reduce using rule 139 (comparisonoperator -> OR .)
    GLOBAL_ID       reduce using rule 139 (comparisonoperator -> OR .)
    LSPAREN         reduce using rule 139 (comparisonoperator -> OR .)
    UNARY_FNC       reduce using rule 139 (comparisonoperator -> OR .)
    PLUS            reduce using rule 139 (comparisonoperator -> OR .)
    MINUS           reduce using rule 139 (comparisonoperator -> OR .)
    NOT             reduce using rule 139 (comparisonoperator -> OR .)
    NULAR_FNC       reduce using rule 139 (comparisonoperator -> OR .)
    STRING_SINGLE   reduce using rule 139 (comparisonoperator -> OR .)
    STRING_DOUBLE   reduce using rule 139 (comparisonoperator -> OR .)
    LBRACE          reduce using rule 139 (comparisonoperator -> OR .)
    SWITCH          reduce using rule 139 (comparisonoperator -> OR .)
    IF              reduce using rule 139 (comparisonoperator -> OR .)
    WHILE           reduce using rule 139 (comparisonoperator -> OR .)
    FOR             reduce using rule 139 (comparisonoperator -> OR .)
    WITH            reduce using rule 139 (comparisonoperator -> OR .)
    PARAM           reduce using rule 139 (comparisonoperator -> OR .)
    PARAMS          reduce using rule 139 (comparisonoperator -> OR .)
    NAMESPACE       reduce using rule 139 (comparisonoperator -> OR .)
    PRIVATE         reduce using rule 139 (comparisonoperator -> OR .)


state 82

    (140) mathoperator -> PLUS .

    LPAREN          reduce using rule 140 (mathoperator -> PLUS .)
    NUMBER_REAL     reduce using rule 140 (mathoperator -> PLUS .)
    NUMBER_EXP      reduce using rule 140 (mathoperator -> PLUS .)
    NUMBER_HEX      reduce using rule 140 (mathoperator -> PLUS .)
    PRIVATE_ID      reduce using rule 140 (mathoperator -> PLUS .)
    GLOBAL_ID       reduce using rule 140 (mathoperator -> PLUS .)
    LSPAREN         reduce using rule 140 (mathoperator -> PLUS .)
    UNARY_FNC       reduce using rule 140 (mathoperator -> PLUS .)
    PLUS            reduce using rule 140 (mathoperator -> PLUS .)
    MINUS           reduce using rule 140 (mathoperator -> PLUS .)
    NOT             reduce using rule 140 (mathoperator -> PLUS .)
    NULAR_FNC       reduce using rule 140 (mathoperator -> PLUS .)
    STRING_SINGLE   reduce using rule 140 (mathoperator -> PLUS .)
    STRING_DOUBLE   reduce using rule 140 (mathoperator -> PLUS .)
    LBRACE          reduce using rule 140 (mathoperator -> PLUS .)
    SWITCH          reduce using rule 140 (mathoperator -> PLUS .)
    IF              reduce using rule 140 (mathoperator -> PLUS .)
    WHILE           reduce using rule 140 (mathoperator -> PLUS .)
    FOR             reduce using rule 140 (mathoperator -> PLUS .)
    WITH            reduce using rule 140 (mathoperator -> PLUS .)
    PARAM           reduce using rule 140 (mathoperator -> PLUS .)
    PARAMS          reduce using rule 140 (mathoperator -> PLUS .)
    NAMESPACE       reduce using rule 140 (mathoperator -> PLUS .)
    PRIVATE         reduce using rule 140 (mathoperator -> PLUS .)


state 83

    (141) mathoperator -> MINUS .

    LPAREN          reduce using rule 141 (mathoperator -> MINUS .)
    NUMBER_REAL     reduce using rule 141 (mathoperator -> MINUS .)
    NUMBER_EXP      reduce using rule 141 (mathoperator -> MINUS .)
    NUMBER_HEX      reduce using rule 141 (mathoperator -> MINUS .)
    PRIVATE_ID      reduce using rule 141 (mathoperator -> MINUS .)
    GLOBAL_ID       reduce using rule 141 (mathoperator -> MINUS .)
    LSPAREN         reduce using rule 141 (mathoperator -> MINUS .)
    UNARY_FNC       reduce using rule 141 (mathoperator -> MINUS .)
    PLUS            reduce using rule 141 (mathoperator -> MINUS .)
    MINUS           reduce using rule 141 (mathoperator -> MINUS .)
    NOT             reduce using rule 141 (mathoperator -> MINUS .)
    NULAR_FNC       reduce using rule 141 (mathoperator -> MINUS .)
    STRING_SINGLE   reduce using rule 141 (mathoperator -> MINUS .)
    STRING_DOUBLE   reduce using rule 141 (mathoperator -> MINUS .)
    LBRACE          reduce using rule 141 (mathoperator -> MINUS .)
    SWITCH          reduce using rule 141 (mathoperator -> MINUS .)
    IF              reduce using rule 141 (mathoperator -> MINUS .)
    WHILE           reduce using rule 141 (mathoperator -> MINUS .)
    FOR             reduce using rule 141 (mathoperator -> MINUS .)
    WITH            reduce using rule 141 (mathoperator -> MINUS .)
    PARAM           reduce using rule 141 (mathoperator -> MINUS .)
    PARAMS          reduce using rule 141 (mathoperator -> MINUS .)
    NAMESPACE       reduce using rule 141 (mathoperator -> MINUS .)
    PRIVATE         reduce using rule 141 (mathoperator -> MINUS .)


state 84

    (142) mathoperator -> TIMES .

    LPAREN          reduce using rule 142 (mathoperator -> TIMES .)
    NUMBER_REAL     reduce using rule 142 (mathoperator -> TIMES .)
    NUMBER_EXP      reduce using rule 142 (mathoperator -> TIMES .)
    NUMBER_HEX      reduce using rule 142 (mathoperator -> TIMES .)
    PRIVATE_ID      reduce using rule 142 (mathoperator -> TIMES .)
    GLOBAL_ID       reduce using rule 142 (mathoperator -> TIMES .)
    LSPAREN         reduce using rule 142 (mathoperator -> TIMES .)
    UNARY_FNC       reduce using rule 142 (mathoperator -> TIMES .)
    PLUS            reduce using rule 142 (mathoperator -> TIMES .)
    MINUS           reduce using rule 142 (mathoperator -> TIMES .)
    NOT             reduce using rule 142 (mathoperator -> TIMES .)
    NULAR_FNC       reduce using rule 142 (mathoperator -> TIMES .)
    STRING_SINGLE   reduce using rule 142 (mathoperator -> TIMES .)
    STRING_DOUBLE   reduce using rule 142 (mathoperator -> TIMES .)
    LBRACE          reduce using rule 142 (mathoperator -> TIMES .)
    SWITCH          reduce using rule 142 (mathoperator -> TIMES .)
    IF              reduce using rule 142 (mathoperator -> TIMES .)
    WHILE           reduce using rule 142 (mathoperator -> TIMES .)
    FOR             reduce using rule 142 (mathoperator -> TIMES .)
    WITH            reduce using rule 142 (mathoperator -> TIMES .)
    PARAM           reduce using rule 142 (mathoperator -> TIMES .)
    PARAMS          reduce using rule 142 (mathoperator -> TIMES .)
    NAMESPACE       reduce using rule 142 (mathoperator -> TIMES .)
    PRIVATE         reduce using rule 142 (mathoperator -> TIMES .)


state 85

    (143) mathoperator -> DIVIDE .

    LPAREN          reduce using rule 143 (mathoperator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 143 (mathoperator -> DIVIDE .)
    NUMBER_EXP      reduce using rule 143 (mathoperator -> DIVIDE .)
    NUMBER_HEX      reduce using rule 143 (mathoperator -> DIVIDE .)
    PRIVATE_ID      reduce using rule 143 (mathoperator -> DIVIDE .)
    GLOBAL_ID       reduce using rule 143 (mathoperator -> DIVIDE .)
    LSPAREN         reduce using rule 143 (mathoperator -> DIVIDE .)
    UNARY_FNC       reduce using rule 143 (mathoperator -> DIVIDE .)
    PLUS            reduce using rule 143 (mathoperator -> DIVIDE .)
    MINUS           reduce using rule 143 (mathoperator -> DIVIDE .)
    NOT             reduce using rule 143 (mathoperator -> DIVIDE .)
    NULAR_FNC       reduce using rule 143 (mathoperator -> DIVIDE .)
    STRING_SINGLE   reduce using rule 143 (mathoperator -> DIVIDE .)
    STRING_DOUBLE   reduce using rule 143 (mathoperator -> DIVIDE .)
    LBRACE          reduce using rule 143 (mathoperator -> DIVIDE .)
    SWITCH          reduce using rule 143 (mathoperator -> DIVIDE .)
    IF              reduce using rule 143 (mathoperator -> DIVIDE .)
    WHILE           reduce using rule 143 (mathoperator -> DIVIDE .)
    FOR             reduce using rule 143 (mathoperator -> DIVIDE .)
    WITH            reduce using rule 143 (mathoperator -> DIVIDE .)
    PARAM           reduce using rule 143 (mathoperator -> DIVIDE .)
    PARAMS          reduce using rule 143 (mathoperator -> DIVIDE .)
    NAMESPACE       reduce using rule 143 (mathoperator -> DIVIDE .)
    PRIVATE         reduce using rule 143 (mathoperator -> DIVIDE .)


state 86

    (144) mathoperator -> MOD .

    LPAREN          reduce using rule 144 (mathoperator -> MOD .)
    NUMBER_REAL     reduce using rule 144 (mathoperator -> MOD .)
    NUMBER_EXP      reduce using rule 144 (mathoperator -> MOD .)
    NUMBER_HEX      reduce using rule 144 (mathoperator -> MOD .)
    PRIVATE_ID      reduce using rule 144 (mathoperator -> MOD .)
    GLOBAL_ID       reduce using rule 144 (mathoperator -> MOD .)
    LSPAREN         reduce using rule 144 (mathoperator -> MOD .)
    UNARY_FNC       reduce using rule 144 (mathoperator -> MOD .)
    PLUS            reduce using rule 144 (mathoperator -> MOD .)
    MINUS           reduce using rule 144 (mathoperator -> MOD .)
    NOT             reduce using rule 144 (mathoperator -> MOD .)
    NULAR_FNC       reduce using rule 144 (mathoperator -> MOD .)
    STRING_SINGLE   reduce using rule 144 (mathoperator -> MOD .)
    STRING_DOUBLE   reduce using rule 144 (mathoperator -> MOD .)
    LBRACE          reduce using rule 144 (mathoperator -> MOD .)
    SWITCH          reduce using rule 144 (mathoperator -> MOD .)
    IF              reduce using rule 144 (mathoperator -> MOD .)
    WHILE           reduce using rule 144 (mathoperator -> MOD .)
    FOR             reduce using rule 144 (mathoperator -> MOD .)
    WITH            reduce using rule 144 (mathoperator -> MOD .)
    PARAM           reduce using rule 144 (mathoperator -> MOD .)
    PARAMS          reduce using rule 144 (mathoperator -> MOD .)
    NAMESPACE       reduce using rule 144 (mathoperator -> MOD .)
    PRIVATE         reduce using rule 144 (mathoperator -> MOD .)


state 87

    (145) mathoperator -> POW .

    LPAREN          reduce using rule 145 (mathoperator -> POW .)
    NUMBER_REAL     reduce using rule 145 (mathoperator -> POW .)
    NUMBER_EXP      reduce using rule 145 (mathoperator -> POW .)
    NUMBER_HEX      reduce using rule 145 (mathoperator -> POW .)
    PRIVATE_ID      reduce using rule 145 (mathoperator -> POW .)
    GLOBAL_ID       reduce using rule 145 (mathoperator -> POW .)
    LSPAREN         reduce using rule 145 (mathoperator -> POW .)
    UNARY_FNC       reduce using rule 145 (mathoperator -> POW .)
    PLUS            reduce using rule 145 (mathoperator -> POW .)
    MINUS           reduce using rule 145 (mathoperator -> POW .)
    NOT             reduce using rule 145 (mathoperator -> POW .)
    NULAR_FNC       reduce using rule 145 (mathoperator -> POW .)
    STRING_SINGLE   reduce using rule 145 (mathoperator -> POW .)
    STRING_DOUBLE   reduce using rule 145 (mathoperator -> POW .)
    LBRACE          reduce using rule 145 (mathoperator -> POW .)
    SWITCH          reduce using rule 145 (mathoperator -> POW .)
    IF              reduce using rule 145 (mathoperator -> POW .)
    WHILE           reduce using rule 145 (mathoperator -> POW .)
    FOR             reduce using rule 145 (mathoperator -> POW .)
    WITH            reduce using rule 145 (mathoperator -> POW .)
    PARAM           reduce using rule 145 (mathoperator -> POW .)
    PARAMS          reduce using rule 145 (mathoperator -> POW .)
    NAMESPACE       reduce using rule 145 (mathoperator -> POW .)
    PRIVATE         reduce using rule 145 (mathoperator -> POW .)


state 88

    (80) assignment -> assignment_code code . RBRACE

    RBRACE          shift and go to state 145


state 89

    (81) assignment -> definition EQUAL . primaryexp
    (83) assignment_code -> definition EQUAL . LBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 147
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    definition                     shift and go to state 102
    primaryexp                     shift and go to state 146
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    arraydefinition                shift and go to state 53

state 90

    (82) assignment -> variable EQUAL . primaryexp
    (84) assignment_code -> variable EQUAL . LBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 149
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 148
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 91

    (125) unaryexp -> UNARY_FNC primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    COMMA           reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    $end            reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    BINARY_FNC      reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    GETVARIABLE     reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    SETVARIABLE     reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    PARAM           reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    PARAMS          reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    LT              reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    GT              reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    LTE             reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    GTE             reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    EQUALITY        reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    INEQUALITY      reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    AND             reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    OR              reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    PLUS            reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    MINUS           reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    TIMES           reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    DIVIDE          reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    MOD             reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    POW             reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    RBRACE          reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    RPAREN          reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    RSPAREN         reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    TO              reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    STEP            reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    DO              reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)
    COLON           reduce using rule 125 (unaryexp -> UNARY_FNC primaryexp .)

  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! POW             [ shift and go to state 87 ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 92

    (102) primaryexp -> identifier .
    (124) nularexp -> identifier .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAM resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAMS resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for STEP resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 102 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 102 (primaryexp -> identifier .)
    BINARY_FNC      reduce using rule 102 (primaryexp -> identifier .)
    GETVARIABLE     reduce using rule 102 (primaryexp -> identifier .)
    SETVARIABLE     reduce using rule 102 (primaryexp -> identifier .)
    PARAM           reduce using rule 102 (primaryexp -> identifier .)
    PARAMS          reduce using rule 102 (primaryexp -> identifier .)
    LT              reduce using rule 102 (primaryexp -> identifier .)
    GT              reduce using rule 102 (primaryexp -> identifier .)
    LTE             reduce using rule 102 (primaryexp -> identifier .)
    GTE             reduce using rule 102 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 102 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 102 (primaryexp -> identifier .)
    AND             reduce using rule 102 (primaryexp -> identifier .)
    OR              reduce using rule 102 (primaryexp -> identifier .)
    PLUS            reduce using rule 102 (primaryexp -> identifier .)
    MINUS           reduce using rule 102 (primaryexp -> identifier .)
    TIMES           reduce using rule 102 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 102 (primaryexp -> identifier .)
    MOD             reduce using rule 102 (primaryexp -> identifier .)
    POW             reduce using rule 102 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 102 (primaryexp -> identifier .)
    COMMA           reduce using rule 102 (primaryexp -> identifier .)
    $end            reduce using rule 102 (primaryexp -> identifier .)
    RBRACE          reduce using rule 102 (primaryexp -> identifier .)
    RPAREN          reduce using rule 102 (primaryexp -> identifier .)
    RSPAREN         reduce using rule 102 (primaryexp -> identifier .)
    TO              reduce using rule 102 (primaryexp -> identifier .)
    STEP            reduce using rule 102 (primaryexp -> identifier .)
    DO              reduce using rule 102 (primaryexp -> identifier .)
    COLON           reduce using rule 102 (primaryexp -> identifier .)

  ! BINARY_FNC      [ reduce using rule 124 (nularexp -> identifier .) ]
  ! GETVARIABLE     [ reduce using rule 124 (nularexp -> identifier .) ]
  ! SETVARIABLE     [ reduce using rule 124 (nularexp -> identifier .) ]
  ! PARAM           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! PARAMS          [ reduce using rule 124 (nularexp -> identifier .) ]
  ! LT              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! GT              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! LTE             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! GTE             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! EQUALITY        [ reduce using rule 124 (nularexp -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 124 (nularexp -> identifier .) ]
  ! AND             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! OR              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! PLUS            [ reduce using rule 124 (nularexp -> identifier .) ]
  ! MINUS           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! TIMES           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! DIVIDE          [ reduce using rule 124 (nularexp -> identifier .) ]
  ! MOD             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! POW             [ reduce using rule 124 (nularexp -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 124 (nularexp -> identifier .) ]
  ! COMMA           [ reduce using rule 124 (nularexp -> identifier .) ]
  ! $end            [ reduce using rule 124 (nularexp -> identifier .) ]
  ! RBRACE          [ reduce using rule 124 (nularexp -> identifier .) ]
  ! RPAREN          [ reduce using rule 124 (nularexp -> identifier .) ]
  ! RSPAREN         [ reduce using rule 124 (nularexp -> identifier .) ]
  ! TO              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! STEP            [ reduce using rule 124 (nularexp -> identifier .) ]
  ! DO              [ reduce using rule 124 (nularexp -> identifier .) ]
  ! COLON           [ reduce using rule 124 (nularexp -> identifier .) ]


state 93

    (103) primaryexp -> controlstructure .

    BINARY_FNC      reduce using rule 103 (primaryexp -> controlstructure .)
    GETVARIABLE     reduce using rule 103 (primaryexp -> controlstructure .)
    SETVARIABLE     reduce using rule 103 (primaryexp -> controlstructure .)
    PARAM           reduce using rule 103 (primaryexp -> controlstructure .)
    PARAMS          reduce using rule 103 (primaryexp -> controlstructure .)
    LT              reduce using rule 103 (primaryexp -> controlstructure .)
    GT              reduce using rule 103 (primaryexp -> controlstructure .)
    LTE             reduce using rule 103 (primaryexp -> controlstructure .)
    GTE             reduce using rule 103 (primaryexp -> controlstructure .)
    EQUALITY        reduce using rule 103 (primaryexp -> controlstructure .)
    INEQUALITY      reduce using rule 103 (primaryexp -> controlstructure .)
    AND             reduce using rule 103 (primaryexp -> controlstructure .)
    OR              reduce using rule 103 (primaryexp -> controlstructure .)
    PLUS            reduce using rule 103 (primaryexp -> controlstructure .)
    MINUS           reduce using rule 103 (primaryexp -> controlstructure .)
    TIMES           reduce using rule 103 (primaryexp -> controlstructure .)
    DIVIDE          reduce using rule 103 (primaryexp -> controlstructure .)
    MOD             reduce using rule 103 (primaryexp -> controlstructure .)
    POW             reduce using rule 103 (primaryexp -> controlstructure .)
    SEMI_COLON      reduce using rule 103 (primaryexp -> controlstructure .)
    COMMA           reduce using rule 103 (primaryexp -> controlstructure .)
    $end            reduce using rule 103 (primaryexp -> controlstructure .)
    RBRACE          reduce using rule 103 (primaryexp -> controlstructure .)
    RPAREN          reduce using rule 103 (primaryexp -> controlstructure .)
    RSPAREN         reduce using rule 103 (primaryexp -> controlstructure .)
    TO              reduce using rule 103 (primaryexp -> controlstructure .)
    STEP            reduce using rule 103 (primaryexp -> controlstructure .)
    DO              reduce using rule 103 (primaryexp -> controlstructure .)
    COLON           reduce using rule 103 (primaryexp -> controlstructure .)


state 94

    (106) primaryexp -> unaryexp .

    BINARY_FNC      reduce using rule 106 (primaryexp -> unaryexp .)
    GETVARIABLE     reduce using rule 106 (primaryexp -> unaryexp .)
    SETVARIABLE     reduce using rule 106 (primaryexp -> unaryexp .)
    PARAM           reduce using rule 106 (primaryexp -> unaryexp .)
    PARAMS          reduce using rule 106 (primaryexp -> unaryexp .)
    LT              reduce using rule 106 (primaryexp -> unaryexp .)
    GT              reduce using rule 106 (primaryexp -> unaryexp .)
    LTE             reduce using rule 106 (primaryexp -> unaryexp .)
    GTE             reduce using rule 106 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 106 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 106 (primaryexp -> unaryexp .)
    AND             reduce using rule 106 (primaryexp -> unaryexp .)
    OR              reduce using rule 106 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 106 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 106 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 106 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 106 (primaryexp -> unaryexp .)
    MOD             reduce using rule 106 (primaryexp -> unaryexp .)
    POW             reduce using rule 106 (primaryexp -> unaryexp .)
    SEMI_COLON      reduce using rule 106 (primaryexp -> unaryexp .)
    COMMA           reduce using rule 106 (primaryexp -> unaryexp .)
    $end            reduce using rule 106 (primaryexp -> unaryexp .)
    RBRACE          reduce using rule 106 (primaryexp -> unaryexp .)
    RPAREN          reduce using rule 106 (primaryexp -> unaryexp .)
    RSPAREN         reduce using rule 106 (primaryexp -> unaryexp .)
    TO              reduce using rule 106 (primaryexp -> unaryexp .)
    STEP            reduce using rule 106 (primaryexp -> unaryexp .)
    DO              reduce using rule 106 (primaryexp -> unaryexp .)
    COLON           reduce using rule 106 (primaryexp -> unaryexp .)


state 95

    (107) primaryexp -> nularexp .

    BINARY_FNC      reduce using rule 107 (primaryexp -> nularexp .)
    GETVARIABLE     reduce using rule 107 (primaryexp -> nularexp .)
    SETVARIABLE     reduce using rule 107 (primaryexp -> nularexp .)
    PARAM           reduce using rule 107 (primaryexp -> nularexp .)
    PARAMS          reduce using rule 107 (primaryexp -> nularexp .)
    LT              reduce using rule 107 (primaryexp -> nularexp .)
    GT              reduce using rule 107 (primaryexp -> nularexp .)
    LTE             reduce using rule 107 (primaryexp -> nularexp .)
    GTE             reduce using rule 107 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 107 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 107 (primaryexp -> nularexp .)
    AND             reduce using rule 107 (primaryexp -> nularexp .)
    OR              reduce using rule 107 (primaryexp -> nularexp .)
    PLUS            reduce using rule 107 (primaryexp -> nularexp .)
    MINUS           reduce using rule 107 (primaryexp -> nularexp .)
    TIMES           reduce using rule 107 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 107 (primaryexp -> nularexp .)
    MOD             reduce using rule 107 (primaryexp -> nularexp .)
    POW             reduce using rule 107 (primaryexp -> nularexp .)
    SEMI_COLON      reduce using rule 107 (primaryexp -> nularexp .)
    COMMA           reduce using rule 107 (primaryexp -> nularexp .)
    $end            reduce using rule 107 (primaryexp -> nularexp .)
    RBRACE          reduce using rule 107 (primaryexp -> nularexp .)
    RPAREN          reduce using rule 107 (primaryexp -> nularexp .)
    RSPAREN         reduce using rule 107 (primaryexp -> nularexp .)
    TO              reduce using rule 107 (primaryexp -> nularexp .)
    STEP            reduce using rule 107 (primaryexp -> nularexp .)
    DO              reduce using rule 107 (primaryexp -> nularexp .)
    COLON           reduce using rule 107 (primaryexp -> nularexp .)


state 96

    (109) primaryexp -> binaryexp .

    BINARY_FNC      reduce using rule 109 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 109 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 109 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 109 (primaryexp -> binaryexp .)
    PARAMS          reduce using rule 109 (primaryexp -> binaryexp .)
    LT              reduce using rule 109 (primaryexp -> binaryexp .)
    GT              reduce using rule 109 (primaryexp -> binaryexp .)
    LTE             reduce using rule 109 (primaryexp -> binaryexp .)
    GTE             reduce using rule 109 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 109 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 109 (primaryexp -> binaryexp .)
    AND             reduce using rule 109 (primaryexp -> binaryexp .)
    OR              reduce using rule 109 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 109 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 109 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 109 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 109 (primaryexp -> binaryexp .)
    MOD             reduce using rule 109 (primaryexp -> binaryexp .)
    POW             reduce using rule 109 (primaryexp -> binaryexp .)
    SEMI_COLON      reduce using rule 109 (primaryexp -> binaryexp .)
    COMMA           reduce using rule 109 (primaryexp -> binaryexp .)
    $end            reduce using rule 109 (primaryexp -> binaryexp .)
    RBRACE          reduce using rule 109 (primaryexp -> binaryexp .)
    RPAREN          reduce using rule 109 (primaryexp -> binaryexp .)
    RSPAREN         reduce using rule 109 (primaryexp -> binaryexp .)
    TO              reduce using rule 109 (primaryexp -> binaryexp .)
    STEP            reduce using rule 109 (primaryexp -> binaryexp .)
    DO              reduce using rule 109 (primaryexp -> binaryexp .)
    COLON           reduce using rule 109 (primaryexp -> binaryexp .)


state 97

    (88) identifier -> PRIVATE_ID .

    BINARY_FNC      reduce using rule 88 (identifier -> PRIVATE_ID .)
    GETVARIABLE     reduce using rule 88 (identifier -> PRIVATE_ID .)
    SETVARIABLE     reduce using rule 88 (identifier -> PRIVATE_ID .)
    PARAM           reduce using rule 88 (identifier -> PRIVATE_ID .)
    PARAMS          reduce using rule 88 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 88 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 88 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 88 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 88 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 88 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 88 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 88 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 88 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 88 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 88 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 88 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 88 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 88 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 88 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 88 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 88 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 88 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 88 (identifier -> PRIVATE_ID .)
    RPAREN          reduce using rule 88 (identifier -> PRIVATE_ID .)
    RSPAREN         reduce using rule 88 (identifier -> PRIVATE_ID .)
    TO              reduce using rule 88 (identifier -> PRIVATE_ID .)
    STEP            reduce using rule 88 (identifier -> PRIVATE_ID .)
    DO              reduce using rule 88 (identifier -> PRIVATE_ID .)
    COLON           reduce using rule 88 (identifier -> PRIVATE_ID .)
    THEN            reduce using rule 88 (identifier -> PRIVATE_ID .)
    EXITWITH        reduce using rule 88 (identifier -> PRIVATE_ID .)


state 98

    (89) identifier -> GLOBAL_ID .

    BINARY_FNC      reduce using rule 89 (identifier -> GLOBAL_ID .)
    GETVARIABLE     reduce using rule 89 (identifier -> GLOBAL_ID .)
    SETVARIABLE     reduce using rule 89 (identifier -> GLOBAL_ID .)
    PARAM           reduce using rule 89 (identifier -> GLOBAL_ID .)
    PARAMS          reduce using rule 89 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 89 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 89 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 89 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 89 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 89 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 89 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 89 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 89 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 89 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 89 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 89 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 89 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 89 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 89 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 89 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 89 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 89 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 89 (identifier -> GLOBAL_ID .)
    RPAREN          reduce using rule 89 (identifier -> GLOBAL_ID .)
    RSPAREN         reduce using rule 89 (identifier -> GLOBAL_ID .)
    TO              reduce using rule 89 (identifier -> GLOBAL_ID .)
    STEP            reduce using rule 89 (identifier -> GLOBAL_ID .)
    DO              reduce using rule 89 (identifier -> GLOBAL_ID .)
    COLON           reduce using rule 89 (identifier -> GLOBAL_ID .)
    THEN            reduce using rule 89 (identifier -> GLOBAL_ID .)
    EXITWITH        reduce using rule 89 (identifier -> GLOBAL_ID .)


state 99

    (18) helpertype -> iftype .
    (31) ifstatement -> iftype . THEN bracedexp ELSE bracedexp
    (32) ifstatement -> iftype . THEN bracedexp
    (33) ifstatement -> iftype . EXITWITH bracedexp

    BINARY_FNC      reduce using rule 18 (helpertype -> iftype .)
    GETVARIABLE     reduce using rule 18 (helpertype -> iftype .)
    SETVARIABLE     reduce using rule 18 (helpertype -> iftype .)
    PARAM           reduce using rule 18 (helpertype -> iftype .)
    PARAMS          reduce using rule 18 (helpertype -> iftype .)
    LT              reduce using rule 18 (helpertype -> iftype .)
    GT              reduce using rule 18 (helpertype -> iftype .)
    LTE             reduce using rule 18 (helpertype -> iftype .)
    GTE             reduce using rule 18 (helpertype -> iftype .)
    EQUALITY        reduce using rule 18 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 18 (helpertype -> iftype .)
    AND             reduce using rule 18 (helpertype -> iftype .)
    OR              reduce using rule 18 (helpertype -> iftype .)
    PLUS            reduce using rule 18 (helpertype -> iftype .)
    MINUS           reduce using rule 18 (helpertype -> iftype .)
    TIMES           reduce using rule 18 (helpertype -> iftype .)
    DIVIDE          reduce using rule 18 (helpertype -> iftype .)
    MOD             reduce using rule 18 (helpertype -> iftype .)
    POW             reduce using rule 18 (helpertype -> iftype .)
    SEMI_COLON      reduce using rule 18 (helpertype -> iftype .)
    COMMA           reduce using rule 18 (helpertype -> iftype .)
    $end            reduce using rule 18 (helpertype -> iftype .)
    RBRACE          reduce using rule 18 (helpertype -> iftype .)
    RPAREN          reduce using rule 18 (helpertype -> iftype .)
    RSPAREN         reduce using rule 18 (helpertype -> iftype .)
    TO              reduce using rule 18 (helpertype -> iftype .)
    STEP            reduce using rule 18 (helpertype -> iftype .)
    DO              reduce using rule 18 (helpertype -> iftype .)
    COLON           reduce using rule 18 (helpertype -> iftype .)
    THEN            shift and go to state 108
    EXITWITH        shift and go to state 109


state 100

    (19) helpertype -> whiletype .
    (38) whileloop -> whiletype . DO bracedexp

  ! shift/reduce conflict for DO resolved as shift
    BINARY_FNC      reduce using rule 19 (helpertype -> whiletype .)
    GETVARIABLE     reduce using rule 19 (helpertype -> whiletype .)
    SETVARIABLE     reduce using rule 19 (helpertype -> whiletype .)
    PARAM           reduce using rule 19 (helpertype -> whiletype .)
    PARAMS          reduce using rule 19 (helpertype -> whiletype .)
    LT              reduce using rule 19 (helpertype -> whiletype .)
    GT              reduce using rule 19 (helpertype -> whiletype .)
    LTE             reduce using rule 19 (helpertype -> whiletype .)
    GTE             reduce using rule 19 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 19 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 19 (helpertype -> whiletype .)
    AND             reduce using rule 19 (helpertype -> whiletype .)
    OR              reduce using rule 19 (helpertype -> whiletype .)
    PLUS            reduce using rule 19 (helpertype -> whiletype .)
    MINUS           reduce using rule 19 (helpertype -> whiletype .)
    TIMES           reduce using rule 19 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 19 (helpertype -> whiletype .)
    MOD             reduce using rule 19 (helpertype -> whiletype .)
    POW             reduce using rule 19 (helpertype -> whiletype .)
    SEMI_COLON      reduce using rule 19 (helpertype -> whiletype .)
    COMMA           reduce using rule 19 (helpertype -> whiletype .)
    $end            reduce using rule 19 (helpertype -> whiletype .)
    RBRACE          reduce using rule 19 (helpertype -> whiletype .)
    RPAREN          reduce using rule 19 (helpertype -> whiletype .)
    RSPAREN         reduce using rule 19 (helpertype -> whiletype .)
    TO              reduce using rule 19 (helpertype -> whiletype .)
    STEP            reduce using rule 19 (helpertype -> whiletype .)
    COLON           reduce using rule 19 (helpertype -> whiletype .)
    DO              shift and go to state 110

  ! DO              [ reduce using rule 19 (helpertype -> whiletype .) ]


state 101

    (20) helpertype -> fortype .
    (45) forloop -> fortype . DO bracedexp_noscope

  ! shift/reduce conflict for DO resolved as shift
    BINARY_FNC      reduce using rule 20 (helpertype -> fortype .)
    GETVARIABLE     reduce using rule 20 (helpertype -> fortype .)
    SETVARIABLE     reduce using rule 20 (helpertype -> fortype .)
    PARAM           reduce using rule 20 (helpertype -> fortype .)
    PARAMS          reduce using rule 20 (helpertype -> fortype .)
    LT              reduce using rule 20 (helpertype -> fortype .)
    GT              reduce using rule 20 (helpertype -> fortype .)
    LTE             reduce using rule 20 (helpertype -> fortype .)
    GTE             reduce using rule 20 (helpertype -> fortype .)
    EQUALITY        reduce using rule 20 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 20 (helpertype -> fortype .)
    AND             reduce using rule 20 (helpertype -> fortype .)
    OR              reduce using rule 20 (helpertype -> fortype .)
    PLUS            reduce using rule 20 (helpertype -> fortype .)
    MINUS           reduce using rule 20 (helpertype -> fortype .)
    TIMES           reduce using rule 20 (helpertype -> fortype .)
    DIVIDE          reduce using rule 20 (helpertype -> fortype .)
    MOD             reduce using rule 20 (helpertype -> fortype .)
    POW             reduce using rule 20 (helpertype -> fortype .)
    SEMI_COLON      reduce using rule 20 (helpertype -> fortype .)
    COMMA           reduce using rule 20 (helpertype -> fortype .)
    $end            reduce using rule 20 (helpertype -> fortype .)
    RBRACE          reduce using rule 20 (helpertype -> fortype .)
    RPAREN          reduce using rule 20 (helpertype -> fortype .)
    RSPAREN         reduce using rule 20 (helpertype -> fortype .)
    TO              reduce using rule 20 (helpertype -> fortype .)
    STEP            reduce using rule 20 (helpertype -> fortype .)
    COLON           reduce using rule 20 (helpertype -> fortype .)
    DO              shift and go to state 111

  ! DO              [ reduce using rule 20 (helpertype -> fortype .) ]


state 102

    (78) vardefinition -> definition .

    BINARY_FNC      reduce using rule 78 (vardefinition -> definition .)
    GETVARIABLE     reduce using rule 78 (vardefinition -> definition .)
    SETVARIABLE     reduce using rule 78 (vardefinition -> definition .)
    PARAM           reduce using rule 78 (vardefinition -> definition .)
    PARAMS          reduce using rule 78 (vardefinition -> definition .)
    LT              reduce using rule 78 (vardefinition -> definition .)
    GT              reduce using rule 78 (vardefinition -> definition .)
    LTE             reduce using rule 78 (vardefinition -> definition .)
    GTE             reduce using rule 78 (vardefinition -> definition .)
    EQUALITY        reduce using rule 78 (vardefinition -> definition .)
    INEQUALITY      reduce using rule 78 (vardefinition -> definition .)
    AND             reduce using rule 78 (vardefinition -> definition .)
    OR              reduce using rule 78 (vardefinition -> definition .)
    PLUS            reduce using rule 78 (vardefinition -> definition .)
    MINUS           reduce using rule 78 (vardefinition -> definition .)
    TIMES           reduce using rule 78 (vardefinition -> definition .)
    DIVIDE          reduce using rule 78 (vardefinition -> definition .)
    MOD             reduce using rule 78 (vardefinition -> definition .)
    POW             reduce using rule 78 (vardefinition -> definition .)
    SEMI_COLON      reduce using rule 78 (vardefinition -> definition .)
    COMMA           reduce using rule 78 (vardefinition -> definition .)
    $end            reduce using rule 78 (vardefinition -> definition .)
    RBRACE          reduce using rule 78 (vardefinition -> definition .)
    RPAREN          reduce using rule 78 (vardefinition -> definition .)
    RSPAREN         reduce using rule 78 (vardefinition -> definition .)
    TO              reduce using rule 78 (vardefinition -> definition .)
    STEP            reduce using rule 78 (vardefinition -> definition .)
    DO              reduce using rule 78 (vardefinition -> definition .)
    COLON           reduce using rule 78 (vardefinition -> definition .)


state 103

    (126) unaryexp -> PLUS primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    COMMA           reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    $end            reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    BINARY_FNC      reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    GETVARIABLE     reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    SETVARIABLE     reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    PARAM           reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    PARAMS          reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    LT              reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    GT              reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    LTE             reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    GTE             reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    EQUALITY        reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    INEQUALITY      reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    AND             reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    OR              reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    PLUS            reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    MINUS           reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    TIMES           reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    DIVIDE          reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    MOD             reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    POW             reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    RBRACE          reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    RPAREN          reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    RSPAREN         reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    TO              reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    STEP            reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    DO              reduce using rule 126 (unaryexp -> PLUS primaryexp .)
    COLON           reduce using rule 126 (unaryexp -> PLUS primaryexp .)

  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! POW             [ shift and go to state 87 ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 104

    (127) unaryexp -> MINUS primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    COMMA           reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    $end            reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    BINARY_FNC      reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    GETVARIABLE     reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    SETVARIABLE     reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    PARAM           reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    PARAMS          reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    LT              reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    GT              reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    LTE             reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    GTE             reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    EQUALITY        reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    INEQUALITY      reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    AND             reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    OR              reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    PLUS            reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    MINUS           reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    TIMES           reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    DIVIDE          reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    MOD             reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    POW             reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    RBRACE          reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    RPAREN          reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    RSPAREN         reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    TO              reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    STEP            reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    DO              reduce using rule 127 (unaryexp -> MINUS primaryexp .)
    COLON           reduce using rule 127 (unaryexp -> MINUS primaryexp .)

  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! POW             [ shift and go to state 87 ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 105

    (128) unaryexp -> NOT primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 128 (unaryexp -> NOT primaryexp .)
    COMMA           reduce using rule 128 (unaryexp -> NOT primaryexp .)
    $end            reduce using rule 128 (unaryexp -> NOT primaryexp .)
    BINARY_FNC      reduce using rule 128 (unaryexp -> NOT primaryexp .)
    GETVARIABLE     reduce using rule 128 (unaryexp -> NOT primaryexp .)
    SETVARIABLE     reduce using rule 128 (unaryexp -> NOT primaryexp .)
    PARAM           reduce using rule 128 (unaryexp -> NOT primaryexp .)
    PARAMS          reduce using rule 128 (unaryexp -> NOT primaryexp .)
    LT              reduce using rule 128 (unaryexp -> NOT primaryexp .)
    GT              reduce using rule 128 (unaryexp -> NOT primaryexp .)
    LTE             reduce using rule 128 (unaryexp -> NOT primaryexp .)
    GTE             reduce using rule 128 (unaryexp -> NOT primaryexp .)
    EQUALITY        reduce using rule 128 (unaryexp -> NOT primaryexp .)
    INEQUALITY      reduce using rule 128 (unaryexp -> NOT primaryexp .)
    AND             reduce using rule 128 (unaryexp -> NOT primaryexp .)
    OR              reduce using rule 128 (unaryexp -> NOT primaryexp .)
    PLUS            reduce using rule 128 (unaryexp -> NOT primaryexp .)
    MINUS           reduce using rule 128 (unaryexp -> NOT primaryexp .)
    TIMES           reduce using rule 128 (unaryexp -> NOT primaryexp .)
    DIVIDE          reduce using rule 128 (unaryexp -> NOT primaryexp .)
    MOD             reduce using rule 128 (unaryexp -> NOT primaryexp .)
    POW             reduce using rule 128 (unaryexp -> NOT primaryexp .)
    RBRACE          reduce using rule 128 (unaryexp -> NOT primaryexp .)
    RPAREN          reduce using rule 128 (unaryexp -> NOT primaryexp .)
    RSPAREN         reduce using rule 128 (unaryexp -> NOT primaryexp .)
    TO              reduce using rule 128 (unaryexp -> NOT primaryexp .)
    STEP            reduce using rule 128 (unaryexp -> NOT primaryexp .)
    DO              reduce using rule 128 (unaryexp -> NOT primaryexp .)
    COLON           reduce using rule 128 (unaryexp -> NOT primaryexp .)

  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! POW             [ shift and go to state 87 ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 106

    (39) foreachloop -> bracedexp FOREACH . array
    (40) foreachloop -> bracedexp FOREACH . primaryexp
    (41) foreachloop -> bracedexp FOREACH . LPAREN primaryexp RPAREN
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 152
    LSPAREN         shift and go to state 50
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    bracedexp                      shift and go to state 38
    array                          shift and go to state 150
    primaryexp                     shift and go to state 151
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 107

    (111) primaryexp -> LPAREN primaryexp . RPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RPAREN          shift and go to state 153
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 108

    (31) ifstatement -> iftype THEN . bracedexp ELSE bracedexp
    (32) ifstatement -> iftype THEN . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 154

state 109

    (33) ifstatement -> iftype EXITWITH . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 155

state 110

    (38) whileloop -> whiletype DO . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 156

state 111

    (45) forloop -> fortype DO . bracedexp_noscope
    (48) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 158

    bracedexp_noscope              shift and go to state 157

state 112

    (36) withstatement -> withstatementinit bracedexp .

    SEMI_COLON      reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    COMMA           reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    $end            reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    BINARY_FNC      reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    GETVARIABLE     reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    SETVARIABLE     reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    PARAM           reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    PARAMS          reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    LT              reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    GT              reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    LTE             reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    GTE             reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    EQUALITY        reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    INEQUALITY      reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    AND             reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    OR              reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    PLUS            reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    MINUS           reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    TIMES           reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    DIVIDE          reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    MOD             reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    POW             reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    RBRACE          reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    RPAREN          reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    RSPAREN         reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    TO              reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    STEP            reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    DO              reduce using rule 36 (withstatement -> withstatementinit bracedexp .)
    COLON           reduce using rule 36 (withstatement -> withstatementinit bracedexp .)


state 113

    (25) switchstatement -> SWITCH LPAREN . primaryexp RPAREN DO LBRACE switchbody RBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 159
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 114

    (112) bracedexp -> LBRACE new_scope . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (156) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (9) statement -> . primaryexp
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (80) assignment -> . assignment_code code RBRACE
    (81) assignment -> . definition EQUAL primaryexp
    (82) assignment -> . variable EQUAL primaryexp
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (83) assignment_code -> . definition EQUAL LBRACE
    (84) assignment_code -> . variable EQUAL LBRACE
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (90) variable -> . PRIVATE_ID
    (91) variable -> . GLOBAL_ID
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (35) withstatementinit -> . withtype DO
    (85) arraydefinition -> . PRIVATE stringarray
    (34) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 156 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    LPAREN          shift and go to state 39
    SWITCH          shift and go to state 44
    PRIVATE         shift and go to state 46
    PRIVATE_ID      shift and go to state 47
    GLOBAL_ID       shift and go to state 48
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63

    code                           shift and go to state 160
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    primaryexp                     shift and go to state 9
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    assignment_code                shift and go to state 16
    definition                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    number                         shift and go to state 34
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    string                         shift and go to state 37
    bracedexp                      shift and go to state 38
    iftype                         shift and go to state 40
    whiletype                      shift and go to state 41
    fortype                        shift and go to state 42
    withstatementinit              shift and go to state 43
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 115

    (113) bracedexp -> LBRACE RBRACE .

    FOREACH         reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    BINARY_FNC      reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    GETVARIABLE     reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    SETVARIABLE     reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    PARAM           reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    PARAMS          reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    LT              reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    GT              reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    LTE             reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    GTE             reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    EQUALITY        reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    INEQUALITY      reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    AND             reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    OR              reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    PLUS            reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    MINUS           reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    TIMES           reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    MOD             reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    POW             reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    SEMI_COLON      reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    COMMA           reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    $end            reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    RBRACE          reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    RPAREN          reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    RSPAREN         reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    TO              reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    STEP            reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    DO              reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    COLON           reduce using rule 113 (bracedexp -> LBRACE RBRACE .)
    ELSE            reduce using rule 113 (bracedexp -> LBRACE RBRACE .)


state 116

    (86) definition -> PRIVATE PRIVATE_ID .

    EQUAL           reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    SEMI_COLON      reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    COMMA           reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    $end            reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    BINARY_FNC      reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    GETVARIABLE     reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    SETVARIABLE     reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    PARAM           reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    PARAMS          reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    LT              reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    GT              reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    LTE             reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    GTE             reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    EQUALITY        reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    INEQUALITY      reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    AND             reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    OR              reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    PLUS            reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    MINUS           reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    TIMES           reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    DIVIDE          reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    MOD             reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    POW             reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    RBRACE          reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    RPAREN          reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    RSPAREN         reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    TO              reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    STEP            reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    DO              reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)
    COLON           reduce using rule 86 (definition -> PRIVATE PRIVATE_ID .)


state 117

    (87) definition -> PRIVATE string .

    EQUAL           reduce using rule 87 (definition -> PRIVATE string .)
    SEMI_COLON      reduce using rule 87 (definition -> PRIVATE string .)
    COMMA           reduce using rule 87 (definition -> PRIVATE string .)
    $end            reduce using rule 87 (definition -> PRIVATE string .)
    BINARY_FNC      reduce using rule 87 (definition -> PRIVATE string .)
    GETVARIABLE     reduce using rule 87 (definition -> PRIVATE string .)
    SETVARIABLE     reduce using rule 87 (definition -> PRIVATE string .)
    PARAM           reduce using rule 87 (definition -> PRIVATE string .)
    PARAMS          reduce using rule 87 (definition -> PRIVATE string .)
    LT              reduce using rule 87 (definition -> PRIVATE string .)
    GT              reduce using rule 87 (definition -> PRIVATE string .)
    LTE             reduce using rule 87 (definition -> PRIVATE string .)
    GTE             reduce using rule 87 (definition -> PRIVATE string .)
    EQUALITY        reduce using rule 87 (definition -> PRIVATE string .)
    INEQUALITY      reduce using rule 87 (definition -> PRIVATE string .)
    AND             reduce using rule 87 (definition -> PRIVATE string .)
    OR              reduce using rule 87 (definition -> PRIVATE string .)
    PLUS            reduce using rule 87 (definition -> PRIVATE string .)
    MINUS           reduce using rule 87 (definition -> PRIVATE string .)
    TIMES           reduce using rule 87 (definition -> PRIVATE string .)
    DIVIDE          reduce using rule 87 (definition -> PRIVATE string .)
    MOD             reduce using rule 87 (definition -> PRIVATE string .)
    POW             reduce using rule 87 (definition -> PRIVATE string .)
    RBRACE          reduce using rule 87 (definition -> PRIVATE string .)
    RPAREN          reduce using rule 87 (definition -> PRIVATE string .)
    RSPAREN         reduce using rule 87 (definition -> PRIVATE string .)
    TO              reduce using rule 87 (definition -> PRIVATE string .)
    STEP            reduce using rule 87 (definition -> PRIVATE string .)
    DO              reduce using rule 87 (definition -> PRIVATE string .)
    COLON           reduce using rule 87 (definition -> PRIVATE string .)


state 118

    (85) arraydefinition -> PRIVATE stringarray .

    SEMI_COLON      reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    COMMA           reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    $end            reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    BINARY_FNC      reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    GETVARIABLE     reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    SETVARIABLE     reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    PARAM           reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    PARAMS          reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    LT              reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    GT              reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    LTE             reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    GTE             reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    EQUALITY        reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    INEQUALITY      reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    AND             reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    OR              reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    PLUS            reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    MINUS           reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    TIMES           reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    DIVIDE          reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    MOD             reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    POW             reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    RBRACE          reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    RPAREN          reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    RSPAREN         reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    TO              reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    STEP            reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    DO              reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)
    COLON           reduce using rule 85 (arraydefinition -> PRIVATE stringarray .)


state 119

    (119) stringarray -> LSPAREN . RSPAREN
    (120) stringarray -> LSPAREN . stringarrayelement RSPAREN
    (121) stringarrayelement -> . string
    (122) stringarrayelement -> . string COMMA stringarrayelement
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    RSPAREN         shift and go to state 161
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    stringarrayelement             shift and go to state 162
    string                         shift and go to state 163

state 120

    (49) getvariable_ns -> NAMESPACE GETVARIABLE . string
    (50) getvariable_ns -> NAMESPACE GETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 165
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 164

state 121

    (53) setvariable_ns -> NAMESPACE SETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> NAMESPACE SETVARIABLE . LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    LSPAREN         shift and go to state 166


state 122

    (115) array -> LSPAREN RSPAREN .

    BINARY_FNC      reduce using rule 115 (array -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 115 (array -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 115 (array -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 115 (array -> LSPAREN RSPAREN .)
    PARAMS          reduce using rule 115 (array -> LSPAREN RSPAREN .)
    LT              reduce using rule 115 (array -> LSPAREN RSPAREN .)
    GT              reduce using rule 115 (array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 115 (array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 115 (array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 115 (array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 115 (array -> LSPAREN RSPAREN .)
    AND             reduce using rule 115 (array -> LSPAREN RSPAREN .)
    OR              reduce using rule 115 (array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 115 (array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 115 (array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 115 (array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 115 (array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 115 (array -> LSPAREN RSPAREN .)
    POW             reduce using rule 115 (array -> LSPAREN RSPAREN .)
    SEMI_COLON      reduce using rule 115 (array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 115 (array -> LSPAREN RSPAREN .)
    $end            reduce using rule 115 (array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 115 (array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 115 (array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 115 (array -> LSPAREN RSPAREN .)
    TO              reduce using rule 115 (array -> LSPAREN RSPAREN .)
    STEP            reduce using rule 115 (array -> LSPAREN RSPAREN .)
    DO              reduce using rule 115 (array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 115 (array -> LSPAREN RSPAREN .)


state 123

    (116) array -> LSPAREN arrayelement . RSPAREN

    RSPAREN         shift and go to state 167


state 124

    (117) arrayelement -> primaryexp .
    (118) arrayelement -> primaryexp . COMMA arrayelement
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         reduce using rule 117 (arrayelement -> primaryexp .)
    COMMA           shift and go to state 168
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 125

    (57) param_unary -> PARAM LSPAREN . number RSPAREN
    (58) param_unary -> PARAM LSPAREN . number COMMA primaryexp RSPAREN
    (59) param_unary -> PARAM LSPAREN . number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA array RSPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX

    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56

    number                         shift and go to state 169

state 126

    (67) params_unary -> PARAMS params_array .

    SEMI_COLON      reduce using rule 67 (params_unary -> PARAMS params_array .)
    COMMA           reduce using rule 67 (params_unary -> PARAMS params_array .)
    $end            reduce using rule 67 (params_unary -> PARAMS params_array .)
    BINARY_FNC      reduce using rule 67 (params_unary -> PARAMS params_array .)
    GETVARIABLE     reduce using rule 67 (params_unary -> PARAMS params_array .)
    SETVARIABLE     reduce using rule 67 (params_unary -> PARAMS params_array .)
    PARAM           reduce using rule 67 (params_unary -> PARAMS params_array .)
    PARAMS          reduce using rule 67 (params_unary -> PARAMS params_array .)
    LT              reduce using rule 67 (params_unary -> PARAMS params_array .)
    GT              reduce using rule 67 (params_unary -> PARAMS params_array .)
    LTE             reduce using rule 67 (params_unary -> PARAMS params_array .)
    GTE             reduce using rule 67 (params_unary -> PARAMS params_array .)
    EQUALITY        reduce using rule 67 (params_unary -> PARAMS params_array .)
    INEQUALITY      reduce using rule 67 (params_unary -> PARAMS params_array .)
    AND             reduce using rule 67 (params_unary -> PARAMS params_array .)
    OR              reduce using rule 67 (params_unary -> PARAMS params_array .)
    PLUS            reduce using rule 67 (params_unary -> PARAMS params_array .)
    MINUS           reduce using rule 67 (params_unary -> PARAMS params_array .)
    TIMES           reduce using rule 67 (params_unary -> PARAMS params_array .)
    DIVIDE          reduce using rule 67 (params_unary -> PARAMS params_array .)
    MOD             reduce using rule 67 (params_unary -> PARAMS params_array .)
    POW             reduce using rule 67 (params_unary -> PARAMS params_array .)
    RBRACE          reduce using rule 67 (params_unary -> PARAMS params_array .)
    RPAREN          reduce using rule 67 (params_unary -> PARAMS params_array .)
    RSPAREN         reduce using rule 67 (params_unary -> PARAMS params_array .)
    TO              reduce using rule 67 (params_unary -> PARAMS params_array .)
    STEP            reduce using rule 67 (params_unary -> PARAMS params_array .)
    DO              reduce using rule 67 (params_unary -> PARAMS params_array .)
    COLON           reduce using rule 67 (params_unary -> PARAMS params_array .)


state 127

    (69) params_array -> LSPAREN . RSPAREN
    (70) params_array -> LSPAREN . params_element RSPAREN
    (71) params_element -> . params_array_entry
    (72) params_element -> . params_array_entry COMMA params_element
    (73) params_array_entry -> . string
    (74) params_array_entry -> . LSPAREN string COMMA primaryexp RSPAREN
    (75) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array RSPAREN
    (76) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN
    (77) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    RSPAREN         shift and go to state 171
    LSPAREN         shift and go to state 170
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    params_element                 shift and go to state 172
    params_array_entry             shift and go to state 173
    string                         shift and go to state 174

state 128

    (35) withstatementinit -> withtype DO .

    LBRACE          reduce using rule 35 (withstatementinit -> withtype DO .)


state 129

    (29) iftype -> IF bracedexp_condition .

    THEN            reduce using rule 29 (iftype -> IF bracedexp_condition .)
    EXITWITH        reduce using rule 29 (iftype -> IF bracedexp_condition .)
    BINARY_FNC      reduce using rule 29 (iftype -> IF bracedexp_condition .)
    GETVARIABLE     reduce using rule 29 (iftype -> IF bracedexp_condition .)
    SETVARIABLE     reduce using rule 29 (iftype -> IF bracedexp_condition .)
    PARAM           reduce using rule 29 (iftype -> IF bracedexp_condition .)
    PARAMS          reduce using rule 29 (iftype -> IF bracedexp_condition .)
    LT              reduce using rule 29 (iftype -> IF bracedexp_condition .)
    GT              reduce using rule 29 (iftype -> IF bracedexp_condition .)
    LTE             reduce using rule 29 (iftype -> IF bracedexp_condition .)
    GTE             reduce using rule 29 (iftype -> IF bracedexp_condition .)
    EQUALITY        reduce using rule 29 (iftype -> IF bracedexp_condition .)
    INEQUALITY      reduce using rule 29 (iftype -> IF bracedexp_condition .)
    AND             reduce using rule 29 (iftype -> IF bracedexp_condition .)
    OR              reduce using rule 29 (iftype -> IF bracedexp_condition .)
    PLUS            reduce using rule 29 (iftype -> IF bracedexp_condition .)
    MINUS           reduce using rule 29 (iftype -> IF bracedexp_condition .)
    TIMES           reduce using rule 29 (iftype -> IF bracedexp_condition .)
    DIVIDE          reduce using rule 29 (iftype -> IF bracedexp_condition .)
    MOD             reduce using rule 29 (iftype -> IF bracedexp_condition .)
    POW             reduce using rule 29 (iftype -> IF bracedexp_condition .)
    SEMI_COLON      reduce using rule 29 (iftype -> IF bracedexp_condition .)
    COMMA           reduce using rule 29 (iftype -> IF bracedexp_condition .)
    $end            reduce using rule 29 (iftype -> IF bracedexp_condition .)
    RBRACE          reduce using rule 29 (iftype -> IF bracedexp_condition .)
    RPAREN          reduce using rule 29 (iftype -> IF bracedexp_condition .)
    RSPAREN         reduce using rule 29 (iftype -> IF bracedexp_condition .)
    TO              reduce using rule 29 (iftype -> IF bracedexp_condition .)
    STEP            reduce using rule 29 (iftype -> IF bracedexp_condition .)
    DO              reduce using rule 29 (iftype -> IF bracedexp_condition .)
    COLON           reduce using rule 29 (iftype -> IF bracedexp_condition .)


state 130

    (30) iftype -> IF LPAREN . primaryexp RPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 175
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 131

    (46) bracedexp_condition -> LBRACE . booleanexp RBRACE
    (146) booleanexp -> . primaryexp
    (147) booleanexp -> . primaryexp comparisonoperator booleanexp
    (148) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    booleanexp                     shift and go to state 176
    primaryexp                     shift and go to state 177
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 132

    (47) bracedexp_condition -> identifier .

    THEN            reduce using rule 47 (bracedexp_condition -> identifier .)
    EXITWITH        reduce using rule 47 (bracedexp_condition -> identifier .)
    BINARY_FNC      reduce using rule 47 (bracedexp_condition -> identifier .)
    GETVARIABLE     reduce using rule 47 (bracedexp_condition -> identifier .)
    SETVARIABLE     reduce using rule 47 (bracedexp_condition -> identifier .)
    PARAM           reduce using rule 47 (bracedexp_condition -> identifier .)
    PARAMS          reduce using rule 47 (bracedexp_condition -> identifier .)
    LT              reduce using rule 47 (bracedexp_condition -> identifier .)
    GT              reduce using rule 47 (bracedexp_condition -> identifier .)
    LTE             reduce using rule 47 (bracedexp_condition -> identifier .)
    GTE             reduce using rule 47 (bracedexp_condition -> identifier .)
    EQUALITY        reduce using rule 47 (bracedexp_condition -> identifier .)
    INEQUALITY      reduce using rule 47 (bracedexp_condition -> identifier .)
    AND             reduce using rule 47 (bracedexp_condition -> identifier .)
    OR              reduce using rule 47 (bracedexp_condition -> identifier .)
    PLUS            reduce using rule 47 (bracedexp_condition -> identifier .)
    MINUS           reduce using rule 47 (bracedexp_condition -> identifier .)
    TIMES           reduce using rule 47 (bracedexp_condition -> identifier .)
    DIVIDE          reduce using rule 47 (bracedexp_condition -> identifier .)
    MOD             reduce using rule 47 (bracedexp_condition -> identifier .)
    POW             reduce using rule 47 (bracedexp_condition -> identifier .)
    SEMI_COLON      reduce using rule 47 (bracedexp_condition -> identifier .)
    COMMA           reduce using rule 47 (bracedexp_condition -> identifier .)
    $end            reduce using rule 47 (bracedexp_condition -> identifier .)
    RBRACE          reduce using rule 47 (bracedexp_condition -> identifier .)
    RPAREN          reduce using rule 47 (bracedexp_condition -> identifier .)
    RSPAREN         reduce using rule 47 (bracedexp_condition -> identifier .)
    TO              reduce using rule 47 (bracedexp_condition -> identifier .)
    STEP            reduce using rule 47 (bracedexp_condition -> identifier .)
    DO              reduce using rule 47 (bracedexp_condition -> identifier .)
    COLON           reduce using rule 47 (bracedexp_condition -> identifier .)


state 133

    (37) whiletype -> WHILE bracedexp_condition .

    DO              reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    BINARY_FNC      reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    GETVARIABLE     reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    SETVARIABLE     reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    PARAM           reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    PARAMS          reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    LT              reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    GT              reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    LTE             reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    GTE             reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    EQUALITY        reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    INEQUALITY      reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    AND             reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    OR              reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    PLUS            reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    MINUS           reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    TIMES           reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    DIVIDE          reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    MOD             reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    POW             reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    SEMI_COLON      reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    COMMA           reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    $end            reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    RBRACE          reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    RPAREN          reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    RSPAREN         reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    TO              reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    STEP            reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)
    COLON           reduce using rule 37 (whiletype -> WHILE bracedexp_condition .)


state 134

    (42) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp
    (43) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> FOR new_scope . LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 179
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 178

state 135

    (34) withtype -> WITH NAMESPACE .

    DO              reduce using rule 34 (withtype -> WITH NAMESPACE .)
    BINARY_FNC      reduce using rule 34 (withtype -> WITH NAMESPACE .)
    GETVARIABLE     reduce using rule 34 (withtype -> WITH NAMESPACE .)
    SETVARIABLE     reduce using rule 34 (withtype -> WITH NAMESPACE .)
    PARAM           reduce using rule 34 (withtype -> WITH NAMESPACE .)
    PARAMS          reduce using rule 34 (withtype -> WITH NAMESPACE .)
    LT              reduce using rule 34 (withtype -> WITH NAMESPACE .)
    GT              reduce using rule 34 (withtype -> WITH NAMESPACE .)
    LTE             reduce using rule 34 (withtype -> WITH NAMESPACE .)
    GTE             reduce using rule 34 (withtype -> WITH NAMESPACE .)
    EQUALITY        reduce using rule 34 (withtype -> WITH NAMESPACE .)
    INEQUALITY      reduce using rule 34 (withtype -> WITH NAMESPACE .)
    AND             reduce using rule 34 (withtype -> WITH NAMESPACE .)
    OR              reduce using rule 34 (withtype -> WITH NAMESPACE .)
    PLUS            reduce using rule 34 (withtype -> WITH NAMESPACE .)
    MINUS           reduce using rule 34 (withtype -> WITH NAMESPACE .)
    TIMES           reduce using rule 34 (withtype -> WITH NAMESPACE .)
    DIVIDE          reduce using rule 34 (withtype -> WITH NAMESPACE .)
    MOD             reduce using rule 34 (withtype -> WITH NAMESPACE .)
    POW             reduce using rule 34 (withtype -> WITH NAMESPACE .)
    SEMI_COLON      reduce using rule 34 (withtype -> WITH NAMESPACE .)
    COMMA           reduce using rule 34 (withtype -> WITH NAMESPACE .)
    $end            reduce using rule 34 (withtype -> WITH NAMESPACE .)
    RBRACE          reduce using rule 34 (withtype -> WITH NAMESPACE .)
    RPAREN          reduce using rule 34 (withtype -> WITH NAMESPACE .)
    RSPAREN         reduce using rule 34 (withtype -> WITH NAMESPACE .)
    TO              reduce using rule 34 (withtype -> WITH NAMESPACE .)
    STEP            reduce using rule 34 (withtype -> WITH NAMESPACE .)
    COLON           reduce using rule 34 (withtype -> WITH NAMESPACE .)


state 136

    (3) code -> statement terminator code .

    $end            reduce using rule 3 (code -> statement terminator code .)
    RBRACE          reduce using rule 3 (code -> statement terminator code .)


state 137

    (92) binaryexp -> primaryexp BINARY_FNC primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    COMMA           reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    $end            reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    BINARY_FNC      reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GETVARIABLE     reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    SETVARIABLE     reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PARAM           reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PARAMS          reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    LT              reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GT              reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    LTE             reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GTE             reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    EQUALITY        reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    INEQUALITY      reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    AND             reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    OR              reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RBRACE          reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RPAREN          reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RSPAREN         reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    TO              reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    STEP            reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    DO              reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    COLON           reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! PLUS            [ reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! MINUS           [ reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! TIMES           [ reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! DIVIDE          [ reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! MOD             [ reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! POW             [ reduce using rule 92 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 138

    (93) binaryexp -> primaryexp comparisonoperator primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    COMMA           reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    $end            reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    BINARY_FNC      reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GETVARIABLE     reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    SETVARIABLE     reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAM           reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAMS          reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LT              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GT              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LTE             reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GTE             reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    EQUALITY        reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    INEQUALITY      reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    AND             reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    OR              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RBRACE          reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RPAREN          reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RSPAREN         reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    TO              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    STEP            reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    DO              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    COLON           reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! PLUS            [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MOD             [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! POW             [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 139

    (94) binaryexp -> primaryexp mathoperator primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    COMMA           reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    $end            reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    BINARY_FNC      reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    GETVARIABLE     reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    SETVARIABLE     reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    PARAM           reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    PARAMS          reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    LT              reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    GT              reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    LTE             reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    GTE             reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    EQUALITY        reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    INEQUALITY      reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    AND             reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    OR              reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    RBRACE          reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    RPAREN          reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    RSPAREN         reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    TO              reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    STEP            reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    DO              reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    COLON           reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! PLUS            [ reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! MOD             [ reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! POW             [ reduce using rule 94 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]

    mathoperator                   shift and go to state 69
    comparisonoperator             shift and go to state 68

state 140

    (51) getvariable_any -> primaryexp GETVARIABLE string .

    SEMI_COLON      reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    COMMA           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    $end            reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    BINARY_FNC      reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    GETVARIABLE     reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    SETVARIABLE     reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    PARAM           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    PARAMS          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    LT              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    GT              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    LTE             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    GTE             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    EQUALITY        reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    INEQUALITY      reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    AND             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    OR              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    PLUS            reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    MINUS           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    TIMES           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    DIVIDE          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    MOD             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    POW             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    RBRACE          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    RPAREN          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    RSPAREN         reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    TO              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    STEP            reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    DO              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)
    COLON           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE string .)


state 141

    (52) getvariable_any -> primaryexp GETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 180

state 142

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN . string COMMA primaryexp COMMA booleanexp RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 181

state 143

    (62) param_binary -> primaryexp PARAM LSPAREN . number RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA array RSPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX

    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56

    number                         shift and go to state 182

state 144

    (68) params_binary -> primaryexp PARAMS params_array .

    SEMI_COLON      reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    COMMA           reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    $end            reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    BINARY_FNC      reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    GETVARIABLE     reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    SETVARIABLE     reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    PARAM           reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    PARAMS          reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    LT              reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    GT              reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    LTE             reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    GTE             reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    EQUALITY        reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    INEQUALITY      reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    AND             reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    OR              reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    PLUS            reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    MINUS           reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    TIMES           reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    DIVIDE          reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    MOD             reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    POW             reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    RBRACE          reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    RPAREN          reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    RSPAREN         reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    TO              reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    STEP            reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    DO              reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)
    COLON           reduce using rule 68 (params_binary -> primaryexp PARAMS params_array .)


state 145

    (80) assignment -> assignment_code code RBRACE .

    SEMI_COLON      reduce using rule 80 (assignment -> assignment_code code RBRACE .)
    COMMA           reduce using rule 80 (assignment -> assignment_code code RBRACE .)
    $end            reduce using rule 80 (assignment -> assignment_code code RBRACE .)
    RBRACE          reduce using rule 80 (assignment -> assignment_code code RBRACE .)


state 146

    (81) assignment -> definition EQUAL primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 81 (assignment -> definition EQUAL primaryexp .)
    COMMA           reduce using rule 81 (assignment -> definition EQUAL primaryexp .)
    $end            reduce using rule 81 (assignment -> definition EQUAL primaryexp .)
    RBRACE          reduce using rule 81 (assignment -> definition EQUAL primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 147

    (83) assignment_code -> definition EQUAL LBRACE .
    (112) bracedexp -> LBRACE . new_scope code RBRACE
    (113) bracedexp -> LBRACE . RBRACE
    (114) new_scope -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! reduce/reduce conflict for NULAR_FNC resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for UNARY_FNC resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PLUS resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NOT resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAM resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAMS resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for WITH resolved using rule 83 (assignment_code -> definition EQUAL LBRACE .)
  ! shift/reduce conflict for RBRACE resolved as shift
    NULAR_FNC       reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    UNARY_FNC       reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    PLUS            reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    MINUS           reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    NOT             reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    LPAREN          reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    SWITCH          reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    PRIVATE         reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    PRIVATE_ID      reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    GLOBAL_ID       reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    NAMESPACE       reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    PARAM           reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    PARAMS          reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_REAL     reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_EXP      reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_HEX      reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    LSPAREN         reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    STRING_SINGLE   reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    STRING_DOUBLE   reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    LBRACE          reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    IF              reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    WHILE           reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    FOR             reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    WITH            reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .)
    RBRACE          shift and go to state 115

  ! RBRACE          [ reduce using rule 83 (assignment_code -> definition EQUAL LBRACE .) ]
  ! NULAR_FNC       [ reduce using rule 114 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 114 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 114 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 114 (new_scope -> .) ]
  ! NOT             [ reduce using rule 114 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 114 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 114 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 114 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 114 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 114 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 114 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 114 (new_scope -> .) ]
  ! PARAMS          [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 114 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 114 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 114 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 114 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 114 (new_scope -> .) ]
  ! IF              [ reduce using rule 114 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 114 (new_scope -> .) ]
  ! FOR             [ reduce using rule 114 (new_scope -> .) ]
  ! WITH            [ reduce using rule 114 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 114 (new_scope -> .) ]

    new_scope                      shift and go to state 114

state 148

    (82) assignment -> variable EQUAL primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    SEMI_COLON      reduce using rule 82 (assignment -> variable EQUAL primaryexp .)
    COMMA           reduce using rule 82 (assignment -> variable EQUAL primaryexp .)
    $end            reduce using rule 82 (assignment -> variable EQUAL primaryexp .)
    RBRACE          reduce using rule 82 (assignment -> variable EQUAL primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 149

    (84) assignment_code -> variable EQUAL LBRACE .
    (112) bracedexp -> LBRACE . new_scope code RBRACE
    (113) bracedexp -> LBRACE . RBRACE
    (114) new_scope -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! reduce/reduce conflict for NULAR_FNC resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for UNARY_FNC resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PLUS resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NOT resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAM resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAMS resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for WITH resolved using rule 84 (assignment_code -> variable EQUAL LBRACE .)
  ! shift/reduce conflict for RBRACE resolved as shift
    NULAR_FNC       reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    UNARY_FNC       reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    PLUS            reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    MINUS           reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    NOT             reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    LPAREN          reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    SWITCH          reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    PRIVATE         reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    PRIVATE_ID      reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    GLOBAL_ID       reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    NAMESPACE       reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    PARAM           reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    PARAMS          reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_REAL     reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_EXP      reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_HEX      reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    LSPAREN         reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    STRING_SINGLE   reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    STRING_DOUBLE   reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    LBRACE          reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    IF              reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    WHILE           reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    FOR             reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    WITH            reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .)
    RBRACE          shift and go to state 115

  ! RBRACE          [ reduce using rule 84 (assignment_code -> variable EQUAL LBRACE .) ]
  ! NULAR_FNC       [ reduce using rule 114 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 114 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 114 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 114 (new_scope -> .) ]
  ! NOT             [ reduce using rule 114 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 114 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 114 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 114 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 114 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 114 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 114 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 114 (new_scope -> .) ]
  ! PARAMS          [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 114 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 114 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 114 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 114 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 114 (new_scope -> .) ]
  ! IF              [ reduce using rule 114 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 114 (new_scope -> .) ]
  ! FOR             [ reduce using rule 114 (new_scope -> .) ]
  ! WITH            [ reduce using rule 114 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 114 (new_scope -> .) ]

    new_scope                      shift and go to state 114

state 150

    (39) foreachloop -> bracedexp FOREACH array .
    (105) primaryexp -> array .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for PARAM resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for PARAMS resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for LT resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for GT resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for LTE resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for GTE resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for AND resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for OR resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for TIMES resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for MOD resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for POW resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for $end resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for TO resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for STEP resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for DO resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for COLON resolved using rule 39 (foreachloop -> bracedexp FOREACH array .)
    SEMI_COLON      reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    COMMA           reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    $end            reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    BINARY_FNC      reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    GETVARIABLE     reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    SETVARIABLE     reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    PARAM           reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    PARAMS          reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    LT              reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    GT              reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    LTE             reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    GTE             reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    EQUALITY        reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    INEQUALITY      reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    AND             reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    OR              reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    PLUS            reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    MINUS           reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    TIMES           reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    DIVIDE          reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    MOD             reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    POW             reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    RBRACE          reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    RPAREN          reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    RSPAREN         reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    TO              reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    STEP            reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    DO              reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)
    COLON           reduce using rule 39 (foreachloop -> bracedexp FOREACH array .)

  ! BINARY_FNC      [ reduce using rule 105 (primaryexp -> array .) ]
  ! GETVARIABLE     [ reduce using rule 105 (primaryexp -> array .) ]
  ! SETVARIABLE     [ reduce using rule 105 (primaryexp -> array .) ]
  ! PARAM           [ reduce using rule 105 (primaryexp -> array .) ]
  ! PARAMS          [ reduce using rule 105 (primaryexp -> array .) ]
  ! LT              [ reduce using rule 105 (primaryexp -> array .) ]
  ! GT              [ reduce using rule 105 (primaryexp -> array .) ]
  ! LTE             [ reduce using rule 105 (primaryexp -> array .) ]
  ! GTE             [ reduce using rule 105 (primaryexp -> array .) ]
  ! EQUALITY        [ reduce using rule 105 (primaryexp -> array .) ]
  ! INEQUALITY      [ reduce using rule 105 (primaryexp -> array .) ]
  ! AND             [ reduce using rule 105 (primaryexp -> array .) ]
  ! OR              [ reduce using rule 105 (primaryexp -> array .) ]
  ! PLUS            [ reduce using rule 105 (primaryexp -> array .) ]
  ! MINUS           [ reduce using rule 105 (primaryexp -> array .) ]
  ! TIMES           [ reduce using rule 105 (primaryexp -> array .) ]
  ! DIVIDE          [ reduce using rule 105 (primaryexp -> array .) ]
  ! MOD             [ reduce using rule 105 (primaryexp -> array .) ]
  ! POW             [ reduce using rule 105 (primaryexp -> array .) ]
  ! SEMI_COLON      [ reduce using rule 105 (primaryexp -> array .) ]
  ! COMMA           [ reduce using rule 105 (primaryexp -> array .) ]
  ! $end            [ reduce using rule 105 (primaryexp -> array .) ]
  ! RBRACE          [ reduce using rule 105 (primaryexp -> array .) ]
  ! RPAREN          [ reduce using rule 105 (primaryexp -> array .) ]
  ! RSPAREN         [ reduce using rule 105 (primaryexp -> array .) ]
  ! TO              [ reduce using rule 105 (primaryexp -> array .) ]
  ! STEP            [ reduce using rule 105 (primaryexp -> array .) ]
  ! DO              [ reduce using rule 105 (primaryexp -> array .) ]
  ! COLON           [ reduce using rule 105 (primaryexp -> array .) ]


state 151

    (40) foreachloop -> bracedexp FOREACH primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMI_COLON      reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    COMMA           reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    $end            reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    RBRACE          reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    RPAREN          reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    RSPAREN         reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    TO              reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    STEP            reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    DO              reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    COLON           reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! BINARY_FNC      [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! PARAM           [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! PARAMS          [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! LT              [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! GT              [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! LTE             [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! GTE             [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! EQUALITY        [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! AND             [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! OR              [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! PLUS            [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! MINUS           [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! TIMES           [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! DIVIDE          [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! MOD             [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]
  ! POW             [ reduce using rule 40 (foreachloop -> bracedexp FOREACH primaryexp .) ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 152

    (41) foreachloop -> bracedexp FOREACH LPAREN . primaryexp RPAREN
    (111) primaryexp -> LPAREN . primaryexp RPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    bracedexp                      shift and go to state 38
    primaryexp                     shift and go to state 183
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 153

    (111) primaryexp -> LPAREN primaryexp RPAREN .

    BINARY_FNC      reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    GETVARIABLE     reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    SETVARIABLE     reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    PARAM           reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    PARAMS          reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    LT              reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    GT              reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    LTE             reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    GTE             reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    EQUALITY        reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    INEQUALITY      reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    AND             reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    OR              reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    PLUS            reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    MINUS           reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    TIMES           reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    DIVIDE          reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    MOD             reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    POW             reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    SEMI_COLON      reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    COMMA           reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    $end            reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    RBRACE          reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    RPAREN          reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    RSPAREN         reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    TO              reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    STEP            reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    DO              reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)
    COLON           reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .)


state 154

    (31) ifstatement -> iftype THEN bracedexp . ELSE bracedexp
    (32) ifstatement -> iftype THEN bracedexp .

    ELSE            shift and go to state 184
    SEMI_COLON      reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    COMMA           reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    $end            reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    BINARY_FNC      reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    GETVARIABLE     reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    SETVARIABLE     reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    PARAM           reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    PARAMS          reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    LT              reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    GT              reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    LTE             reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    GTE             reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    EQUALITY        reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    INEQUALITY      reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    AND             reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    OR              reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    PLUS            reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    MINUS           reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    TIMES           reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    DIVIDE          reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    MOD             reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    POW             reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    RBRACE          reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    RPAREN          reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    RSPAREN         reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    TO              reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    STEP            reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    DO              reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)
    COLON           reduce using rule 32 (ifstatement -> iftype THEN bracedexp .)


state 155

    (33) ifstatement -> iftype EXITWITH bracedexp .

    SEMI_COLON      reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    COMMA           reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    $end            reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    BINARY_FNC      reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    GETVARIABLE     reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    SETVARIABLE     reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    PARAM           reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    PARAMS          reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    LT              reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    GT              reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    LTE             reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    GTE             reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    EQUALITY        reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    INEQUALITY      reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    AND             reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    OR              reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    PLUS            reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    MINUS           reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    TIMES           reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    DIVIDE          reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    MOD             reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    POW             reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    RBRACE          reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    RPAREN          reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    RSPAREN         reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    TO              reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    STEP            reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    DO              reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)
    COLON           reduce using rule 33 (ifstatement -> iftype EXITWITH bracedexp .)


state 156

    (38) whileloop -> whiletype DO bracedexp .

    SEMI_COLON      reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    COMMA           reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    $end            reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    BINARY_FNC      reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    GETVARIABLE     reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    SETVARIABLE     reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    PARAM           reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    PARAMS          reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    LT              reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    GT              reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    LTE             reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    GTE             reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    EQUALITY        reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    INEQUALITY      reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    AND             reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    OR              reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    PLUS            reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    MINUS           reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    TIMES           reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    DIVIDE          reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    MOD             reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    POW             reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    RBRACE          reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    RPAREN          reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    RSPAREN         reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    TO              reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    STEP            reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    DO              reduce using rule 38 (whileloop -> whiletype DO bracedexp .)
    COLON           reduce using rule 38 (whileloop -> whiletype DO bracedexp .)


state 157

    (45) forloop -> fortype DO bracedexp_noscope .

    SEMI_COLON      reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    COMMA           reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    $end            reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    BINARY_FNC      reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    GETVARIABLE     reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    SETVARIABLE     reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    PARAM           reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    PARAMS          reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    LT              reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    GT              reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    LTE             reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    GTE             reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    EQUALITY        reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    INEQUALITY      reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    AND             reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    OR              reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    PLUS            reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    MINUS           reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    TIMES           reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    DIVIDE          reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    MOD             reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    POW             reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    RBRACE          reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    RPAREN          reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    RSPAREN         reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    TO              reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    STEP            reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    DO              reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)
    COLON           reduce using rule 45 (forloop -> fortype DO bracedexp_noscope .)


state 158

    (48) bracedexp_noscope -> LBRACE . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (156) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (9) statement -> . primaryexp
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (80) assignment -> . assignment_code code RBRACE
    (81) assignment -> . definition EQUAL primaryexp
    (82) assignment -> . variable EQUAL primaryexp
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (83) assignment_code -> . definition EQUAL LBRACE
    (84) assignment_code -> . variable EQUAL LBRACE
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (90) variable -> . PRIVATE_ID
    (91) variable -> . GLOBAL_ID
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (35) withstatementinit -> . withtype DO
    (85) arraydefinition -> . PRIVATE stringarray
    (34) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 156 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    LPAREN          shift and go to state 39
    SWITCH          shift and go to state 44
    PRIVATE         shift and go to state 46
    PRIVATE_ID      shift and go to state 47
    GLOBAL_ID       shift and go to state 48
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63

    code                           shift and go to state 185
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    primaryexp                     shift and go to state 9
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    assignment_code                shift and go to state 16
    definition                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    number                         shift and go to state 34
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    string                         shift and go to state 37
    bracedexp                      shift and go to state 38
    iftype                         shift and go to state 40
    whiletype                      shift and go to state 41
    fortype                        shift and go to state 42
    withstatementinit              shift and go to state 43
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 159

    (25) switchstatement -> SWITCH LPAREN primaryexp . RPAREN DO LBRACE switchbody RBRACE
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RPAREN          shift and go to state 186
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 160

    (112) bracedexp -> LBRACE new_scope code . RBRACE

    RBRACE          shift and go to state 187


state 161

    (119) stringarray -> LSPAREN RSPAREN .

    SEMI_COLON      reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    $end            reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    BINARY_FNC      reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    PARAMS          reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    LT              reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    GT              reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    LTE             reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    GTE             reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    AND             reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    OR              reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    MOD             reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    POW             reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    TO              reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    STEP            reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    DO              reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)
    COLON           reduce using rule 119 (stringarray -> LSPAREN RSPAREN .)


state 162

    (120) stringarray -> LSPAREN stringarrayelement . RSPAREN

    RSPAREN         shift and go to state 188


state 163

    (121) stringarrayelement -> string .
    (122) stringarrayelement -> string . COMMA stringarrayelement

    RSPAREN         reduce using rule 121 (stringarrayelement -> string .)
    COMMA           shift and go to state 189


state 164

    (49) getvariable_ns -> NAMESPACE GETVARIABLE string .

    SEMI_COLON      reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    COMMA           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    $end            reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    BINARY_FNC      reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GETVARIABLE     reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    SETVARIABLE     reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PARAM           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PARAMS          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    LT              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GT              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    LTE             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GTE             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    EQUALITY        reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    INEQUALITY      reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    AND             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    OR              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PLUS            reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    MINUS           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    TIMES           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    DIVIDE          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    MOD             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    POW             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RBRACE          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RPAREN          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RSPAREN         reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    TO              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    STEP            reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    DO              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    COLON           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE string .)


state 165

    (50) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 190

state 166

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN . string COMMA primaryexp COMMA booleanexp RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 191

state 167

    (116) array -> LSPAREN arrayelement RSPAREN .

    BINARY_FNC      reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    GETVARIABLE     reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    SETVARIABLE     reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    PARAM           reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    PARAMS          reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    LT              reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    GT              reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    LTE             reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    GTE             reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    EQUALITY        reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    INEQUALITY      reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    AND             reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    OR              reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    PLUS            reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    MINUS           reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    TIMES           reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    DIVIDE          reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    MOD             reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    POW             reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    SEMI_COLON      reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    COMMA           reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    $end            reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    RBRACE          reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    RPAREN          reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    RSPAREN         reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    TO              reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    STEP            reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    DO              reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)
    COLON           reduce using rule 116 (array -> LSPAREN arrayelement RSPAREN .)


state 168

    (118) arrayelement -> primaryexp COMMA . arrayelement
    (117) arrayelement -> . primaryexp
    (118) arrayelement -> . primaryexp COMMA arrayelement
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 124
    arrayelement                   shift and go to state 192
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 169

    (57) param_unary -> PARAM LSPAREN number . RSPAREN
    (58) param_unary -> PARAM LSPAREN number . COMMA primaryexp RSPAREN
    (59) param_unary -> PARAM LSPAREN number . COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA array RSPAREN

    RSPAREN         shift and go to state 193
    COMMA           shift and go to state 194


state 170

    (74) params_array_entry -> LSPAREN . string COMMA primaryexp RSPAREN
    (75) params_array_entry -> LSPAREN . string COMMA primaryexp COMMA array RSPAREN
    (76) params_array_entry -> LSPAREN . string COMMA primaryexp COMMA array COMMA number RSPAREN
    (77) params_array_entry -> LSPAREN . string COMMA primaryexp COMMA array COMMA array RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 195

state 171

    (69) params_array -> LSPAREN RSPAREN .

    SEMI_COLON      reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    $end            reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    BINARY_FNC      reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    PARAMS          reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    LT              reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    GT              reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    AND             reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    OR              reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    POW             reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    TO              reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    STEP            reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    DO              reduce using rule 69 (params_array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 69 (params_array -> LSPAREN RSPAREN .)


state 172

    (70) params_array -> LSPAREN params_element . RSPAREN

    RSPAREN         shift and go to state 196


state 173

    (71) params_element -> params_array_entry .
    (72) params_element -> params_array_entry . COMMA params_element

    RSPAREN         reduce using rule 71 (params_element -> params_array_entry .)
    COMMA           shift and go to state 197


state 174

    (73) params_array_entry -> string .

    COMMA           reduce using rule 73 (params_array_entry -> string .)
    RSPAREN         reduce using rule 73 (params_array_entry -> string .)


state 175

    (30) iftype -> IF LPAREN primaryexp . RPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RPAREN          shift and go to state 198
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 176

    (46) bracedexp_condition -> LBRACE booleanexp . RBRACE

    RBRACE          shift and go to state 199


state 177

    (146) booleanexp -> primaryexp .
    (147) booleanexp -> primaryexp . comparisonoperator booleanexp
    (148) booleanexp -> primaryexp . comparisonoperator LBRACE booleanexp RBRACE
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RBRACE          reduce using rule 146 (booleanexp -> primaryexp .)
    RSPAREN         reduce using rule 146 (booleanexp -> primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 200
    mathoperator                   shift and go to state 69

state 178

    (42) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp
    (43) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp STEP primaryexp

    FROM            shift and go to state 201


state 179

    (44) fortype -> FOR new_scope LSPAREN . bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (48) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 158

    bracedexp_noscope              shift and go to state 202

state 180

    (52) getvariable_any -> primaryexp GETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN

    COMMA           shift and go to state 203


state 181

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN string . COMMA primaryexp COMMA booleanexp RSPAREN

    COMMA           shift and go to state 204


state 182

    (62) param_binary -> primaryexp PARAM LSPAREN number . RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA array RSPAREN

    RSPAREN         shift and go to state 205
    COMMA           shift and go to state 206


state 183

    (41) foreachloop -> bracedexp FOREACH LPAREN primaryexp . RPAREN
    (111) primaryexp -> LPAREN primaryexp . RPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RPAREN          shift and go to state 207
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 184

    (31) ifstatement -> iftype THEN bracedexp ELSE . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 208

state 185

    (48) bracedexp_noscope -> LBRACE code . RBRACE

    RBRACE          shift and go to state 209


state 186

    (25) switchstatement -> SWITCH LPAREN primaryexp RPAREN . DO LBRACE switchbody RBRACE

    DO              shift and go to state 210


state 187

    (112) bracedexp -> LBRACE new_scope code RBRACE .

    FOREACH         reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    BINARY_FNC      reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    GETVARIABLE     reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    SETVARIABLE     reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    PARAM           reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    PARAMS          reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    LT              reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    GT              reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    LTE             reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    GTE             reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    EQUALITY        reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    INEQUALITY      reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    AND             reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    OR              reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    PLUS            reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    MINUS           reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    TIMES           reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    DIVIDE          reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    MOD             reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    POW             reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    SEMI_COLON      reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    COMMA           reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    $end            reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    RBRACE          reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    RPAREN          reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    RSPAREN         reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    TO              reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    STEP            reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    DO              reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    COLON           reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)
    ELSE            reduce using rule 112 (bracedexp -> LBRACE new_scope code RBRACE .)


state 188

    (120) stringarray -> LSPAREN stringarrayelement RSPAREN .

    SEMI_COLON      reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    COMMA           reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    $end            reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    BINARY_FNC      reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GETVARIABLE     reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    SETVARIABLE     reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PARAM           reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PARAMS          reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    LT              reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GT              reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    LTE             reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GTE             reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    EQUALITY        reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    INEQUALITY      reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    AND             reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    OR              reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PLUS            reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    MINUS           reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    TIMES           reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    DIVIDE          reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    MOD             reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    POW             reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RBRACE          reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RPAREN          reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RSPAREN         reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    TO              reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    STEP            reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    DO              reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    COLON           reduce using rule 120 (stringarray -> LSPAREN stringarrayelement RSPAREN .)


state 189

    (122) stringarrayelement -> string COMMA . stringarrayelement
    (121) stringarrayelement -> . string
    (122) stringarrayelement -> . string COMMA stringarrayelement
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    string                         shift and go to state 163
    stringarrayelement             shift and go to state 211

state 190

    (50) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN

    COMMA           shift and go to state 212


state 191

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN
    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string . COMMA primaryexp COMMA booleanexp RSPAREN

    COMMA           shift and go to state 213


state 192

    (118) arrayelement -> primaryexp COMMA arrayelement .

    RSPAREN         reduce using rule 118 (arrayelement -> primaryexp COMMA arrayelement .)


state 193

    (57) param_unary -> PARAM LSPAREN number RSPAREN .

    SEMI_COLON      reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    COMMA           reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    $end            reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    BINARY_FNC      reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    GETVARIABLE     reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    SETVARIABLE     reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    PARAM           reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    PARAMS          reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    LT              reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    GT              reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    LTE             reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    GTE             reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    EQUALITY        reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    INEQUALITY      reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    AND             reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    OR              reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    PLUS            reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    MINUS           reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    TIMES           reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    DIVIDE          reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    MOD             reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    POW             reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    RBRACE          reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    RPAREN          reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    RSPAREN         reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    TO              reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    STEP            reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    DO              reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)
    COLON           reduce using rule 57 (param_unary -> PARAM LSPAREN number RSPAREN .)


state 194

    (58) param_unary -> PARAM LSPAREN number COMMA . primaryexp RSPAREN
    (59) param_unary -> PARAM LSPAREN number COMMA . primaryexp COMMA array RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA array RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    number                         shift and go to state 34
    primaryexp                     shift and go to state 214
    array                          shift and go to state 36
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 195

    (74) params_array_entry -> LSPAREN string . COMMA primaryexp RSPAREN
    (75) params_array_entry -> LSPAREN string . COMMA primaryexp COMMA array RSPAREN
    (76) params_array_entry -> LSPAREN string . COMMA primaryexp COMMA array COMMA number RSPAREN
    (77) params_array_entry -> LSPAREN string . COMMA primaryexp COMMA array COMMA array RSPAREN

    COMMA           shift and go to state 215


state 196

    (70) params_array -> LSPAREN params_element RSPAREN .

    SEMI_COLON      reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    COMMA           reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    $end            reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    BINARY_FNC      reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    GETVARIABLE     reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    SETVARIABLE     reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    PARAM           reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    PARAMS          reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    LT              reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    GT              reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    LTE             reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    GTE             reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    EQUALITY        reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    INEQUALITY      reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    AND             reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    OR              reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    PLUS            reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    MINUS           reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    TIMES           reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    DIVIDE          reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    MOD             reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    POW             reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    RBRACE          reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    RPAREN          reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    RSPAREN         reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    TO              reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    STEP            reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    DO              reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)
    COLON           reduce using rule 70 (params_array -> LSPAREN params_element RSPAREN .)


state 197

    (72) params_element -> params_array_entry COMMA . params_element
    (71) params_element -> . params_array_entry
    (72) params_element -> . params_array_entry COMMA params_element
    (73) params_array_entry -> . string
    (74) params_array_entry -> . LSPAREN string COMMA primaryexp RSPAREN
    (75) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array RSPAREN
    (76) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN
    (77) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 170
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59

    params_array_entry             shift and go to state 173
    params_element                 shift and go to state 216
    string                         shift and go to state 174

state 198

    (30) iftype -> IF LPAREN primaryexp RPAREN .

    THEN            reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    EXITWITH        reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    BINARY_FNC      reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    GETVARIABLE     reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    SETVARIABLE     reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    PARAM           reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    PARAMS          reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    LT              reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    GT              reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    LTE             reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    GTE             reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    EQUALITY        reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    INEQUALITY      reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    AND             reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    OR              reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    PLUS            reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    MINUS           reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    TIMES           reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    DIVIDE          reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    MOD             reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    POW             reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    SEMI_COLON      reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    COMMA           reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    $end            reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    RBRACE          reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    RPAREN          reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    RSPAREN         reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    TO              reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    STEP            reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    DO              reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)
    COLON           reduce using rule 30 (iftype -> IF LPAREN primaryexp RPAREN .)


state 199

    (46) bracedexp_condition -> LBRACE booleanexp RBRACE .

    THEN            reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    EXITWITH        reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    BINARY_FNC      reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    GETVARIABLE     reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    SETVARIABLE     reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    PARAM           reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    PARAMS          reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    LT              reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    GT              reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    LTE             reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    GTE             reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    EQUALITY        reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    INEQUALITY      reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    AND             reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    OR              reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    PLUS            reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    MINUS           reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    TIMES           reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    DIVIDE          reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    MOD             reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    POW             reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    SEMI_COLON      reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    COMMA           reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    $end            reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    RBRACE          reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    RPAREN          reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    RSPAREN         reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    TO              reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    STEP            reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    DO              reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)
    COLON           reduce using rule 46 (bracedexp_condition -> LBRACE booleanexp RBRACE .)


state 200

    (147) booleanexp -> primaryexp comparisonoperator . booleanexp
    (148) booleanexp -> primaryexp comparisonoperator . LBRACE booleanexp RBRACE
    (93) binaryexp -> primaryexp comparisonoperator . primaryexp
    (146) booleanexp -> . primaryexp
    (147) booleanexp -> . primaryexp comparisonoperator booleanexp
    (148) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 219
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 217
    booleanexp                     shift and go to state 218
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 201

    (42) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp
    (43) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp STEP primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 220
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 202

    (44) fortype -> FOR new_scope LSPAREN bracedexp_noscope . COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 221


state 203

    (52) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 222
    string                         shift and go to state 37
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 204

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA . primaryexp COMMA booleanexp RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 223
    string                         shift and go to state 37
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 205

    (62) param_binary -> primaryexp PARAM LSPAREN number RSPAREN .

    SEMI_COLON      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    COMMA           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    $end            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    BINARY_FNC      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GETVARIABLE     reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    SETVARIABLE     reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PARAM           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PARAMS          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    LT              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GT              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    LTE             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GTE             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    EQUALITY        reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    INEQUALITY      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    AND             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    OR              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PLUS            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    MINUS           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    TIMES           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    DIVIDE          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    MOD             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    POW             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RBRACE          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RPAREN          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RSPAREN         reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    TO              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    STEP            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    DO              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    COLON           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)


state 206

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA array RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 224
    number                         shift and go to state 34
    array                          shift and go to state 36
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 207

    (41) foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .
    (111) primaryexp -> LPAREN primaryexp RPAREN .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for PARAM resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for PARAMS resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for LT resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for GT resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for LTE resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for GTE resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for POW resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for TO resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for STEP resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for DO resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for COLON resolved using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    SEMI_COLON      reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    COMMA           reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    $end            reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    BINARY_FNC      reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    GETVARIABLE     reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    SETVARIABLE     reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    PARAM           reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    PARAMS          reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    LT              reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    GT              reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    LTE             reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    GTE             reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    EQUALITY        reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    INEQUALITY      reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    AND             reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    OR              reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    PLUS            reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    MINUS           reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    TIMES           reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    DIVIDE          reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    MOD             reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    POW             reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    RBRACE          reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    RPAREN          reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    RSPAREN         reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    TO              reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    STEP            reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    DO              reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    COLON           reduce using rule 41 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)

  ! BINARY_FNC      [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! GETVARIABLE     [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! SETVARIABLE     [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! PARAM           [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! PARAMS          [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! LT              [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! GT              [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! LTE             [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! GTE             [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! EQUALITY        [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! INEQUALITY      [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! AND             [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! OR              [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! PLUS            [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! MINUS           [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! TIMES           [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! DIVIDE          [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! MOD             [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! POW             [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! SEMI_COLON      [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! COMMA           [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! $end            [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! RBRACE          [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! RPAREN          [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! RSPAREN         [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! TO              [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! STEP            [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! DO              [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! COLON           [ reduce using rule 111 (primaryexp -> LPAREN primaryexp RPAREN .) ]


state 208

    (31) ifstatement -> iftype THEN bracedexp ELSE bracedexp .

    SEMI_COLON      reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    COMMA           reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    $end            reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    BINARY_FNC      reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    GETVARIABLE     reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    SETVARIABLE     reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    PARAM           reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    PARAMS          reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    LT              reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    GT              reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    LTE             reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    GTE             reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    EQUALITY        reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    INEQUALITY      reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    AND             reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    OR              reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    PLUS            reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    MINUS           reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    TIMES           reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    DIVIDE          reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    MOD             reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    POW             reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    RBRACE          reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    RPAREN          reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    RSPAREN         reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    TO              reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    STEP            reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    DO              reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    COLON           reduce using rule 31 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)


state 209

    (48) bracedexp_noscope -> LBRACE code RBRACE .

    SEMI_COLON      reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    COMMA           reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    $end            reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    BINARY_FNC      reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    GETVARIABLE     reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    SETVARIABLE     reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    PARAM           reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    PARAMS          reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    LT              reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    GT              reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    LTE             reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    GTE             reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    EQUALITY        reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    INEQUALITY      reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    AND             reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    OR              reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    PLUS            reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    MINUS           reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    TIMES           reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    DIVIDE          reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    MOD             reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    POW             reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    RBRACE          reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    RPAREN          reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    RSPAREN         reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    TO              reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    STEP            reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    DO              reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)
    COLON           reduce using rule 48 (bracedexp_noscope -> LBRACE code RBRACE .)


state 210

    (25) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO . LBRACE switchbody RBRACE

    LBRACE          shift and go to state 225


state 211

    (122) stringarrayelement -> string COMMA stringarrayelement .

    RSPAREN         reduce using rule 122 (stringarrayelement -> string COMMA stringarrayelement .)


state 212

    (50) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 226
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 213

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA . primaryexp COMMA booleanexp RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 227
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 214

    (58) param_unary -> PARAM LSPAREN number COMMA primaryexp . RSPAREN
    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp . COMMA array RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA number RSPAREN
    (61) param_unary -> PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA array RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 229
    COMMA           shift and go to state 228
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 215

    (74) params_array_entry -> LSPAREN string COMMA . primaryexp RSPAREN
    (75) params_array_entry -> LSPAREN string COMMA . primaryexp COMMA array RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA . primaryexp COMMA array COMMA number RSPAREN
    (77) params_array_entry -> LSPAREN string COMMA . primaryexp COMMA array COMMA array RSPAREN
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 230
    array                          shift and go to state 36
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 216

    (72) params_element -> params_array_entry COMMA params_element .

    RSPAREN         reduce using rule 72 (params_element -> params_array_entry COMMA params_element .)


state 217

    (93) binaryexp -> primaryexp comparisonoperator primaryexp .
    (146) booleanexp -> primaryexp .
    (147) booleanexp -> primaryexp . comparisonoperator booleanexp
    (148) booleanexp -> primaryexp . comparisonoperator LBRACE booleanexp RBRACE
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

  ! reduce/reduce conflict for RBRACE resolved using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    BINARY_FNC      reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GETVARIABLE     reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    SETVARIABLE     reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAM           reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAMS          reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LT              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GT              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LTE             reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GTE             reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    EQUALITY        reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    INEQUALITY      reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    AND             reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    OR              reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RBRACE          reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RSPAREN         reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! PLUS            [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MOD             [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! POW             [ reduce using rule 93 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! RBRACE          [ reduce using rule 146 (booleanexp -> primaryexp .) ]
  ! RSPAREN         [ reduce using rule 146 (booleanexp -> primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 67 ]
  ! GETVARIABLE     [ shift and go to state 70 ]
  ! SETVARIABLE     [ shift and go to state 71 ]
  ! PARAM           [ shift and go to state 72 ]
  ! PARAMS          [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LTE             [ shift and go to state 76 ]
  ! GTE             [ shift and go to state 77 ]
  ! EQUALITY        [ shift and go to state 78 ]
  ! INEQUALITY      [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]

    comparisonoperator             shift and go to state 200
    mathoperator                   shift and go to state 69

state 218

    (147) booleanexp -> primaryexp comparisonoperator booleanexp .

    RBRACE          reduce using rule 147 (booleanexp -> primaryexp comparisonoperator booleanexp .)
    RSPAREN         reduce using rule 147 (booleanexp -> primaryexp comparisonoperator booleanexp .)


state 219

    (148) booleanexp -> primaryexp comparisonoperator LBRACE . booleanexp RBRACE
    (112) bracedexp -> LBRACE . new_scope code RBRACE
    (113) bracedexp -> LBRACE . RBRACE
    (146) booleanexp -> . primaryexp
    (147) booleanexp -> . primaryexp comparisonoperator booleanexp
    (148) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (114) new_scope -> .
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER_REAL resolved as shift
  ! shift/reduce conflict for NUMBER_EXP resolved as shift
  ! shift/reduce conflict for NUMBER_HEX resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
  ! shift/reduce conflict for UNARY_FNC resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULAR_FNC resolved as shift
  ! shift/reduce conflict for STRING_SINGLE resolved as shift
  ! shift/reduce conflict for STRING_DOUBLE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    RBRACE          shift and go to state 115
    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

  ! NULAR_FNC       [ reduce using rule 114 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 114 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 114 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 114 (new_scope -> .) ]
  ! NOT             [ reduce using rule 114 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 114 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 114 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 114 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 114 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 114 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 114 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 114 (new_scope -> .) ]
  ! PARAMS          [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 114 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 114 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 114 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 114 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 114 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 114 (new_scope -> .) ]
  ! IF              [ reduce using rule 114 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 114 (new_scope -> .) ]
  ! FOR             [ reduce using rule 114 (new_scope -> .) ]
  ! WITH            [ reduce using rule 114 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 114 (new_scope -> .) ]

    primaryexp                     shift and go to state 177
    booleanexp                     shift and go to state 231
    new_scope                      shift and go to state 114
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 220

    (42) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp
    (43) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp STEP primaryexp
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    TO              shift and go to state 232
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 221

    (44) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA . bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (46) bracedexp_condition -> . LBRACE booleanexp RBRACE
    (47) bracedexp_condition -> . identifier
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 131
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98

    bracedexp_condition            shift and go to state 233
    identifier                     shift and go to state 132

state 222

    (52) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 234
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 223

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp . COMMA booleanexp RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 236
    COMMA           shift and go to state 235
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 224

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA array RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 238
    COMMA           shift and go to state 237
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 225

    (25) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE . switchbody RBRACE
    (26) switchbody -> . empty
    (27) switchbody -> . case
    (28) switchbody -> . case terminator switchbody
    (156) empty -> .
    (22) case -> . CASE primaryexp COLON bracedexp
    (23) case -> . CASE primaryexp
    (24) case -> . DEFAULT bracedexp

    RBRACE          reduce using rule 156 (empty -> .)
    CASE            shift and go to state 242
    DEFAULT         shift and go to state 243

    switchbody                     shift and go to state 239
    empty                          shift and go to state 240
    case                           shift and go to state 241

state 226

    (50) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 244
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 227

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp . COMMA booleanexp RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 246
    COMMA           shift and go to state 245
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 228

    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA . array RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA number RSPAREN
    (61) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA array RSPAREN
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 50

    array                          shift and go to state 247

state 229

    (58) param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    $end            reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LT              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GT              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    AND             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    OR              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    POW             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TO              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DO              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)


state 230

    (74) params_array_entry -> LSPAREN string COMMA primaryexp . RSPAREN
    (75) params_array_entry -> LSPAREN string COMMA primaryexp . COMMA array RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp . COMMA array COMMA number RSPAREN
    (77) params_array_entry -> LSPAREN string COMMA primaryexp . COMMA array COMMA array RSPAREN
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    RSPAREN         shift and go to state 249
    COMMA           shift and go to state 248
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 231

    (148) booleanexp -> primaryexp comparisonoperator LBRACE booleanexp . RBRACE

    RBRACE          shift and go to state 250


state 232

    (42) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp
    (43) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp STEP primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 251
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 233

    (44) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition . COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 252


state 234

    (52) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 52 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 235

    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA . booleanexp RSPAREN
    (146) booleanexp -> . primaryexp
    (147) booleanexp -> . primaryexp comparisonoperator booleanexp
    (148) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 177
    string                         shift and go to state 37
    booleanexp                     shift and go to state 253
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 236

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 237

    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA array RSPAREN
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 50

    array                          shift and go to state 254

state 238

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    $end            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LT              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GT              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    AND             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    OR              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    POW             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TO              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DO              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)


state 239

    (25) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody . RBRACE

    RBRACE          shift and go to state 255


state 240

    (26) switchbody -> empty .

    RBRACE          reduce using rule 26 (switchbody -> empty .)


state 241

    (27) switchbody -> case .
    (28) switchbody -> case . terminator switchbody
    (10) terminator -> . SEMI_COLON
    (11) terminator -> . COMMA

    RBRACE          reduce using rule 27 (switchbody -> case .)
    SEMI_COLON      shift and go to state 65
    COMMA           shift and go to state 66

    terminator                     shift and go to state 256

state 242

    (22) case -> CASE . primaryexp COLON bracedexp
    (23) case -> CASE . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    primaryexp                     shift and go to state 257
    bracedexp                      shift and go to state 38
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    string                         shift and go to state 37
    binaryexp                      shift and go to state 96
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 243

    (24) case -> DEFAULT . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 258

state 244

    (50) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 50 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 245

    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA . booleanexp RSPAREN
    (146) booleanexp -> . primaryexp
    (147) booleanexp -> . primaryexp comparisonoperator booleanexp
    (148) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 177
    booleanexp                     shift and go to state 259
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 246

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 247

    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array . RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA number RSPAREN
    (61) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 261
    COMMA           shift and go to state 260


state 248

    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA . array RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA . array COMMA number RSPAREN
    (77) params_array_entry -> LSPAREN string COMMA primaryexp COMMA . array COMMA array RSPAREN
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 50

    array                          shift and go to state 262

state 249

    (74) params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN .

    COMMA           reduce using rule 74 (params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 74 (params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN .)


state 250

    (148) booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .

    RBRACE          reduce using rule 148 (booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .)
    RSPAREN         reduce using rule 148 (booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .)


state 251

    (42) fortype -> FOR new_scope string FROM primaryexp TO primaryexp .
    (43) fortype -> FOR new_scope string FROM primaryexp TO primaryexp . STEP primaryexp
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

  ! shift/reduce conflict for STEP resolved as shift
  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    DO              reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    SEMI_COLON      reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COMMA           reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    $end            reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RBRACE          reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RPAREN          reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RSPAREN         reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    TO              reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COLON           reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    STEP            shift and go to state 263
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! BINARY_FNC      [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PARAM           [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PARAMS          [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! LT              [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GT              [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! LTE             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GTE             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! EQUALITY        [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! AND             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! OR              [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PLUS            [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! MINUS           [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! TIMES           [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! DIVIDE          [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! MOD             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! POW             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! STEP            [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 252

    (44) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA . bracedexp_noscope RSPAREN
    (48) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 158

    bracedexp_noscope              shift and go to state 264

state 253

    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp . RSPAREN

    RSPAREN         shift and go to state 265


state 254

    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 267
    COMMA           shift and go to state 266


state 255

    (25) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .

    SEMI_COLON      reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    COMMA           reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    $end            reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    BINARY_FNC      reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    GETVARIABLE     reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    SETVARIABLE     reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    PARAM           reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    PARAMS          reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    LT              reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    GT              reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    LTE             reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    GTE             reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    EQUALITY        reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    INEQUALITY      reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    AND             reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    OR              reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    PLUS            reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    MINUS           reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    TIMES           reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    DIVIDE          reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    MOD             reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    POW             reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    RBRACE          reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    RPAREN          reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    RSPAREN         reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    TO              reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    STEP            reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    DO              reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    COLON           reduce using rule 25 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)


state 256

    (28) switchbody -> case terminator . switchbody
    (26) switchbody -> . empty
    (27) switchbody -> . case
    (28) switchbody -> . case terminator switchbody
    (156) empty -> .
    (22) case -> . CASE primaryexp COLON bracedexp
    (23) case -> . CASE primaryexp
    (24) case -> . DEFAULT bracedexp

    RBRACE          reduce using rule 156 (empty -> .)
    CASE            shift and go to state 242
    DEFAULT         shift and go to state 243

    case                           shift and go to state 241
    switchbody                     shift and go to state 268
    empty                          shift and go to state 240

state 257

    (22) case -> CASE primaryexp . COLON bracedexp
    (23) case -> CASE primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

    COLON           shift and go to state 269
    SEMI_COLON      reduce using rule 23 (case -> CASE primaryexp .)
    COMMA           reduce using rule 23 (case -> CASE primaryexp .)
    RBRACE          reduce using rule 23 (case -> CASE primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 258

    (24) case -> DEFAULT bracedexp .

    SEMI_COLON      reduce using rule 24 (case -> DEFAULT bracedexp .)
    COMMA           reduce using rule 24 (case -> DEFAULT bracedexp .)
    RBRACE          reduce using rule 24 (case -> DEFAULT bracedexp .)


state 259

    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp . RSPAREN

    RSPAREN         shift and go to state 270


state 260

    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . number RSPAREN
    (61) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . array RSPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50

    number                         shift and go to state 271
    array                          shift and go to state 272

state 261

    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COMMA           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    $end            reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAM           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAMS          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LT              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GT              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LTE             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GTE             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    EQUALITY        reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    AND             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    OR              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PLUS            reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MINUS           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TIMES           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DIVIDE          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MOD             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    POW             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RBRACE          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RPAREN          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TO              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    STEP            reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DO              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COLON           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)


state 262

    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array . RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array . COMMA number RSPAREN
    (77) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 274
    COMMA           shift and go to state 273


state 263

    (43) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP . primaryexp
    (101) primaryexp -> . number
    (102) primaryexp -> . identifier
    (103) primaryexp -> . controlstructure
    (104) primaryexp -> . helpertype
    (105) primaryexp -> . array
    (106) primaryexp -> . unaryexp
    (107) primaryexp -> . nularexp
    (108) primaryexp -> . string
    (109) primaryexp -> . binaryexp
    (110) primaryexp -> . bracedexp
    (111) primaryexp -> . LPAREN primaryexp RPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (88) identifier -> . PRIVATE_ID
    (89) identifier -> . GLOBAL_ID
    (12) controlstructure -> . ifstatement
    (13) controlstructure -> . whileloop
    (14) controlstructure -> . forloop
    (15) controlstructure -> . withstatement
    (16) controlstructure -> . foreachloop
    (17) controlstructure -> . switchstatement
    (18) helpertype -> . iftype
    (19) helpertype -> . whiletype
    (20) helpertype -> . fortype
    (21) helpertype -> . withtype
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN
    (125) unaryexp -> . UNARY_FNC primaryexp
    (126) unaryexp -> . PLUS primaryexp
    (127) unaryexp -> . MINUS primaryexp
    (128) unaryexp -> . NOT primaryexp
    (129) unaryexp -> . vardefinition
    (130) unaryexp -> . param_unary
    (131) unaryexp -> . params_unary
    (123) nularexp -> . NULAR_FNC
    (124) nularexp -> . identifier
    (154) string -> . STRING_SINGLE
    (155) string -> . STRING_DOUBLE
    (92) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (93) binaryexp -> . primaryexp comparisonoperator primaryexp
    (94) binaryexp -> . primaryexp mathoperator primaryexp
    (95) binaryexp -> . getvariable_ns
    (96) binaryexp -> . getvariable_any
    (97) binaryexp -> . setvariable_ns
    (98) binaryexp -> . setvariable_any
    (99) binaryexp -> . param_binary
    (100) binaryexp -> . params_binary
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE
    (31) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (32) ifstatement -> . iftype THEN bracedexp
    (33) ifstatement -> . iftype EXITWITH bracedexp
    (38) whileloop -> . whiletype DO bracedexp
    (45) forloop -> . fortype DO bracedexp_noscope
    (36) withstatement -> . withstatementinit bracedexp
    (39) foreachloop -> . bracedexp FOREACH array
    (40) foreachloop -> . bracedexp FOREACH primaryexp
    (41) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (25) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (29) iftype -> . IF bracedexp_condition
    (30) iftype -> . IF LPAREN primaryexp RPAREN
    (37) whiletype -> . WHILE bracedexp_condition
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (43) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (44) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN
    (34) withtype -> . WITH NAMESPACE
    (78) vardefinition -> . definition
    (79) vardefinition -> . arraydefinition
    (57) param_unary -> . PARAM LSPAREN number RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (61) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_unary -> . PARAMS params_array
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (50) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (51) getvariable_any -> . primaryexp GETVARIABLE string
    (52) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> . primaryexp PARAMS params_array
    (35) withstatementinit -> . withtype DO
    (86) definition -> . PRIVATE PRIVATE_ID
    (87) definition -> . PRIVATE string
    (85) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 39
    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 58
    STRING_DOUBLE   shift and go to state 59
    LBRACE          shift and go to state 45
    SWITCH          shift and go to state 44
    IF              shift and go to state 60
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 46

    string                         shift and go to state 37
    primaryexp                     shift and go to state 275
    number                         shift and go to state 34
    identifier                     shift and go to state 92
    controlstructure               shift and go to state 93
    helpertype                     shift and go to state 35
    array                          shift and go to state 36
    unaryexp                       shift and go to state 94
    nularexp                       shift and go to state 95
    binaryexp                      shift and go to state 96
    bracedexp                      shift and go to state 38
    ifstatement                    shift and go to state 10
    whileloop                      shift and go to state 11
    forloop                        shift and go to state 12
    withstatement                  shift and go to state 13
    foreachloop                    shift and go to state 14
    switchstatement                shift and go to state 15
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 57
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    withstatementinit              shift and go to state 43
    definition                     shift and go to state 102
    arraydefinition                shift and go to state 53

state 264

    (44) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope . RSPAREN

    RSPAREN         shift and go to state 276


state 265

    (56) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .

    SEMI_COLON      reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COMMA           reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    $end            reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    BINARY_FNC      reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GETVARIABLE     reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    SETVARIABLE     reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAM           reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAMS          reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LT              reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GT              reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LTE             reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GTE             reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    EQUALITY        reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    INEQUALITY      reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    AND             reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    OR              reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PLUS            reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MINUS           reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TIMES           reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DIVIDE          reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MOD             reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    POW             reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RBRACE          reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RPAREN          reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RSPAREN         reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TO              reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    STEP            reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DO              reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COLON           reduce using rule 56 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)


state 266

    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . number RSPAREN
    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . array RSPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50

    number                         shift and go to state 277
    array                          shift and go to state 278

state 267

    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COMMA           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    $end            reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAM           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAMS          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LT              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GT              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LTE             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GTE             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    EQUALITY        reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    AND             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    OR              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PLUS            reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MINUS           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TIMES           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DIVIDE          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MOD             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    POW             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RBRACE          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RPAREN          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TO              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    STEP            reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DO              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COLON           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)


state 268

    (28) switchbody -> case terminator switchbody .

    RBRACE          reduce using rule 28 (switchbody -> case terminator switchbody .)


state 269

    (22) case -> CASE primaryexp COLON . bracedexp
    (112) bracedexp -> . LBRACE new_scope code RBRACE
    (113) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 45

    bracedexp                      shift and go to state 279

state 270

    (54) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .

    SEMI_COLON      reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COMMA           reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    $end            reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    BINARY_FNC      reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GETVARIABLE     reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    SETVARIABLE     reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAM           reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAMS          reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LT              reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GT              reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LTE             reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GTE             reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    EQUALITY        reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    INEQUALITY      reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    AND             reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    OR              reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PLUS            reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MINUS           reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TIMES           reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DIVIDE          reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MOD             reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    POW             reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RBRACE          reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RPAREN          reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RSPAREN         reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TO              reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    STEP            reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DO              reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COLON           reduce using rule 54 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)


state 271

    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 280


state 272

    (61) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 281


state 273

    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA . number RSPAREN
    (77) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA . array RSPAREN
    (151) number -> . NUMBER_REAL
    (152) number -> . NUMBER_EXP
    (153) number -> . NUMBER_HEX
    (115) array -> . LSPAREN RSPAREN
    (116) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 54
    NUMBER_EXP      shift and go to state 55
    NUMBER_HEX      shift and go to state 56
    LSPAREN         shift and go to state 50

    array                          shift and go to state 282
    number                         shift and go to state 283

state 274

    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN .

    COMMA           reduce using rule 75 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 75 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN .)


state 275

    (43) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .
    (92) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (93) binaryexp -> primaryexp . comparisonoperator primaryexp
    (94) binaryexp -> primaryexp . mathoperator primaryexp
    (51) getvariable_any -> primaryexp . GETVARIABLE string
    (52) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (56) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (66) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (68) params_binary -> primaryexp . PARAMS params_array
    (132) comparisonoperator -> . LT
    (133) comparisonoperator -> . GT
    (134) comparisonoperator -> . LTE
    (135) comparisonoperator -> . GTE
    (136) comparisonoperator -> . EQUALITY
    (137) comparisonoperator -> . INEQUALITY
    (138) comparisonoperator -> . AND
    (139) comparisonoperator -> . OR
    (140) mathoperator -> . PLUS
    (141) mathoperator -> . MINUS
    (142) mathoperator -> . TIMES
    (143) mathoperator -> . DIVIDE
    (144) mathoperator -> . MOD
    (145) mathoperator -> . POW

  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    DO              reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    SEMI_COLON      reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COMMA           reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    $end            reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RBRACE          reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RPAREN          reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RSPAREN         reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    TO              reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    STEP            reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COLON           reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    BINARY_FNC      shift and go to state 67
    GETVARIABLE     shift and go to state 70
    SETVARIABLE     shift and go to state 71
    PARAM           shift and go to state 72
    PARAMS          shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LTE             shift and go to state 76
    GTE             shift and go to state 77
    EQUALITY        shift and go to state 78
    INEQUALITY      shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 85
    MOD             shift and go to state 86
    POW             shift and go to state 87

  ! BINARY_FNC      [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PARAM           [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PARAMS          [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! LT              [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GT              [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! LTE             [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GTE             [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! EQUALITY        [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! AND             [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! OR              [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PLUS            [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! MINUS           [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! TIMES           [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! DIVIDE          [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! MOD             [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! POW             [ reduce using rule 43 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]

    comparisonoperator             shift and go to state 68
    mathoperator                   shift and go to state 69

state 276

    (44) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .

    DO              reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    BINARY_FNC      reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    GETVARIABLE     reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    SETVARIABLE     reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    PARAM           reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    PARAMS          reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    LT              reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    GT              reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    LTE             reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    GTE             reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    EQUALITY        reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    INEQUALITY      reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    AND             reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    OR              reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    PLUS            reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    MINUS           reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    TIMES           reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    DIVIDE          reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    MOD             reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    POW             reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    SEMI_COLON      reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    COMMA           reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    $end            reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    RBRACE          reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    RPAREN          reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    RSPAREN         reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    TO              reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    STEP            reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)
    COLON           reduce using rule 44 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_condition COMMA bracedexp_noscope RSPAREN .)


state 277

    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 284


state 278

    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 285


state 279

    (22) case -> CASE primaryexp COLON bracedexp .

    SEMI_COLON      reduce using rule 22 (case -> CASE primaryexp COLON bracedexp .)
    COMMA           reduce using rule 22 (case -> CASE primaryexp COLON bracedexp .)
    RBRACE          reduce using rule 22 (case -> CASE primaryexp COLON bracedexp .)


state 280

    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .

    SEMI_COLON      reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COMMA           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    $end            reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    BINARY_FNC      reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GETVARIABLE     reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    SETVARIABLE     reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAM           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAMS          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LT              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GT              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LTE             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GTE             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    EQUALITY        reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    INEQUALITY      reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    AND             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    OR              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PLUS            reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MINUS           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TIMES           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DIVIDE          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MOD             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    POW             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RBRACE          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RPAREN          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TO              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    STEP            reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DO              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COLON           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)


state 281

    (61) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COMMA           reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    $end            reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAM           reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAMS          reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LT              reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GT              reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LTE             reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GTE             reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    EQUALITY        reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    AND             reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    OR              reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PLUS            reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MINUS           reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TIMES           reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DIVIDE          reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MOD             reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    POW             reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RBRACE          reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RPAREN          reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TO              reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    STEP            reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DO              reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COLON           reduce using rule 61 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 282

    (77) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 286


state 283

    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 287


state 284

    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .

    SEMI_COLON      reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COMMA           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    $end            reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    BINARY_FNC      reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GETVARIABLE     reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    SETVARIABLE     reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAM           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAMS          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LT              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GT              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LTE             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GTE             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    EQUALITY        reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    INEQUALITY      reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    AND             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    OR              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PLUS            reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MINUS           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TIMES           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DIVIDE          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MOD             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    POW             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RBRACE          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RPAREN          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TO              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    STEP            reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DO              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COLON           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)


state 285

    (66) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COMMA           reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    $end            reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAM           reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAMS          reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LT              reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GT              reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LTE             reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GTE             reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    EQUALITY        reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    AND             reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    OR              reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PLUS            reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MINUS           reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TIMES           reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DIVIDE          reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MOD             reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    POW             reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RBRACE          reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RPAREN          reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TO              reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    STEP            reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DO              reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COLON           reduce using rule 66 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 286

    (77) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN .

    COMMA           reduce using rule 77 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 77 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 287

    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN .

    COMMA           reduce using rule 76 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 76 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 45 resolved as shift
WARNING: shift/reduce conflict for DO in state 57 resolved as shift
WARNING: shift/reduce conflict for DO in state 100 resolved as shift
WARNING: shift/reduce conflict for DO in state 101 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 147 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 147 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 149 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 149 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 151 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 151 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 151 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 151 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 151 resolved as shift
WARNING: shift/reduce conflict for LT in state 151 resolved as shift
WARNING: shift/reduce conflict for GT in state 151 resolved as shift
WARNING: shift/reduce conflict for LTE in state 151 resolved as shift
WARNING: shift/reduce conflict for GTE in state 151 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 151 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 151 resolved as shift
WARNING: shift/reduce conflict for AND in state 151 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 151 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 151 resolved as shift
WARNING: shift/reduce conflict for MOD in state 151 resolved as shift
WARNING: shift/reduce conflict for POW in state 151 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 219 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 219 resolved as shift
WARNING: shift/reduce conflict for NUMBER_REAL in state 219 resolved as shift
WARNING: shift/reduce conflict for NUMBER_EXP in state 219 resolved as shift
WARNING: shift/reduce conflict for NUMBER_HEX in state 219 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 219 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 219 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 219 resolved as shift
WARNING: shift/reduce conflict for UNARY_FNC in state 219 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 219 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 219 resolved as shift
WARNING: shift/reduce conflict for NOT in state 219 resolved as shift
WARNING: shift/reduce conflict for NULAR_FNC in state 219 resolved as shift
WARNING: shift/reduce conflict for STRING_SINGLE in state 219 resolved as shift
WARNING: shift/reduce conflict for STRING_DOUBLE in state 219 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 219 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 219 resolved as shift
WARNING: shift/reduce conflict for FOR in state 219 resolved as shift
WARNING: shift/reduce conflict for WITH in state 219 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 219 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 219 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 219 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 219 resolved as shift
WARNING: shift/reduce conflict for STEP in state 251 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 251 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 251 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 251 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 251 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 251 resolved as shift
WARNING: shift/reduce conflict for LT in state 251 resolved as shift
WARNING: shift/reduce conflict for GT in state 251 resolved as shift
WARNING: shift/reduce conflict for LTE in state 251 resolved as shift
WARNING: shift/reduce conflict for GTE in state 251 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 251 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 251 resolved as shift
WARNING: shift/reduce conflict for AND in state 251 resolved as shift
WARNING: shift/reduce conflict for OR in state 251 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 251 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 251 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 251 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 251 resolved as shift
WARNING: shift/reduce conflict for MOD in state 251 resolved as shift
WARNING: shift/reduce conflict for POW in state 251 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 275 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 275 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 275 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 275 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 275 resolved as shift
WARNING: shift/reduce conflict for LT in state 275 resolved as shift
WARNING: shift/reduce conflict for GT in state 275 resolved as shift
WARNING: shift/reduce conflict for LTE in state 275 resolved as shift
WARNING: shift/reduce conflict for GTE in state 275 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 275 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 275 resolved as shift
WARNING: shift/reduce conflict for AND in state 275 resolved as shift
WARNING: shift/reduce conflict for OR in state 275 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 275 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 275 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 275 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 275 resolved as shift
WARNING: shift/reduce conflict for MOD in state 275 resolved as shift
WARNING: shift/reduce conflict for POW in state 275 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (statement -> controlstructure)
WARNING: rejected rule (primaryexp -> controlstructure) in state 4
WARNING: reduce/reduce conflict in state 6 resolved using rule (statement -> binaryexp)
WARNING: rejected rule (primaryexp -> binaryexp) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (statement -> nularexp)
WARNING: rejected rule (primaryexp -> nularexp) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (statement -> unaryexp)
WARNING: rejected rule (primaryexp -> unaryexp) in state 8
WARNING: reduce/reduce conflict in state 26 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (nularexp -> identifier) in state 26
WARNING: reduce/reduce conflict in state 92 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (nularexp -> identifier) in state 92
WARNING: reduce/reduce conflict in state 147 resolved using rule (assignment_code -> definition EQUAL LBRACE)
WARNING: rejected rule (new_scope -> <empty>) in state 147
WARNING: reduce/reduce conflict in state 149 resolved using rule (assignment_code -> variable EQUAL LBRACE)
WARNING: rejected rule (new_scope -> <empty>) in state 149
WARNING: reduce/reduce conflict in state 150 resolved using rule (foreachloop -> bracedexp FOREACH array)
WARNING: rejected rule (primaryexp -> array) in state 150
WARNING: reduce/reduce conflict in state 207 resolved using rule (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN)
WARNING: rejected rule (primaryexp -> LPAREN primaryexp RPAREN) in state 207
WARNING: reduce/reduce conflict in state 217 resolved using rule (binaryexp -> primaryexp comparisonoperator primaryexp)
WARNING: rejected rule (booleanexp -> primaryexp) in state 217
WARNING: Rule (nularexp -> identifier) is never reduced
