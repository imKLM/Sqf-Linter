Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT_MULTI
    COMMENT_SINGLE
    NEWLINE

Grammar

Rule 0     S' -> code
Rule 1     code -> empty
Rule 2     code -> statement
Rule 3     code -> statement terminator code
Rule 4     statement -> controlstructure
Rule 5     statement -> assignment
Rule 6     statement -> binaryexp
Rule 7     statement -> nularexp
Rule 8     statement -> unaryexp
Rule 9     terminator -> SEMI_COLON
Rule 10    terminator -> COMMA
Rule 11    controlstructure -> ifstatement
Rule 12    controlstructure -> whileloop
Rule 13    controlstructure -> forloop
Rule 14    controlstructure -> withstatement
Rule 15    controlstructure -> foreachloop
Rule 16    controlstructure -> switchstatement
Rule 17    helpertype -> iftype
Rule 18    helpertype -> whiletype
Rule 19    helpertype -> fortype
Rule 20    helpertype -> withtype
Rule 21    case -> CASE primaryexp COLON bracedexp
Rule 22    case -> CASE primaryexp
Rule 23    case -> DEFAULT bracedexp
Rule 24    switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
Rule 25    switchbody -> empty
Rule 26    switchbody -> case
Rule 27    switchbody -> case terminator switchbody
Rule 28    iftype -> IF forloop_condition
Rule 29    iftype -> IF LPAREN primaryexp RPAREN
Rule 30    ifstatement -> iftype THEN bracedexp ELSE bracedexp
Rule 31    ifstatement -> iftype THEN bracedexp
Rule 32    ifstatement -> iftype EXITWITH bracedexp
Rule 33    withtype -> WITH NAMESPACE
Rule 34    withstatementinit -> withtype DO
Rule 35    withstatement -> withstatementinit bracedexp
Rule 36    whiletype -> WHILE forloop_condition
Rule 37    whileloop -> whiletype DO bracedexp
Rule 38    foreachloop -> bracedexp FOREACH array
Rule 39    foreachloop -> bracedexp FOREACH primaryexp
Rule 40    foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN
Rule 41    fortype -> FOR new_scope string FROM primaryexp TO primaryexp
Rule 42    fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
Rule 43    fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
Rule 44    forloop -> fortype DO bracedexp_noscope
Rule 45    forloop_condition -> LBRACE booleanexp RBRACE
Rule 46    forloop_condition -> identifier
Rule 47    bracedexp_noscope -> LBRACE code RBRACE
Rule 48    getvariable_ns -> NAMESPACE GETVARIABLE string
Rule 49    getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 50    getvariable_any -> primaryexp GETVARIABLE string
Rule 51    getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 52    setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 53    setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
Rule 54    setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
Rule 55    setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
Rule 56    param_unary -> PARAM LSPAREN number RSPAREN
Rule 57    param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN
Rule 58    param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
Rule 59    param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 60    param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 61    param_binary -> primaryexp PARAM LSPAREN number RSPAREN
Rule 62    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
Rule 63    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
Rule 64    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 65    param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 66    params_unary -> PARAMS params_array
Rule 67    params_binary -> primaryexp PARAMS params_array
Rule 68    params_array -> LSPAREN RSPAREN
Rule 69    params_array -> LSPAREN params_element RSPAREN
Rule 70    params_element -> params_array_entry
Rule 71    params_element -> params_array_entry COMMA params_element
Rule 72    params_array_entry -> string
Rule 73    params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN
Rule 74    params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN
Rule 75    params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN
Rule 76    params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN
Rule 77    vardefinition -> definition
Rule 78    vardefinition -> arraydefinition
Rule 79    assignment -> assignment_code code RBRACE
Rule 80    assignment -> definition EQUAL primaryexp
Rule 81    assignment -> variable EQUAL primaryexp
Rule 82    assignment_code -> definition EQUAL LBRACE
Rule 83    assignment_code -> variable EQUAL LBRACE
Rule 84    arraydefinition -> PRIVATE stringarray
Rule 85    definition -> PRIVATE PRIVATE_ID
Rule 86    definition -> PRIVATE string
Rule 87    identifier -> PRIVATE_ID
Rule 88    identifier -> GLOBAL_ID
Rule 89    variable -> PRIVATE_ID
Rule 90    variable -> GLOBAL_ID
Rule 91    binaryexp -> primaryexp BINARY_FNC primaryexp
Rule 92    binaryexp -> primaryexp comparisonoperator primaryexp
Rule 93    binaryexp -> primaryexp mathoperator primaryexp
Rule 94    binaryexp -> getvariable_ns
Rule 95    binaryexp -> getvariable_any
Rule 96    binaryexp -> setvariable_ns
Rule 97    binaryexp -> setvariable_any
Rule 98    binaryexp -> param_binary
Rule 99    binaryexp -> params_binary
Rule 100   primaryexp -> number
Rule 101   primaryexp -> identifier
Rule 102   primaryexp -> helpertype
Rule 103   primaryexp -> array
Rule 104   primaryexp -> unaryexp
Rule 105   primaryexp -> nularexp
Rule 106   primaryexp -> string
Rule 107   primaryexp -> binaryexp
Rule 108   primaryexp -> bracedexp
Rule 109   primaryexp -> LPAREN primaryexp RPAREN
Rule 110   bracedexp -> LBRACE new_scope code RBRACE
Rule 111   bracedexp -> LBRACE RBRACE
Rule 112   new_scope -> <empty>
Rule 113   array -> LSPAREN RSPAREN
Rule 114   array -> LSPAREN arrayelement RSPAREN
Rule 115   arrayelement -> primaryexp
Rule 116   arrayelement -> primaryexp COMMA arrayelement
Rule 117   stringarray -> LSPAREN RSPAREN
Rule 118   stringarray -> LSPAREN stringarrayelement RSPAREN
Rule 119   stringarrayelement -> string
Rule 120   stringarrayelement -> string COMMA stringarrayelement
Rule 121   nularexp -> NULAR_FNC
Rule 122   nularexp -> identifier
Rule 123   unaryexp -> UNARY_FNC primaryexp
Rule 124   unaryexp -> PLUS primaryexp
Rule 125   unaryexp -> MINUS primaryexp
Rule 126   unaryexp -> NOT primaryexp
Rule 127   unaryexp -> vardefinition
Rule 128   unaryexp -> param_unary
Rule 129   unaryexp -> params_unary
Rule 130   comparisonoperator -> LT
Rule 131   comparisonoperator -> GT
Rule 132   comparisonoperator -> LTE
Rule 133   comparisonoperator -> GTE
Rule 134   comparisonoperator -> EQUALITY
Rule 135   comparisonoperator -> INEQUALITY
Rule 136   comparisonoperator -> AND
Rule 137   comparisonoperator -> OR
Rule 138   mathoperator -> PLUS
Rule 139   mathoperator -> MINUS
Rule 140   mathoperator -> TIMES
Rule 141   mathoperator -> DIVIDE
Rule 142   mathoperator -> MOD
Rule 143   mathoperator -> POW
Rule 144   booleanexp -> primaryexp
Rule 145   booleanexp -> primaryexp comparisonoperator booleanexp
Rule 146   booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE
Rule 147   configaccessor -> GT GT
Rule 148   configaccessor -> DIVIDE
Rule 149   number -> NUMBER_REAL
Rule 150   number -> NUMBER_EXP
Rule 151   number -> NUMBER_HEX
Rule 152   string -> STRING_SINGLE
Rule 153   string -> STRING_DOUBLE
Rule 154   empty -> <empty>

Terminals, with rules where they appear

AND                  : 136
BINARY_FNC           : 91
BOOL                 : 
CASE                 : 21 22
COLON                : 21
COMMA                : 10 43 43 49 51 52 53 53 54 55 55 57 58 58 59 59 59 60 60 60 62 63 63 64 64 64 65 65 65 71 73 74 74 75 75 75 76 76 76 116 120
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DEFAULT              : 23
DIVIDE               : 141 148
DO                   : 24 34 37 44
ELSE                 : 30
EQUAL                : 80 81 82 83
EQUALITY             : 134
EXITWITH             : 32
FOR                  : 41 42 43
FOREACH              : 38 39 40
FROM                 : 41 42
GETVARIABLE          : 48 49 50 51
GLOBAL_ID            : 88 90
GT                   : 131 147 147
GTE                  : 133
IF                   : 28 29
INEQUALITY           : 135
LBRACE               : 24 45 47 82 83 110 111 146
LPAREN               : 24 29 40 109
LSPAREN              : 43 49 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 68 69 73 74 75 76 113 114 117 118
LT                   : 130
LTE                  : 132
MINUS                : 125 139
MOD                  : 142
NAMESPACE            : 33 48 49 52 53
NEWLINE              : 
NOT                  : 126
NULAR_FNC            : 121
NUMBER_EXP           : 150
NUMBER_HEX           : 151
NUMBER_REAL          : 149
OR                   : 137
PARAM                : 56 57 58 59 60 61 62 63 64 65
PARAMS               : 66 67
PLUS                 : 124 138
POW                  : 143
PRIVATE              : 84 85 86
PRIVATE_ID           : 85 87 89
RBRACE               : 24 45 47 79 110 111 146
RPAREN               : 24 29 40 109
RSPAREN              : 43 49 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 68 69 73 74 75 76 113 114 117 118
SEMI_COLON           : 9
SETVARIABLE          : 52 53 54 55
STEP                 : 42
STRING_DOUBLE        : 153
STRING_SINGLE        : 152
SWITCH               : 24
THEN                 : 30 31
TIMES                : 140
TO                   : 41 42
UNARY_FNC            : 123
WHILE                : 36
WITH                 : 33
error                : 

Nonterminals, with rules where they appear

array                : 38 58 59 60 60 63 64 65 65 74 75 76 76 103
arraydefinition      : 78
arrayelement         : 114 116
assignment           : 5
assignment_code      : 79
binaryexp            : 6 107
booleanexp           : 45 53 55 145 146
bracedexp            : 21 23 30 30 31 32 35 37 38 39 40 108
bracedexp_noscope    : 43 43 44
case                 : 26 27
code                 : 3 47 79 110 0
comparisonoperator   : 92 145 146
configaccessor       : 
controlstructure     : 4
definition           : 77 80 82
empty                : 1 25
foreachloop          : 15
forloop              : 13
forloop_condition    : 28 36 43
fortype              : 19 44
getvariable_any      : 95
getvariable_ns       : 94
helpertype           : 102
identifier           : 46 101 122
ifstatement          : 11
iftype               : 17 30 31 32
mathoperator         : 93
new_scope            : 41 42 43 110
nularexp             : 7 105
number               : 56 57 58 59 59 60 61 62 63 64 64 65 75 100
param_binary         : 98
param_unary          : 128
params_array         : 66 67
params_array_entry   : 70 71
params_binary        : 99
params_element       : 69 71
params_unary         : 129
primaryexp           : 21 22 24 29 39 40 41 41 42 42 42 49 50 51 51 52 53 54 54 55 55 57 58 59 60 61 62 62 63 63 64 64 65 65 67 73 74 75 76 80 81 91 91 92 92 93 93 109 115 116 123 124 125 126 144 145 146
setvariable_any      : 97
setvariable_ns       : 96
statement            : 2 3
string               : 41 42 48 49 50 51 52 53 54 55 72 73 74 75 76 86 106 119 120
stringarray          : 84
stringarrayelement   : 118 120
switchbody           : 24 27
switchstatement      : 16
terminator           : 3 27
unaryexp             : 8 104
vardefinition        : 127
variable             : 81 83
whileloop            : 12
whiletype            : 18 37
withstatement        : 14
withstatementinit    : 35
withtype             : 20 34

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (154) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (79) assignment -> . assignment_code code RBRACE
    (80) assignment -> . definition EQUAL primaryexp
    (81) assignment -> . variable EQUAL primaryexp
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (30) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (31) ifstatement -> . iftype THEN bracedexp
    (32) ifstatement -> . iftype EXITWITH bracedexp
    (37) whileloop -> . whiletype DO bracedexp
    (44) forloop -> . fortype DO bracedexp_noscope
    (35) withstatement -> . withstatementinit bracedexp
    (38) foreachloop -> . bracedexp FOREACH array
    (39) foreachloop -> . bracedexp FOREACH primaryexp
    (40) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (82) assignment_code -> . definition EQUAL LBRACE
    (83) assignment_code -> . variable EQUAL LBRACE
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (89) variable -> . PRIVATE_ID
    (90) variable -> . GLOBAL_ID
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (34) withstatementinit -> . withtype DO
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (84) arraydefinition -> . PRIVATE stringarray
    (33) withtype -> . WITH NAMESPACE

    $end            reduce using rule 154 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    SWITCH          shift and go to state 41
    PRIVATE         shift and go to state 43
    PRIVATE_ID      shift and go to state 44
    GLOBAL_ID       shift and go to state 46
    LPAREN          shift and go to state 40
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    LBRACE          shift and go to state 42
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    WITH            shift and go to state 63

    code                           shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    iftype                         shift and go to state 34
    bracedexp                      shift and go to state 35
    whiletype                      shift and go to state 36
    fortype                        shift and go to state 37
    withstatementinit              shift and go to state 38
    array                          shift and go to state 39
    string                         shift and go to state 45
    number                         shift and go to state 47
    helpertype                     shift and go to state 48
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 1

    (0) S' -> code .



state 2

    (1) code -> empty .

    $end            reduce using rule 1 (code -> empty .)
    RBRACE          reduce using rule 1 (code -> empty .)


state 3

    (2) code -> statement .
    (3) code -> statement . terminator code
    (9) terminator -> . SEMI_COLON
    (10) terminator -> . COMMA

    $end            reduce using rule 2 (code -> statement .)
    RBRACE          reduce using rule 2 (code -> statement .)
    SEMI_COLON      shift and go to state 65
    COMMA           shift and go to state 66

    terminator                     shift and go to state 64

state 4

    (4) statement -> controlstructure .

    SEMI_COLON      reduce using rule 4 (statement -> controlstructure .)
    COMMA           reduce using rule 4 (statement -> controlstructure .)
    $end            reduce using rule 4 (statement -> controlstructure .)
    RBRACE          reduce using rule 4 (statement -> controlstructure .)


state 5

    (5) statement -> assignment .

    SEMI_COLON      reduce using rule 5 (statement -> assignment .)
    COMMA           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> binaryexp .
    (107) primaryexp -> binaryexp .

    SEMI_COLON      reduce using rule 6 (statement -> binaryexp .)
    COMMA           reduce using rule 6 (statement -> binaryexp .)
    $end            reduce using rule 6 (statement -> binaryexp .)
    RBRACE          reduce using rule 6 (statement -> binaryexp .)
    BINARY_FNC      reduce using rule 107 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 107 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 107 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 107 (primaryexp -> binaryexp .)
    PARAMS          reduce using rule 107 (primaryexp -> binaryexp .)
    LT              reduce using rule 107 (primaryexp -> binaryexp .)
    GT              reduce using rule 107 (primaryexp -> binaryexp .)
    LTE             reduce using rule 107 (primaryexp -> binaryexp .)
    GTE             reduce using rule 107 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 107 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 107 (primaryexp -> binaryexp .)
    AND             reduce using rule 107 (primaryexp -> binaryexp .)
    OR              reduce using rule 107 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 107 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 107 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 107 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 107 (primaryexp -> binaryexp .)
    MOD             reduce using rule 107 (primaryexp -> binaryexp .)
    POW             reduce using rule 107 (primaryexp -> binaryexp .)


state 7

    (7) statement -> nularexp .
    (105) primaryexp -> nularexp .

    SEMI_COLON      reduce using rule 7 (statement -> nularexp .)
    COMMA           reduce using rule 7 (statement -> nularexp .)
    $end            reduce using rule 7 (statement -> nularexp .)
    RBRACE          reduce using rule 7 (statement -> nularexp .)
    BINARY_FNC      reduce using rule 105 (primaryexp -> nularexp .)
    GETVARIABLE     reduce using rule 105 (primaryexp -> nularexp .)
    SETVARIABLE     reduce using rule 105 (primaryexp -> nularexp .)
    PARAM           reduce using rule 105 (primaryexp -> nularexp .)
    PARAMS          reduce using rule 105 (primaryexp -> nularexp .)
    LT              reduce using rule 105 (primaryexp -> nularexp .)
    GT              reduce using rule 105 (primaryexp -> nularexp .)
    LTE             reduce using rule 105 (primaryexp -> nularexp .)
    GTE             reduce using rule 105 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 105 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 105 (primaryexp -> nularexp .)
    AND             reduce using rule 105 (primaryexp -> nularexp .)
    OR              reduce using rule 105 (primaryexp -> nularexp .)
    PLUS            reduce using rule 105 (primaryexp -> nularexp .)
    MINUS           reduce using rule 105 (primaryexp -> nularexp .)
    TIMES           reduce using rule 105 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 105 (primaryexp -> nularexp .)
    MOD             reduce using rule 105 (primaryexp -> nularexp .)
    POW             reduce using rule 105 (primaryexp -> nularexp .)


state 8

    (8) statement -> unaryexp .
    (104) primaryexp -> unaryexp .

    SEMI_COLON      reduce using rule 8 (statement -> unaryexp .)
    COMMA           reduce using rule 8 (statement -> unaryexp .)
    $end            reduce using rule 8 (statement -> unaryexp .)
    RBRACE          reduce using rule 8 (statement -> unaryexp .)
    BINARY_FNC      reduce using rule 104 (primaryexp -> unaryexp .)
    GETVARIABLE     reduce using rule 104 (primaryexp -> unaryexp .)
    SETVARIABLE     reduce using rule 104 (primaryexp -> unaryexp .)
    PARAM           reduce using rule 104 (primaryexp -> unaryexp .)
    PARAMS          reduce using rule 104 (primaryexp -> unaryexp .)
    LT              reduce using rule 104 (primaryexp -> unaryexp .)
    GT              reduce using rule 104 (primaryexp -> unaryexp .)
    LTE             reduce using rule 104 (primaryexp -> unaryexp .)
    GTE             reduce using rule 104 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 104 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 104 (primaryexp -> unaryexp .)
    AND             reduce using rule 104 (primaryexp -> unaryexp .)
    OR              reduce using rule 104 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 104 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 104 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 104 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 104 (primaryexp -> unaryexp .)
    MOD             reduce using rule 104 (primaryexp -> unaryexp .)
    POW             reduce using rule 104 (primaryexp -> unaryexp .)


state 9

    (11) controlstructure -> ifstatement .

    SEMI_COLON      reduce using rule 11 (controlstructure -> ifstatement .)
    COMMA           reduce using rule 11 (controlstructure -> ifstatement .)
    $end            reduce using rule 11 (controlstructure -> ifstatement .)
    RBRACE          reduce using rule 11 (controlstructure -> ifstatement .)


state 10

    (12) controlstructure -> whileloop .

    SEMI_COLON      reduce using rule 12 (controlstructure -> whileloop .)
    COMMA           reduce using rule 12 (controlstructure -> whileloop .)
    $end            reduce using rule 12 (controlstructure -> whileloop .)
    RBRACE          reduce using rule 12 (controlstructure -> whileloop .)


state 11

    (13) controlstructure -> forloop .

    SEMI_COLON      reduce using rule 13 (controlstructure -> forloop .)
    COMMA           reduce using rule 13 (controlstructure -> forloop .)
    $end            reduce using rule 13 (controlstructure -> forloop .)
    RBRACE          reduce using rule 13 (controlstructure -> forloop .)


state 12

    (14) controlstructure -> withstatement .

    SEMI_COLON      reduce using rule 14 (controlstructure -> withstatement .)
    COMMA           reduce using rule 14 (controlstructure -> withstatement .)
    $end            reduce using rule 14 (controlstructure -> withstatement .)
    RBRACE          reduce using rule 14 (controlstructure -> withstatement .)


state 13

    (15) controlstructure -> foreachloop .

    SEMI_COLON      reduce using rule 15 (controlstructure -> foreachloop .)
    COMMA           reduce using rule 15 (controlstructure -> foreachloop .)
    $end            reduce using rule 15 (controlstructure -> foreachloop .)
    RBRACE          reduce using rule 15 (controlstructure -> foreachloop .)


state 14

    (16) controlstructure -> switchstatement .

    SEMI_COLON      reduce using rule 16 (controlstructure -> switchstatement .)
    COMMA           reduce using rule 16 (controlstructure -> switchstatement .)
    $end            reduce using rule 16 (controlstructure -> switchstatement .)
    RBRACE          reduce using rule 16 (controlstructure -> switchstatement .)


state 15

    (79) assignment -> assignment_code . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (154) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (79) assignment -> . assignment_code code RBRACE
    (80) assignment -> . definition EQUAL primaryexp
    (81) assignment -> . variable EQUAL primaryexp
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (30) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (31) ifstatement -> . iftype THEN bracedexp
    (32) ifstatement -> . iftype EXITWITH bracedexp
    (37) whileloop -> . whiletype DO bracedexp
    (44) forloop -> . fortype DO bracedexp_noscope
    (35) withstatement -> . withstatementinit bracedexp
    (38) foreachloop -> . bracedexp FOREACH array
    (39) foreachloop -> . bracedexp FOREACH primaryexp
    (40) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (82) assignment_code -> . definition EQUAL LBRACE
    (83) assignment_code -> . variable EQUAL LBRACE
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (89) variable -> . PRIVATE_ID
    (90) variable -> . GLOBAL_ID
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (34) withstatementinit -> . withtype DO
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (84) arraydefinition -> . PRIVATE stringarray
    (33) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 154 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    SWITCH          shift and go to state 41
    PRIVATE         shift and go to state 43
    PRIVATE_ID      shift and go to state 44
    GLOBAL_ID       shift and go to state 46
    LPAREN          shift and go to state 40
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    LBRACE          shift and go to state 42
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    WITH            shift and go to state 63

    assignment_code                shift and go to state 15
    code                           shift and go to state 67
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    iftype                         shift and go to state 34
    bracedexp                      shift and go to state 35
    whiletype                      shift and go to state 36
    fortype                        shift and go to state 37
    withstatementinit              shift and go to state 38
    array                          shift and go to state 39
    string                         shift and go to state 45
    number                         shift and go to state 47
    helpertype                     shift and go to state 48
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 16

    (80) assignment -> definition . EQUAL primaryexp
    (82) assignment_code -> definition . EQUAL LBRACE
    (77) vardefinition -> definition .

    EQUAL           shift and go to state 68
    SEMI_COLON      reduce using rule 77 (vardefinition -> definition .)
    COMMA           reduce using rule 77 (vardefinition -> definition .)
    $end            reduce using rule 77 (vardefinition -> definition .)
    BINARY_FNC      reduce using rule 77 (vardefinition -> definition .)
    GETVARIABLE     reduce using rule 77 (vardefinition -> definition .)
    SETVARIABLE     reduce using rule 77 (vardefinition -> definition .)
    PARAM           reduce using rule 77 (vardefinition -> definition .)
    PARAMS          reduce using rule 77 (vardefinition -> definition .)
    LT              reduce using rule 77 (vardefinition -> definition .)
    GT              reduce using rule 77 (vardefinition -> definition .)
    LTE             reduce using rule 77 (vardefinition -> definition .)
    GTE             reduce using rule 77 (vardefinition -> definition .)
    EQUALITY        reduce using rule 77 (vardefinition -> definition .)
    INEQUALITY      reduce using rule 77 (vardefinition -> definition .)
    AND             reduce using rule 77 (vardefinition -> definition .)
    OR              reduce using rule 77 (vardefinition -> definition .)
    PLUS            reduce using rule 77 (vardefinition -> definition .)
    MINUS           reduce using rule 77 (vardefinition -> definition .)
    TIMES           reduce using rule 77 (vardefinition -> definition .)
    DIVIDE          reduce using rule 77 (vardefinition -> definition .)
    MOD             reduce using rule 77 (vardefinition -> definition .)
    POW             reduce using rule 77 (vardefinition -> definition .)
    RBRACE          reduce using rule 77 (vardefinition -> definition .)


state 17

    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 18

    (81) assignment -> variable . EQUAL primaryexp
    (83) assignment_code -> variable . EQUAL LBRACE

    EQUAL           shift and go to state 90


state 19

    (94) binaryexp -> getvariable_ns .

    SEMI_COLON      reduce using rule 94 (binaryexp -> getvariable_ns .)
    COMMA           reduce using rule 94 (binaryexp -> getvariable_ns .)
    $end            reduce using rule 94 (binaryexp -> getvariable_ns .)
    BINARY_FNC      reduce using rule 94 (binaryexp -> getvariable_ns .)
    GETVARIABLE     reduce using rule 94 (binaryexp -> getvariable_ns .)
    SETVARIABLE     reduce using rule 94 (binaryexp -> getvariable_ns .)
    PARAM           reduce using rule 94 (binaryexp -> getvariable_ns .)
    PARAMS          reduce using rule 94 (binaryexp -> getvariable_ns .)
    LT              reduce using rule 94 (binaryexp -> getvariable_ns .)
    GT              reduce using rule 94 (binaryexp -> getvariable_ns .)
    LTE             reduce using rule 94 (binaryexp -> getvariable_ns .)
    GTE             reduce using rule 94 (binaryexp -> getvariable_ns .)
    EQUALITY        reduce using rule 94 (binaryexp -> getvariable_ns .)
    INEQUALITY      reduce using rule 94 (binaryexp -> getvariable_ns .)
    AND             reduce using rule 94 (binaryexp -> getvariable_ns .)
    OR              reduce using rule 94 (binaryexp -> getvariable_ns .)
    PLUS            reduce using rule 94 (binaryexp -> getvariable_ns .)
    MINUS           reduce using rule 94 (binaryexp -> getvariable_ns .)
    TIMES           reduce using rule 94 (binaryexp -> getvariable_ns .)
    DIVIDE          reduce using rule 94 (binaryexp -> getvariable_ns .)
    MOD             reduce using rule 94 (binaryexp -> getvariable_ns .)
    POW             reduce using rule 94 (binaryexp -> getvariable_ns .)
    RBRACE          reduce using rule 94 (binaryexp -> getvariable_ns .)
    RPAREN          reduce using rule 94 (binaryexp -> getvariable_ns .)
    RSPAREN         reduce using rule 94 (binaryexp -> getvariable_ns .)
    TO              reduce using rule 94 (binaryexp -> getvariable_ns .)
    STEP            reduce using rule 94 (binaryexp -> getvariable_ns .)
    DO              reduce using rule 94 (binaryexp -> getvariable_ns .)
    COLON           reduce using rule 94 (binaryexp -> getvariable_ns .)


state 20

    (95) binaryexp -> getvariable_any .

    SEMI_COLON      reduce using rule 95 (binaryexp -> getvariable_any .)
    COMMA           reduce using rule 95 (binaryexp -> getvariable_any .)
    $end            reduce using rule 95 (binaryexp -> getvariable_any .)
    BINARY_FNC      reduce using rule 95 (binaryexp -> getvariable_any .)
    GETVARIABLE     reduce using rule 95 (binaryexp -> getvariable_any .)
    SETVARIABLE     reduce using rule 95 (binaryexp -> getvariable_any .)
    PARAM           reduce using rule 95 (binaryexp -> getvariable_any .)
    PARAMS          reduce using rule 95 (binaryexp -> getvariable_any .)
    LT              reduce using rule 95 (binaryexp -> getvariable_any .)
    GT              reduce using rule 95 (binaryexp -> getvariable_any .)
    LTE             reduce using rule 95 (binaryexp -> getvariable_any .)
    GTE             reduce using rule 95 (binaryexp -> getvariable_any .)
    EQUALITY        reduce using rule 95 (binaryexp -> getvariable_any .)
    INEQUALITY      reduce using rule 95 (binaryexp -> getvariable_any .)
    AND             reduce using rule 95 (binaryexp -> getvariable_any .)
    OR              reduce using rule 95 (binaryexp -> getvariable_any .)
    PLUS            reduce using rule 95 (binaryexp -> getvariable_any .)
    MINUS           reduce using rule 95 (binaryexp -> getvariable_any .)
    TIMES           reduce using rule 95 (binaryexp -> getvariable_any .)
    DIVIDE          reduce using rule 95 (binaryexp -> getvariable_any .)
    MOD             reduce using rule 95 (binaryexp -> getvariable_any .)
    POW             reduce using rule 95 (binaryexp -> getvariable_any .)
    RBRACE          reduce using rule 95 (binaryexp -> getvariable_any .)
    RPAREN          reduce using rule 95 (binaryexp -> getvariable_any .)
    RSPAREN         reduce using rule 95 (binaryexp -> getvariable_any .)
    TO              reduce using rule 95 (binaryexp -> getvariable_any .)
    STEP            reduce using rule 95 (binaryexp -> getvariable_any .)
    DO              reduce using rule 95 (binaryexp -> getvariable_any .)
    COLON           reduce using rule 95 (binaryexp -> getvariable_any .)


state 21

    (96) binaryexp -> setvariable_ns .

    SEMI_COLON      reduce using rule 96 (binaryexp -> setvariable_ns .)
    COMMA           reduce using rule 96 (binaryexp -> setvariable_ns .)
    $end            reduce using rule 96 (binaryexp -> setvariable_ns .)
    BINARY_FNC      reduce using rule 96 (binaryexp -> setvariable_ns .)
    GETVARIABLE     reduce using rule 96 (binaryexp -> setvariable_ns .)
    SETVARIABLE     reduce using rule 96 (binaryexp -> setvariable_ns .)
    PARAM           reduce using rule 96 (binaryexp -> setvariable_ns .)
    PARAMS          reduce using rule 96 (binaryexp -> setvariable_ns .)
    LT              reduce using rule 96 (binaryexp -> setvariable_ns .)
    GT              reduce using rule 96 (binaryexp -> setvariable_ns .)
    LTE             reduce using rule 96 (binaryexp -> setvariable_ns .)
    GTE             reduce using rule 96 (binaryexp -> setvariable_ns .)
    EQUALITY        reduce using rule 96 (binaryexp -> setvariable_ns .)
    INEQUALITY      reduce using rule 96 (binaryexp -> setvariable_ns .)
    AND             reduce using rule 96 (binaryexp -> setvariable_ns .)
    OR              reduce using rule 96 (binaryexp -> setvariable_ns .)
    PLUS            reduce using rule 96 (binaryexp -> setvariable_ns .)
    MINUS           reduce using rule 96 (binaryexp -> setvariable_ns .)
    TIMES           reduce using rule 96 (binaryexp -> setvariable_ns .)
    DIVIDE          reduce using rule 96 (binaryexp -> setvariable_ns .)
    MOD             reduce using rule 96 (binaryexp -> setvariable_ns .)
    POW             reduce using rule 96 (binaryexp -> setvariable_ns .)
    RBRACE          reduce using rule 96 (binaryexp -> setvariable_ns .)
    RPAREN          reduce using rule 96 (binaryexp -> setvariable_ns .)
    RSPAREN         reduce using rule 96 (binaryexp -> setvariable_ns .)
    TO              reduce using rule 96 (binaryexp -> setvariable_ns .)
    STEP            reduce using rule 96 (binaryexp -> setvariable_ns .)
    DO              reduce using rule 96 (binaryexp -> setvariable_ns .)
    COLON           reduce using rule 96 (binaryexp -> setvariable_ns .)


state 22

    (97) binaryexp -> setvariable_any .

    SEMI_COLON      reduce using rule 97 (binaryexp -> setvariable_any .)
    COMMA           reduce using rule 97 (binaryexp -> setvariable_any .)
    $end            reduce using rule 97 (binaryexp -> setvariable_any .)
    BINARY_FNC      reduce using rule 97 (binaryexp -> setvariable_any .)
    GETVARIABLE     reduce using rule 97 (binaryexp -> setvariable_any .)
    SETVARIABLE     reduce using rule 97 (binaryexp -> setvariable_any .)
    PARAM           reduce using rule 97 (binaryexp -> setvariable_any .)
    PARAMS          reduce using rule 97 (binaryexp -> setvariable_any .)
    LT              reduce using rule 97 (binaryexp -> setvariable_any .)
    GT              reduce using rule 97 (binaryexp -> setvariable_any .)
    LTE             reduce using rule 97 (binaryexp -> setvariable_any .)
    GTE             reduce using rule 97 (binaryexp -> setvariable_any .)
    EQUALITY        reduce using rule 97 (binaryexp -> setvariable_any .)
    INEQUALITY      reduce using rule 97 (binaryexp -> setvariable_any .)
    AND             reduce using rule 97 (binaryexp -> setvariable_any .)
    OR              reduce using rule 97 (binaryexp -> setvariable_any .)
    PLUS            reduce using rule 97 (binaryexp -> setvariable_any .)
    MINUS           reduce using rule 97 (binaryexp -> setvariable_any .)
    TIMES           reduce using rule 97 (binaryexp -> setvariable_any .)
    DIVIDE          reduce using rule 97 (binaryexp -> setvariable_any .)
    MOD             reduce using rule 97 (binaryexp -> setvariable_any .)
    POW             reduce using rule 97 (binaryexp -> setvariable_any .)
    RBRACE          reduce using rule 97 (binaryexp -> setvariable_any .)
    RPAREN          reduce using rule 97 (binaryexp -> setvariable_any .)
    RSPAREN         reduce using rule 97 (binaryexp -> setvariable_any .)
    TO              reduce using rule 97 (binaryexp -> setvariable_any .)
    STEP            reduce using rule 97 (binaryexp -> setvariable_any .)
    DO              reduce using rule 97 (binaryexp -> setvariable_any .)
    COLON           reduce using rule 97 (binaryexp -> setvariable_any .)


state 23

    (98) binaryexp -> param_binary .

    SEMI_COLON      reduce using rule 98 (binaryexp -> param_binary .)
    COMMA           reduce using rule 98 (binaryexp -> param_binary .)
    $end            reduce using rule 98 (binaryexp -> param_binary .)
    BINARY_FNC      reduce using rule 98 (binaryexp -> param_binary .)
    GETVARIABLE     reduce using rule 98 (binaryexp -> param_binary .)
    SETVARIABLE     reduce using rule 98 (binaryexp -> param_binary .)
    PARAM           reduce using rule 98 (binaryexp -> param_binary .)
    PARAMS          reduce using rule 98 (binaryexp -> param_binary .)
    LT              reduce using rule 98 (binaryexp -> param_binary .)
    GT              reduce using rule 98 (binaryexp -> param_binary .)
    LTE             reduce using rule 98 (binaryexp -> param_binary .)
    GTE             reduce using rule 98 (binaryexp -> param_binary .)
    EQUALITY        reduce using rule 98 (binaryexp -> param_binary .)
    INEQUALITY      reduce using rule 98 (binaryexp -> param_binary .)
    AND             reduce using rule 98 (binaryexp -> param_binary .)
    OR              reduce using rule 98 (binaryexp -> param_binary .)
    PLUS            reduce using rule 98 (binaryexp -> param_binary .)
    MINUS           reduce using rule 98 (binaryexp -> param_binary .)
    TIMES           reduce using rule 98 (binaryexp -> param_binary .)
    DIVIDE          reduce using rule 98 (binaryexp -> param_binary .)
    MOD             reduce using rule 98 (binaryexp -> param_binary .)
    POW             reduce using rule 98 (binaryexp -> param_binary .)
    RBRACE          reduce using rule 98 (binaryexp -> param_binary .)
    RPAREN          reduce using rule 98 (binaryexp -> param_binary .)
    RSPAREN         reduce using rule 98 (binaryexp -> param_binary .)
    TO              reduce using rule 98 (binaryexp -> param_binary .)
    STEP            reduce using rule 98 (binaryexp -> param_binary .)
    DO              reduce using rule 98 (binaryexp -> param_binary .)
    COLON           reduce using rule 98 (binaryexp -> param_binary .)


state 24

    (99) binaryexp -> params_binary .

    SEMI_COLON      reduce using rule 99 (binaryexp -> params_binary .)
    COMMA           reduce using rule 99 (binaryexp -> params_binary .)
    $end            reduce using rule 99 (binaryexp -> params_binary .)
    BINARY_FNC      reduce using rule 99 (binaryexp -> params_binary .)
    GETVARIABLE     reduce using rule 99 (binaryexp -> params_binary .)
    SETVARIABLE     reduce using rule 99 (binaryexp -> params_binary .)
    PARAM           reduce using rule 99 (binaryexp -> params_binary .)
    PARAMS          reduce using rule 99 (binaryexp -> params_binary .)
    LT              reduce using rule 99 (binaryexp -> params_binary .)
    GT              reduce using rule 99 (binaryexp -> params_binary .)
    LTE             reduce using rule 99 (binaryexp -> params_binary .)
    GTE             reduce using rule 99 (binaryexp -> params_binary .)
    EQUALITY        reduce using rule 99 (binaryexp -> params_binary .)
    INEQUALITY      reduce using rule 99 (binaryexp -> params_binary .)
    AND             reduce using rule 99 (binaryexp -> params_binary .)
    OR              reduce using rule 99 (binaryexp -> params_binary .)
    PLUS            reduce using rule 99 (binaryexp -> params_binary .)
    MINUS           reduce using rule 99 (binaryexp -> params_binary .)
    TIMES           reduce using rule 99 (binaryexp -> params_binary .)
    DIVIDE          reduce using rule 99 (binaryexp -> params_binary .)
    MOD             reduce using rule 99 (binaryexp -> params_binary .)
    POW             reduce using rule 99 (binaryexp -> params_binary .)
    RBRACE          reduce using rule 99 (binaryexp -> params_binary .)
    RPAREN          reduce using rule 99 (binaryexp -> params_binary .)
    RSPAREN         reduce using rule 99 (binaryexp -> params_binary .)
    TO              reduce using rule 99 (binaryexp -> params_binary .)
    STEP            reduce using rule 99 (binaryexp -> params_binary .)
    DO              reduce using rule 99 (binaryexp -> params_binary .)
    COLON           reduce using rule 99 (binaryexp -> params_binary .)


state 25

    (121) nularexp -> NULAR_FNC .

    SEMI_COLON      reduce using rule 121 (nularexp -> NULAR_FNC .)
    COMMA           reduce using rule 121 (nularexp -> NULAR_FNC .)
    $end            reduce using rule 121 (nularexp -> NULAR_FNC .)
    BINARY_FNC      reduce using rule 121 (nularexp -> NULAR_FNC .)
    GETVARIABLE     reduce using rule 121 (nularexp -> NULAR_FNC .)
    SETVARIABLE     reduce using rule 121 (nularexp -> NULAR_FNC .)
    PARAM           reduce using rule 121 (nularexp -> NULAR_FNC .)
    PARAMS          reduce using rule 121 (nularexp -> NULAR_FNC .)
    LT              reduce using rule 121 (nularexp -> NULAR_FNC .)
    GT              reduce using rule 121 (nularexp -> NULAR_FNC .)
    LTE             reduce using rule 121 (nularexp -> NULAR_FNC .)
    GTE             reduce using rule 121 (nularexp -> NULAR_FNC .)
    EQUALITY        reduce using rule 121 (nularexp -> NULAR_FNC .)
    INEQUALITY      reduce using rule 121 (nularexp -> NULAR_FNC .)
    AND             reduce using rule 121 (nularexp -> NULAR_FNC .)
    OR              reduce using rule 121 (nularexp -> NULAR_FNC .)
    PLUS            reduce using rule 121 (nularexp -> NULAR_FNC .)
    MINUS           reduce using rule 121 (nularexp -> NULAR_FNC .)
    TIMES           reduce using rule 121 (nularexp -> NULAR_FNC .)
    DIVIDE          reduce using rule 121 (nularexp -> NULAR_FNC .)
    MOD             reduce using rule 121 (nularexp -> NULAR_FNC .)
    POW             reduce using rule 121 (nularexp -> NULAR_FNC .)
    RBRACE          reduce using rule 121 (nularexp -> NULAR_FNC .)
    RPAREN          reduce using rule 121 (nularexp -> NULAR_FNC .)
    RSPAREN         reduce using rule 121 (nularexp -> NULAR_FNC .)
    TO              reduce using rule 121 (nularexp -> NULAR_FNC .)
    STEP            reduce using rule 121 (nularexp -> NULAR_FNC .)
    DO              reduce using rule 121 (nularexp -> NULAR_FNC .)
    COLON           reduce using rule 121 (nularexp -> NULAR_FNC .)


state 26

    (122) nularexp -> identifier .
    (101) primaryexp -> identifier .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAM resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAMS resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 101 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 122 (nularexp -> identifier .)
    COMMA           reduce using rule 122 (nularexp -> identifier .)
    $end            reduce using rule 122 (nularexp -> identifier .)
    RBRACE          reduce using rule 122 (nularexp -> identifier .)
    BINARY_FNC      reduce using rule 101 (primaryexp -> identifier .)
    GETVARIABLE     reduce using rule 101 (primaryexp -> identifier .)
    SETVARIABLE     reduce using rule 101 (primaryexp -> identifier .)
    PARAM           reduce using rule 101 (primaryexp -> identifier .)
    PARAMS          reduce using rule 101 (primaryexp -> identifier .)
    LT              reduce using rule 101 (primaryexp -> identifier .)
    GT              reduce using rule 101 (primaryexp -> identifier .)
    LTE             reduce using rule 101 (primaryexp -> identifier .)
    GTE             reduce using rule 101 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 101 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 101 (primaryexp -> identifier .)
    AND             reduce using rule 101 (primaryexp -> identifier .)
    OR              reduce using rule 101 (primaryexp -> identifier .)
    PLUS            reduce using rule 101 (primaryexp -> identifier .)
    MINUS           reduce using rule 101 (primaryexp -> identifier .)
    TIMES           reduce using rule 101 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 101 (primaryexp -> identifier .)
    MOD             reduce using rule 101 (primaryexp -> identifier .)
    POW             reduce using rule 101 (primaryexp -> identifier .)

  ! BINARY_FNC      [ reduce using rule 122 (nularexp -> identifier .) ]
  ! GETVARIABLE     [ reduce using rule 122 (nularexp -> identifier .) ]
  ! SETVARIABLE     [ reduce using rule 122 (nularexp -> identifier .) ]
  ! PARAM           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! PARAMS          [ reduce using rule 122 (nularexp -> identifier .) ]
  ! LT              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! GT              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! LTE             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! GTE             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! EQUALITY        [ reduce using rule 122 (nularexp -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 122 (nularexp -> identifier .) ]
  ! AND             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! OR              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! PLUS            [ reduce using rule 122 (nularexp -> identifier .) ]
  ! MINUS           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! TIMES           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! DIVIDE          [ reduce using rule 122 (nularexp -> identifier .) ]
  ! MOD             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! POW             [ reduce using rule 122 (nularexp -> identifier .) ]


state 27

    (123) unaryexp -> UNARY_FNC . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 91
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 28

    (124) unaryexp -> PLUS . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 104
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 29

    (125) unaryexp -> MINUS . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 105
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 30

    (126) unaryexp -> NOT . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 106
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 31

    (127) unaryexp -> vardefinition .

    SEMI_COLON      reduce using rule 127 (unaryexp -> vardefinition .)
    COMMA           reduce using rule 127 (unaryexp -> vardefinition .)
    $end            reduce using rule 127 (unaryexp -> vardefinition .)
    BINARY_FNC      reduce using rule 127 (unaryexp -> vardefinition .)
    GETVARIABLE     reduce using rule 127 (unaryexp -> vardefinition .)
    SETVARIABLE     reduce using rule 127 (unaryexp -> vardefinition .)
    PARAM           reduce using rule 127 (unaryexp -> vardefinition .)
    PARAMS          reduce using rule 127 (unaryexp -> vardefinition .)
    LT              reduce using rule 127 (unaryexp -> vardefinition .)
    GT              reduce using rule 127 (unaryexp -> vardefinition .)
    LTE             reduce using rule 127 (unaryexp -> vardefinition .)
    GTE             reduce using rule 127 (unaryexp -> vardefinition .)
    EQUALITY        reduce using rule 127 (unaryexp -> vardefinition .)
    INEQUALITY      reduce using rule 127 (unaryexp -> vardefinition .)
    AND             reduce using rule 127 (unaryexp -> vardefinition .)
    OR              reduce using rule 127 (unaryexp -> vardefinition .)
    PLUS            reduce using rule 127 (unaryexp -> vardefinition .)
    MINUS           reduce using rule 127 (unaryexp -> vardefinition .)
    TIMES           reduce using rule 127 (unaryexp -> vardefinition .)
    DIVIDE          reduce using rule 127 (unaryexp -> vardefinition .)
    MOD             reduce using rule 127 (unaryexp -> vardefinition .)
    POW             reduce using rule 127 (unaryexp -> vardefinition .)
    RBRACE          reduce using rule 127 (unaryexp -> vardefinition .)
    RPAREN          reduce using rule 127 (unaryexp -> vardefinition .)
    RSPAREN         reduce using rule 127 (unaryexp -> vardefinition .)
    TO              reduce using rule 127 (unaryexp -> vardefinition .)
    STEP            reduce using rule 127 (unaryexp -> vardefinition .)
    DO              reduce using rule 127 (unaryexp -> vardefinition .)
    COLON           reduce using rule 127 (unaryexp -> vardefinition .)


state 32

    (128) unaryexp -> param_unary .

    SEMI_COLON      reduce using rule 128 (unaryexp -> param_unary .)
    COMMA           reduce using rule 128 (unaryexp -> param_unary .)
    $end            reduce using rule 128 (unaryexp -> param_unary .)
    BINARY_FNC      reduce using rule 128 (unaryexp -> param_unary .)
    GETVARIABLE     reduce using rule 128 (unaryexp -> param_unary .)
    SETVARIABLE     reduce using rule 128 (unaryexp -> param_unary .)
    PARAM           reduce using rule 128 (unaryexp -> param_unary .)
    PARAMS          reduce using rule 128 (unaryexp -> param_unary .)
    LT              reduce using rule 128 (unaryexp -> param_unary .)
    GT              reduce using rule 128 (unaryexp -> param_unary .)
    LTE             reduce using rule 128 (unaryexp -> param_unary .)
    GTE             reduce using rule 128 (unaryexp -> param_unary .)
    EQUALITY        reduce using rule 128 (unaryexp -> param_unary .)
    INEQUALITY      reduce using rule 128 (unaryexp -> param_unary .)
    AND             reduce using rule 128 (unaryexp -> param_unary .)
    OR              reduce using rule 128 (unaryexp -> param_unary .)
    PLUS            reduce using rule 128 (unaryexp -> param_unary .)
    MINUS           reduce using rule 128 (unaryexp -> param_unary .)
    TIMES           reduce using rule 128 (unaryexp -> param_unary .)
    DIVIDE          reduce using rule 128 (unaryexp -> param_unary .)
    MOD             reduce using rule 128 (unaryexp -> param_unary .)
    POW             reduce using rule 128 (unaryexp -> param_unary .)
    RBRACE          reduce using rule 128 (unaryexp -> param_unary .)
    RPAREN          reduce using rule 128 (unaryexp -> param_unary .)
    RSPAREN         reduce using rule 128 (unaryexp -> param_unary .)
    TO              reduce using rule 128 (unaryexp -> param_unary .)
    STEP            reduce using rule 128 (unaryexp -> param_unary .)
    DO              reduce using rule 128 (unaryexp -> param_unary .)
    COLON           reduce using rule 128 (unaryexp -> param_unary .)


state 33

    (129) unaryexp -> params_unary .

    SEMI_COLON      reduce using rule 129 (unaryexp -> params_unary .)
    COMMA           reduce using rule 129 (unaryexp -> params_unary .)
    $end            reduce using rule 129 (unaryexp -> params_unary .)
    BINARY_FNC      reduce using rule 129 (unaryexp -> params_unary .)
    GETVARIABLE     reduce using rule 129 (unaryexp -> params_unary .)
    SETVARIABLE     reduce using rule 129 (unaryexp -> params_unary .)
    PARAM           reduce using rule 129 (unaryexp -> params_unary .)
    PARAMS          reduce using rule 129 (unaryexp -> params_unary .)
    LT              reduce using rule 129 (unaryexp -> params_unary .)
    GT              reduce using rule 129 (unaryexp -> params_unary .)
    LTE             reduce using rule 129 (unaryexp -> params_unary .)
    GTE             reduce using rule 129 (unaryexp -> params_unary .)
    EQUALITY        reduce using rule 129 (unaryexp -> params_unary .)
    INEQUALITY      reduce using rule 129 (unaryexp -> params_unary .)
    AND             reduce using rule 129 (unaryexp -> params_unary .)
    OR              reduce using rule 129 (unaryexp -> params_unary .)
    PLUS            reduce using rule 129 (unaryexp -> params_unary .)
    MINUS           reduce using rule 129 (unaryexp -> params_unary .)
    TIMES           reduce using rule 129 (unaryexp -> params_unary .)
    DIVIDE          reduce using rule 129 (unaryexp -> params_unary .)
    MOD             reduce using rule 129 (unaryexp -> params_unary .)
    POW             reduce using rule 129 (unaryexp -> params_unary .)
    RBRACE          reduce using rule 129 (unaryexp -> params_unary .)
    RPAREN          reduce using rule 129 (unaryexp -> params_unary .)
    RSPAREN         reduce using rule 129 (unaryexp -> params_unary .)
    TO              reduce using rule 129 (unaryexp -> params_unary .)
    STEP            reduce using rule 129 (unaryexp -> params_unary .)
    DO              reduce using rule 129 (unaryexp -> params_unary .)
    COLON           reduce using rule 129 (unaryexp -> params_unary .)


state 34

    (30) ifstatement -> iftype . THEN bracedexp ELSE bracedexp
    (31) ifstatement -> iftype . THEN bracedexp
    (32) ifstatement -> iftype . EXITWITH bracedexp
    (17) helpertype -> iftype .

    THEN            shift and go to state 107
    EXITWITH        shift and go to state 108
    BINARY_FNC      reduce using rule 17 (helpertype -> iftype .)
    GETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    SETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    PARAM           reduce using rule 17 (helpertype -> iftype .)
    PARAMS          reduce using rule 17 (helpertype -> iftype .)
    LT              reduce using rule 17 (helpertype -> iftype .)
    GT              reduce using rule 17 (helpertype -> iftype .)
    LTE             reduce using rule 17 (helpertype -> iftype .)
    GTE             reduce using rule 17 (helpertype -> iftype .)
    EQUALITY        reduce using rule 17 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 17 (helpertype -> iftype .)
    AND             reduce using rule 17 (helpertype -> iftype .)
    OR              reduce using rule 17 (helpertype -> iftype .)
    PLUS            reduce using rule 17 (helpertype -> iftype .)
    MINUS           reduce using rule 17 (helpertype -> iftype .)
    TIMES           reduce using rule 17 (helpertype -> iftype .)
    DIVIDE          reduce using rule 17 (helpertype -> iftype .)
    MOD             reduce using rule 17 (helpertype -> iftype .)
    POW             reduce using rule 17 (helpertype -> iftype .)


state 35

    (38) foreachloop -> bracedexp . FOREACH array
    (39) foreachloop -> bracedexp . FOREACH primaryexp
    (40) foreachloop -> bracedexp . FOREACH LPAREN primaryexp RPAREN
    (108) primaryexp -> bracedexp .

    FOREACH         shift and go to state 109
    BINARY_FNC      reduce using rule 108 (primaryexp -> bracedexp .)
    GETVARIABLE     reduce using rule 108 (primaryexp -> bracedexp .)
    SETVARIABLE     reduce using rule 108 (primaryexp -> bracedexp .)
    PARAM           reduce using rule 108 (primaryexp -> bracedexp .)
    PARAMS          reduce using rule 108 (primaryexp -> bracedexp .)
    LT              reduce using rule 108 (primaryexp -> bracedexp .)
    GT              reduce using rule 108 (primaryexp -> bracedexp .)
    LTE             reduce using rule 108 (primaryexp -> bracedexp .)
    GTE             reduce using rule 108 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 108 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 108 (primaryexp -> bracedexp .)
    AND             reduce using rule 108 (primaryexp -> bracedexp .)
    OR              reduce using rule 108 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 108 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 108 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 108 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 108 (primaryexp -> bracedexp .)
    MOD             reduce using rule 108 (primaryexp -> bracedexp .)
    POW             reduce using rule 108 (primaryexp -> bracedexp .)


state 36

    (37) whileloop -> whiletype . DO bracedexp
    (18) helpertype -> whiletype .

    DO              shift and go to state 110
    BINARY_FNC      reduce using rule 18 (helpertype -> whiletype .)
    GETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    SETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    PARAM           reduce using rule 18 (helpertype -> whiletype .)
    PARAMS          reduce using rule 18 (helpertype -> whiletype .)
    LT              reduce using rule 18 (helpertype -> whiletype .)
    GT              reduce using rule 18 (helpertype -> whiletype .)
    LTE             reduce using rule 18 (helpertype -> whiletype .)
    GTE             reduce using rule 18 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 18 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 18 (helpertype -> whiletype .)
    AND             reduce using rule 18 (helpertype -> whiletype .)
    OR              reduce using rule 18 (helpertype -> whiletype .)
    PLUS            reduce using rule 18 (helpertype -> whiletype .)
    MINUS           reduce using rule 18 (helpertype -> whiletype .)
    TIMES           reduce using rule 18 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 18 (helpertype -> whiletype .)
    MOD             reduce using rule 18 (helpertype -> whiletype .)
    POW             reduce using rule 18 (helpertype -> whiletype .)


state 37

    (44) forloop -> fortype . DO bracedexp_noscope
    (19) helpertype -> fortype .

    DO              shift and go to state 111
    BINARY_FNC      reduce using rule 19 (helpertype -> fortype .)
    GETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    SETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    PARAM           reduce using rule 19 (helpertype -> fortype .)
    PARAMS          reduce using rule 19 (helpertype -> fortype .)
    LT              reduce using rule 19 (helpertype -> fortype .)
    GT              reduce using rule 19 (helpertype -> fortype .)
    LTE             reduce using rule 19 (helpertype -> fortype .)
    GTE             reduce using rule 19 (helpertype -> fortype .)
    EQUALITY        reduce using rule 19 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 19 (helpertype -> fortype .)
    AND             reduce using rule 19 (helpertype -> fortype .)
    OR              reduce using rule 19 (helpertype -> fortype .)
    PLUS            reduce using rule 19 (helpertype -> fortype .)
    MINUS           reduce using rule 19 (helpertype -> fortype .)
    TIMES           reduce using rule 19 (helpertype -> fortype .)
    DIVIDE          reduce using rule 19 (helpertype -> fortype .)
    MOD             reduce using rule 19 (helpertype -> fortype .)
    POW             reduce using rule 19 (helpertype -> fortype .)


state 38

    (35) withstatement -> withstatementinit . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 112

state 39

    (103) primaryexp -> array .

    BINARY_FNC      reduce using rule 103 (primaryexp -> array .)
    GETVARIABLE     reduce using rule 103 (primaryexp -> array .)
    SETVARIABLE     reduce using rule 103 (primaryexp -> array .)
    PARAM           reduce using rule 103 (primaryexp -> array .)
    PARAMS          reduce using rule 103 (primaryexp -> array .)
    LT              reduce using rule 103 (primaryexp -> array .)
    GT              reduce using rule 103 (primaryexp -> array .)
    LTE             reduce using rule 103 (primaryexp -> array .)
    GTE             reduce using rule 103 (primaryexp -> array .)
    EQUALITY        reduce using rule 103 (primaryexp -> array .)
    INEQUALITY      reduce using rule 103 (primaryexp -> array .)
    AND             reduce using rule 103 (primaryexp -> array .)
    OR              reduce using rule 103 (primaryexp -> array .)
    PLUS            reduce using rule 103 (primaryexp -> array .)
    MINUS           reduce using rule 103 (primaryexp -> array .)
    TIMES           reduce using rule 103 (primaryexp -> array .)
    DIVIDE          reduce using rule 103 (primaryexp -> array .)
    MOD             reduce using rule 103 (primaryexp -> array .)
    POW             reduce using rule 103 (primaryexp -> array .)
    SEMI_COLON      reduce using rule 103 (primaryexp -> array .)
    COMMA           reduce using rule 103 (primaryexp -> array .)
    $end            reduce using rule 103 (primaryexp -> array .)
    RBRACE          reduce using rule 103 (primaryexp -> array .)
    RPAREN          reduce using rule 103 (primaryexp -> array .)
    RSPAREN         reduce using rule 103 (primaryexp -> array .)
    TO              reduce using rule 103 (primaryexp -> array .)
    STEP            reduce using rule 103 (primaryexp -> array .)
    DO              reduce using rule 103 (primaryexp -> array .)
    COLON           reduce using rule 103 (primaryexp -> array .)


state 40

    (109) primaryexp -> LPAREN . primaryexp RPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 113
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 41

    (24) switchstatement -> SWITCH . LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE

    LPAREN          shift and go to state 114


state 42

    (110) bracedexp -> LBRACE . new_scope code RBRACE
    (111) bracedexp -> LBRACE . RBRACE
    (112) new_scope -> .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 116
    NULAR_FNC       reduce using rule 112 (new_scope -> .)
    UNARY_FNC       reduce using rule 112 (new_scope -> .)
    PLUS            reduce using rule 112 (new_scope -> .)
    MINUS           reduce using rule 112 (new_scope -> .)
    NOT             reduce using rule 112 (new_scope -> .)
    SWITCH          reduce using rule 112 (new_scope -> .)
    PRIVATE         reduce using rule 112 (new_scope -> .)
    PRIVATE_ID      reduce using rule 112 (new_scope -> .)
    GLOBAL_ID       reduce using rule 112 (new_scope -> .)
    LPAREN          reduce using rule 112 (new_scope -> .)
    NAMESPACE       reduce using rule 112 (new_scope -> .)
    PARAM           reduce using rule 112 (new_scope -> .)
    PARAMS          reduce using rule 112 (new_scope -> .)
    IF              reduce using rule 112 (new_scope -> .)
    WHILE           reduce using rule 112 (new_scope -> .)
    FOR             reduce using rule 112 (new_scope -> .)
    LBRACE          reduce using rule 112 (new_scope -> .)
    NUMBER_REAL     reduce using rule 112 (new_scope -> .)
    NUMBER_EXP      reduce using rule 112 (new_scope -> .)
    NUMBER_HEX      reduce using rule 112 (new_scope -> .)
    LSPAREN         reduce using rule 112 (new_scope -> .)
    STRING_SINGLE   reduce using rule 112 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 112 (new_scope -> .)
    WITH            reduce using rule 112 (new_scope -> .)

  ! RBRACE          [ reduce using rule 112 (new_scope -> .) ]

    new_scope                      shift and go to state 115

state 43

    (85) definition -> PRIVATE . PRIVATE_ID
    (86) definition -> PRIVATE . string
    (84) arraydefinition -> PRIVATE . stringarray
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (117) stringarray -> . LSPAREN RSPAREN
    (118) stringarray -> . LSPAREN stringarrayelement RSPAREN

    PRIVATE_ID      shift and go to state 117
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LSPAREN         shift and go to state 120

    string                         shift and go to state 118
    stringarray                    shift and go to state 119

state 44

    (89) variable -> PRIVATE_ID .
    (87) identifier -> PRIVATE_ID .

    EQUAL           reduce using rule 89 (variable -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 87 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 87 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 87 (identifier -> PRIVATE_ID .)
    BINARY_FNC      reduce using rule 87 (identifier -> PRIVATE_ID .)
    GETVARIABLE     reduce using rule 87 (identifier -> PRIVATE_ID .)
    SETVARIABLE     reduce using rule 87 (identifier -> PRIVATE_ID .)
    PARAM           reduce using rule 87 (identifier -> PRIVATE_ID .)
    PARAMS          reduce using rule 87 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 87 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 87 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 87 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 87 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 87 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 87 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 87 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 87 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 87 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 87 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 87 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 87 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 87 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 87 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 87 (identifier -> PRIVATE_ID .)


state 45

    (106) primaryexp -> string .

    BINARY_FNC      reduce using rule 106 (primaryexp -> string .)
    GETVARIABLE     reduce using rule 106 (primaryexp -> string .)
    SETVARIABLE     reduce using rule 106 (primaryexp -> string .)
    PARAM           reduce using rule 106 (primaryexp -> string .)
    PARAMS          reduce using rule 106 (primaryexp -> string .)
    LT              reduce using rule 106 (primaryexp -> string .)
    GT              reduce using rule 106 (primaryexp -> string .)
    LTE             reduce using rule 106 (primaryexp -> string .)
    GTE             reduce using rule 106 (primaryexp -> string .)
    EQUALITY        reduce using rule 106 (primaryexp -> string .)
    INEQUALITY      reduce using rule 106 (primaryexp -> string .)
    AND             reduce using rule 106 (primaryexp -> string .)
    OR              reduce using rule 106 (primaryexp -> string .)
    PLUS            reduce using rule 106 (primaryexp -> string .)
    MINUS           reduce using rule 106 (primaryexp -> string .)
    TIMES           reduce using rule 106 (primaryexp -> string .)
    DIVIDE          reduce using rule 106 (primaryexp -> string .)
    MOD             reduce using rule 106 (primaryexp -> string .)
    POW             reduce using rule 106 (primaryexp -> string .)
    SEMI_COLON      reduce using rule 106 (primaryexp -> string .)
    COMMA           reduce using rule 106 (primaryexp -> string .)
    $end            reduce using rule 106 (primaryexp -> string .)
    RBRACE          reduce using rule 106 (primaryexp -> string .)
    RPAREN          reduce using rule 106 (primaryexp -> string .)
    RSPAREN         reduce using rule 106 (primaryexp -> string .)
    TO              reduce using rule 106 (primaryexp -> string .)
    STEP            reduce using rule 106 (primaryexp -> string .)
    DO              reduce using rule 106 (primaryexp -> string .)
    COLON           reduce using rule 106 (primaryexp -> string .)


state 46

    (90) variable -> GLOBAL_ID .
    (88) identifier -> GLOBAL_ID .

    EQUAL           reduce using rule 90 (variable -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 88 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 88 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 88 (identifier -> GLOBAL_ID .)
    BINARY_FNC      reduce using rule 88 (identifier -> GLOBAL_ID .)
    GETVARIABLE     reduce using rule 88 (identifier -> GLOBAL_ID .)
    SETVARIABLE     reduce using rule 88 (identifier -> GLOBAL_ID .)
    PARAM           reduce using rule 88 (identifier -> GLOBAL_ID .)
    PARAMS          reduce using rule 88 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 88 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 88 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 88 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 88 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 88 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 88 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 88 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 88 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 88 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 88 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 88 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 88 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 88 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 88 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 88 (identifier -> GLOBAL_ID .)


state 47

    (100) primaryexp -> number .

    BINARY_FNC      reduce using rule 100 (primaryexp -> number .)
    GETVARIABLE     reduce using rule 100 (primaryexp -> number .)
    SETVARIABLE     reduce using rule 100 (primaryexp -> number .)
    PARAM           reduce using rule 100 (primaryexp -> number .)
    PARAMS          reduce using rule 100 (primaryexp -> number .)
    LT              reduce using rule 100 (primaryexp -> number .)
    GT              reduce using rule 100 (primaryexp -> number .)
    LTE             reduce using rule 100 (primaryexp -> number .)
    GTE             reduce using rule 100 (primaryexp -> number .)
    EQUALITY        reduce using rule 100 (primaryexp -> number .)
    INEQUALITY      reduce using rule 100 (primaryexp -> number .)
    AND             reduce using rule 100 (primaryexp -> number .)
    OR              reduce using rule 100 (primaryexp -> number .)
    PLUS            reduce using rule 100 (primaryexp -> number .)
    MINUS           reduce using rule 100 (primaryexp -> number .)
    TIMES           reduce using rule 100 (primaryexp -> number .)
    DIVIDE          reduce using rule 100 (primaryexp -> number .)
    MOD             reduce using rule 100 (primaryexp -> number .)
    POW             reduce using rule 100 (primaryexp -> number .)
    SEMI_COLON      reduce using rule 100 (primaryexp -> number .)
    COMMA           reduce using rule 100 (primaryexp -> number .)
    $end            reduce using rule 100 (primaryexp -> number .)
    RBRACE          reduce using rule 100 (primaryexp -> number .)
    RPAREN          reduce using rule 100 (primaryexp -> number .)
    RSPAREN         reduce using rule 100 (primaryexp -> number .)
    TO              reduce using rule 100 (primaryexp -> number .)
    STEP            reduce using rule 100 (primaryexp -> number .)
    DO              reduce using rule 100 (primaryexp -> number .)
    COLON           reduce using rule 100 (primaryexp -> number .)


state 48

    (102) primaryexp -> helpertype .

    BINARY_FNC      reduce using rule 102 (primaryexp -> helpertype .)
    GETVARIABLE     reduce using rule 102 (primaryexp -> helpertype .)
    SETVARIABLE     reduce using rule 102 (primaryexp -> helpertype .)
    PARAM           reduce using rule 102 (primaryexp -> helpertype .)
    PARAMS          reduce using rule 102 (primaryexp -> helpertype .)
    LT              reduce using rule 102 (primaryexp -> helpertype .)
    GT              reduce using rule 102 (primaryexp -> helpertype .)
    LTE             reduce using rule 102 (primaryexp -> helpertype .)
    GTE             reduce using rule 102 (primaryexp -> helpertype .)
    EQUALITY        reduce using rule 102 (primaryexp -> helpertype .)
    INEQUALITY      reduce using rule 102 (primaryexp -> helpertype .)
    AND             reduce using rule 102 (primaryexp -> helpertype .)
    OR              reduce using rule 102 (primaryexp -> helpertype .)
    PLUS            reduce using rule 102 (primaryexp -> helpertype .)
    MINUS           reduce using rule 102 (primaryexp -> helpertype .)
    TIMES           reduce using rule 102 (primaryexp -> helpertype .)
    DIVIDE          reduce using rule 102 (primaryexp -> helpertype .)
    MOD             reduce using rule 102 (primaryexp -> helpertype .)
    POW             reduce using rule 102 (primaryexp -> helpertype .)
    SEMI_COLON      reduce using rule 102 (primaryexp -> helpertype .)
    COMMA           reduce using rule 102 (primaryexp -> helpertype .)
    $end            reduce using rule 102 (primaryexp -> helpertype .)
    RBRACE          reduce using rule 102 (primaryexp -> helpertype .)
    RPAREN          reduce using rule 102 (primaryexp -> helpertype .)
    RSPAREN         reduce using rule 102 (primaryexp -> helpertype .)
    TO              reduce using rule 102 (primaryexp -> helpertype .)
    STEP            reduce using rule 102 (primaryexp -> helpertype .)
    DO              reduce using rule 102 (primaryexp -> helpertype .)
    COLON           reduce using rule 102 (primaryexp -> helpertype .)


state 49

    (48) getvariable_ns -> NAMESPACE . GETVARIABLE string
    (49) getvariable_ns -> NAMESPACE . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> NAMESPACE . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> NAMESPACE . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    GETVARIABLE     shift and go to state 121
    SETVARIABLE     shift and go to state 122


state 50

    (113) array -> LSPAREN . RSPAREN
    (114) array -> LSPAREN . arrayelement RSPAREN
    (115) arrayelement -> . primaryexp
    (116) arrayelement -> . primaryexp COMMA arrayelement
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    RSPAREN         shift and go to state 123
    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    arrayelement                   shift and go to state 124
    primaryexp                     shift and go to state 125
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 51

    (56) param_unary -> PARAM . LSPAREN number RSPAREN
    (57) param_unary -> PARAM . LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> PARAM . LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN

    LSPAREN         shift and go to state 126


state 52

    (66) params_unary -> PARAMS . params_array
    (68) params_array -> . LSPAREN RSPAREN
    (69) params_array -> . LSPAREN params_element RSPAREN

    LSPAREN         shift and go to state 128

    params_array                   shift and go to state 127

state 53

    (78) vardefinition -> arraydefinition .

    SEMI_COLON      reduce using rule 78 (vardefinition -> arraydefinition .)
    COMMA           reduce using rule 78 (vardefinition -> arraydefinition .)
    $end            reduce using rule 78 (vardefinition -> arraydefinition .)
    BINARY_FNC      reduce using rule 78 (vardefinition -> arraydefinition .)
    GETVARIABLE     reduce using rule 78 (vardefinition -> arraydefinition .)
    SETVARIABLE     reduce using rule 78 (vardefinition -> arraydefinition .)
    PARAM           reduce using rule 78 (vardefinition -> arraydefinition .)
    PARAMS          reduce using rule 78 (vardefinition -> arraydefinition .)
    LT              reduce using rule 78 (vardefinition -> arraydefinition .)
    GT              reduce using rule 78 (vardefinition -> arraydefinition .)
    LTE             reduce using rule 78 (vardefinition -> arraydefinition .)
    GTE             reduce using rule 78 (vardefinition -> arraydefinition .)
    EQUALITY        reduce using rule 78 (vardefinition -> arraydefinition .)
    INEQUALITY      reduce using rule 78 (vardefinition -> arraydefinition .)
    AND             reduce using rule 78 (vardefinition -> arraydefinition .)
    OR              reduce using rule 78 (vardefinition -> arraydefinition .)
    PLUS            reduce using rule 78 (vardefinition -> arraydefinition .)
    MINUS           reduce using rule 78 (vardefinition -> arraydefinition .)
    TIMES           reduce using rule 78 (vardefinition -> arraydefinition .)
    DIVIDE          reduce using rule 78 (vardefinition -> arraydefinition .)
    MOD             reduce using rule 78 (vardefinition -> arraydefinition .)
    POW             reduce using rule 78 (vardefinition -> arraydefinition .)
    RBRACE          reduce using rule 78 (vardefinition -> arraydefinition .)
    RPAREN          reduce using rule 78 (vardefinition -> arraydefinition .)
    RSPAREN         reduce using rule 78 (vardefinition -> arraydefinition .)
    TO              reduce using rule 78 (vardefinition -> arraydefinition .)
    STEP            reduce using rule 78 (vardefinition -> arraydefinition .)
    DO              reduce using rule 78 (vardefinition -> arraydefinition .)
    COLON           reduce using rule 78 (vardefinition -> arraydefinition .)


state 54

    (28) iftype -> IF . forloop_condition
    (29) iftype -> IF . LPAREN primaryexp RPAREN
    (45) forloop_condition -> . LBRACE booleanexp RBRACE
    (46) forloop_condition -> . identifier
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID

    LPAREN          shift and go to state 130
    LBRACE          shift and go to state 131
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98

    forloop_condition              shift and go to state 129
    identifier                     shift and go to state 132

state 55

    (36) whiletype -> WHILE . forloop_condition
    (45) forloop_condition -> . LBRACE booleanexp RBRACE
    (46) forloop_condition -> . identifier
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 131
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98

    forloop_condition              shift and go to state 133
    identifier                     shift and go to state 132

state 56

    (41) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> FOR . new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (112) new_scope -> .

    LSPAREN         reduce using rule 112 (new_scope -> .)
    STRING_SINGLE   reduce using rule 112 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 112 (new_scope -> .)

    new_scope                      shift and go to state 134

state 57

    (34) withstatementinit -> withtype . DO
    (20) helpertype -> withtype .

    DO              shift and go to state 135
    BINARY_FNC      reduce using rule 20 (helpertype -> withtype .)
    GETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    SETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    PARAM           reduce using rule 20 (helpertype -> withtype .)
    PARAMS          reduce using rule 20 (helpertype -> withtype .)
    LT              reduce using rule 20 (helpertype -> withtype .)
    GT              reduce using rule 20 (helpertype -> withtype .)
    LTE             reduce using rule 20 (helpertype -> withtype .)
    GTE             reduce using rule 20 (helpertype -> withtype .)
    EQUALITY        reduce using rule 20 (helpertype -> withtype .)
    INEQUALITY      reduce using rule 20 (helpertype -> withtype .)
    AND             reduce using rule 20 (helpertype -> withtype .)
    OR              reduce using rule 20 (helpertype -> withtype .)
    PLUS            reduce using rule 20 (helpertype -> withtype .)
    MINUS           reduce using rule 20 (helpertype -> withtype .)
    TIMES           reduce using rule 20 (helpertype -> withtype .)
    DIVIDE          reduce using rule 20 (helpertype -> withtype .)
    MOD             reduce using rule 20 (helpertype -> withtype .)
    POW             reduce using rule 20 (helpertype -> withtype .)


state 58

    (149) number -> NUMBER_REAL .

    BINARY_FNC      reduce using rule 149 (number -> NUMBER_REAL .)
    GETVARIABLE     reduce using rule 149 (number -> NUMBER_REAL .)
    SETVARIABLE     reduce using rule 149 (number -> NUMBER_REAL .)
    PARAM           reduce using rule 149 (number -> NUMBER_REAL .)
    PARAMS          reduce using rule 149 (number -> NUMBER_REAL .)
    LT              reduce using rule 149 (number -> NUMBER_REAL .)
    GT              reduce using rule 149 (number -> NUMBER_REAL .)
    LTE             reduce using rule 149 (number -> NUMBER_REAL .)
    GTE             reduce using rule 149 (number -> NUMBER_REAL .)
    EQUALITY        reduce using rule 149 (number -> NUMBER_REAL .)
    INEQUALITY      reduce using rule 149 (number -> NUMBER_REAL .)
    AND             reduce using rule 149 (number -> NUMBER_REAL .)
    OR              reduce using rule 149 (number -> NUMBER_REAL .)
    PLUS            reduce using rule 149 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 149 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 149 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 149 (number -> NUMBER_REAL .)
    MOD             reduce using rule 149 (number -> NUMBER_REAL .)
    POW             reduce using rule 149 (number -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 149 (number -> NUMBER_REAL .)
    COMMA           reduce using rule 149 (number -> NUMBER_REAL .)
    $end            reduce using rule 149 (number -> NUMBER_REAL .)
    RBRACE          reduce using rule 149 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 149 (number -> NUMBER_REAL .)
    RSPAREN         reduce using rule 149 (number -> NUMBER_REAL .)
    TO              reduce using rule 149 (number -> NUMBER_REAL .)
    STEP            reduce using rule 149 (number -> NUMBER_REAL .)
    DO              reduce using rule 149 (number -> NUMBER_REAL .)
    COLON           reduce using rule 149 (number -> NUMBER_REAL .)


state 59

    (150) number -> NUMBER_EXP .

    BINARY_FNC      reduce using rule 150 (number -> NUMBER_EXP .)
    GETVARIABLE     reduce using rule 150 (number -> NUMBER_EXP .)
    SETVARIABLE     reduce using rule 150 (number -> NUMBER_EXP .)
    PARAM           reduce using rule 150 (number -> NUMBER_EXP .)
    PARAMS          reduce using rule 150 (number -> NUMBER_EXP .)
    LT              reduce using rule 150 (number -> NUMBER_EXP .)
    GT              reduce using rule 150 (number -> NUMBER_EXP .)
    LTE             reduce using rule 150 (number -> NUMBER_EXP .)
    GTE             reduce using rule 150 (number -> NUMBER_EXP .)
    EQUALITY        reduce using rule 150 (number -> NUMBER_EXP .)
    INEQUALITY      reduce using rule 150 (number -> NUMBER_EXP .)
    AND             reduce using rule 150 (number -> NUMBER_EXP .)
    OR              reduce using rule 150 (number -> NUMBER_EXP .)
    PLUS            reduce using rule 150 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 150 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 150 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 150 (number -> NUMBER_EXP .)
    MOD             reduce using rule 150 (number -> NUMBER_EXP .)
    POW             reduce using rule 150 (number -> NUMBER_EXP .)
    SEMI_COLON      reduce using rule 150 (number -> NUMBER_EXP .)
    COMMA           reduce using rule 150 (number -> NUMBER_EXP .)
    $end            reduce using rule 150 (number -> NUMBER_EXP .)
    RBRACE          reduce using rule 150 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 150 (number -> NUMBER_EXP .)
    RSPAREN         reduce using rule 150 (number -> NUMBER_EXP .)
    TO              reduce using rule 150 (number -> NUMBER_EXP .)
    STEP            reduce using rule 150 (number -> NUMBER_EXP .)
    DO              reduce using rule 150 (number -> NUMBER_EXP .)
    COLON           reduce using rule 150 (number -> NUMBER_EXP .)


state 60

    (151) number -> NUMBER_HEX .

    BINARY_FNC      reduce using rule 151 (number -> NUMBER_HEX .)
    GETVARIABLE     reduce using rule 151 (number -> NUMBER_HEX .)
    SETVARIABLE     reduce using rule 151 (number -> NUMBER_HEX .)
    PARAM           reduce using rule 151 (number -> NUMBER_HEX .)
    PARAMS          reduce using rule 151 (number -> NUMBER_HEX .)
    LT              reduce using rule 151 (number -> NUMBER_HEX .)
    GT              reduce using rule 151 (number -> NUMBER_HEX .)
    LTE             reduce using rule 151 (number -> NUMBER_HEX .)
    GTE             reduce using rule 151 (number -> NUMBER_HEX .)
    EQUALITY        reduce using rule 151 (number -> NUMBER_HEX .)
    INEQUALITY      reduce using rule 151 (number -> NUMBER_HEX .)
    AND             reduce using rule 151 (number -> NUMBER_HEX .)
    OR              reduce using rule 151 (number -> NUMBER_HEX .)
    PLUS            reduce using rule 151 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 151 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 151 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 151 (number -> NUMBER_HEX .)
    MOD             reduce using rule 151 (number -> NUMBER_HEX .)
    POW             reduce using rule 151 (number -> NUMBER_HEX .)
    SEMI_COLON      reduce using rule 151 (number -> NUMBER_HEX .)
    COMMA           reduce using rule 151 (number -> NUMBER_HEX .)
    $end            reduce using rule 151 (number -> NUMBER_HEX .)
    RBRACE          reduce using rule 151 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 151 (number -> NUMBER_HEX .)
    RSPAREN         reduce using rule 151 (number -> NUMBER_HEX .)
    TO              reduce using rule 151 (number -> NUMBER_HEX .)
    STEP            reduce using rule 151 (number -> NUMBER_HEX .)
    DO              reduce using rule 151 (number -> NUMBER_HEX .)
    COLON           reduce using rule 151 (number -> NUMBER_HEX .)


state 61

    (152) string -> STRING_SINGLE .

    BINARY_FNC      reduce using rule 152 (string -> STRING_SINGLE .)
    GETVARIABLE     reduce using rule 152 (string -> STRING_SINGLE .)
    SETVARIABLE     reduce using rule 152 (string -> STRING_SINGLE .)
    PARAM           reduce using rule 152 (string -> STRING_SINGLE .)
    PARAMS          reduce using rule 152 (string -> STRING_SINGLE .)
    LT              reduce using rule 152 (string -> STRING_SINGLE .)
    GT              reduce using rule 152 (string -> STRING_SINGLE .)
    LTE             reduce using rule 152 (string -> STRING_SINGLE .)
    GTE             reduce using rule 152 (string -> STRING_SINGLE .)
    EQUALITY        reduce using rule 152 (string -> STRING_SINGLE .)
    INEQUALITY      reduce using rule 152 (string -> STRING_SINGLE .)
    AND             reduce using rule 152 (string -> STRING_SINGLE .)
    OR              reduce using rule 152 (string -> STRING_SINGLE .)
    PLUS            reduce using rule 152 (string -> STRING_SINGLE .)
    MINUS           reduce using rule 152 (string -> STRING_SINGLE .)
    TIMES           reduce using rule 152 (string -> STRING_SINGLE .)
    DIVIDE          reduce using rule 152 (string -> STRING_SINGLE .)
    MOD             reduce using rule 152 (string -> STRING_SINGLE .)
    POW             reduce using rule 152 (string -> STRING_SINGLE .)
    SEMI_COLON      reduce using rule 152 (string -> STRING_SINGLE .)
    COMMA           reduce using rule 152 (string -> STRING_SINGLE .)
    $end            reduce using rule 152 (string -> STRING_SINGLE .)
    RBRACE          reduce using rule 152 (string -> STRING_SINGLE .)
    RPAREN          reduce using rule 152 (string -> STRING_SINGLE .)
    RSPAREN         reduce using rule 152 (string -> STRING_SINGLE .)
    TO              reduce using rule 152 (string -> STRING_SINGLE .)
    STEP            reduce using rule 152 (string -> STRING_SINGLE .)
    DO              reduce using rule 152 (string -> STRING_SINGLE .)
    COLON           reduce using rule 152 (string -> STRING_SINGLE .)
    EQUAL           reduce using rule 152 (string -> STRING_SINGLE .)
    FROM            reduce using rule 152 (string -> STRING_SINGLE .)


state 62

    (153) string -> STRING_DOUBLE .

    BINARY_FNC      reduce using rule 153 (string -> STRING_DOUBLE .)
    GETVARIABLE     reduce using rule 153 (string -> STRING_DOUBLE .)
    SETVARIABLE     reduce using rule 153 (string -> STRING_DOUBLE .)
    PARAM           reduce using rule 153 (string -> STRING_DOUBLE .)
    PARAMS          reduce using rule 153 (string -> STRING_DOUBLE .)
    LT              reduce using rule 153 (string -> STRING_DOUBLE .)
    GT              reduce using rule 153 (string -> STRING_DOUBLE .)
    LTE             reduce using rule 153 (string -> STRING_DOUBLE .)
    GTE             reduce using rule 153 (string -> STRING_DOUBLE .)
    EQUALITY        reduce using rule 153 (string -> STRING_DOUBLE .)
    INEQUALITY      reduce using rule 153 (string -> STRING_DOUBLE .)
    AND             reduce using rule 153 (string -> STRING_DOUBLE .)
    OR              reduce using rule 153 (string -> STRING_DOUBLE .)
    PLUS            reduce using rule 153 (string -> STRING_DOUBLE .)
    MINUS           reduce using rule 153 (string -> STRING_DOUBLE .)
    TIMES           reduce using rule 153 (string -> STRING_DOUBLE .)
    DIVIDE          reduce using rule 153 (string -> STRING_DOUBLE .)
    MOD             reduce using rule 153 (string -> STRING_DOUBLE .)
    POW             reduce using rule 153 (string -> STRING_DOUBLE .)
    SEMI_COLON      reduce using rule 153 (string -> STRING_DOUBLE .)
    COMMA           reduce using rule 153 (string -> STRING_DOUBLE .)
    $end            reduce using rule 153 (string -> STRING_DOUBLE .)
    RBRACE          reduce using rule 153 (string -> STRING_DOUBLE .)
    RPAREN          reduce using rule 153 (string -> STRING_DOUBLE .)
    RSPAREN         reduce using rule 153 (string -> STRING_DOUBLE .)
    TO              reduce using rule 153 (string -> STRING_DOUBLE .)
    STEP            reduce using rule 153 (string -> STRING_DOUBLE .)
    DO              reduce using rule 153 (string -> STRING_DOUBLE .)
    COLON           reduce using rule 153 (string -> STRING_DOUBLE .)
    EQUAL           reduce using rule 153 (string -> STRING_DOUBLE .)
    FROM            reduce using rule 153 (string -> STRING_DOUBLE .)


state 63

    (33) withtype -> WITH . NAMESPACE

    NAMESPACE       shift and go to state 136


state 64

    (3) code -> statement terminator . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (154) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (79) assignment -> . assignment_code code RBRACE
    (80) assignment -> . definition EQUAL primaryexp
    (81) assignment -> . variable EQUAL primaryexp
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (30) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (31) ifstatement -> . iftype THEN bracedexp
    (32) ifstatement -> . iftype EXITWITH bracedexp
    (37) whileloop -> . whiletype DO bracedexp
    (44) forloop -> . fortype DO bracedexp_noscope
    (35) withstatement -> . withstatementinit bracedexp
    (38) foreachloop -> . bracedexp FOREACH array
    (39) foreachloop -> . bracedexp FOREACH primaryexp
    (40) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (82) assignment_code -> . definition EQUAL LBRACE
    (83) assignment_code -> . variable EQUAL LBRACE
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (89) variable -> . PRIVATE_ID
    (90) variable -> . GLOBAL_ID
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (34) withstatementinit -> . withtype DO
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (84) arraydefinition -> . PRIVATE stringarray
    (33) withtype -> . WITH NAMESPACE

    $end            reduce using rule 154 (empty -> .)
    RBRACE          reduce using rule 154 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    SWITCH          shift and go to state 41
    PRIVATE         shift and go to state 43
    PRIVATE_ID      shift and go to state 44
    GLOBAL_ID       shift and go to state 46
    LPAREN          shift and go to state 40
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    LBRACE          shift and go to state 42
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    WITH            shift and go to state 63

    statement                      shift and go to state 3
    code                           shift and go to state 137
    empty                          shift and go to state 2
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    iftype                         shift and go to state 34
    bracedexp                      shift and go to state 35
    whiletype                      shift and go to state 36
    fortype                        shift and go to state 37
    withstatementinit              shift and go to state 38
    array                          shift and go to state 39
    string                         shift and go to state 45
    number                         shift and go to state 47
    helpertype                     shift and go to state 48
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 65

    (9) terminator -> SEMI_COLON .

    NULAR_FNC       reduce using rule 9 (terminator -> SEMI_COLON .)
    UNARY_FNC       reduce using rule 9 (terminator -> SEMI_COLON .)
    PLUS            reduce using rule 9 (terminator -> SEMI_COLON .)
    MINUS           reduce using rule 9 (terminator -> SEMI_COLON .)
    NOT             reduce using rule 9 (terminator -> SEMI_COLON .)
    SWITCH          reduce using rule 9 (terminator -> SEMI_COLON .)
    PRIVATE         reduce using rule 9 (terminator -> SEMI_COLON .)
    PRIVATE_ID      reduce using rule 9 (terminator -> SEMI_COLON .)
    GLOBAL_ID       reduce using rule 9 (terminator -> SEMI_COLON .)
    LPAREN          reduce using rule 9 (terminator -> SEMI_COLON .)
    NAMESPACE       reduce using rule 9 (terminator -> SEMI_COLON .)
    PARAM           reduce using rule 9 (terminator -> SEMI_COLON .)
    PARAMS          reduce using rule 9 (terminator -> SEMI_COLON .)
    IF              reduce using rule 9 (terminator -> SEMI_COLON .)
    WHILE           reduce using rule 9 (terminator -> SEMI_COLON .)
    FOR             reduce using rule 9 (terminator -> SEMI_COLON .)
    LBRACE          reduce using rule 9 (terminator -> SEMI_COLON .)
    NUMBER_REAL     reduce using rule 9 (terminator -> SEMI_COLON .)
    NUMBER_EXP      reduce using rule 9 (terminator -> SEMI_COLON .)
    NUMBER_HEX      reduce using rule 9 (terminator -> SEMI_COLON .)
    LSPAREN         reduce using rule 9 (terminator -> SEMI_COLON .)
    STRING_SINGLE   reduce using rule 9 (terminator -> SEMI_COLON .)
    STRING_DOUBLE   reduce using rule 9 (terminator -> SEMI_COLON .)
    WITH            reduce using rule 9 (terminator -> SEMI_COLON .)
    $end            reduce using rule 9 (terminator -> SEMI_COLON .)
    RBRACE          reduce using rule 9 (terminator -> SEMI_COLON .)
    CASE            reduce using rule 9 (terminator -> SEMI_COLON .)
    DEFAULT         reduce using rule 9 (terminator -> SEMI_COLON .)


state 66

    (10) terminator -> COMMA .

    NULAR_FNC       reduce using rule 10 (terminator -> COMMA .)
    UNARY_FNC       reduce using rule 10 (terminator -> COMMA .)
    PLUS            reduce using rule 10 (terminator -> COMMA .)
    MINUS           reduce using rule 10 (terminator -> COMMA .)
    NOT             reduce using rule 10 (terminator -> COMMA .)
    SWITCH          reduce using rule 10 (terminator -> COMMA .)
    PRIVATE         reduce using rule 10 (terminator -> COMMA .)
    PRIVATE_ID      reduce using rule 10 (terminator -> COMMA .)
    GLOBAL_ID       reduce using rule 10 (terminator -> COMMA .)
    LPAREN          reduce using rule 10 (terminator -> COMMA .)
    NAMESPACE       reduce using rule 10 (terminator -> COMMA .)
    PARAM           reduce using rule 10 (terminator -> COMMA .)
    PARAMS          reduce using rule 10 (terminator -> COMMA .)
    IF              reduce using rule 10 (terminator -> COMMA .)
    WHILE           reduce using rule 10 (terminator -> COMMA .)
    FOR             reduce using rule 10 (terminator -> COMMA .)
    LBRACE          reduce using rule 10 (terminator -> COMMA .)
    NUMBER_REAL     reduce using rule 10 (terminator -> COMMA .)
    NUMBER_EXP      reduce using rule 10 (terminator -> COMMA .)
    NUMBER_HEX      reduce using rule 10 (terminator -> COMMA .)
    LSPAREN         reduce using rule 10 (terminator -> COMMA .)
    STRING_SINGLE   reduce using rule 10 (terminator -> COMMA .)
    STRING_DOUBLE   reduce using rule 10 (terminator -> COMMA .)
    WITH            reduce using rule 10 (terminator -> COMMA .)
    $end            reduce using rule 10 (terminator -> COMMA .)
    RBRACE          reduce using rule 10 (terminator -> COMMA .)
    CASE            reduce using rule 10 (terminator -> COMMA .)
    DEFAULT         reduce using rule 10 (terminator -> COMMA .)


state 67

    (79) assignment -> assignment_code code . RBRACE

    RBRACE          shift and go to state 138


state 68

    (80) assignment -> definition EQUAL . primaryexp
    (82) assignment_code -> definition EQUAL . LBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 140
    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    definition                     shift and go to state 103
    primaryexp                     shift and go to state 139
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    arraydefinition                shift and go to state 53

state 69

    (91) binaryexp -> primaryexp BINARY_FNC . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 141
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 70

    (92) binaryexp -> primaryexp comparisonoperator . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 142
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 71

    (93) binaryexp -> primaryexp mathoperator . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 143
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 72

    (50) getvariable_any -> primaryexp GETVARIABLE . string
    (51) getvariable_any -> primaryexp GETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 145
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 144

state 73

    (54) setvariable_any -> primaryexp SETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp SETVARIABLE . LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    LSPAREN         shift and go to state 146


state 74

    (61) param_binary -> primaryexp PARAM . LSPAREN number RSPAREN
    (62) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM . LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN

    LSPAREN         shift and go to state 147


state 75

    (67) params_binary -> primaryexp PARAMS . params_array
    (68) params_array -> . LSPAREN RSPAREN
    (69) params_array -> . LSPAREN params_element RSPAREN

    LSPAREN         shift and go to state 128

    params_array                   shift and go to state 148

state 76

    (130) comparisonoperator -> LT .

    LPAREN          reduce using rule 130 (comparisonoperator -> LT .)
    NUMBER_REAL     reduce using rule 130 (comparisonoperator -> LT .)
    NUMBER_EXP      reduce using rule 130 (comparisonoperator -> LT .)
    NUMBER_HEX      reduce using rule 130 (comparisonoperator -> LT .)
    PRIVATE_ID      reduce using rule 130 (comparisonoperator -> LT .)
    GLOBAL_ID       reduce using rule 130 (comparisonoperator -> LT .)
    LSPAREN         reduce using rule 130 (comparisonoperator -> LT .)
    UNARY_FNC       reduce using rule 130 (comparisonoperator -> LT .)
    PLUS            reduce using rule 130 (comparisonoperator -> LT .)
    MINUS           reduce using rule 130 (comparisonoperator -> LT .)
    NOT             reduce using rule 130 (comparisonoperator -> LT .)
    NULAR_FNC       reduce using rule 130 (comparisonoperator -> LT .)
    STRING_SINGLE   reduce using rule 130 (comparisonoperator -> LT .)
    STRING_DOUBLE   reduce using rule 130 (comparisonoperator -> LT .)
    LBRACE          reduce using rule 130 (comparisonoperator -> LT .)
    IF              reduce using rule 130 (comparisonoperator -> LT .)
    WHILE           reduce using rule 130 (comparisonoperator -> LT .)
    FOR             reduce using rule 130 (comparisonoperator -> LT .)
    WITH            reduce using rule 130 (comparisonoperator -> LT .)
    PARAM           reduce using rule 130 (comparisonoperator -> LT .)
    PARAMS          reduce using rule 130 (comparisonoperator -> LT .)
    NAMESPACE       reduce using rule 130 (comparisonoperator -> LT .)
    PRIVATE         reduce using rule 130 (comparisonoperator -> LT .)


state 77

    (131) comparisonoperator -> GT .

    LPAREN          reduce using rule 131 (comparisonoperator -> GT .)
    NUMBER_REAL     reduce using rule 131 (comparisonoperator -> GT .)
    NUMBER_EXP      reduce using rule 131 (comparisonoperator -> GT .)
    NUMBER_HEX      reduce using rule 131 (comparisonoperator -> GT .)
    PRIVATE_ID      reduce using rule 131 (comparisonoperator -> GT .)
    GLOBAL_ID       reduce using rule 131 (comparisonoperator -> GT .)
    LSPAREN         reduce using rule 131 (comparisonoperator -> GT .)
    UNARY_FNC       reduce using rule 131 (comparisonoperator -> GT .)
    PLUS            reduce using rule 131 (comparisonoperator -> GT .)
    MINUS           reduce using rule 131 (comparisonoperator -> GT .)
    NOT             reduce using rule 131 (comparisonoperator -> GT .)
    NULAR_FNC       reduce using rule 131 (comparisonoperator -> GT .)
    STRING_SINGLE   reduce using rule 131 (comparisonoperator -> GT .)
    STRING_DOUBLE   reduce using rule 131 (comparisonoperator -> GT .)
    LBRACE          reduce using rule 131 (comparisonoperator -> GT .)
    IF              reduce using rule 131 (comparisonoperator -> GT .)
    WHILE           reduce using rule 131 (comparisonoperator -> GT .)
    FOR             reduce using rule 131 (comparisonoperator -> GT .)
    WITH            reduce using rule 131 (comparisonoperator -> GT .)
    PARAM           reduce using rule 131 (comparisonoperator -> GT .)
    PARAMS          reduce using rule 131 (comparisonoperator -> GT .)
    NAMESPACE       reduce using rule 131 (comparisonoperator -> GT .)
    PRIVATE         reduce using rule 131 (comparisonoperator -> GT .)


state 78

    (132) comparisonoperator -> LTE .

    LPAREN          reduce using rule 132 (comparisonoperator -> LTE .)
    NUMBER_REAL     reduce using rule 132 (comparisonoperator -> LTE .)
    NUMBER_EXP      reduce using rule 132 (comparisonoperator -> LTE .)
    NUMBER_HEX      reduce using rule 132 (comparisonoperator -> LTE .)
    PRIVATE_ID      reduce using rule 132 (comparisonoperator -> LTE .)
    GLOBAL_ID       reduce using rule 132 (comparisonoperator -> LTE .)
    LSPAREN         reduce using rule 132 (comparisonoperator -> LTE .)
    UNARY_FNC       reduce using rule 132 (comparisonoperator -> LTE .)
    PLUS            reduce using rule 132 (comparisonoperator -> LTE .)
    MINUS           reduce using rule 132 (comparisonoperator -> LTE .)
    NOT             reduce using rule 132 (comparisonoperator -> LTE .)
    NULAR_FNC       reduce using rule 132 (comparisonoperator -> LTE .)
    STRING_SINGLE   reduce using rule 132 (comparisonoperator -> LTE .)
    STRING_DOUBLE   reduce using rule 132 (comparisonoperator -> LTE .)
    LBRACE          reduce using rule 132 (comparisonoperator -> LTE .)
    IF              reduce using rule 132 (comparisonoperator -> LTE .)
    WHILE           reduce using rule 132 (comparisonoperator -> LTE .)
    FOR             reduce using rule 132 (comparisonoperator -> LTE .)
    WITH            reduce using rule 132 (comparisonoperator -> LTE .)
    PARAM           reduce using rule 132 (comparisonoperator -> LTE .)
    PARAMS          reduce using rule 132 (comparisonoperator -> LTE .)
    NAMESPACE       reduce using rule 132 (comparisonoperator -> LTE .)
    PRIVATE         reduce using rule 132 (comparisonoperator -> LTE .)


state 79

    (133) comparisonoperator -> GTE .

    LPAREN          reduce using rule 133 (comparisonoperator -> GTE .)
    NUMBER_REAL     reduce using rule 133 (comparisonoperator -> GTE .)
    NUMBER_EXP      reduce using rule 133 (comparisonoperator -> GTE .)
    NUMBER_HEX      reduce using rule 133 (comparisonoperator -> GTE .)
    PRIVATE_ID      reduce using rule 133 (comparisonoperator -> GTE .)
    GLOBAL_ID       reduce using rule 133 (comparisonoperator -> GTE .)
    LSPAREN         reduce using rule 133 (comparisonoperator -> GTE .)
    UNARY_FNC       reduce using rule 133 (comparisonoperator -> GTE .)
    PLUS            reduce using rule 133 (comparisonoperator -> GTE .)
    MINUS           reduce using rule 133 (comparisonoperator -> GTE .)
    NOT             reduce using rule 133 (comparisonoperator -> GTE .)
    NULAR_FNC       reduce using rule 133 (comparisonoperator -> GTE .)
    STRING_SINGLE   reduce using rule 133 (comparisonoperator -> GTE .)
    STRING_DOUBLE   reduce using rule 133 (comparisonoperator -> GTE .)
    LBRACE          reduce using rule 133 (comparisonoperator -> GTE .)
    IF              reduce using rule 133 (comparisonoperator -> GTE .)
    WHILE           reduce using rule 133 (comparisonoperator -> GTE .)
    FOR             reduce using rule 133 (comparisonoperator -> GTE .)
    WITH            reduce using rule 133 (comparisonoperator -> GTE .)
    PARAM           reduce using rule 133 (comparisonoperator -> GTE .)
    PARAMS          reduce using rule 133 (comparisonoperator -> GTE .)
    NAMESPACE       reduce using rule 133 (comparisonoperator -> GTE .)
    PRIVATE         reduce using rule 133 (comparisonoperator -> GTE .)


state 80

    (134) comparisonoperator -> EQUALITY .

    LPAREN          reduce using rule 134 (comparisonoperator -> EQUALITY .)
    NUMBER_REAL     reduce using rule 134 (comparisonoperator -> EQUALITY .)
    NUMBER_EXP      reduce using rule 134 (comparisonoperator -> EQUALITY .)
    NUMBER_HEX      reduce using rule 134 (comparisonoperator -> EQUALITY .)
    PRIVATE_ID      reduce using rule 134 (comparisonoperator -> EQUALITY .)
    GLOBAL_ID       reduce using rule 134 (comparisonoperator -> EQUALITY .)
    LSPAREN         reduce using rule 134 (comparisonoperator -> EQUALITY .)
    UNARY_FNC       reduce using rule 134 (comparisonoperator -> EQUALITY .)
    PLUS            reduce using rule 134 (comparisonoperator -> EQUALITY .)
    MINUS           reduce using rule 134 (comparisonoperator -> EQUALITY .)
    NOT             reduce using rule 134 (comparisonoperator -> EQUALITY .)
    NULAR_FNC       reduce using rule 134 (comparisonoperator -> EQUALITY .)
    STRING_SINGLE   reduce using rule 134 (comparisonoperator -> EQUALITY .)
    STRING_DOUBLE   reduce using rule 134 (comparisonoperator -> EQUALITY .)
    LBRACE          reduce using rule 134 (comparisonoperator -> EQUALITY .)
    IF              reduce using rule 134 (comparisonoperator -> EQUALITY .)
    WHILE           reduce using rule 134 (comparisonoperator -> EQUALITY .)
    FOR             reduce using rule 134 (comparisonoperator -> EQUALITY .)
    WITH            reduce using rule 134 (comparisonoperator -> EQUALITY .)
    PARAM           reduce using rule 134 (comparisonoperator -> EQUALITY .)
    PARAMS          reduce using rule 134 (comparisonoperator -> EQUALITY .)
    NAMESPACE       reduce using rule 134 (comparisonoperator -> EQUALITY .)
    PRIVATE         reduce using rule 134 (comparisonoperator -> EQUALITY .)


state 81

    (135) comparisonoperator -> INEQUALITY .

    LPAREN          reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    NUMBER_REAL     reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    NUMBER_EXP      reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    NUMBER_HEX      reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    PRIVATE_ID      reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    GLOBAL_ID       reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    LSPAREN         reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    UNARY_FNC       reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    PLUS            reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    MINUS           reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    NOT             reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    NULAR_FNC       reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    STRING_SINGLE   reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    STRING_DOUBLE   reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    LBRACE          reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    IF              reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    WHILE           reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    FOR             reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    WITH            reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    PARAM           reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    PARAMS          reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    NAMESPACE       reduce using rule 135 (comparisonoperator -> INEQUALITY .)
    PRIVATE         reduce using rule 135 (comparisonoperator -> INEQUALITY .)


state 82

    (136) comparisonoperator -> AND .

    LPAREN          reduce using rule 136 (comparisonoperator -> AND .)
    NUMBER_REAL     reduce using rule 136 (comparisonoperator -> AND .)
    NUMBER_EXP      reduce using rule 136 (comparisonoperator -> AND .)
    NUMBER_HEX      reduce using rule 136 (comparisonoperator -> AND .)
    PRIVATE_ID      reduce using rule 136 (comparisonoperator -> AND .)
    GLOBAL_ID       reduce using rule 136 (comparisonoperator -> AND .)
    LSPAREN         reduce using rule 136 (comparisonoperator -> AND .)
    UNARY_FNC       reduce using rule 136 (comparisonoperator -> AND .)
    PLUS            reduce using rule 136 (comparisonoperator -> AND .)
    MINUS           reduce using rule 136 (comparisonoperator -> AND .)
    NOT             reduce using rule 136 (comparisonoperator -> AND .)
    NULAR_FNC       reduce using rule 136 (comparisonoperator -> AND .)
    STRING_SINGLE   reduce using rule 136 (comparisonoperator -> AND .)
    STRING_DOUBLE   reduce using rule 136 (comparisonoperator -> AND .)
    LBRACE          reduce using rule 136 (comparisonoperator -> AND .)
    IF              reduce using rule 136 (comparisonoperator -> AND .)
    WHILE           reduce using rule 136 (comparisonoperator -> AND .)
    FOR             reduce using rule 136 (comparisonoperator -> AND .)
    WITH            reduce using rule 136 (comparisonoperator -> AND .)
    PARAM           reduce using rule 136 (comparisonoperator -> AND .)
    PARAMS          reduce using rule 136 (comparisonoperator -> AND .)
    NAMESPACE       reduce using rule 136 (comparisonoperator -> AND .)
    PRIVATE         reduce using rule 136 (comparisonoperator -> AND .)


state 83

    (137) comparisonoperator -> OR .

    LPAREN          reduce using rule 137 (comparisonoperator -> OR .)
    NUMBER_REAL     reduce using rule 137 (comparisonoperator -> OR .)
    NUMBER_EXP      reduce using rule 137 (comparisonoperator -> OR .)
    NUMBER_HEX      reduce using rule 137 (comparisonoperator -> OR .)
    PRIVATE_ID      reduce using rule 137 (comparisonoperator -> OR .)
    GLOBAL_ID       reduce using rule 137 (comparisonoperator -> OR .)
    LSPAREN         reduce using rule 137 (comparisonoperator -> OR .)
    UNARY_FNC       reduce using rule 137 (comparisonoperator -> OR .)
    PLUS            reduce using rule 137 (comparisonoperator -> OR .)
    MINUS           reduce using rule 137 (comparisonoperator -> OR .)
    NOT             reduce using rule 137 (comparisonoperator -> OR .)
    NULAR_FNC       reduce using rule 137 (comparisonoperator -> OR .)
    STRING_SINGLE   reduce using rule 137 (comparisonoperator -> OR .)
    STRING_DOUBLE   reduce using rule 137 (comparisonoperator -> OR .)
    LBRACE          reduce using rule 137 (comparisonoperator -> OR .)
    IF              reduce using rule 137 (comparisonoperator -> OR .)
    WHILE           reduce using rule 137 (comparisonoperator -> OR .)
    FOR             reduce using rule 137 (comparisonoperator -> OR .)
    WITH            reduce using rule 137 (comparisonoperator -> OR .)
    PARAM           reduce using rule 137 (comparisonoperator -> OR .)
    PARAMS          reduce using rule 137 (comparisonoperator -> OR .)
    NAMESPACE       reduce using rule 137 (comparisonoperator -> OR .)
    PRIVATE         reduce using rule 137 (comparisonoperator -> OR .)


state 84

    (138) mathoperator -> PLUS .

    LPAREN          reduce using rule 138 (mathoperator -> PLUS .)
    NUMBER_REAL     reduce using rule 138 (mathoperator -> PLUS .)
    NUMBER_EXP      reduce using rule 138 (mathoperator -> PLUS .)
    NUMBER_HEX      reduce using rule 138 (mathoperator -> PLUS .)
    PRIVATE_ID      reduce using rule 138 (mathoperator -> PLUS .)
    GLOBAL_ID       reduce using rule 138 (mathoperator -> PLUS .)
    LSPAREN         reduce using rule 138 (mathoperator -> PLUS .)
    UNARY_FNC       reduce using rule 138 (mathoperator -> PLUS .)
    PLUS            reduce using rule 138 (mathoperator -> PLUS .)
    MINUS           reduce using rule 138 (mathoperator -> PLUS .)
    NOT             reduce using rule 138 (mathoperator -> PLUS .)
    NULAR_FNC       reduce using rule 138 (mathoperator -> PLUS .)
    STRING_SINGLE   reduce using rule 138 (mathoperator -> PLUS .)
    STRING_DOUBLE   reduce using rule 138 (mathoperator -> PLUS .)
    LBRACE          reduce using rule 138 (mathoperator -> PLUS .)
    IF              reduce using rule 138 (mathoperator -> PLUS .)
    WHILE           reduce using rule 138 (mathoperator -> PLUS .)
    FOR             reduce using rule 138 (mathoperator -> PLUS .)
    WITH            reduce using rule 138 (mathoperator -> PLUS .)
    PARAM           reduce using rule 138 (mathoperator -> PLUS .)
    PARAMS          reduce using rule 138 (mathoperator -> PLUS .)
    NAMESPACE       reduce using rule 138 (mathoperator -> PLUS .)
    PRIVATE         reduce using rule 138 (mathoperator -> PLUS .)


state 85

    (139) mathoperator -> MINUS .

    LPAREN          reduce using rule 139 (mathoperator -> MINUS .)
    NUMBER_REAL     reduce using rule 139 (mathoperator -> MINUS .)
    NUMBER_EXP      reduce using rule 139 (mathoperator -> MINUS .)
    NUMBER_HEX      reduce using rule 139 (mathoperator -> MINUS .)
    PRIVATE_ID      reduce using rule 139 (mathoperator -> MINUS .)
    GLOBAL_ID       reduce using rule 139 (mathoperator -> MINUS .)
    LSPAREN         reduce using rule 139 (mathoperator -> MINUS .)
    UNARY_FNC       reduce using rule 139 (mathoperator -> MINUS .)
    PLUS            reduce using rule 139 (mathoperator -> MINUS .)
    MINUS           reduce using rule 139 (mathoperator -> MINUS .)
    NOT             reduce using rule 139 (mathoperator -> MINUS .)
    NULAR_FNC       reduce using rule 139 (mathoperator -> MINUS .)
    STRING_SINGLE   reduce using rule 139 (mathoperator -> MINUS .)
    STRING_DOUBLE   reduce using rule 139 (mathoperator -> MINUS .)
    LBRACE          reduce using rule 139 (mathoperator -> MINUS .)
    IF              reduce using rule 139 (mathoperator -> MINUS .)
    WHILE           reduce using rule 139 (mathoperator -> MINUS .)
    FOR             reduce using rule 139 (mathoperator -> MINUS .)
    WITH            reduce using rule 139 (mathoperator -> MINUS .)
    PARAM           reduce using rule 139 (mathoperator -> MINUS .)
    PARAMS          reduce using rule 139 (mathoperator -> MINUS .)
    NAMESPACE       reduce using rule 139 (mathoperator -> MINUS .)
    PRIVATE         reduce using rule 139 (mathoperator -> MINUS .)


state 86

    (140) mathoperator -> TIMES .

    LPAREN          reduce using rule 140 (mathoperator -> TIMES .)
    NUMBER_REAL     reduce using rule 140 (mathoperator -> TIMES .)
    NUMBER_EXP      reduce using rule 140 (mathoperator -> TIMES .)
    NUMBER_HEX      reduce using rule 140 (mathoperator -> TIMES .)
    PRIVATE_ID      reduce using rule 140 (mathoperator -> TIMES .)
    GLOBAL_ID       reduce using rule 140 (mathoperator -> TIMES .)
    LSPAREN         reduce using rule 140 (mathoperator -> TIMES .)
    UNARY_FNC       reduce using rule 140 (mathoperator -> TIMES .)
    PLUS            reduce using rule 140 (mathoperator -> TIMES .)
    MINUS           reduce using rule 140 (mathoperator -> TIMES .)
    NOT             reduce using rule 140 (mathoperator -> TIMES .)
    NULAR_FNC       reduce using rule 140 (mathoperator -> TIMES .)
    STRING_SINGLE   reduce using rule 140 (mathoperator -> TIMES .)
    STRING_DOUBLE   reduce using rule 140 (mathoperator -> TIMES .)
    LBRACE          reduce using rule 140 (mathoperator -> TIMES .)
    IF              reduce using rule 140 (mathoperator -> TIMES .)
    WHILE           reduce using rule 140 (mathoperator -> TIMES .)
    FOR             reduce using rule 140 (mathoperator -> TIMES .)
    WITH            reduce using rule 140 (mathoperator -> TIMES .)
    PARAM           reduce using rule 140 (mathoperator -> TIMES .)
    PARAMS          reduce using rule 140 (mathoperator -> TIMES .)
    NAMESPACE       reduce using rule 140 (mathoperator -> TIMES .)
    PRIVATE         reduce using rule 140 (mathoperator -> TIMES .)


state 87

    (141) mathoperator -> DIVIDE .

    LPAREN          reduce using rule 141 (mathoperator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 141 (mathoperator -> DIVIDE .)
    NUMBER_EXP      reduce using rule 141 (mathoperator -> DIVIDE .)
    NUMBER_HEX      reduce using rule 141 (mathoperator -> DIVIDE .)
    PRIVATE_ID      reduce using rule 141 (mathoperator -> DIVIDE .)
    GLOBAL_ID       reduce using rule 141 (mathoperator -> DIVIDE .)
    LSPAREN         reduce using rule 141 (mathoperator -> DIVIDE .)
    UNARY_FNC       reduce using rule 141 (mathoperator -> DIVIDE .)
    PLUS            reduce using rule 141 (mathoperator -> DIVIDE .)
    MINUS           reduce using rule 141 (mathoperator -> DIVIDE .)
    NOT             reduce using rule 141 (mathoperator -> DIVIDE .)
    NULAR_FNC       reduce using rule 141 (mathoperator -> DIVIDE .)
    STRING_SINGLE   reduce using rule 141 (mathoperator -> DIVIDE .)
    STRING_DOUBLE   reduce using rule 141 (mathoperator -> DIVIDE .)
    LBRACE          reduce using rule 141 (mathoperator -> DIVIDE .)
    IF              reduce using rule 141 (mathoperator -> DIVIDE .)
    WHILE           reduce using rule 141 (mathoperator -> DIVIDE .)
    FOR             reduce using rule 141 (mathoperator -> DIVIDE .)
    WITH            reduce using rule 141 (mathoperator -> DIVIDE .)
    PARAM           reduce using rule 141 (mathoperator -> DIVIDE .)
    PARAMS          reduce using rule 141 (mathoperator -> DIVIDE .)
    NAMESPACE       reduce using rule 141 (mathoperator -> DIVIDE .)
    PRIVATE         reduce using rule 141 (mathoperator -> DIVIDE .)


state 88

    (142) mathoperator -> MOD .

    LPAREN          reduce using rule 142 (mathoperator -> MOD .)
    NUMBER_REAL     reduce using rule 142 (mathoperator -> MOD .)
    NUMBER_EXP      reduce using rule 142 (mathoperator -> MOD .)
    NUMBER_HEX      reduce using rule 142 (mathoperator -> MOD .)
    PRIVATE_ID      reduce using rule 142 (mathoperator -> MOD .)
    GLOBAL_ID       reduce using rule 142 (mathoperator -> MOD .)
    LSPAREN         reduce using rule 142 (mathoperator -> MOD .)
    UNARY_FNC       reduce using rule 142 (mathoperator -> MOD .)
    PLUS            reduce using rule 142 (mathoperator -> MOD .)
    MINUS           reduce using rule 142 (mathoperator -> MOD .)
    NOT             reduce using rule 142 (mathoperator -> MOD .)
    NULAR_FNC       reduce using rule 142 (mathoperator -> MOD .)
    STRING_SINGLE   reduce using rule 142 (mathoperator -> MOD .)
    STRING_DOUBLE   reduce using rule 142 (mathoperator -> MOD .)
    LBRACE          reduce using rule 142 (mathoperator -> MOD .)
    IF              reduce using rule 142 (mathoperator -> MOD .)
    WHILE           reduce using rule 142 (mathoperator -> MOD .)
    FOR             reduce using rule 142 (mathoperator -> MOD .)
    WITH            reduce using rule 142 (mathoperator -> MOD .)
    PARAM           reduce using rule 142 (mathoperator -> MOD .)
    PARAMS          reduce using rule 142 (mathoperator -> MOD .)
    NAMESPACE       reduce using rule 142 (mathoperator -> MOD .)
    PRIVATE         reduce using rule 142 (mathoperator -> MOD .)


state 89

    (143) mathoperator -> POW .

    LPAREN          reduce using rule 143 (mathoperator -> POW .)
    NUMBER_REAL     reduce using rule 143 (mathoperator -> POW .)
    NUMBER_EXP      reduce using rule 143 (mathoperator -> POW .)
    NUMBER_HEX      reduce using rule 143 (mathoperator -> POW .)
    PRIVATE_ID      reduce using rule 143 (mathoperator -> POW .)
    GLOBAL_ID       reduce using rule 143 (mathoperator -> POW .)
    LSPAREN         reduce using rule 143 (mathoperator -> POW .)
    UNARY_FNC       reduce using rule 143 (mathoperator -> POW .)
    PLUS            reduce using rule 143 (mathoperator -> POW .)
    MINUS           reduce using rule 143 (mathoperator -> POW .)
    NOT             reduce using rule 143 (mathoperator -> POW .)
    NULAR_FNC       reduce using rule 143 (mathoperator -> POW .)
    STRING_SINGLE   reduce using rule 143 (mathoperator -> POW .)
    STRING_DOUBLE   reduce using rule 143 (mathoperator -> POW .)
    LBRACE          reduce using rule 143 (mathoperator -> POW .)
    IF              reduce using rule 143 (mathoperator -> POW .)
    WHILE           reduce using rule 143 (mathoperator -> POW .)
    FOR             reduce using rule 143 (mathoperator -> POW .)
    WITH            reduce using rule 143 (mathoperator -> POW .)
    PARAM           reduce using rule 143 (mathoperator -> POW .)
    PARAMS          reduce using rule 143 (mathoperator -> POW .)
    NAMESPACE       reduce using rule 143 (mathoperator -> POW .)
    PRIVATE         reduce using rule 143 (mathoperator -> POW .)


state 90

    (81) assignment -> variable EQUAL . primaryexp
    (83) assignment_code -> variable EQUAL . LBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 150
    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 149
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 91

    (123) unaryexp -> UNARY_FNC primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    COMMA           reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    $end            reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    BINARY_FNC      reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    GETVARIABLE     reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    SETVARIABLE     reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    PARAM           reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    PARAMS          reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    LT              reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    GT              reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    LTE             reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    GTE             reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    EQUALITY        reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    INEQUALITY      reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    AND             reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    OR              reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    PLUS            reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    MINUS           reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    TIMES           reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    DIVIDE          reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    MOD             reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    POW             reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    RBRACE          reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    RPAREN          reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    RSPAREN         reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    TO              reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    STEP            reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    DO              reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)
    COLON           reduce using rule 123 (unaryexp -> UNARY_FNC primaryexp .)

  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 86 ]
  ! DIVIDE          [ shift and go to state 87 ]
  ! MOD             [ shift and go to state 88 ]
  ! POW             [ shift and go to state 89 ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 92

    (101) primaryexp -> identifier .
    (122) nularexp -> identifier .

  ! reduce/reduce conflict for BINARY_FNC resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GETVARIABLE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SETVARIABLE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAM resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PARAMS resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for STEP resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 101 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 101 (primaryexp -> identifier .)
    BINARY_FNC      reduce using rule 101 (primaryexp -> identifier .)
    GETVARIABLE     reduce using rule 101 (primaryexp -> identifier .)
    SETVARIABLE     reduce using rule 101 (primaryexp -> identifier .)
    PARAM           reduce using rule 101 (primaryexp -> identifier .)
    PARAMS          reduce using rule 101 (primaryexp -> identifier .)
    LT              reduce using rule 101 (primaryexp -> identifier .)
    GT              reduce using rule 101 (primaryexp -> identifier .)
    LTE             reduce using rule 101 (primaryexp -> identifier .)
    GTE             reduce using rule 101 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 101 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 101 (primaryexp -> identifier .)
    AND             reduce using rule 101 (primaryexp -> identifier .)
    OR              reduce using rule 101 (primaryexp -> identifier .)
    PLUS            reduce using rule 101 (primaryexp -> identifier .)
    MINUS           reduce using rule 101 (primaryexp -> identifier .)
    TIMES           reduce using rule 101 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 101 (primaryexp -> identifier .)
    MOD             reduce using rule 101 (primaryexp -> identifier .)
    POW             reduce using rule 101 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 101 (primaryexp -> identifier .)
    COMMA           reduce using rule 101 (primaryexp -> identifier .)
    $end            reduce using rule 101 (primaryexp -> identifier .)
    RBRACE          reduce using rule 101 (primaryexp -> identifier .)
    RPAREN          reduce using rule 101 (primaryexp -> identifier .)
    RSPAREN         reduce using rule 101 (primaryexp -> identifier .)
    TO              reduce using rule 101 (primaryexp -> identifier .)
    STEP            reduce using rule 101 (primaryexp -> identifier .)
    DO              reduce using rule 101 (primaryexp -> identifier .)
    COLON           reduce using rule 101 (primaryexp -> identifier .)

  ! BINARY_FNC      [ reduce using rule 122 (nularexp -> identifier .) ]
  ! GETVARIABLE     [ reduce using rule 122 (nularexp -> identifier .) ]
  ! SETVARIABLE     [ reduce using rule 122 (nularexp -> identifier .) ]
  ! PARAM           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! PARAMS          [ reduce using rule 122 (nularexp -> identifier .) ]
  ! LT              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! GT              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! LTE             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! GTE             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! EQUALITY        [ reduce using rule 122 (nularexp -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 122 (nularexp -> identifier .) ]
  ! AND             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! OR              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! PLUS            [ reduce using rule 122 (nularexp -> identifier .) ]
  ! MINUS           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! TIMES           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! DIVIDE          [ reduce using rule 122 (nularexp -> identifier .) ]
  ! MOD             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! POW             [ reduce using rule 122 (nularexp -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 122 (nularexp -> identifier .) ]
  ! COMMA           [ reduce using rule 122 (nularexp -> identifier .) ]
  ! $end            [ reduce using rule 122 (nularexp -> identifier .) ]
  ! RBRACE          [ reduce using rule 122 (nularexp -> identifier .) ]
  ! RPAREN          [ reduce using rule 122 (nularexp -> identifier .) ]
  ! RSPAREN         [ reduce using rule 122 (nularexp -> identifier .) ]
  ! TO              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! STEP            [ reduce using rule 122 (nularexp -> identifier .) ]
  ! DO              [ reduce using rule 122 (nularexp -> identifier .) ]
  ! COLON           [ reduce using rule 122 (nularexp -> identifier .) ]


state 93

    (104) primaryexp -> unaryexp .

    BINARY_FNC      reduce using rule 104 (primaryexp -> unaryexp .)
    GETVARIABLE     reduce using rule 104 (primaryexp -> unaryexp .)
    SETVARIABLE     reduce using rule 104 (primaryexp -> unaryexp .)
    PARAM           reduce using rule 104 (primaryexp -> unaryexp .)
    PARAMS          reduce using rule 104 (primaryexp -> unaryexp .)
    LT              reduce using rule 104 (primaryexp -> unaryexp .)
    GT              reduce using rule 104 (primaryexp -> unaryexp .)
    LTE             reduce using rule 104 (primaryexp -> unaryexp .)
    GTE             reduce using rule 104 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 104 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 104 (primaryexp -> unaryexp .)
    AND             reduce using rule 104 (primaryexp -> unaryexp .)
    OR              reduce using rule 104 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 104 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 104 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 104 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 104 (primaryexp -> unaryexp .)
    MOD             reduce using rule 104 (primaryexp -> unaryexp .)
    POW             reduce using rule 104 (primaryexp -> unaryexp .)
    SEMI_COLON      reduce using rule 104 (primaryexp -> unaryexp .)
    COMMA           reduce using rule 104 (primaryexp -> unaryexp .)
    $end            reduce using rule 104 (primaryexp -> unaryexp .)
    RBRACE          reduce using rule 104 (primaryexp -> unaryexp .)
    RPAREN          reduce using rule 104 (primaryexp -> unaryexp .)
    RSPAREN         reduce using rule 104 (primaryexp -> unaryexp .)
    TO              reduce using rule 104 (primaryexp -> unaryexp .)
    STEP            reduce using rule 104 (primaryexp -> unaryexp .)
    DO              reduce using rule 104 (primaryexp -> unaryexp .)
    COLON           reduce using rule 104 (primaryexp -> unaryexp .)


state 94

    (105) primaryexp -> nularexp .

    BINARY_FNC      reduce using rule 105 (primaryexp -> nularexp .)
    GETVARIABLE     reduce using rule 105 (primaryexp -> nularexp .)
    SETVARIABLE     reduce using rule 105 (primaryexp -> nularexp .)
    PARAM           reduce using rule 105 (primaryexp -> nularexp .)
    PARAMS          reduce using rule 105 (primaryexp -> nularexp .)
    LT              reduce using rule 105 (primaryexp -> nularexp .)
    GT              reduce using rule 105 (primaryexp -> nularexp .)
    LTE             reduce using rule 105 (primaryexp -> nularexp .)
    GTE             reduce using rule 105 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 105 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 105 (primaryexp -> nularexp .)
    AND             reduce using rule 105 (primaryexp -> nularexp .)
    OR              reduce using rule 105 (primaryexp -> nularexp .)
    PLUS            reduce using rule 105 (primaryexp -> nularexp .)
    MINUS           reduce using rule 105 (primaryexp -> nularexp .)
    TIMES           reduce using rule 105 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 105 (primaryexp -> nularexp .)
    MOD             reduce using rule 105 (primaryexp -> nularexp .)
    POW             reduce using rule 105 (primaryexp -> nularexp .)
    SEMI_COLON      reduce using rule 105 (primaryexp -> nularexp .)
    COMMA           reduce using rule 105 (primaryexp -> nularexp .)
    $end            reduce using rule 105 (primaryexp -> nularexp .)
    RBRACE          reduce using rule 105 (primaryexp -> nularexp .)
    RPAREN          reduce using rule 105 (primaryexp -> nularexp .)
    RSPAREN         reduce using rule 105 (primaryexp -> nularexp .)
    TO              reduce using rule 105 (primaryexp -> nularexp .)
    STEP            reduce using rule 105 (primaryexp -> nularexp .)
    DO              reduce using rule 105 (primaryexp -> nularexp .)
    COLON           reduce using rule 105 (primaryexp -> nularexp .)


state 95

    (107) primaryexp -> binaryexp .

    BINARY_FNC      reduce using rule 107 (primaryexp -> binaryexp .)
    GETVARIABLE     reduce using rule 107 (primaryexp -> binaryexp .)
    SETVARIABLE     reduce using rule 107 (primaryexp -> binaryexp .)
    PARAM           reduce using rule 107 (primaryexp -> binaryexp .)
    PARAMS          reduce using rule 107 (primaryexp -> binaryexp .)
    LT              reduce using rule 107 (primaryexp -> binaryexp .)
    GT              reduce using rule 107 (primaryexp -> binaryexp .)
    LTE             reduce using rule 107 (primaryexp -> binaryexp .)
    GTE             reduce using rule 107 (primaryexp -> binaryexp .)
    EQUALITY        reduce using rule 107 (primaryexp -> binaryexp .)
    INEQUALITY      reduce using rule 107 (primaryexp -> binaryexp .)
    AND             reduce using rule 107 (primaryexp -> binaryexp .)
    OR              reduce using rule 107 (primaryexp -> binaryexp .)
    PLUS            reduce using rule 107 (primaryexp -> binaryexp .)
    MINUS           reduce using rule 107 (primaryexp -> binaryexp .)
    TIMES           reduce using rule 107 (primaryexp -> binaryexp .)
    DIVIDE          reduce using rule 107 (primaryexp -> binaryexp .)
    MOD             reduce using rule 107 (primaryexp -> binaryexp .)
    POW             reduce using rule 107 (primaryexp -> binaryexp .)
    SEMI_COLON      reduce using rule 107 (primaryexp -> binaryexp .)
    COMMA           reduce using rule 107 (primaryexp -> binaryexp .)
    $end            reduce using rule 107 (primaryexp -> binaryexp .)
    RBRACE          reduce using rule 107 (primaryexp -> binaryexp .)
    RPAREN          reduce using rule 107 (primaryexp -> binaryexp .)
    RSPAREN         reduce using rule 107 (primaryexp -> binaryexp .)
    TO              reduce using rule 107 (primaryexp -> binaryexp .)
    STEP            reduce using rule 107 (primaryexp -> binaryexp .)
    DO              reduce using rule 107 (primaryexp -> binaryexp .)
    COLON           reduce using rule 107 (primaryexp -> binaryexp .)


state 96

    (108) primaryexp -> bracedexp .

    BINARY_FNC      reduce using rule 108 (primaryexp -> bracedexp .)
    GETVARIABLE     reduce using rule 108 (primaryexp -> bracedexp .)
    SETVARIABLE     reduce using rule 108 (primaryexp -> bracedexp .)
    PARAM           reduce using rule 108 (primaryexp -> bracedexp .)
    PARAMS          reduce using rule 108 (primaryexp -> bracedexp .)
    LT              reduce using rule 108 (primaryexp -> bracedexp .)
    GT              reduce using rule 108 (primaryexp -> bracedexp .)
    LTE             reduce using rule 108 (primaryexp -> bracedexp .)
    GTE             reduce using rule 108 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 108 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 108 (primaryexp -> bracedexp .)
    AND             reduce using rule 108 (primaryexp -> bracedexp .)
    OR              reduce using rule 108 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 108 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 108 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 108 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 108 (primaryexp -> bracedexp .)
    MOD             reduce using rule 108 (primaryexp -> bracedexp .)
    POW             reduce using rule 108 (primaryexp -> bracedexp .)
    SEMI_COLON      reduce using rule 108 (primaryexp -> bracedexp .)
    COMMA           reduce using rule 108 (primaryexp -> bracedexp .)
    $end            reduce using rule 108 (primaryexp -> bracedexp .)
    RBRACE          reduce using rule 108 (primaryexp -> bracedexp .)
    RPAREN          reduce using rule 108 (primaryexp -> bracedexp .)
    RSPAREN         reduce using rule 108 (primaryexp -> bracedexp .)
    TO              reduce using rule 108 (primaryexp -> bracedexp .)
    STEP            reduce using rule 108 (primaryexp -> bracedexp .)
    DO              reduce using rule 108 (primaryexp -> bracedexp .)
    COLON           reduce using rule 108 (primaryexp -> bracedexp .)


state 97

    (87) identifier -> PRIVATE_ID .

    BINARY_FNC      reduce using rule 87 (identifier -> PRIVATE_ID .)
    GETVARIABLE     reduce using rule 87 (identifier -> PRIVATE_ID .)
    SETVARIABLE     reduce using rule 87 (identifier -> PRIVATE_ID .)
    PARAM           reduce using rule 87 (identifier -> PRIVATE_ID .)
    PARAMS          reduce using rule 87 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 87 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 87 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 87 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 87 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 87 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 87 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 87 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 87 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 87 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 87 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 87 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 87 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 87 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 87 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 87 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 87 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 87 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 87 (identifier -> PRIVATE_ID .)
    RPAREN          reduce using rule 87 (identifier -> PRIVATE_ID .)
    RSPAREN         reduce using rule 87 (identifier -> PRIVATE_ID .)
    TO              reduce using rule 87 (identifier -> PRIVATE_ID .)
    STEP            reduce using rule 87 (identifier -> PRIVATE_ID .)
    DO              reduce using rule 87 (identifier -> PRIVATE_ID .)
    COLON           reduce using rule 87 (identifier -> PRIVATE_ID .)
    THEN            reduce using rule 87 (identifier -> PRIVATE_ID .)
    EXITWITH        reduce using rule 87 (identifier -> PRIVATE_ID .)


state 98

    (88) identifier -> GLOBAL_ID .

    BINARY_FNC      reduce using rule 88 (identifier -> GLOBAL_ID .)
    GETVARIABLE     reduce using rule 88 (identifier -> GLOBAL_ID .)
    SETVARIABLE     reduce using rule 88 (identifier -> GLOBAL_ID .)
    PARAM           reduce using rule 88 (identifier -> GLOBAL_ID .)
    PARAMS          reduce using rule 88 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 88 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 88 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 88 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 88 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 88 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 88 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 88 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 88 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 88 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 88 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 88 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 88 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 88 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 88 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 88 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 88 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 88 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 88 (identifier -> GLOBAL_ID .)
    RPAREN          reduce using rule 88 (identifier -> GLOBAL_ID .)
    RSPAREN         reduce using rule 88 (identifier -> GLOBAL_ID .)
    TO              reduce using rule 88 (identifier -> GLOBAL_ID .)
    STEP            reduce using rule 88 (identifier -> GLOBAL_ID .)
    DO              reduce using rule 88 (identifier -> GLOBAL_ID .)
    COLON           reduce using rule 88 (identifier -> GLOBAL_ID .)
    THEN            reduce using rule 88 (identifier -> GLOBAL_ID .)
    EXITWITH        reduce using rule 88 (identifier -> GLOBAL_ID .)


state 99

    (17) helpertype -> iftype .

    BINARY_FNC      reduce using rule 17 (helpertype -> iftype .)
    GETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    SETVARIABLE     reduce using rule 17 (helpertype -> iftype .)
    PARAM           reduce using rule 17 (helpertype -> iftype .)
    PARAMS          reduce using rule 17 (helpertype -> iftype .)
    LT              reduce using rule 17 (helpertype -> iftype .)
    GT              reduce using rule 17 (helpertype -> iftype .)
    LTE             reduce using rule 17 (helpertype -> iftype .)
    GTE             reduce using rule 17 (helpertype -> iftype .)
    EQUALITY        reduce using rule 17 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 17 (helpertype -> iftype .)
    AND             reduce using rule 17 (helpertype -> iftype .)
    OR              reduce using rule 17 (helpertype -> iftype .)
    PLUS            reduce using rule 17 (helpertype -> iftype .)
    MINUS           reduce using rule 17 (helpertype -> iftype .)
    TIMES           reduce using rule 17 (helpertype -> iftype .)
    DIVIDE          reduce using rule 17 (helpertype -> iftype .)
    MOD             reduce using rule 17 (helpertype -> iftype .)
    POW             reduce using rule 17 (helpertype -> iftype .)
    SEMI_COLON      reduce using rule 17 (helpertype -> iftype .)
    COMMA           reduce using rule 17 (helpertype -> iftype .)
    $end            reduce using rule 17 (helpertype -> iftype .)
    RBRACE          reduce using rule 17 (helpertype -> iftype .)
    RPAREN          reduce using rule 17 (helpertype -> iftype .)
    RSPAREN         reduce using rule 17 (helpertype -> iftype .)
    TO              reduce using rule 17 (helpertype -> iftype .)
    STEP            reduce using rule 17 (helpertype -> iftype .)
    DO              reduce using rule 17 (helpertype -> iftype .)
    COLON           reduce using rule 17 (helpertype -> iftype .)


state 100

    (18) helpertype -> whiletype .

    BINARY_FNC      reduce using rule 18 (helpertype -> whiletype .)
    GETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    SETVARIABLE     reduce using rule 18 (helpertype -> whiletype .)
    PARAM           reduce using rule 18 (helpertype -> whiletype .)
    PARAMS          reduce using rule 18 (helpertype -> whiletype .)
    LT              reduce using rule 18 (helpertype -> whiletype .)
    GT              reduce using rule 18 (helpertype -> whiletype .)
    LTE             reduce using rule 18 (helpertype -> whiletype .)
    GTE             reduce using rule 18 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 18 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 18 (helpertype -> whiletype .)
    AND             reduce using rule 18 (helpertype -> whiletype .)
    OR              reduce using rule 18 (helpertype -> whiletype .)
    PLUS            reduce using rule 18 (helpertype -> whiletype .)
    MINUS           reduce using rule 18 (helpertype -> whiletype .)
    TIMES           reduce using rule 18 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 18 (helpertype -> whiletype .)
    MOD             reduce using rule 18 (helpertype -> whiletype .)
    POW             reduce using rule 18 (helpertype -> whiletype .)
    SEMI_COLON      reduce using rule 18 (helpertype -> whiletype .)
    COMMA           reduce using rule 18 (helpertype -> whiletype .)
    $end            reduce using rule 18 (helpertype -> whiletype .)
    RBRACE          reduce using rule 18 (helpertype -> whiletype .)
    RPAREN          reduce using rule 18 (helpertype -> whiletype .)
    RSPAREN         reduce using rule 18 (helpertype -> whiletype .)
    TO              reduce using rule 18 (helpertype -> whiletype .)
    STEP            reduce using rule 18 (helpertype -> whiletype .)
    DO              reduce using rule 18 (helpertype -> whiletype .)
    COLON           reduce using rule 18 (helpertype -> whiletype .)


state 101

    (19) helpertype -> fortype .

    BINARY_FNC      reduce using rule 19 (helpertype -> fortype .)
    GETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    SETVARIABLE     reduce using rule 19 (helpertype -> fortype .)
    PARAM           reduce using rule 19 (helpertype -> fortype .)
    PARAMS          reduce using rule 19 (helpertype -> fortype .)
    LT              reduce using rule 19 (helpertype -> fortype .)
    GT              reduce using rule 19 (helpertype -> fortype .)
    LTE             reduce using rule 19 (helpertype -> fortype .)
    GTE             reduce using rule 19 (helpertype -> fortype .)
    EQUALITY        reduce using rule 19 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 19 (helpertype -> fortype .)
    AND             reduce using rule 19 (helpertype -> fortype .)
    OR              reduce using rule 19 (helpertype -> fortype .)
    PLUS            reduce using rule 19 (helpertype -> fortype .)
    MINUS           reduce using rule 19 (helpertype -> fortype .)
    TIMES           reduce using rule 19 (helpertype -> fortype .)
    DIVIDE          reduce using rule 19 (helpertype -> fortype .)
    MOD             reduce using rule 19 (helpertype -> fortype .)
    POW             reduce using rule 19 (helpertype -> fortype .)
    SEMI_COLON      reduce using rule 19 (helpertype -> fortype .)
    COMMA           reduce using rule 19 (helpertype -> fortype .)
    $end            reduce using rule 19 (helpertype -> fortype .)
    RBRACE          reduce using rule 19 (helpertype -> fortype .)
    RPAREN          reduce using rule 19 (helpertype -> fortype .)
    RSPAREN         reduce using rule 19 (helpertype -> fortype .)
    TO              reduce using rule 19 (helpertype -> fortype .)
    STEP            reduce using rule 19 (helpertype -> fortype .)
    DO              reduce using rule 19 (helpertype -> fortype .)
    COLON           reduce using rule 19 (helpertype -> fortype .)


state 102

    (20) helpertype -> withtype .

    BINARY_FNC      reduce using rule 20 (helpertype -> withtype .)
    GETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    SETVARIABLE     reduce using rule 20 (helpertype -> withtype .)
    PARAM           reduce using rule 20 (helpertype -> withtype .)
    PARAMS          reduce using rule 20 (helpertype -> withtype .)
    LT              reduce using rule 20 (helpertype -> withtype .)
    GT              reduce using rule 20 (helpertype -> withtype .)
    LTE             reduce using rule 20 (helpertype -> withtype .)
    GTE             reduce using rule 20 (helpertype -> withtype .)
    EQUALITY        reduce using rule 20 (helpertype -> withtype .)
    INEQUALITY      reduce using rule 20 (helpertype -> withtype .)
    AND             reduce using rule 20 (helpertype -> withtype .)
    OR              reduce using rule 20 (helpertype -> withtype .)
    PLUS            reduce using rule 20 (helpertype -> withtype .)
    MINUS           reduce using rule 20 (helpertype -> withtype .)
    TIMES           reduce using rule 20 (helpertype -> withtype .)
    DIVIDE          reduce using rule 20 (helpertype -> withtype .)
    MOD             reduce using rule 20 (helpertype -> withtype .)
    POW             reduce using rule 20 (helpertype -> withtype .)
    SEMI_COLON      reduce using rule 20 (helpertype -> withtype .)
    COMMA           reduce using rule 20 (helpertype -> withtype .)
    $end            reduce using rule 20 (helpertype -> withtype .)
    RBRACE          reduce using rule 20 (helpertype -> withtype .)
    RPAREN          reduce using rule 20 (helpertype -> withtype .)
    RSPAREN         reduce using rule 20 (helpertype -> withtype .)
    TO              reduce using rule 20 (helpertype -> withtype .)
    STEP            reduce using rule 20 (helpertype -> withtype .)
    DO              reduce using rule 20 (helpertype -> withtype .)
    COLON           reduce using rule 20 (helpertype -> withtype .)


state 103

    (77) vardefinition -> definition .

    BINARY_FNC      reduce using rule 77 (vardefinition -> definition .)
    GETVARIABLE     reduce using rule 77 (vardefinition -> definition .)
    SETVARIABLE     reduce using rule 77 (vardefinition -> definition .)
    PARAM           reduce using rule 77 (vardefinition -> definition .)
    PARAMS          reduce using rule 77 (vardefinition -> definition .)
    LT              reduce using rule 77 (vardefinition -> definition .)
    GT              reduce using rule 77 (vardefinition -> definition .)
    LTE             reduce using rule 77 (vardefinition -> definition .)
    GTE             reduce using rule 77 (vardefinition -> definition .)
    EQUALITY        reduce using rule 77 (vardefinition -> definition .)
    INEQUALITY      reduce using rule 77 (vardefinition -> definition .)
    AND             reduce using rule 77 (vardefinition -> definition .)
    OR              reduce using rule 77 (vardefinition -> definition .)
    PLUS            reduce using rule 77 (vardefinition -> definition .)
    MINUS           reduce using rule 77 (vardefinition -> definition .)
    TIMES           reduce using rule 77 (vardefinition -> definition .)
    DIVIDE          reduce using rule 77 (vardefinition -> definition .)
    MOD             reduce using rule 77 (vardefinition -> definition .)
    POW             reduce using rule 77 (vardefinition -> definition .)
    SEMI_COLON      reduce using rule 77 (vardefinition -> definition .)
    COMMA           reduce using rule 77 (vardefinition -> definition .)
    $end            reduce using rule 77 (vardefinition -> definition .)
    RBRACE          reduce using rule 77 (vardefinition -> definition .)
    RPAREN          reduce using rule 77 (vardefinition -> definition .)
    RSPAREN         reduce using rule 77 (vardefinition -> definition .)
    TO              reduce using rule 77 (vardefinition -> definition .)
    STEP            reduce using rule 77 (vardefinition -> definition .)
    DO              reduce using rule 77 (vardefinition -> definition .)
    COLON           reduce using rule 77 (vardefinition -> definition .)


state 104

    (124) unaryexp -> PLUS primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    COMMA           reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    $end            reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    BINARY_FNC      reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    GETVARIABLE     reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    SETVARIABLE     reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    PARAM           reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    PARAMS          reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    LT              reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    GT              reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    LTE             reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    GTE             reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    EQUALITY        reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    INEQUALITY      reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    AND             reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    OR              reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    PLUS            reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    MINUS           reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    TIMES           reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    DIVIDE          reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    MOD             reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    POW             reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    RBRACE          reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    RPAREN          reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    RSPAREN         reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    TO              reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    STEP            reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    DO              reduce using rule 124 (unaryexp -> PLUS primaryexp .)
    COLON           reduce using rule 124 (unaryexp -> PLUS primaryexp .)

  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 86 ]
  ! DIVIDE          [ shift and go to state 87 ]
  ! MOD             [ shift and go to state 88 ]
  ! POW             [ shift and go to state 89 ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 105

    (125) unaryexp -> MINUS primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    COMMA           reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    $end            reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    BINARY_FNC      reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    GETVARIABLE     reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    SETVARIABLE     reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    PARAM           reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    PARAMS          reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    LT              reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    GT              reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    LTE             reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    GTE             reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    EQUALITY        reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    INEQUALITY      reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    AND             reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    OR              reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    PLUS            reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    MINUS           reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    TIMES           reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    DIVIDE          reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    MOD             reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    POW             reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    RBRACE          reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    RPAREN          reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    RSPAREN         reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    TO              reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    STEP            reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    DO              reduce using rule 125 (unaryexp -> MINUS primaryexp .)
    COLON           reduce using rule 125 (unaryexp -> MINUS primaryexp .)

  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 86 ]
  ! DIVIDE          [ shift and go to state 87 ]
  ! MOD             [ shift and go to state 88 ]
  ! POW             [ shift and go to state 89 ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 106

    (126) unaryexp -> NOT primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 126 (unaryexp -> NOT primaryexp .)
    COMMA           reduce using rule 126 (unaryexp -> NOT primaryexp .)
    $end            reduce using rule 126 (unaryexp -> NOT primaryexp .)
    BINARY_FNC      reduce using rule 126 (unaryexp -> NOT primaryexp .)
    GETVARIABLE     reduce using rule 126 (unaryexp -> NOT primaryexp .)
    SETVARIABLE     reduce using rule 126 (unaryexp -> NOT primaryexp .)
    PARAM           reduce using rule 126 (unaryexp -> NOT primaryexp .)
    PARAMS          reduce using rule 126 (unaryexp -> NOT primaryexp .)
    LT              reduce using rule 126 (unaryexp -> NOT primaryexp .)
    GT              reduce using rule 126 (unaryexp -> NOT primaryexp .)
    LTE             reduce using rule 126 (unaryexp -> NOT primaryexp .)
    GTE             reduce using rule 126 (unaryexp -> NOT primaryexp .)
    EQUALITY        reduce using rule 126 (unaryexp -> NOT primaryexp .)
    INEQUALITY      reduce using rule 126 (unaryexp -> NOT primaryexp .)
    AND             reduce using rule 126 (unaryexp -> NOT primaryexp .)
    OR              reduce using rule 126 (unaryexp -> NOT primaryexp .)
    PLUS            reduce using rule 126 (unaryexp -> NOT primaryexp .)
    MINUS           reduce using rule 126 (unaryexp -> NOT primaryexp .)
    TIMES           reduce using rule 126 (unaryexp -> NOT primaryexp .)
    DIVIDE          reduce using rule 126 (unaryexp -> NOT primaryexp .)
    MOD             reduce using rule 126 (unaryexp -> NOT primaryexp .)
    POW             reduce using rule 126 (unaryexp -> NOT primaryexp .)
    RBRACE          reduce using rule 126 (unaryexp -> NOT primaryexp .)
    RPAREN          reduce using rule 126 (unaryexp -> NOT primaryexp .)
    RSPAREN         reduce using rule 126 (unaryexp -> NOT primaryexp .)
    TO              reduce using rule 126 (unaryexp -> NOT primaryexp .)
    STEP            reduce using rule 126 (unaryexp -> NOT primaryexp .)
    DO              reduce using rule 126 (unaryexp -> NOT primaryexp .)
    COLON           reduce using rule 126 (unaryexp -> NOT primaryexp .)

  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 84 ]
  ! MINUS           [ shift and go to state 85 ]
  ! TIMES           [ shift and go to state 86 ]
  ! DIVIDE          [ shift and go to state 87 ]
  ! MOD             [ shift and go to state 88 ]
  ! POW             [ shift and go to state 89 ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 107

    (30) ifstatement -> iftype THEN . bracedexp ELSE bracedexp
    (31) ifstatement -> iftype THEN . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 151

state 108

    (32) ifstatement -> iftype EXITWITH . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 152

state 109

    (38) foreachloop -> bracedexp FOREACH . array
    (39) foreachloop -> bracedexp FOREACH . primaryexp
    (40) foreachloop -> bracedexp FOREACH . LPAREN primaryexp RPAREN
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 155
    LSPAREN         shift and go to state 50
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    bracedexp                      shift and go to state 96
    array                          shift and go to state 153
    primaryexp                     shift and go to state 154
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 110

    (37) whileloop -> whiletype DO . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 156

state 111

    (44) forloop -> fortype DO . bracedexp_noscope
    (47) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 158

    bracedexp_noscope              shift and go to state 157

state 112

    (35) withstatement -> withstatementinit bracedexp .

    SEMI_COLON      reduce using rule 35 (withstatement -> withstatementinit bracedexp .)
    COMMA           reduce using rule 35 (withstatement -> withstatementinit bracedexp .)
    $end            reduce using rule 35 (withstatement -> withstatementinit bracedexp .)
    RBRACE          reduce using rule 35 (withstatement -> withstatementinit bracedexp .)


state 113

    (109) primaryexp -> LPAREN primaryexp . RPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RPAREN          shift and go to state 159
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 114

    (24) switchstatement -> SWITCH LPAREN . primaryexp RPAREN DO LBRACE switchbody RBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 160
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 115

    (110) bracedexp -> LBRACE new_scope . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (154) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (79) assignment -> . assignment_code code RBRACE
    (80) assignment -> . definition EQUAL primaryexp
    (81) assignment -> . variable EQUAL primaryexp
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (30) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (31) ifstatement -> . iftype THEN bracedexp
    (32) ifstatement -> . iftype EXITWITH bracedexp
    (37) whileloop -> . whiletype DO bracedexp
    (44) forloop -> . fortype DO bracedexp_noscope
    (35) withstatement -> . withstatementinit bracedexp
    (38) foreachloop -> . bracedexp FOREACH array
    (39) foreachloop -> . bracedexp FOREACH primaryexp
    (40) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (82) assignment_code -> . definition EQUAL LBRACE
    (83) assignment_code -> . variable EQUAL LBRACE
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (89) variable -> . PRIVATE_ID
    (90) variable -> . GLOBAL_ID
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (34) withstatementinit -> . withtype DO
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (84) arraydefinition -> . PRIVATE stringarray
    (33) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 154 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    SWITCH          shift and go to state 41
    PRIVATE         shift and go to state 43
    PRIVATE_ID      shift and go to state 44
    GLOBAL_ID       shift and go to state 46
    LPAREN          shift and go to state 40
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    LBRACE          shift and go to state 42
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    WITH            shift and go to state 63

    code                           shift and go to state 161
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    iftype                         shift and go to state 34
    bracedexp                      shift and go to state 35
    whiletype                      shift and go to state 36
    fortype                        shift and go to state 37
    withstatementinit              shift and go to state 38
    array                          shift and go to state 39
    string                         shift and go to state 45
    number                         shift and go to state 47
    helpertype                     shift and go to state 48
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 116

    (111) bracedexp -> LBRACE RBRACE .

    FOREACH         reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    BINARY_FNC      reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    GETVARIABLE     reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    SETVARIABLE     reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    PARAM           reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    PARAMS          reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    LT              reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    GT              reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    LTE             reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    GTE             reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    EQUALITY        reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    INEQUALITY      reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    AND             reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    OR              reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    PLUS            reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    MINUS           reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    TIMES           reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    MOD             reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    POW             reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    SEMI_COLON      reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    COMMA           reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    $end            reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    RBRACE          reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    RPAREN          reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    RSPAREN         reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    TO              reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    STEP            reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    DO              reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    COLON           reduce using rule 111 (bracedexp -> LBRACE RBRACE .)
    ELSE            reduce using rule 111 (bracedexp -> LBRACE RBRACE .)


state 117

    (85) definition -> PRIVATE PRIVATE_ID .

    EQUAL           reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    SEMI_COLON      reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    COMMA           reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    $end            reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    BINARY_FNC      reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    GETVARIABLE     reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    SETVARIABLE     reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    PARAM           reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    PARAMS          reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    LT              reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    GT              reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    LTE             reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    GTE             reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    EQUALITY        reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    INEQUALITY      reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    AND             reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    OR              reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    PLUS            reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    MINUS           reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    TIMES           reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    DIVIDE          reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    MOD             reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    POW             reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    RBRACE          reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    RPAREN          reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    RSPAREN         reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    TO              reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    STEP            reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    DO              reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)
    COLON           reduce using rule 85 (definition -> PRIVATE PRIVATE_ID .)


state 118

    (86) definition -> PRIVATE string .

    EQUAL           reduce using rule 86 (definition -> PRIVATE string .)
    SEMI_COLON      reduce using rule 86 (definition -> PRIVATE string .)
    COMMA           reduce using rule 86 (definition -> PRIVATE string .)
    $end            reduce using rule 86 (definition -> PRIVATE string .)
    BINARY_FNC      reduce using rule 86 (definition -> PRIVATE string .)
    GETVARIABLE     reduce using rule 86 (definition -> PRIVATE string .)
    SETVARIABLE     reduce using rule 86 (definition -> PRIVATE string .)
    PARAM           reduce using rule 86 (definition -> PRIVATE string .)
    PARAMS          reduce using rule 86 (definition -> PRIVATE string .)
    LT              reduce using rule 86 (definition -> PRIVATE string .)
    GT              reduce using rule 86 (definition -> PRIVATE string .)
    LTE             reduce using rule 86 (definition -> PRIVATE string .)
    GTE             reduce using rule 86 (definition -> PRIVATE string .)
    EQUALITY        reduce using rule 86 (definition -> PRIVATE string .)
    INEQUALITY      reduce using rule 86 (definition -> PRIVATE string .)
    AND             reduce using rule 86 (definition -> PRIVATE string .)
    OR              reduce using rule 86 (definition -> PRIVATE string .)
    PLUS            reduce using rule 86 (definition -> PRIVATE string .)
    MINUS           reduce using rule 86 (definition -> PRIVATE string .)
    TIMES           reduce using rule 86 (definition -> PRIVATE string .)
    DIVIDE          reduce using rule 86 (definition -> PRIVATE string .)
    MOD             reduce using rule 86 (definition -> PRIVATE string .)
    POW             reduce using rule 86 (definition -> PRIVATE string .)
    RBRACE          reduce using rule 86 (definition -> PRIVATE string .)
    RPAREN          reduce using rule 86 (definition -> PRIVATE string .)
    RSPAREN         reduce using rule 86 (definition -> PRIVATE string .)
    TO              reduce using rule 86 (definition -> PRIVATE string .)
    STEP            reduce using rule 86 (definition -> PRIVATE string .)
    DO              reduce using rule 86 (definition -> PRIVATE string .)
    COLON           reduce using rule 86 (definition -> PRIVATE string .)


state 119

    (84) arraydefinition -> PRIVATE stringarray .

    SEMI_COLON      reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    COMMA           reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    $end            reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    BINARY_FNC      reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    GETVARIABLE     reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    SETVARIABLE     reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    PARAM           reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    PARAMS          reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    LT              reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    GT              reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    LTE             reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    GTE             reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    EQUALITY        reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    INEQUALITY      reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    AND             reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    OR              reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    PLUS            reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    MINUS           reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    TIMES           reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    DIVIDE          reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    MOD             reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    POW             reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    RBRACE          reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    RPAREN          reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    RSPAREN         reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    TO              reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    STEP            reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    DO              reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)
    COLON           reduce using rule 84 (arraydefinition -> PRIVATE stringarray .)


state 120

    (117) stringarray -> LSPAREN . RSPAREN
    (118) stringarray -> LSPAREN . stringarrayelement RSPAREN
    (119) stringarrayelement -> . string
    (120) stringarrayelement -> . string COMMA stringarrayelement
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    RSPAREN         shift and go to state 162
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    stringarrayelement             shift and go to state 163
    string                         shift and go to state 164

state 121

    (48) getvariable_ns -> NAMESPACE GETVARIABLE . string
    (49) getvariable_ns -> NAMESPACE GETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 166
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 165

state 122

    (52) setvariable_ns -> NAMESPACE SETVARIABLE . LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> NAMESPACE SETVARIABLE . LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN

    LSPAREN         shift and go to state 167


state 123

    (113) array -> LSPAREN RSPAREN .

    BINARY_FNC      reduce using rule 113 (array -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 113 (array -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 113 (array -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 113 (array -> LSPAREN RSPAREN .)
    PARAMS          reduce using rule 113 (array -> LSPAREN RSPAREN .)
    LT              reduce using rule 113 (array -> LSPAREN RSPAREN .)
    GT              reduce using rule 113 (array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 113 (array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 113 (array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 113 (array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 113 (array -> LSPAREN RSPAREN .)
    AND             reduce using rule 113 (array -> LSPAREN RSPAREN .)
    OR              reduce using rule 113 (array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 113 (array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 113 (array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 113 (array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 113 (array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 113 (array -> LSPAREN RSPAREN .)
    POW             reduce using rule 113 (array -> LSPAREN RSPAREN .)
    SEMI_COLON      reduce using rule 113 (array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 113 (array -> LSPAREN RSPAREN .)
    $end            reduce using rule 113 (array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 113 (array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 113 (array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 113 (array -> LSPAREN RSPAREN .)
    TO              reduce using rule 113 (array -> LSPAREN RSPAREN .)
    STEP            reduce using rule 113 (array -> LSPAREN RSPAREN .)
    DO              reduce using rule 113 (array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 113 (array -> LSPAREN RSPAREN .)


state 124

    (114) array -> LSPAREN arrayelement . RSPAREN

    RSPAREN         shift and go to state 168


state 125

    (115) arrayelement -> primaryexp .
    (116) arrayelement -> primaryexp . COMMA arrayelement
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         reduce using rule 115 (arrayelement -> primaryexp .)
    COMMA           shift and go to state 169
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 126

    (56) param_unary -> PARAM LSPAREN . number RSPAREN
    (57) param_unary -> PARAM LSPAREN . number COMMA primaryexp RSPAREN
    (58) param_unary -> PARAM LSPAREN . number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA array RSPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX

    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60

    number                         shift and go to state 170

state 127

    (66) params_unary -> PARAMS params_array .

    SEMI_COLON      reduce using rule 66 (params_unary -> PARAMS params_array .)
    COMMA           reduce using rule 66 (params_unary -> PARAMS params_array .)
    $end            reduce using rule 66 (params_unary -> PARAMS params_array .)
    BINARY_FNC      reduce using rule 66 (params_unary -> PARAMS params_array .)
    GETVARIABLE     reduce using rule 66 (params_unary -> PARAMS params_array .)
    SETVARIABLE     reduce using rule 66 (params_unary -> PARAMS params_array .)
    PARAM           reduce using rule 66 (params_unary -> PARAMS params_array .)
    PARAMS          reduce using rule 66 (params_unary -> PARAMS params_array .)
    LT              reduce using rule 66 (params_unary -> PARAMS params_array .)
    GT              reduce using rule 66 (params_unary -> PARAMS params_array .)
    LTE             reduce using rule 66 (params_unary -> PARAMS params_array .)
    GTE             reduce using rule 66 (params_unary -> PARAMS params_array .)
    EQUALITY        reduce using rule 66 (params_unary -> PARAMS params_array .)
    INEQUALITY      reduce using rule 66 (params_unary -> PARAMS params_array .)
    AND             reduce using rule 66 (params_unary -> PARAMS params_array .)
    OR              reduce using rule 66 (params_unary -> PARAMS params_array .)
    PLUS            reduce using rule 66 (params_unary -> PARAMS params_array .)
    MINUS           reduce using rule 66 (params_unary -> PARAMS params_array .)
    TIMES           reduce using rule 66 (params_unary -> PARAMS params_array .)
    DIVIDE          reduce using rule 66 (params_unary -> PARAMS params_array .)
    MOD             reduce using rule 66 (params_unary -> PARAMS params_array .)
    POW             reduce using rule 66 (params_unary -> PARAMS params_array .)
    RBRACE          reduce using rule 66 (params_unary -> PARAMS params_array .)
    RPAREN          reduce using rule 66 (params_unary -> PARAMS params_array .)
    RSPAREN         reduce using rule 66 (params_unary -> PARAMS params_array .)
    TO              reduce using rule 66 (params_unary -> PARAMS params_array .)
    STEP            reduce using rule 66 (params_unary -> PARAMS params_array .)
    DO              reduce using rule 66 (params_unary -> PARAMS params_array .)
    COLON           reduce using rule 66 (params_unary -> PARAMS params_array .)


state 128

    (68) params_array -> LSPAREN . RSPAREN
    (69) params_array -> LSPAREN . params_element RSPAREN
    (70) params_element -> . params_array_entry
    (71) params_element -> . params_array_entry COMMA params_element
    (72) params_array_entry -> . string
    (73) params_array_entry -> . LSPAREN string COMMA primaryexp RSPAREN
    (74) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array RSPAREN
    (75) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN
    (76) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    RSPAREN         shift and go to state 172
    LSPAREN         shift and go to state 171
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    params_element                 shift and go to state 173
    params_array_entry             shift and go to state 174
    string                         shift and go to state 175

state 129

    (28) iftype -> IF forloop_condition .

    THEN            reduce using rule 28 (iftype -> IF forloop_condition .)
    EXITWITH        reduce using rule 28 (iftype -> IF forloop_condition .)
    BINARY_FNC      reduce using rule 28 (iftype -> IF forloop_condition .)
    GETVARIABLE     reduce using rule 28 (iftype -> IF forloop_condition .)
    SETVARIABLE     reduce using rule 28 (iftype -> IF forloop_condition .)
    PARAM           reduce using rule 28 (iftype -> IF forloop_condition .)
    PARAMS          reduce using rule 28 (iftype -> IF forloop_condition .)
    LT              reduce using rule 28 (iftype -> IF forloop_condition .)
    GT              reduce using rule 28 (iftype -> IF forloop_condition .)
    LTE             reduce using rule 28 (iftype -> IF forloop_condition .)
    GTE             reduce using rule 28 (iftype -> IF forloop_condition .)
    EQUALITY        reduce using rule 28 (iftype -> IF forloop_condition .)
    INEQUALITY      reduce using rule 28 (iftype -> IF forloop_condition .)
    AND             reduce using rule 28 (iftype -> IF forloop_condition .)
    OR              reduce using rule 28 (iftype -> IF forloop_condition .)
    PLUS            reduce using rule 28 (iftype -> IF forloop_condition .)
    MINUS           reduce using rule 28 (iftype -> IF forloop_condition .)
    TIMES           reduce using rule 28 (iftype -> IF forloop_condition .)
    DIVIDE          reduce using rule 28 (iftype -> IF forloop_condition .)
    MOD             reduce using rule 28 (iftype -> IF forloop_condition .)
    POW             reduce using rule 28 (iftype -> IF forloop_condition .)
    SEMI_COLON      reduce using rule 28 (iftype -> IF forloop_condition .)
    COMMA           reduce using rule 28 (iftype -> IF forloop_condition .)
    $end            reduce using rule 28 (iftype -> IF forloop_condition .)
    RBRACE          reduce using rule 28 (iftype -> IF forloop_condition .)
    RPAREN          reduce using rule 28 (iftype -> IF forloop_condition .)
    RSPAREN         reduce using rule 28 (iftype -> IF forloop_condition .)
    TO              reduce using rule 28 (iftype -> IF forloop_condition .)
    STEP            reduce using rule 28 (iftype -> IF forloop_condition .)
    DO              reduce using rule 28 (iftype -> IF forloop_condition .)
    COLON           reduce using rule 28 (iftype -> IF forloop_condition .)


state 130

    (29) iftype -> IF LPAREN . primaryexp RPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 176
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 131

    (45) forloop_condition -> LBRACE . booleanexp RBRACE
    (144) booleanexp -> . primaryexp
    (145) booleanexp -> . primaryexp comparisonoperator booleanexp
    (146) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    booleanexp                     shift and go to state 177
    primaryexp                     shift and go to state 178
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 132

    (46) forloop_condition -> identifier .

    THEN            reduce using rule 46 (forloop_condition -> identifier .)
    EXITWITH        reduce using rule 46 (forloop_condition -> identifier .)
    BINARY_FNC      reduce using rule 46 (forloop_condition -> identifier .)
    GETVARIABLE     reduce using rule 46 (forloop_condition -> identifier .)
    SETVARIABLE     reduce using rule 46 (forloop_condition -> identifier .)
    PARAM           reduce using rule 46 (forloop_condition -> identifier .)
    PARAMS          reduce using rule 46 (forloop_condition -> identifier .)
    LT              reduce using rule 46 (forloop_condition -> identifier .)
    GT              reduce using rule 46 (forloop_condition -> identifier .)
    LTE             reduce using rule 46 (forloop_condition -> identifier .)
    GTE             reduce using rule 46 (forloop_condition -> identifier .)
    EQUALITY        reduce using rule 46 (forloop_condition -> identifier .)
    INEQUALITY      reduce using rule 46 (forloop_condition -> identifier .)
    AND             reduce using rule 46 (forloop_condition -> identifier .)
    OR              reduce using rule 46 (forloop_condition -> identifier .)
    PLUS            reduce using rule 46 (forloop_condition -> identifier .)
    MINUS           reduce using rule 46 (forloop_condition -> identifier .)
    TIMES           reduce using rule 46 (forloop_condition -> identifier .)
    DIVIDE          reduce using rule 46 (forloop_condition -> identifier .)
    MOD             reduce using rule 46 (forloop_condition -> identifier .)
    POW             reduce using rule 46 (forloop_condition -> identifier .)
    SEMI_COLON      reduce using rule 46 (forloop_condition -> identifier .)
    COMMA           reduce using rule 46 (forloop_condition -> identifier .)
    $end            reduce using rule 46 (forloop_condition -> identifier .)
    RBRACE          reduce using rule 46 (forloop_condition -> identifier .)
    RPAREN          reduce using rule 46 (forloop_condition -> identifier .)
    RSPAREN         reduce using rule 46 (forloop_condition -> identifier .)
    TO              reduce using rule 46 (forloop_condition -> identifier .)
    STEP            reduce using rule 46 (forloop_condition -> identifier .)
    DO              reduce using rule 46 (forloop_condition -> identifier .)
    COLON           reduce using rule 46 (forloop_condition -> identifier .)


state 133

    (36) whiletype -> WHILE forloop_condition .

    DO              reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    BINARY_FNC      reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    GETVARIABLE     reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    SETVARIABLE     reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    PARAM           reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    PARAMS          reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    LT              reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    GT              reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    LTE             reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    GTE             reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    EQUALITY        reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    INEQUALITY      reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    AND             reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    OR              reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    PLUS            reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    MINUS           reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    TIMES           reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    DIVIDE          reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    MOD             reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    POW             reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    SEMI_COLON      reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    COMMA           reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    $end            reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    RBRACE          reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    RPAREN          reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    RSPAREN         reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    TO              reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    STEP            reduce using rule 36 (whiletype -> WHILE forloop_condition .)
    COLON           reduce using rule 36 (whiletype -> WHILE forloop_condition .)


state 134

    (41) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp
    (42) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> FOR new_scope . LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 180
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 179

state 135

    (34) withstatementinit -> withtype DO .

    LBRACE          reduce using rule 34 (withstatementinit -> withtype DO .)


state 136

    (33) withtype -> WITH NAMESPACE .

    DO              reduce using rule 33 (withtype -> WITH NAMESPACE .)
    BINARY_FNC      reduce using rule 33 (withtype -> WITH NAMESPACE .)
    GETVARIABLE     reduce using rule 33 (withtype -> WITH NAMESPACE .)
    SETVARIABLE     reduce using rule 33 (withtype -> WITH NAMESPACE .)
    PARAM           reduce using rule 33 (withtype -> WITH NAMESPACE .)
    PARAMS          reduce using rule 33 (withtype -> WITH NAMESPACE .)
    LT              reduce using rule 33 (withtype -> WITH NAMESPACE .)
    GT              reduce using rule 33 (withtype -> WITH NAMESPACE .)
    LTE             reduce using rule 33 (withtype -> WITH NAMESPACE .)
    GTE             reduce using rule 33 (withtype -> WITH NAMESPACE .)
    EQUALITY        reduce using rule 33 (withtype -> WITH NAMESPACE .)
    INEQUALITY      reduce using rule 33 (withtype -> WITH NAMESPACE .)
    AND             reduce using rule 33 (withtype -> WITH NAMESPACE .)
    OR              reduce using rule 33 (withtype -> WITH NAMESPACE .)
    PLUS            reduce using rule 33 (withtype -> WITH NAMESPACE .)
    MINUS           reduce using rule 33 (withtype -> WITH NAMESPACE .)
    TIMES           reduce using rule 33 (withtype -> WITH NAMESPACE .)
    DIVIDE          reduce using rule 33 (withtype -> WITH NAMESPACE .)
    MOD             reduce using rule 33 (withtype -> WITH NAMESPACE .)
    POW             reduce using rule 33 (withtype -> WITH NAMESPACE .)
    SEMI_COLON      reduce using rule 33 (withtype -> WITH NAMESPACE .)
    COMMA           reduce using rule 33 (withtype -> WITH NAMESPACE .)
    $end            reduce using rule 33 (withtype -> WITH NAMESPACE .)
    RBRACE          reduce using rule 33 (withtype -> WITH NAMESPACE .)
    RPAREN          reduce using rule 33 (withtype -> WITH NAMESPACE .)
    RSPAREN         reduce using rule 33 (withtype -> WITH NAMESPACE .)
    TO              reduce using rule 33 (withtype -> WITH NAMESPACE .)
    STEP            reduce using rule 33 (withtype -> WITH NAMESPACE .)
    COLON           reduce using rule 33 (withtype -> WITH NAMESPACE .)


state 137

    (3) code -> statement terminator code .

    $end            reduce using rule 3 (code -> statement terminator code .)
    RBRACE          reduce using rule 3 (code -> statement terminator code .)


state 138

    (79) assignment -> assignment_code code RBRACE .

    SEMI_COLON      reduce using rule 79 (assignment -> assignment_code code RBRACE .)
    COMMA           reduce using rule 79 (assignment -> assignment_code code RBRACE .)
    $end            reduce using rule 79 (assignment -> assignment_code code RBRACE .)
    RBRACE          reduce using rule 79 (assignment -> assignment_code code RBRACE .)


state 139

    (80) assignment -> definition EQUAL primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 80 (assignment -> definition EQUAL primaryexp .)
    COMMA           reduce using rule 80 (assignment -> definition EQUAL primaryexp .)
    $end            reduce using rule 80 (assignment -> definition EQUAL primaryexp .)
    RBRACE          reduce using rule 80 (assignment -> definition EQUAL primaryexp .)
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 140

    (82) assignment_code -> definition EQUAL LBRACE .
    (110) bracedexp -> LBRACE . new_scope code RBRACE
    (111) bracedexp -> LBRACE . RBRACE
    (112) new_scope -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! reduce/reduce conflict for NULAR_FNC resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for UNARY_FNC resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NOT resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAM resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAMS resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! reduce/reduce conflict for WITH resolved using rule 82 (assignment_code -> definition EQUAL LBRACE .)
  ! shift/reduce conflict for RBRACE resolved as shift
    NULAR_FNC       reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    UNARY_FNC       reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    PLUS            reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    MINUS           reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    NOT             reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    SWITCH          reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    PRIVATE         reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    PRIVATE_ID      reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    GLOBAL_ID       reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    LPAREN          reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    NAMESPACE       reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    PARAM           reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    PARAMS          reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    IF              reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    WHILE           reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    FOR             reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    LBRACE          reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_REAL     reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_EXP      reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    NUMBER_HEX      reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    LSPAREN         reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    STRING_SINGLE   reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    STRING_DOUBLE   reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    WITH            reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .)
    RBRACE          shift and go to state 116

  ! RBRACE          [ reduce using rule 82 (assignment_code -> definition EQUAL LBRACE .) ]
  ! NULAR_FNC       [ reduce using rule 112 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 112 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 112 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 112 (new_scope -> .) ]
  ! NOT             [ reduce using rule 112 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 112 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 112 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 112 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 112 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 112 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 112 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 112 (new_scope -> .) ]
  ! PARAMS          [ reduce using rule 112 (new_scope -> .) ]
  ! IF              [ reduce using rule 112 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 112 (new_scope -> .) ]
  ! FOR             [ reduce using rule 112 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 112 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 112 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 112 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 112 (new_scope -> .) ]
  ! WITH            [ reduce using rule 112 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 112 (new_scope -> .) ]

    new_scope                      shift and go to state 115

state 141

    (91) binaryexp -> primaryexp BINARY_FNC primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    COMMA           reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    $end            reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    BINARY_FNC      reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GETVARIABLE     reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    SETVARIABLE     reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PARAM           reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PARAMS          reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    LT              reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GT              reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    LTE             reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    GTE             reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    EQUALITY        reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    INEQUALITY      reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    AND             reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    OR              reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RBRACE          reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RPAREN          reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    RSPAREN         reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    TO              reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    STEP            reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    DO              reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    COLON           reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

  ! PLUS            [ reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! MINUS           [ reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! TIMES           [ reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! DIVIDE          [ reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! MOD             [ reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! POW             [ reduce using rule 91 (binaryexp -> primaryexp BINARY_FNC primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 142

    (92) binaryexp -> primaryexp comparisonoperator primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    COMMA           reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    $end            reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    BINARY_FNC      reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GETVARIABLE     reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    SETVARIABLE     reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAM           reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAMS          reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LT              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GT              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LTE             reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GTE             reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    EQUALITY        reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    INEQUALITY      reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    AND             reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    OR              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RBRACE          reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RPAREN          reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RSPAREN         reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    TO              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    STEP            reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    DO              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    COLON           reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

  ! PLUS            [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MOD             [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! POW             [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 143

    (93) binaryexp -> primaryexp mathoperator primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    COMMA           reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    $end            reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    BINARY_FNC      reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    GETVARIABLE     reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    SETVARIABLE     reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    PARAM           reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    PARAMS          reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    LT              reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    GT              reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    LTE             reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    GTE             reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    EQUALITY        reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    INEQUALITY      reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    AND             reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    OR              reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    RBRACE          reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    RPAREN          reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    RSPAREN         reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    TO              reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    STEP            reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    DO              reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    COLON           reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

  ! PLUS            [ reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! MOD             [ reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! POW             [ reduce using rule 93 (binaryexp -> primaryexp mathoperator primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]

    mathoperator                   shift and go to state 71
    comparisonoperator             shift and go to state 70

state 144

    (50) getvariable_any -> primaryexp GETVARIABLE string .

    SEMI_COLON      reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    COMMA           reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    $end            reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    BINARY_FNC      reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    GETVARIABLE     reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    SETVARIABLE     reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    PARAM           reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    PARAMS          reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    LT              reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    GT              reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    LTE             reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    GTE             reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    EQUALITY        reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    INEQUALITY      reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    AND             reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    OR              reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    PLUS            reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    MINUS           reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    TIMES           reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    DIVIDE          reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    MOD             reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    POW             reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    RBRACE          reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    RPAREN          reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    RSPAREN         reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    TO              reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    STEP            reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    DO              reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)
    COLON           reduce using rule 50 (getvariable_any -> primaryexp GETVARIABLE string .)


state 145

    (51) getvariable_any -> primaryexp GETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 181

state 146

    (54) setvariable_any -> primaryexp SETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN . string COMMA primaryexp COMMA booleanexp RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 182

state 147

    (61) param_binary -> primaryexp PARAM LSPAREN . number RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN . number COMMA primaryexp COMMA array COMMA array RSPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX

    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60

    number                         shift and go to state 183

state 148

    (67) params_binary -> primaryexp PARAMS params_array .

    SEMI_COLON      reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    COMMA           reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    $end            reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    BINARY_FNC      reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    GETVARIABLE     reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    SETVARIABLE     reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    PARAM           reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    PARAMS          reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    LT              reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    GT              reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    LTE             reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    GTE             reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    EQUALITY        reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    INEQUALITY      reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    AND             reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    OR              reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    PLUS            reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    MINUS           reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    TIMES           reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    DIVIDE          reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    MOD             reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    POW             reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    RBRACE          reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    RPAREN          reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    RSPAREN         reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    TO              reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    STEP            reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    DO              reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)
    COLON           reduce using rule 67 (params_binary -> primaryexp PARAMS params_array .)


state 149

    (81) assignment -> variable EQUAL primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 81 (assignment -> variable EQUAL primaryexp .)
    COMMA           reduce using rule 81 (assignment -> variable EQUAL primaryexp .)
    $end            reduce using rule 81 (assignment -> variable EQUAL primaryexp .)
    RBRACE          reduce using rule 81 (assignment -> variable EQUAL primaryexp .)
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 150

    (83) assignment_code -> variable EQUAL LBRACE .
    (110) bracedexp -> LBRACE . new_scope code RBRACE
    (111) bracedexp -> LBRACE . RBRACE
    (112) new_scope -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! reduce/reduce conflict for NULAR_FNC resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for UNARY_FNC resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PLUS resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for MINUS resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NOT resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAM resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for PARAMS resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for FOR resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! reduce/reduce conflict for WITH resolved using rule 83 (assignment_code -> variable EQUAL LBRACE .)
  ! shift/reduce conflict for RBRACE resolved as shift
    NULAR_FNC       reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    UNARY_FNC       reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    PLUS            reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    MINUS           reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    NOT             reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    SWITCH          reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    PRIVATE         reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    PRIVATE_ID      reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    GLOBAL_ID       reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    LPAREN          reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    NAMESPACE       reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    PARAM           reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    PARAMS          reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    IF              reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    WHILE           reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    FOR             reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    LBRACE          reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_REAL     reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_EXP      reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    NUMBER_HEX      reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    LSPAREN         reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    STRING_SINGLE   reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    STRING_DOUBLE   reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    WITH            reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .)
    RBRACE          shift and go to state 116

  ! RBRACE          [ reduce using rule 83 (assignment_code -> variable EQUAL LBRACE .) ]
  ! NULAR_FNC       [ reduce using rule 112 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 112 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 112 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 112 (new_scope -> .) ]
  ! NOT             [ reduce using rule 112 (new_scope -> .) ]
  ! SWITCH          [ reduce using rule 112 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 112 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 112 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 112 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 112 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 112 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 112 (new_scope -> .) ]
  ! PARAMS          [ reduce using rule 112 (new_scope -> .) ]
  ! IF              [ reduce using rule 112 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 112 (new_scope -> .) ]
  ! FOR             [ reduce using rule 112 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 112 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 112 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 112 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 112 (new_scope -> .) ]
  ! WITH            [ reduce using rule 112 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 112 (new_scope -> .) ]

    new_scope                      shift and go to state 115

state 151

    (30) ifstatement -> iftype THEN bracedexp . ELSE bracedexp
    (31) ifstatement -> iftype THEN bracedexp .

    ELSE            shift and go to state 184
    SEMI_COLON      reduce using rule 31 (ifstatement -> iftype THEN bracedexp .)
    COMMA           reduce using rule 31 (ifstatement -> iftype THEN bracedexp .)
    $end            reduce using rule 31 (ifstatement -> iftype THEN bracedexp .)
    RBRACE          reduce using rule 31 (ifstatement -> iftype THEN bracedexp .)


state 152

    (32) ifstatement -> iftype EXITWITH bracedexp .

    SEMI_COLON      reduce using rule 32 (ifstatement -> iftype EXITWITH bracedexp .)
    COMMA           reduce using rule 32 (ifstatement -> iftype EXITWITH bracedexp .)
    $end            reduce using rule 32 (ifstatement -> iftype EXITWITH bracedexp .)
    RBRACE          reduce using rule 32 (ifstatement -> iftype EXITWITH bracedexp .)


state 153

    (38) foreachloop -> bracedexp FOREACH array .
    (103) primaryexp -> array .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 38 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for $end resolved using rule 38 (foreachloop -> bracedexp FOREACH array .)
  ! reduce/reduce conflict for RBRACE resolved using rule 38 (foreachloop -> bracedexp FOREACH array .)
    SEMI_COLON      reduce using rule 38 (foreachloop -> bracedexp FOREACH array .)
    COMMA           reduce using rule 38 (foreachloop -> bracedexp FOREACH array .)
    $end            reduce using rule 38 (foreachloop -> bracedexp FOREACH array .)
    RBRACE          reduce using rule 38 (foreachloop -> bracedexp FOREACH array .)
    BINARY_FNC      reduce using rule 103 (primaryexp -> array .)
    GETVARIABLE     reduce using rule 103 (primaryexp -> array .)
    SETVARIABLE     reduce using rule 103 (primaryexp -> array .)
    PARAM           reduce using rule 103 (primaryexp -> array .)
    PARAMS          reduce using rule 103 (primaryexp -> array .)
    LT              reduce using rule 103 (primaryexp -> array .)
    GT              reduce using rule 103 (primaryexp -> array .)
    LTE             reduce using rule 103 (primaryexp -> array .)
    GTE             reduce using rule 103 (primaryexp -> array .)
    EQUALITY        reduce using rule 103 (primaryexp -> array .)
    INEQUALITY      reduce using rule 103 (primaryexp -> array .)
    AND             reduce using rule 103 (primaryexp -> array .)
    OR              reduce using rule 103 (primaryexp -> array .)
    PLUS            reduce using rule 103 (primaryexp -> array .)
    MINUS           reduce using rule 103 (primaryexp -> array .)
    TIMES           reduce using rule 103 (primaryexp -> array .)
    DIVIDE          reduce using rule 103 (primaryexp -> array .)
    MOD             reduce using rule 103 (primaryexp -> array .)
    POW             reduce using rule 103 (primaryexp -> array .)

  ! SEMI_COLON      [ reduce using rule 103 (primaryexp -> array .) ]
  ! COMMA           [ reduce using rule 103 (primaryexp -> array .) ]
  ! $end            [ reduce using rule 103 (primaryexp -> array .) ]
  ! RBRACE          [ reduce using rule 103 (primaryexp -> array .) ]


state 154

    (39) foreachloop -> bracedexp FOREACH primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    SEMI_COLON      reduce using rule 39 (foreachloop -> bracedexp FOREACH primaryexp .)
    COMMA           reduce using rule 39 (foreachloop -> bracedexp FOREACH primaryexp .)
    $end            reduce using rule 39 (foreachloop -> bracedexp FOREACH primaryexp .)
    RBRACE          reduce using rule 39 (foreachloop -> bracedexp FOREACH primaryexp .)
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 155

    (40) foreachloop -> bracedexp FOREACH LPAREN . primaryexp RPAREN
    (109) primaryexp -> LPAREN . primaryexp RPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    bracedexp                      shift and go to state 96
    primaryexp                     shift and go to state 185
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 156

    (37) whileloop -> whiletype DO bracedexp .

    SEMI_COLON      reduce using rule 37 (whileloop -> whiletype DO bracedexp .)
    COMMA           reduce using rule 37 (whileloop -> whiletype DO bracedexp .)
    $end            reduce using rule 37 (whileloop -> whiletype DO bracedexp .)
    RBRACE          reduce using rule 37 (whileloop -> whiletype DO bracedexp .)


state 157

    (44) forloop -> fortype DO bracedexp_noscope .

    SEMI_COLON      reduce using rule 44 (forloop -> fortype DO bracedexp_noscope .)
    COMMA           reduce using rule 44 (forloop -> fortype DO bracedexp_noscope .)
    $end            reduce using rule 44 (forloop -> fortype DO bracedexp_noscope .)
    RBRACE          reduce using rule 44 (forloop -> fortype DO bracedexp_noscope .)


state 158

    (47) bracedexp_noscope -> LBRACE . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (154) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . nularexp
    (8) statement -> . unaryexp
    (11) controlstructure -> . ifstatement
    (12) controlstructure -> . whileloop
    (13) controlstructure -> . forloop
    (14) controlstructure -> . withstatement
    (15) controlstructure -> . foreachloop
    (16) controlstructure -> . switchstatement
    (79) assignment -> . assignment_code code RBRACE
    (80) assignment -> . definition EQUAL primaryexp
    (81) assignment -> . variable EQUAL primaryexp
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (30) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (31) ifstatement -> . iftype THEN bracedexp
    (32) ifstatement -> . iftype EXITWITH bracedexp
    (37) whileloop -> . whiletype DO bracedexp
    (44) forloop -> . fortype DO bracedexp_noscope
    (35) withstatement -> . withstatementinit bracedexp
    (38) foreachloop -> . bracedexp FOREACH array
    (39) foreachloop -> . bracedexp FOREACH primaryexp
    (40) foreachloop -> . bracedexp FOREACH LPAREN primaryexp RPAREN
    (24) switchstatement -> . SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE
    (82) assignment_code -> . definition EQUAL LBRACE
    (83) assignment_code -> . variable EQUAL LBRACE
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (89) variable -> . PRIVATE_ID
    (90) variable -> . GLOBAL_ID
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (34) withstatementinit -> . withtype DO
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (84) arraydefinition -> . PRIVATE stringarray
    (33) withtype -> . WITH NAMESPACE

    RBRACE          reduce using rule 154 (empty -> .)
    NULAR_FNC       shift and go to state 25
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    SWITCH          shift and go to state 41
    PRIVATE         shift and go to state 43
    PRIVATE_ID      shift and go to state 44
    GLOBAL_ID       shift and go to state 46
    LPAREN          shift and go to state 40
    NAMESPACE       shift and go to state 49
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    LBRACE          shift and go to state 42
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    WITH            shift and go to state 63

    code                           shift and go to state 186
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    nularexp                       shift and go to state 7
    unaryexp                       shift and go to state 8
    ifstatement                    shift and go to state 9
    whileloop                      shift and go to state 10
    forloop                        shift and go to state 11
    withstatement                  shift and go to state 12
    foreachloop                    shift and go to state 13
    switchstatement                shift and go to state 14
    assignment_code                shift and go to state 15
    definition                     shift and go to state 16
    primaryexp                     shift and go to state 17
    variable                       shift and go to state 18
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    identifier                     shift and go to state 26
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    iftype                         shift and go to state 34
    bracedexp                      shift and go to state 35
    whiletype                      shift and go to state 36
    fortype                        shift and go to state 37
    withstatementinit              shift and go to state 38
    array                          shift and go to state 39
    string                         shift and go to state 45
    number                         shift and go to state 47
    helpertype                     shift and go to state 48
    arraydefinition                shift and go to state 53
    withtype                       shift and go to state 57

state 159

    (109) primaryexp -> LPAREN primaryexp RPAREN .

    BINARY_FNC      reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    GETVARIABLE     reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    SETVARIABLE     reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    PARAM           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    PARAMS          reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    LT              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    GT              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    LTE             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    GTE             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    EQUALITY        reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    INEQUALITY      reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    AND             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    OR              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    PLUS            reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    MINUS           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    TIMES           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    DIVIDE          reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    MOD             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    POW             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    SEMI_COLON      reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    COMMA           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    $end            reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    RBRACE          reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    RPAREN          reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    RSPAREN         reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    TO              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    STEP            reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    DO              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    COLON           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)


state 160

    (24) switchstatement -> SWITCH LPAREN primaryexp . RPAREN DO LBRACE switchbody RBRACE
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RPAREN          shift and go to state 187
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 161

    (110) bracedexp -> LBRACE new_scope code . RBRACE

    RBRACE          shift and go to state 188


state 162

    (117) stringarray -> LSPAREN RSPAREN .

    SEMI_COLON      reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    $end            reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    BINARY_FNC      reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    PARAMS          reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    LT              reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    GT              reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    LTE             reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    GTE             reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    AND             reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    OR              reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    MOD             reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    POW             reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    TO              reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    STEP            reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    DO              reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)
    COLON           reduce using rule 117 (stringarray -> LSPAREN RSPAREN .)


state 163

    (118) stringarray -> LSPAREN stringarrayelement . RSPAREN

    RSPAREN         shift and go to state 189


state 164

    (119) stringarrayelement -> string .
    (120) stringarrayelement -> string . COMMA stringarrayelement

    RSPAREN         reduce using rule 119 (stringarrayelement -> string .)
    COMMA           shift and go to state 190


state 165

    (48) getvariable_ns -> NAMESPACE GETVARIABLE string .

    SEMI_COLON      reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    COMMA           reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    $end            reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    BINARY_FNC      reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GETVARIABLE     reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    SETVARIABLE     reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PARAM           reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PARAMS          reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    LT              reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GT              reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    LTE             reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    GTE             reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    EQUALITY        reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    INEQUALITY      reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    AND             reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    OR              reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    PLUS            reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    MINUS           reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    TIMES           reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    DIVIDE          reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    MOD             reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    POW             reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RBRACE          reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RPAREN          reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    RSPAREN         reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    TO              reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    STEP            reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    DO              reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)
    COLON           reduce using rule 48 (getvariable_ns -> NAMESPACE GETVARIABLE string .)


state 166

    (49) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 191

state 167

    (52) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN . string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN . string COMMA primaryexp COMMA booleanexp RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 192

state 168

    (114) array -> LSPAREN arrayelement RSPAREN .

    BINARY_FNC      reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    GETVARIABLE     reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    SETVARIABLE     reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    PARAM           reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    PARAMS          reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    LT              reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    GT              reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    LTE             reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    GTE             reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    EQUALITY        reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    INEQUALITY      reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    AND             reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    OR              reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    PLUS            reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    MINUS           reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    TIMES           reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    DIVIDE          reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    MOD             reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    POW             reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    SEMI_COLON      reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    COMMA           reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    $end            reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    RBRACE          reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    RPAREN          reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    RSPAREN         reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    TO              reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    STEP            reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    DO              reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)
    COLON           reduce using rule 114 (array -> LSPAREN arrayelement RSPAREN .)


state 169

    (116) arrayelement -> primaryexp COMMA . arrayelement
    (115) arrayelement -> . primaryexp
    (116) arrayelement -> . primaryexp COMMA arrayelement
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 125
    arrayelement                   shift and go to state 193
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 170

    (56) param_unary -> PARAM LSPAREN number . RSPAREN
    (57) param_unary -> PARAM LSPAREN number . COMMA primaryexp RSPAREN
    (58) param_unary -> PARAM LSPAREN number . COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA array RSPAREN

    RSPAREN         shift and go to state 194
    COMMA           shift and go to state 195


state 171

    (73) params_array_entry -> LSPAREN . string COMMA primaryexp RSPAREN
    (74) params_array_entry -> LSPAREN . string COMMA primaryexp COMMA array RSPAREN
    (75) params_array_entry -> LSPAREN . string COMMA primaryexp COMMA array COMMA number RSPAREN
    (76) params_array_entry -> LSPAREN . string COMMA primaryexp COMMA array COMMA array RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 196

state 172

    (68) params_array -> LSPAREN RSPAREN .

    SEMI_COLON      reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    $end            reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    BINARY_FNC      reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    GETVARIABLE     reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    SETVARIABLE     reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    PARAM           reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    PARAMS          reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    LT              reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    GT              reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    AND             reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    OR              reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    POW             reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    TO              reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    STEP            reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    DO              reduce using rule 68 (params_array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 68 (params_array -> LSPAREN RSPAREN .)


state 173

    (69) params_array -> LSPAREN params_element . RSPAREN

    RSPAREN         shift and go to state 197


state 174

    (70) params_element -> params_array_entry .
    (71) params_element -> params_array_entry . COMMA params_element

    RSPAREN         reduce using rule 70 (params_element -> params_array_entry .)
    COMMA           shift and go to state 198


state 175

    (72) params_array_entry -> string .

    COMMA           reduce using rule 72 (params_array_entry -> string .)
    RSPAREN         reduce using rule 72 (params_array_entry -> string .)


state 176

    (29) iftype -> IF LPAREN primaryexp . RPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RPAREN          shift and go to state 199
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 177

    (45) forloop_condition -> LBRACE booleanexp . RBRACE

    RBRACE          shift and go to state 200


state 178

    (144) booleanexp -> primaryexp .
    (145) booleanexp -> primaryexp . comparisonoperator booleanexp
    (146) booleanexp -> primaryexp . comparisonoperator LBRACE booleanexp RBRACE
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RBRACE          reduce using rule 144 (booleanexp -> primaryexp .)
    RSPAREN         reduce using rule 144 (booleanexp -> primaryexp .)
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 201
    mathoperator                   shift and go to state 71

state 179

    (41) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp
    (42) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp STEP primaryexp

    FROM            shift and go to state 202


state 180

    (43) fortype -> FOR new_scope LSPAREN . bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (47) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 158

    bracedexp_noscope              shift and go to state 203

state 181

    (51) getvariable_any -> primaryexp GETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN

    COMMA           shift and go to state 204


state 182

    (54) setvariable_any -> primaryexp SETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string . COMMA primaryexp COMMA booleanexp RSPAREN

    COMMA           shift and go to state 205


state 183

    (61) param_binary -> primaryexp PARAM LSPAREN number . RSPAREN
    (62) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number . COMMA primaryexp COMMA array COMMA array RSPAREN

    RSPAREN         shift and go to state 206
    COMMA           shift and go to state 207


state 184

    (30) ifstatement -> iftype THEN bracedexp ELSE . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 208

state 185

    (40) foreachloop -> bracedexp FOREACH LPAREN primaryexp . RPAREN
    (109) primaryexp -> LPAREN primaryexp . RPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RPAREN          shift and go to state 209
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 186

    (47) bracedexp_noscope -> LBRACE code . RBRACE

    RBRACE          shift and go to state 210


state 187

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN . DO LBRACE switchbody RBRACE

    DO              shift and go to state 211


state 188

    (110) bracedexp -> LBRACE new_scope code RBRACE .

    FOREACH         reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    BINARY_FNC      reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    GETVARIABLE     reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    SETVARIABLE     reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    PARAM           reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    PARAMS          reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    LT              reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    GT              reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    LTE             reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    GTE             reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    EQUALITY        reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    INEQUALITY      reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    AND             reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    OR              reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    PLUS            reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    MINUS           reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    TIMES           reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    DIVIDE          reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    MOD             reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    POW             reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    SEMI_COLON      reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    COMMA           reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    $end            reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    RBRACE          reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    RPAREN          reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    RSPAREN         reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    TO              reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    STEP            reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    DO              reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    COLON           reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)
    ELSE            reduce using rule 110 (bracedexp -> LBRACE new_scope code RBRACE .)


state 189

    (118) stringarray -> LSPAREN stringarrayelement RSPAREN .

    SEMI_COLON      reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    COMMA           reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    $end            reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    BINARY_FNC      reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GETVARIABLE     reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    SETVARIABLE     reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PARAM           reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PARAMS          reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    LT              reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GT              reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    LTE             reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    GTE             reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    EQUALITY        reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    INEQUALITY      reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    AND             reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    OR              reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    PLUS            reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    MINUS           reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    TIMES           reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    DIVIDE          reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    MOD             reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    POW             reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RBRACE          reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RPAREN          reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    RSPAREN         reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    TO              reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    STEP            reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    DO              reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)
    COLON           reduce using rule 118 (stringarray -> LSPAREN stringarrayelement RSPAREN .)


state 190

    (120) stringarrayelement -> string COMMA . stringarrayelement
    (119) stringarrayelement -> . string
    (120) stringarrayelement -> . string COMMA stringarrayelement
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    string                         shift and go to state 164
    stringarrayelement             shift and go to state 212

state 191

    (49) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN

    COMMA           shift and go to state 213


state 192

    (52) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string . COMMA primaryexp RSPAREN
    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string . COMMA primaryexp COMMA booleanexp RSPAREN

    COMMA           shift and go to state 214


state 193

    (116) arrayelement -> primaryexp COMMA arrayelement .

    RSPAREN         reduce using rule 116 (arrayelement -> primaryexp COMMA arrayelement .)


state 194

    (56) param_unary -> PARAM LSPAREN number RSPAREN .

    SEMI_COLON      reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    COMMA           reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    $end            reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    BINARY_FNC      reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    GETVARIABLE     reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    SETVARIABLE     reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    PARAM           reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    PARAMS          reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    LT              reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    GT              reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    LTE             reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    GTE             reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    EQUALITY        reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    INEQUALITY      reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    AND             reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    OR              reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    PLUS            reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    MINUS           reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    TIMES           reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    DIVIDE          reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    MOD             reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    POW             reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    RBRACE          reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    RPAREN          reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    RSPAREN         reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    TO              reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    STEP            reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    DO              reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)
    COLON           reduce using rule 56 (param_unary -> PARAM LSPAREN number RSPAREN .)


state 195

    (57) param_unary -> PARAM LSPAREN number COMMA . primaryexp RSPAREN
    (58) param_unary -> PARAM LSPAREN number COMMA . primaryexp COMMA array RSPAREN
    (59) param_unary -> PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA array RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    number                         shift and go to state 47
    primaryexp                     shift and go to state 215
    array                          shift and go to state 39
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 196

    (73) params_array_entry -> LSPAREN string . COMMA primaryexp RSPAREN
    (74) params_array_entry -> LSPAREN string . COMMA primaryexp COMMA array RSPAREN
    (75) params_array_entry -> LSPAREN string . COMMA primaryexp COMMA array COMMA number RSPAREN
    (76) params_array_entry -> LSPAREN string . COMMA primaryexp COMMA array COMMA array RSPAREN

    COMMA           shift and go to state 216


state 197

    (69) params_array -> LSPAREN params_element RSPAREN .

    SEMI_COLON      reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    COMMA           reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    $end            reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    BINARY_FNC      reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    GETVARIABLE     reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    SETVARIABLE     reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    PARAM           reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    PARAMS          reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    LT              reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    GT              reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    LTE             reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    GTE             reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    EQUALITY        reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    INEQUALITY      reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    AND             reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    OR              reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    PLUS            reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    MINUS           reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    TIMES           reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    DIVIDE          reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    MOD             reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    POW             reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    RBRACE          reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    RPAREN          reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    RSPAREN         reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    TO              reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    STEP            reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    DO              reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)
    COLON           reduce using rule 69 (params_array -> LSPAREN params_element RSPAREN .)


state 198

    (71) params_element -> params_array_entry COMMA . params_element
    (70) params_element -> . params_array_entry
    (71) params_element -> . params_array_entry COMMA params_element
    (72) params_array_entry -> . string
    (73) params_array_entry -> . LSPAREN string COMMA primaryexp RSPAREN
    (74) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array RSPAREN
    (75) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN
    (76) params_array_entry -> . LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 171
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62

    params_array_entry             shift and go to state 174
    params_element                 shift and go to state 217
    string                         shift and go to state 175

state 199

    (29) iftype -> IF LPAREN primaryexp RPAREN .

    THEN            reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    EXITWITH        reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    BINARY_FNC      reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    GETVARIABLE     reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    SETVARIABLE     reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    PARAM           reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    PARAMS          reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    LT              reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    GT              reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    LTE             reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    GTE             reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    EQUALITY        reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    INEQUALITY      reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    AND             reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    OR              reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    PLUS            reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    MINUS           reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    TIMES           reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    DIVIDE          reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    MOD             reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    POW             reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    SEMI_COLON      reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    COMMA           reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    $end            reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    RBRACE          reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    RPAREN          reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    RSPAREN         reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    TO              reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    STEP            reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    DO              reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)
    COLON           reduce using rule 29 (iftype -> IF LPAREN primaryexp RPAREN .)


state 200

    (45) forloop_condition -> LBRACE booleanexp RBRACE .

    THEN            reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    EXITWITH        reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    BINARY_FNC      reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    GETVARIABLE     reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    SETVARIABLE     reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    PARAM           reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    PARAMS          reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    LT              reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    GT              reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    LTE             reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    GTE             reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    EQUALITY        reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    INEQUALITY      reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    AND             reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    OR              reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    PLUS            reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    MINUS           reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    TIMES           reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    DIVIDE          reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    MOD             reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    POW             reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    SEMI_COLON      reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    COMMA           reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    $end            reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    RBRACE          reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    RPAREN          reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    RSPAREN         reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    TO              reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    STEP            reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    DO              reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)
    COLON           reduce using rule 45 (forloop_condition -> LBRACE booleanexp RBRACE .)


state 201

    (145) booleanexp -> primaryexp comparisonoperator . booleanexp
    (146) booleanexp -> primaryexp comparisonoperator . LBRACE booleanexp RBRACE
    (92) binaryexp -> primaryexp comparisonoperator . primaryexp
    (144) booleanexp -> . primaryexp
    (145) booleanexp -> . primaryexp comparisonoperator booleanexp
    (146) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LBRACE          shift and go to state 220
    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 218
    booleanexp                     shift and go to state 219
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 202

    (41) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp
    (42) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp STEP primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 221
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 203

    (43) fortype -> FOR new_scope LSPAREN bracedexp_noscope . COMMA forloop_condition COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 222


state 204

    (51) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 223
    string                         shift and go to state 45
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 205

    (54) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA . primaryexp COMMA booleanexp RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 224
    string                         shift and go to state 45
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 206

    (61) param_binary -> primaryexp PARAM LSPAREN number RSPAREN .

    SEMI_COLON      reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    COMMA           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    $end            reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    BINARY_FNC      reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GETVARIABLE     reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    SETVARIABLE     reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PARAM           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PARAMS          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    LT              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GT              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    LTE             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    GTE             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    EQUALITY        reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    INEQUALITY      reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    AND             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    OR              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    PLUS            reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    MINUS           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    TIMES           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    DIVIDE          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    MOD             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    POW             reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RBRACE          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RPAREN          reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    RSPAREN         reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    TO              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    STEP            reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    DO              reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)
    COLON           reduce using rule 61 (param_binary -> primaryexp PARAM LSPAREN number RSPAREN .)


state 207

    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA . primaryexp COMMA array COMMA array RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 225
    number                         shift and go to state 47
    array                          shift and go to state 39
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 208

    (30) ifstatement -> iftype THEN bracedexp ELSE bracedexp .

    SEMI_COLON      reduce using rule 30 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    COMMA           reduce using rule 30 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    $end            reduce using rule 30 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    RBRACE          reduce using rule 30 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)


state 209

    (40) foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .
    (109) primaryexp -> LPAREN primaryexp RPAREN .

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    SEMI_COLON      reduce using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    COMMA           reduce using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    $end            reduce using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    RBRACE          reduce using rule 40 (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN .)
    BINARY_FNC      reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    GETVARIABLE     reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    SETVARIABLE     reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    PARAM           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    PARAMS          reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    LT              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    GT              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    LTE             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    GTE             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    EQUALITY        reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    INEQUALITY      reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    AND             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    OR              reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    PLUS            reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    MINUS           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    TIMES           reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    DIVIDE          reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    MOD             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)
    POW             reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .)

  ! SEMI_COLON      [ reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! COMMA           [ reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! $end            [ reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .) ]
  ! RBRACE          [ reduce using rule 109 (primaryexp -> LPAREN primaryexp RPAREN .) ]


state 210

    (47) bracedexp_noscope -> LBRACE code RBRACE .

    SEMI_COLON      reduce using rule 47 (bracedexp_noscope -> LBRACE code RBRACE .)
    COMMA           reduce using rule 47 (bracedexp_noscope -> LBRACE code RBRACE .)
    $end            reduce using rule 47 (bracedexp_noscope -> LBRACE code RBRACE .)
    RBRACE          reduce using rule 47 (bracedexp_noscope -> LBRACE code RBRACE .)
    RSPAREN         reduce using rule 47 (bracedexp_noscope -> LBRACE code RBRACE .)


state 211

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO . LBRACE switchbody RBRACE

    LBRACE          shift and go to state 226


state 212

    (120) stringarrayelement -> string COMMA stringarrayelement .

    RSPAREN         reduce using rule 120 (stringarrayelement -> string COMMA stringarrayelement .)


state 213

    (49) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 227
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 214

    (52) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA . primaryexp RSPAREN
    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA . primaryexp COMMA booleanexp RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 228
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 215

    (57) param_unary -> PARAM LSPAREN number COMMA primaryexp . RSPAREN
    (58) param_unary -> PARAM LSPAREN number COMMA primaryexp . COMMA array RSPAREN
    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA number RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA array RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 230
    COMMA           shift and go to state 229
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 216

    (73) params_array_entry -> LSPAREN string COMMA . primaryexp RSPAREN
    (74) params_array_entry -> LSPAREN string COMMA . primaryexp COMMA array RSPAREN
    (75) params_array_entry -> LSPAREN string COMMA . primaryexp COMMA array COMMA number RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA . primaryexp COMMA array COMMA array RSPAREN
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 231
    array                          shift and go to state 39
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 217

    (71) params_element -> params_array_entry COMMA params_element .

    RSPAREN         reduce using rule 71 (params_element -> params_array_entry COMMA params_element .)


state 218

    (92) binaryexp -> primaryexp comparisonoperator primaryexp .
    (144) booleanexp -> primaryexp .
    (145) booleanexp -> primaryexp . comparisonoperator booleanexp
    (146) booleanexp -> primaryexp . comparisonoperator LBRACE booleanexp RBRACE
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

  ! reduce/reduce conflict for RBRACE resolved using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    BINARY_FNC      reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GETVARIABLE     reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    SETVARIABLE     reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAM           reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PARAMS          reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LT              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GT              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    LTE             reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    GTE             reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    EQUALITY        reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    INEQUALITY      reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    AND             reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    OR              reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RBRACE          reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    RSPAREN         reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

  ! PLUS            [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MINUS           [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! TIMES           [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! DIVIDE          [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! MOD             [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! POW             [ reduce using rule 92 (binaryexp -> primaryexp comparisonoperator primaryexp .) ]
  ! RBRACE          [ reduce using rule 144 (booleanexp -> primaryexp .) ]
  ! RSPAREN         [ reduce using rule 144 (booleanexp -> primaryexp .) ]
  ! BINARY_FNC      [ shift and go to state 69 ]
  ! GETVARIABLE     [ shift and go to state 72 ]
  ! SETVARIABLE     [ shift and go to state 73 ]
  ! PARAM           [ shift and go to state 74 ]
  ! PARAMS          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! LTE             [ shift and go to state 78 ]
  ! GTE             [ shift and go to state 79 ]
  ! EQUALITY        [ shift and go to state 80 ]
  ! INEQUALITY      [ shift and go to state 81 ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]

    comparisonoperator             shift and go to state 201
    mathoperator                   shift and go to state 71

state 219

    (145) booleanexp -> primaryexp comparisonoperator booleanexp .

    RBRACE          reduce using rule 145 (booleanexp -> primaryexp comparisonoperator booleanexp .)
    RSPAREN         reduce using rule 145 (booleanexp -> primaryexp comparisonoperator booleanexp .)


state 220

    (146) booleanexp -> primaryexp comparisonoperator LBRACE . booleanexp RBRACE
    (110) bracedexp -> LBRACE . new_scope code RBRACE
    (111) bracedexp -> LBRACE . RBRACE
    (144) booleanexp -> . primaryexp
    (145) booleanexp -> . primaryexp comparisonoperator booleanexp
    (146) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (112) new_scope -> .
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER_REAL resolved as shift
  ! shift/reduce conflict for NUMBER_EXP resolved as shift
  ! shift/reduce conflict for NUMBER_HEX resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
  ! shift/reduce conflict for UNARY_FNC resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULAR_FNC resolved as shift
  ! shift/reduce conflict for STRING_SINGLE resolved as shift
  ! shift/reduce conflict for STRING_DOUBLE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    RBRACE          shift and go to state 116
    SWITCH          reduce using rule 112 (new_scope -> .)
    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

  ! NULAR_FNC       [ reduce using rule 112 (new_scope -> .) ]
  ! UNARY_FNC       [ reduce using rule 112 (new_scope -> .) ]
  ! PLUS            [ reduce using rule 112 (new_scope -> .) ]
  ! MINUS           [ reduce using rule 112 (new_scope -> .) ]
  ! NOT             [ reduce using rule 112 (new_scope -> .) ]
  ! PRIVATE         [ reduce using rule 112 (new_scope -> .) ]
  ! PRIVATE_ID      [ reduce using rule 112 (new_scope -> .) ]
  ! GLOBAL_ID       [ reduce using rule 112 (new_scope -> .) ]
  ! LPAREN          [ reduce using rule 112 (new_scope -> .) ]
  ! NAMESPACE       [ reduce using rule 112 (new_scope -> .) ]
  ! PARAM           [ reduce using rule 112 (new_scope -> .) ]
  ! PARAMS          [ reduce using rule 112 (new_scope -> .) ]
  ! IF              [ reduce using rule 112 (new_scope -> .) ]
  ! WHILE           [ reduce using rule 112 (new_scope -> .) ]
  ! FOR             [ reduce using rule 112 (new_scope -> .) ]
  ! LBRACE          [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_REAL     [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_EXP      [ reduce using rule 112 (new_scope -> .) ]
  ! NUMBER_HEX      [ reduce using rule 112 (new_scope -> .) ]
  ! LSPAREN         [ reduce using rule 112 (new_scope -> .) ]
  ! STRING_SINGLE   [ reduce using rule 112 (new_scope -> .) ]
  ! STRING_DOUBLE   [ reduce using rule 112 (new_scope -> .) ]
  ! WITH            [ reduce using rule 112 (new_scope -> .) ]
  ! RBRACE          [ reduce using rule 112 (new_scope -> .) ]

    primaryexp                     shift and go to state 178
    booleanexp                     shift and go to state 232
    new_scope                      shift and go to state 115
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 221

    (41) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp
    (42) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp STEP primaryexp
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    TO              shift and go to state 233
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 222

    (43) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA . forloop_condition COMMA bracedexp_noscope RSPAREN
    (45) forloop_condition -> . LBRACE booleanexp RBRACE
    (46) forloop_condition -> . identifier
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID

    LBRACE          shift and go to state 131
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98

    forloop_condition              shift and go to state 234
    identifier                     shift and go to state 132

state 223

    (51) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 235
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 224

    (54) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp . COMMA booleanexp RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 237
    COMMA           shift and go to state 236
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 225

    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . RSPAREN
    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp . COMMA array COMMA array RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 239
    COMMA           shift and go to state 238
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 226

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE . switchbody RBRACE
    (25) switchbody -> . empty
    (26) switchbody -> . case
    (27) switchbody -> . case terminator switchbody
    (154) empty -> .
    (21) case -> . CASE primaryexp COLON bracedexp
    (22) case -> . CASE primaryexp
    (23) case -> . DEFAULT bracedexp

    RBRACE          reduce using rule 154 (empty -> .)
    CASE            shift and go to state 243
    DEFAULT         shift and go to state 244

    switchbody                     shift and go to state 240
    empty                          shift and go to state 241
    case                           shift and go to state 242

state 227

    (49) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 245
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 228

    (52) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp . RSPAREN
    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp . COMMA booleanexp RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 247
    COMMA           shift and go to state 246
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 229

    (58) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA . array RSPAREN
    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA number RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA array RSPAREN
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 50

    array                          shift and go to state 248

state 230

    (57) param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    $end            reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LT              reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GT              reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    AND             reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    OR              reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    POW             reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TO              reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DO              reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 57 (param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN .)


state 231

    (73) params_array_entry -> LSPAREN string COMMA primaryexp . RSPAREN
    (74) params_array_entry -> LSPAREN string COMMA primaryexp . COMMA array RSPAREN
    (75) params_array_entry -> LSPAREN string COMMA primaryexp . COMMA array COMMA number RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp . COMMA array COMMA array RSPAREN
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    RSPAREN         shift and go to state 250
    COMMA           shift and go to state 249
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 232

    (146) booleanexp -> primaryexp comparisonoperator LBRACE booleanexp . RBRACE

    RBRACE          shift and go to state 251


state 233

    (41) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp
    (42) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp STEP primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 252
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 234

    (43) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition . COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 253


state 235

    (51) getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 51 (getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 236

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA . booleanexp RSPAREN
    (144) booleanexp -> . primaryexp
    (145) booleanexp -> . primaryexp comparisonoperator booleanexp
    (146) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 178
    string                         shift and go to state 45
    booleanexp                     shift and go to state 254
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 237

    (54) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 54 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 238

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA . array COMMA array RSPAREN
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 50

    array                          shift and go to state 255

state 239

    (62) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    $end            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LT              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GT              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    AND             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    OR              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    POW             reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    TO              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    DO              reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 62 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN .)


state 240

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody . RBRACE

    RBRACE          shift and go to state 256


state 241

    (25) switchbody -> empty .

    RBRACE          reduce using rule 25 (switchbody -> empty .)


state 242

    (26) switchbody -> case .
    (27) switchbody -> case . terminator switchbody
    (9) terminator -> . SEMI_COLON
    (10) terminator -> . COMMA

    RBRACE          reduce using rule 26 (switchbody -> case .)
    SEMI_COLON      shift and go to state 65
    COMMA           shift and go to state 66

    terminator                     shift and go to state 257

state 243

    (21) case -> CASE . primaryexp COLON bracedexp
    (22) case -> CASE . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    primaryexp                     shift and go to state 258
    bracedexp                      shift and go to state 96
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    string                         shift and go to state 45
    binaryexp                      shift and go to state 95
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 244

    (23) case -> DEFAULT . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 259

state 245

    (49) getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 49 (getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 246

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA . booleanexp RSPAREN
    (144) booleanexp -> . primaryexp
    (145) booleanexp -> . primaryexp comparisonoperator booleanexp
    (146) booleanexp -> . primaryexp comparisonoperator LBRACE booleanexp RBRACE
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 178
    booleanexp                     shift and go to state 260
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 247

    (52) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .

    SEMI_COLON      reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COMMA           reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    $end            reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    BINARY_FNC      reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GETVARIABLE     reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    SETVARIABLE     reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAM           reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PARAMS          reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LT              reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GT              reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    LTE             reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    GTE             reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    EQUALITY        reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    INEQUALITY      reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    AND             reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    OR              reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    PLUS            reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MINUS           reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TIMES           reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DIVIDE          reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    MOD             reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    POW             reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RBRACE          reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RPAREN          reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    TO              reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    STEP            reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    DO              reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)
    COLON           reduce using rule 52 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN .)


state 248

    (58) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array . RSPAREN
    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA number RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 262
    COMMA           shift and go to state 261


state 249

    (74) params_array_entry -> LSPAREN string COMMA primaryexp COMMA . array RSPAREN
    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA . array COMMA number RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA . array COMMA array RSPAREN
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN

    LSPAREN         shift and go to state 50

    array                          shift and go to state 263

state 250

    (73) params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN .

    COMMA           reduce using rule 73 (params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN .)
    RSPAREN         reduce using rule 73 (params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN .)


state 251

    (146) booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .

    RBRACE          reduce using rule 146 (booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .)
    RSPAREN         reduce using rule 146 (booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE .)


state 252

    (41) fortype -> FOR new_scope string FROM primaryexp TO primaryexp .
    (42) fortype -> FOR new_scope string FROM primaryexp TO primaryexp . STEP primaryexp
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

  ! shift/reduce conflict for STEP resolved as shift
  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    DO              reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    SEMI_COLON      reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COMMA           reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    $end            reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RBRACE          reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RPAREN          reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RSPAREN         reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    TO              reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COLON           reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    STEP            shift and go to state 264
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

  ! BINARY_FNC      [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PARAM           [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PARAMS          [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! LT              [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GT              [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! LTE             [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! GTE             [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! EQUALITY        [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! AND             [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! OR              [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PLUS            [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! MINUS           [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! TIMES           [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! DIVIDE          [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! MOD             [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! POW             [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! STEP            [ reduce using rule 41 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 253

    (43) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA . bracedexp_noscope RSPAREN
    (47) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 158

    bracedexp_noscope              shift and go to state 265

state 254

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp . RSPAREN

    RSPAREN         shift and go to state 266


state 255

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . RSPAREN
    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 268
    COMMA           shift and go to state 267


state 256

    (24) switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .

    SEMI_COLON      reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    COMMA           reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    $end            reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)
    RBRACE          reduce using rule 24 (switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE .)


state 257

    (27) switchbody -> case terminator . switchbody
    (25) switchbody -> . empty
    (26) switchbody -> . case
    (27) switchbody -> . case terminator switchbody
    (154) empty -> .
    (21) case -> . CASE primaryexp COLON bracedexp
    (22) case -> . CASE primaryexp
    (23) case -> . DEFAULT bracedexp

    RBRACE          reduce using rule 154 (empty -> .)
    CASE            shift and go to state 243
    DEFAULT         shift and go to state 244

    case                           shift and go to state 242
    switchbody                     shift and go to state 269
    empty                          shift and go to state 241

state 258

    (21) case -> CASE primaryexp . COLON bracedexp
    (22) case -> CASE primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

    COLON           shift and go to state 270
    SEMI_COLON      reduce using rule 22 (case -> CASE primaryexp .)
    COMMA           reduce using rule 22 (case -> CASE primaryexp .)
    RBRACE          reduce using rule 22 (case -> CASE primaryexp .)
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 259

    (23) case -> DEFAULT bracedexp .

    SEMI_COLON      reduce using rule 23 (case -> DEFAULT bracedexp .)
    COMMA           reduce using rule 23 (case -> DEFAULT bracedexp .)
    RBRACE          reduce using rule 23 (case -> DEFAULT bracedexp .)


state 260

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp . RSPAREN

    RSPAREN         shift and go to state 271


state 261

    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . number RSPAREN
    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . array RSPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50

    number                         shift and go to state 272
    array                          shift and go to state 273

state 262

    (58) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COMMA           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    $end            reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAM           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAMS          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LT              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GT              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LTE             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GTE             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    EQUALITY        reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    AND             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    OR              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PLUS            reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MINUS           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TIMES           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DIVIDE          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MOD             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    POW             reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RBRACE          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RPAREN          reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TO              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    STEP            reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DO              reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COLON           reduce using rule 58 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)


state 263

    (74) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array . RSPAREN
    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array . COMMA number RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array . COMMA array RSPAREN

    RSPAREN         shift and go to state 275
    COMMA           shift and go to state 274


state 264

    (42) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP . primaryexp
    (100) primaryexp -> . number
    (101) primaryexp -> . identifier
    (102) primaryexp -> . helpertype
    (103) primaryexp -> . array
    (104) primaryexp -> . unaryexp
    (105) primaryexp -> . nularexp
    (106) primaryexp -> . string
    (107) primaryexp -> . binaryexp
    (108) primaryexp -> . bracedexp
    (109) primaryexp -> . LPAREN primaryexp RPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (87) identifier -> . PRIVATE_ID
    (88) identifier -> . GLOBAL_ID
    (17) helpertype -> . iftype
    (18) helpertype -> . whiletype
    (19) helpertype -> . fortype
    (20) helpertype -> . withtype
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN
    (123) unaryexp -> . UNARY_FNC primaryexp
    (124) unaryexp -> . PLUS primaryexp
    (125) unaryexp -> . MINUS primaryexp
    (126) unaryexp -> . NOT primaryexp
    (127) unaryexp -> . vardefinition
    (128) unaryexp -> . param_unary
    (129) unaryexp -> . params_unary
    (121) nularexp -> . NULAR_FNC
    (122) nularexp -> . identifier
    (152) string -> . STRING_SINGLE
    (153) string -> . STRING_DOUBLE
    (91) binaryexp -> . primaryexp BINARY_FNC primaryexp
    (92) binaryexp -> . primaryexp comparisonoperator primaryexp
    (93) binaryexp -> . primaryexp mathoperator primaryexp
    (94) binaryexp -> . getvariable_ns
    (95) binaryexp -> . getvariable_any
    (96) binaryexp -> . setvariable_ns
    (97) binaryexp -> . setvariable_any
    (98) binaryexp -> . param_binary
    (99) binaryexp -> . params_binary
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE
    (28) iftype -> . IF forloop_condition
    (29) iftype -> . IF LPAREN primaryexp RPAREN
    (36) whiletype -> . WHILE forloop_condition
    (41) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (42) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (43) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN
    (33) withtype -> . WITH NAMESPACE
    (77) vardefinition -> . definition
    (78) vardefinition -> . arraydefinition
    (56) param_unary -> . PARAM LSPAREN number RSPAREN
    (57) param_unary -> . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (58) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (59) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (60) param_unary -> . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (66) params_unary -> . PARAMS params_array
    (48) getvariable_ns -> . NAMESPACE GETVARIABLE string
    (49) getvariable_ns -> . NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (50) getvariable_any -> . primaryexp GETVARIABLE string
    (51) getvariable_any -> . primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (52) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (53) setvariable_ns -> . NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (54) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> . primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> . primaryexp PARAM LSPAREN number RSPAREN
    (62) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> . primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> . primaryexp PARAMS params_array
    (85) definition -> . PRIVATE PRIVATE_ID
    (86) definition -> . PRIVATE string
    (84) arraydefinition -> . PRIVATE stringarray

    LPAREN          shift and go to state 40
    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    PRIVATE_ID      shift and go to state 97
    GLOBAL_ID       shift and go to state 98
    LSPAREN         shift and go to state 50
    UNARY_FNC       shift and go to state 27
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    NOT             shift and go to state 30
    NULAR_FNC       shift and go to state 25
    STRING_SINGLE   shift and go to state 61
    STRING_DOUBLE   shift and go to state 62
    LBRACE          shift and go to state 42
    IF              shift and go to state 54
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    WITH            shift and go to state 63
    PARAM           shift and go to state 51
    PARAMS          shift and go to state 52
    NAMESPACE       shift and go to state 49
    PRIVATE         shift and go to state 43

    string                         shift and go to state 45
    primaryexp                     shift and go to state 276
    number                         shift and go to state 47
    identifier                     shift and go to state 92
    helpertype                     shift and go to state 48
    array                          shift and go to state 39
    unaryexp                       shift and go to state 93
    nularexp                       shift and go to state 94
    binaryexp                      shift and go to state 95
    bracedexp                      shift and go to state 96
    iftype                         shift and go to state 99
    whiletype                      shift and go to state 100
    fortype                        shift and go to state 101
    withtype                       shift and go to state 102
    vardefinition                  shift and go to state 31
    param_unary                    shift and go to state 32
    params_unary                   shift and go to state 33
    getvariable_ns                 shift and go to state 19
    getvariable_any                shift and go to state 20
    setvariable_ns                 shift and go to state 21
    setvariable_any                shift and go to state 22
    param_binary                   shift and go to state 23
    params_binary                  shift and go to state 24
    definition                     shift and go to state 103
    arraydefinition                shift and go to state 53

state 265

    (43) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope . RSPAREN

    RSPAREN         shift and go to state 277


state 266

    (55) setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .

    SEMI_COLON      reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COMMA           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    $end            reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    BINARY_FNC      reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GETVARIABLE     reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    SETVARIABLE     reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAM           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAMS          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LT              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GT              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LTE             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GTE             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    EQUALITY        reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    INEQUALITY      reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    AND             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    OR              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PLUS            reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MINUS           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TIMES           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DIVIDE          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MOD             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    POW             reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RBRACE          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RPAREN          reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RSPAREN         reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TO              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    STEP            reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DO              reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COLON           reduce using rule 55 (setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)


state 267

    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . number RSPAREN
    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA . array RSPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50

    number                         shift and go to state 278
    array                          shift and go to state 279

state 268

    (63) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COMMA           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    $end            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAM           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PARAMS          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LT              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GT              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    LTE             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    GTE             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    EQUALITY        reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    AND             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    OR              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    PLUS            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MINUS           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TIMES           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DIVIDE          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    MOD             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    POW             reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RBRACE          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RPAREN          reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    TO              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    STEP            reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    DO              reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)
    COLON           reduce using rule 63 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN .)


state 269

    (27) switchbody -> case terminator switchbody .

    RBRACE          reduce using rule 27 (switchbody -> case terminator switchbody .)


state 270

    (21) case -> CASE primaryexp COLON . bracedexp
    (110) bracedexp -> . LBRACE new_scope code RBRACE
    (111) bracedexp -> . LBRACE RBRACE

    LBRACE          shift and go to state 42

    bracedexp                      shift and go to state 280

state 271

    (53) setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .

    SEMI_COLON      reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COMMA           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    $end            reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    BINARY_FNC      reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GETVARIABLE     reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    SETVARIABLE     reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAM           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PARAMS          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LT              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GT              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    LTE             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    GTE             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    EQUALITY        reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    INEQUALITY      reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    AND             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    OR              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    PLUS            reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MINUS           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TIMES           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DIVIDE          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    MOD             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    POW             reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RBRACE          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RPAREN          reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    RSPAREN         reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    TO              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    STEP            reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    DO              reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)
    COLON           reduce using rule 53 (setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN .)


state 272

    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 281


state 273

    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 282


state 274

    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA . number RSPAREN
    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA . array RSPAREN
    (149) number -> . NUMBER_REAL
    (150) number -> . NUMBER_EXP
    (151) number -> . NUMBER_HEX
    (113) array -> . LSPAREN RSPAREN
    (114) array -> . LSPAREN arrayelement RSPAREN

    NUMBER_REAL     shift and go to state 58
    NUMBER_EXP      shift and go to state 59
    NUMBER_HEX      shift and go to state 60
    LSPAREN         shift and go to state 50

    array                          shift and go to state 283
    number                         shift and go to state 284

state 275

    (74) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN .

    COMMA           reduce using rule 74 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN .)
    RSPAREN         reduce using rule 74 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN .)


state 276

    (42) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .
    (91) binaryexp -> primaryexp . BINARY_FNC primaryexp
    (92) binaryexp -> primaryexp . comparisonoperator primaryexp
    (93) binaryexp -> primaryexp . mathoperator primaryexp
    (50) getvariable_any -> primaryexp . GETVARIABLE string
    (51) getvariable_any -> primaryexp . GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (54) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN
    (55) setvariable_any -> primaryexp . SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN
    (61) param_binary -> primaryexp . PARAM LSPAREN number RSPAREN
    (62) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp RSPAREN
    (63) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN
    (64) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN
    (65) param_binary -> primaryexp . PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN
    (67) params_binary -> primaryexp . PARAMS params_array
    (130) comparisonoperator -> . LT
    (131) comparisonoperator -> . GT
    (132) comparisonoperator -> . LTE
    (133) comparisonoperator -> . GTE
    (134) comparisonoperator -> . EQUALITY
    (135) comparisonoperator -> . INEQUALITY
    (136) comparisonoperator -> . AND
    (137) comparisonoperator -> . OR
    (138) mathoperator -> . PLUS
    (139) mathoperator -> . MINUS
    (140) mathoperator -> . TIMES
    (141) mathoperator -> . DIVIDE
    (142) mathoperator -> . MOD
    (143) mathoperator -> . POW

  ! shift/reduce conflict for BINARY_FNC resolved as shift
  ! shift/reduce conflict for GETVARIABLE resolved as shift
  ! shift/reduce conflict for SETVARIABLE resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for PARAMS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    DO              reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    SEMI_COLON      reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COMMA           reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    $end            reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RBRACE          reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RPAREN          reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RSPAREN         reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    TO              reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    STEP            reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COLON           reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    BINARY_FNC      shift and go to state 69
    GETVARIABLE     shift and go to state 72
    SETVARIABLE     shift and go to state 73
    PARAM           shift and go to state 74
    PARAMS          shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    LTE             shift and go to state 78
    GTE             shift and go to state 79
    EQUALITY        shift and go to state 80
    INEQUALITY      shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    TIMES           shift and go to state 86
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 88
    POW             shift and go to state 89

  ! BINARY_FNC      [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GETVARIABLE     [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! SETVARIABLE     [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PARAM           [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PARAMS          [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! LT              [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GT              [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! LTE             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! GTE             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! EQUALITY        [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! AND             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! OR              [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! PLUS            [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! MINUS           [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! TIMES           [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! DIVIDE          [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! MOD             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]
  ! POW             [ reduce using rule 42 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .) ]

    comparisonoperator             shift and go to state 70
    mathoperator                   shift and go to state 71

state 277

    (43) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .

    DO              reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    BINARY_FNC      reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    GETVARIABLE     reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    SETVARIABLE     reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    PARAM           reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    PARAMS          reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    LT              reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    GT              reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    LTE             reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    GTE             reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    EQUALITY        reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    INEQUALITY      reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    AND             reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    OR              reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    PLUS            reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    MINUS           reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    TIMES           reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    DIVIDE          reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    MOD             reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    POW             reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    SEMI_COLON      reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    COMMA           reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    $end            reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    RBRACE          reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    RPAREN          reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    RSPAREN         reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    TO              reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    STEP            reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)
    COLON           reduce using rule 43 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN .)


state 278

    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 285


state 279

    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 286


state 280

    (21) case -> CASE primaryexp COLON bracedexp .

    SEMI_COLON      reduce using rule 21 (case -> CASE primaryexp COLON bracedexp .)
    COMMA           reduce using rule 21 (case -> CASE primaryexp COLON bracedexp .)
    RBRACE          reduce using rule 21 (case -> CASE primaryexp COLON bracedexp .)


state 281

    (59) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .

    SEMI_COLON      reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COMMA           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    $end            reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    BINARY_FNC      reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GETVARIABLE     reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    SETVARIABLE     reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAM           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAMS          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LT              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GT              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LTE             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GTE             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    EQUALITY        reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    INEQUALITY      reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    AND             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    OR              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PLUS            reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MINUS           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TIMES           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DIVIDE          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MOD             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    POW             reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RBRACE          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RPAREN          reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TO              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    STEP            reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DO              reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COLON           reduce using rule 59 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)


state 282

    (60) param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COMMA           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    $end            reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAM           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAMS          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LT              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GT              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LTE             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GTE             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    EQUALITY        reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    AND             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    OR              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PLUS            reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MINUS           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TIMES           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DIVIDE          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MOD             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    POW             reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RBRACE          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RPAREN          reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TO              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    STEP            reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DO              reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COLON           reduce using rule 60 (param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 283

    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array . RSPAREN

    RSPAREN         shift and go to state 287


state 284

    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number . RSPAREN

    RSPAREN         shift and go to state 288


state 285

    (64) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .

    SEMI_COLON      reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COMMA           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    $end            reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    BINARY_FNC      reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GETVARIABLE     reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    SETVARIABLE     reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAM           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PARAMS          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LT              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GT              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    LTE             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    GTE             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    EQUALITY        reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    INEQUALITY      reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    AND             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    OR              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    PLUS            reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MINUS           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TIMES           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DIVIDE          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    MOD             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    POW             reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RBRACE          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RPAREN          reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    TO              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    STEP            reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    DO              reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)
    COLON           reduce using rule 64 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN .)


state 286

    (65) param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .

    SEMI_COLON      reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COMMA           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    $end            reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    BINARY_FNC      reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GETVARIABLE     reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    SETVARIABLE     reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAM           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PARAMS          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LT              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GT              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    LTE             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    GTE             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    EQUALITY        reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    INEQUALITY      reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    AND             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    OR              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    PLUS            reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MINUS           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TIMES           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DIVIDE          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    MOD             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    POW             reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RBRACE          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RPAREN          reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    TO              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    STEP            reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    DO              reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)
    COLON           reduce using rule 65 (param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 287

    (76) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN .

    COMMA           reduce using rule 76 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN .)
    RSPAREN         reduce using rule 76 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN .)


state 288

    (75) params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN .

    COMMA           reduce using rule 75 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN .)
    RSPAREN         reduce using rule 75 (params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 42 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 140 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 140 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 150 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 150 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 220 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 220 resolved as shift
WARNING: shift/reduce conflict for NUMBER_REAL in state 220 resolved as shift
WARNING: shift/reduce conflict for NUMBER_EXP in state 220 resolved as shift
WARNING: shift/reduce conflict for NUMBER_HEX in state 220 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 220 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 220 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 220 resolved as shift
WARNING: shift/reduce conflict for UNARY_FNC in state 220 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 220 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 220 resolved as shift
WARNING: shift/reduce conflict for NOT in state 220 resolved as shift
WARNING: shift/reduce conflict for NULAR_FNC in state 220 resolved as shift
WARNING: shift/reduce conflict for STRING_SINGLE in state 220 resolved as shift
WARNING: shift/reduce conflict for STRING_DOUBLE in state 220 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 220 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: shift/reduce conflict for WITH in state 220 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 220 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 220 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 220 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 220 resolved as shift
WARNING: shift/reduce conflict for STEP in state 252 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 252 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 252 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 252 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 252 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 252 resolved as shift
WARNING: shift/reduce conflict for LT in state 252 resolved as shift
WARNING: shift/reduce conflict for GT in state 252 resolved as shift
WARNING: shift/reduce conflict for LTE in state 252 resolved as shift
WARNING: shift/reduce conflict for GTE in state 252 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 252 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 252 resolved as shift
WARNING: shift/reduce conflict for AND in state 252 resolved as shift
WARNING: shift/reduce conflict for OR in state 252 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 252 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 252 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 252 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 252 resolved as shift
WARNING: shift/reduce conflict for MOD in state 252 resolved as shift
WARNING: shift/reduce conflict for POW in state 252 resolved as shift
WARNING: shift/reduce conflict for BINARY_FNC in state 276 resolved as shift
WARNING: shift/reduce conflict for GETVARIABLE in state 276 resolved as shift
WARNING: shift/reduce conflict for SETVARIABLE in state 276 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 276 resolved as shift
WARNING: shift/reduce conflict for PARAMS in state 276 resolved as shift
WARNING: shift/reduce conflict for LT in state 276 resolved as shift
WARNING: shift/reduce conflict for GT in state 276 resolved as shift
WARNING: shift/reduce conflict for LTE in state 276 resolved as shift
WARNING: shift/reduce conflict for GTE in state 276 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 276 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 276 resolved as shift
WARNING: shift/reduce conflict for AND in state 276 resolved as shift
WARNING: shift/reduce conflict for OR in state 276 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 276 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 276 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 276 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 276 resolved as shift
WARNING: shift/reduce conflict for MOD in state 276 resolved as shift
WARNING: shift/reduce conflict for POW in state 276 resolved as shift
WARNING: reduce/reduce conflict in state 26 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (nularexp -> identifier) in state 26
WARNING: reduce/reduce conflict in state 92 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (nularexp -> identifier) in state 92
WARNING: reduce/reduce conflict in state 140 resolved using rule (assignment_code -> definition EQUAL LBRACE)
WARNING: rejected rule (new_scope -> <empty>) in state 140
WARNING: reduce/reduce conflict in state 150 resolved using rule (assignment_code -> variable EQUAL LBRACE)
WARNING: rejected rule (new_scope -> <empty>) in state 150
WARNING: reduce/reduce conflict in state 153 resolved using rule (foreachloop -> bracedexp FOREACH array)
WARNING: rejected rule (primaryexp -> array) in state 153
WARNING: reduce/reduce conflict in state 209 resolved using rule (foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN)
WARNING: rejected rule (primaryexp -> LPAREN primaryexp RPAREN) in state 209
WARNING: reduce/reduce conflict in state 218 resolved using rule (binaryexp -> primaryexp comparisonoperator primaryexp)
WARNING: rejected rule (booleanexp -> primaryexp) in state 218
