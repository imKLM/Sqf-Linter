
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARISON_OPCONFIG_ACCESSOR_GTGTleftBINARY_OPCOLONleftELSEleftPLUSMINUSleftTIMESDIVIDEMODCONFIG_ACCESSOR_SLASHleftPOWleftUNARY_OPleftNULAR_OPVARIABLEVALUEBRACED_EXPAND BINARY_FNC BOOL CASE COLON COMMA COMMENT_MULTI COMMENT_SINGLE DEFAULT DIVIDE DO ELSE EQUAL EQUALITY EXITWITH FOR FOREACH FROM GLOBAL_ID GT GTE IF INEQUALITY LBRACE LPAREN LSPAREN LT LTE MINUS MOD NAMESPACE NEWLINE NOT NULAR_FNC NUMBER_EXP NUMBER_HEX NUMBER_REAL OR PLUS POW PRIVATE PRIVATE_ID RBRACE RPAREN RSPAREN SEMI_COLON STEP STRING_DOUBLE STRING_SINGLE SWITCH THEN TIMES TO UNARY_FNC WHILE WITH\n    code    : empty\n            | statement\n            | statement terminator code\n    \n    statement   : controlstructure\n                | assignment\n                | binaryexp\n                | nularexp\n                | unaryexp\n    \n    terminator  : SEMI_COLON\n                | COMMA\n    \n    controlstructure    : ifstatement\n                        | whileloop\n                        | forloop\n                        | withstatement\n                        | foreachloop\n                        | switchstatement\n    \n    helpertype  : iftype\n                | whiletype\n                | fortype\n                | withtype\n    \n    case    : CASE primaryexp COLON bracedexp\n            | CASE primaryexp\n            | DEFAULT bracedexp\n    \n    switchstatement : SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE\n    \n    switchbody  : empty\n                | case\n                | case terminator switchbody\n    \n    iftype : IF forloop_condition\n    \n    ifstatement : iftype THEN bracedexp\n                | iftype EXITWITH bracedexp\n                | iftype THEN bracedexp ELSE bracedexp\n    \n    withtype : WITH NAMESPACE\n    \n    withstatementinit : withtype DO\n    \n    withstatement : withstatementinit bracedexp\n    \n    whiletype   : WHILE forloop_condition\n    \n    whileloop : whiletype DO bracedexp\n    \n    foreachloop : bracedexp FOREACH array\n                | bracedexp FOREACH primaryexp\n    \n    fortype : FOR new_scope string FROM primaryexp TO primaryexp\n            | FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp\n            | FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN\n    \n    forloop : fortype DO bracedexp_noscope\n    \n    forloop_condition   : LBRACE booleanexp RBRACE\n                        | identifier\n    \n     bracedexp_noscope : LBRACE code RBRACE\n    \n    vardefinition   : definition\n                    | arraydefinition\n    \n    assignment  : assignment_code code RBRACE\n                | definition EQUAL primaryexp\n                | variable EQUAL primaryexp\n    \n    assignment_code : definition EQUAL LBRACE\n                    | variable EQUAL LBRACE\n    \n    arraydefinition : PRIVATE stringarray\n    \n    definition  : PRIVATE PRIVATE_ID\n                | PRIVATE string\n    \n    identifier  : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID  %prec VARIABLE\n    \n    variable    : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID %prec VARIABLE\n    \n    binaryexp   : primaryexp BINARY_FNC primaryexp          %prec BINARY_OP\n                | primaryexp comparisonoperator primaryexp  %prec BINARY_OP\n                | primaryexp mathoperator primaryexp        %prec BINARY_OP\n    \n    primaryexp  : number                    %prec VALUE\n                | identifier                %prec VALUE\n                | helpertype                %prec VALUE\n                | array                     %prec VALUE\n                | unaryexp                  %prec UNARY_OP\n                | nularexp                  %prec NULAR_OP\n                | string                    %prec VALUE\n                | binaryexp                 %prec BINARY_OP\n                | bracedexp                 %prec BRACED_EXP\n                | LPAREN binaryexp RPAREN   %prec BRACED_EXP\n    \n    bracedexp : LBRACE new_scope code RBRACE\n    new_scope :\n    array   : LSPAREN RSPAREN\n            | LSPAREN arrayelement RSPAREN\n    \n    arrayelement    : primaryexp\n                    | primaryexp COMMA arrayelement\n    \n    stringarray : LSPAREN RSPAREN\n                | LSPAREN stringarrayelement RSPAREN\n    \n    stringarrayelement  : string\n                        | string COMMA stringarrayelement\n    \n    nularexp    : NULAR_FNC     %prec NULAR_OP\n                | identifier    %prec NULAR_OP\n    \n    unaryexp    : UNARY_FNC primaryexp  %prec UNARY_OP\n                | PLUS primaryexp       %prec UNARY_OP\n                | MINUS primaryexp      %prec UNARY_OP\n                | NOT primaryexp        %prec UNARY_OP\n                | vardefinition         %prec UNARY_OP\n    \n    comparisonoperator  : LT            %prec COMPARISON_OP\n                        | GT            %prec COMPARISON_OP\n                        | LTE           %prec COMPARISON_OP\n                        | GTE           %prec COMPARISON_OP\n                        | EQUALITY      %prec COMPARISON_OP\n                        | INEQUALITY    %prec COMPARISON_OP\n                        | AND           %prec COMPARISON_OP\n                        | OR            %prec COMPARISON_OP\n    \n    mathoperator : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MOD\n                    | POW\n    \n    booleanexp  : primaryexp\n                | primaryexp comparisonoperator booleanexp\n                | primaryexp comparisonoperator LBRACE booleanexp RBRACE\n    \n    configaccessor  : GT GT     %prec CONFIG_ACCESSOR_GTGT\n                    | DIVIDE    %prec CONFIG_ACCESSOR_SLASH\n    \n    number  : NUMBER_REAL\n            | NUMBER_EXP\n            | NUMBER_HEX\n    \n    string  : STRING_SINGLE\n            | STRING_DOUBLE\n    \n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,25,31,36,37,38,39,40,41,47,48,49,50,51,53,54,55,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,101,102,103,105,107,108,110,114,115,116,117,119,120,121,122,124,125,126,127,128,129,132,134,141,146,147,149,154,155,173,175,183,184,],[-114,0,-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-46,-83,-84,-89,-66,-56,-69,-57,-63,-65,-47,-109,-110,-111,-112,-113,-114,-9,-10,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-34,-54,-55,-53,-28,-44,-35,-75,-32,-3,-48,-49,-60,-61,-62,-50,-29,-30,-37,-38,-36,-42,-72,-79,-76,-73,-80,-43,-31,-45,-39,-24,-40,-41,]),'NULAR_FNC':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[19,19,19,19,19,19,19,-74,19,19,-9,-10,19,19,19,19,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,19,19,19,19,19,-51,-52,19,19,19,19,19,19,19,19,]),'UNARY_FNC':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[21,21,21,21,21,21,21,-74,21,21,-9,-10,21,21,21,21,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,21,21,21,21,21,-51,-52,21,21,21,21,21,21,21,21,]),'PLUS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,31,33,34,36,37,38,39,40,41,45,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,98,99,100,101,102,103,105,106,107,108,110,112,114,117,118,119,120,121,122,123,126,127,130,131,132,134,138,141,142,146,147,149,150,151,158,160,161,165,170,173,177,179,183,184,],[22,-70,-68,-67,22,-46,69,-83,-64,22,22,22,22,-89,-17,-71,-18,-19,-66,22,-74,-56,-69,-57,-63,-65,-47,22,-20,-109,-110,-111,-112,-113,22,-9,-10,22,22,22,22,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,22,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,22,22,-70,22,-54,-55,-53,-28,22,-44,-35,-75,69,-32,69,-51,69,69,69,69,-52,-66,69,22,69,-72,-79,69,-76,22,-73,-80,-43,22,22,69,22,69,22,22,69,69,22,69,-41,]),'MINUS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,31,33,34,36,37,38,39,40,41,45,46,47,48,49,50,51,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,98,99,100,101,102,103,105,106,107,108,110,112,114,117,118,119,120,121,122,123,126,127,130,131,132,134,138,141,142,146,147,149,150,151,158,160,161,165,170,173,177,179,183,184,],[23,-70,-68,-67,23,-46,70,-83,-64,23,23,23,23,-89,-17,-71,-18,-19,-66,23,-74,-56,-69,-57,-63,-65,-47,23,-20,-109,-110,-111,-112,-113,23,-9,-10,23,23,23,23,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,23,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,23,23,-70,23,-54,-55,-53,-28,23,-44,-35,-75,70,-32,70,-51,70,70,70,70,-52,-66,70,23,70,-72,-79,70,-76,23,-73,-80,-43,23,23,70,23,70,23,23,70,70,23,70,-41,]),'NOT':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[24,24,24,24,24,24,24,-74,24,24,-9,-10,24,24,24,24,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,24,24,24,24,24,-51,-52,24,24,24,24,24,24,24,24,]),'SWITCH':([0,15,34,53,54,55,100,118,123,130,160,],[32,32,-74,32,-9,-10,32,-51,-52,32,-74,]),'PRIVATE':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[35,35,35,35,35,35,35,-74,35,35,-9,-10,35,35,35,35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,35,35,35,35,35,-51,-52,35,35,35,35,35,35,35,35,]),'PRIVATE_ID':([0,15,21,22,23,24,33,34,35,42,43,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,162,165,170,179,],[36,36,82,82,82,82,82,-74,101,82,82,82,36,-9,-10,82,82,82,82,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,82,82,82,36,82,-51,-52,36,82,82,82,82,82,82,82,82,]),'GLOBAL_ID':([0,15,21,22,23,24,33,34,42,43,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,162,165,170,179,],[38,38,83,83,83,83,83,-74,83,83,83,38,-9,-10,83,83,83,83,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,83,83,83,38,83,-51,-52,38,83,83,83,83,83,83,83,83,]),'LPAREN':([0,15,21,22,23,24,32,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[33,33,33,33,33,33,98,33,-74,33,33,-9,-10,33,33,33,33,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,33,33,33,33,33,-51,-52,33,33,33,33,33,33,33,33,]),'IF':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[42,42,42,42,42,42,42,-74,42,42,-9,-10,42,42,42,42,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,42,42,42,42,42,-51,-52,42,42,42,42,42,42,42,42,]),'WHILE':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[43,43,43,43,43,43,43,-74,43,43,-9,-10,43,43,43,43,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,43,43,43,43,43,-51,-52,43,43,43,43,43,43,43,43,]),'FOR':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[44,44,44,44,44,44,44,-74,44,44,-9,-10,44,44,44,44,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,44,44,44,44,44,-51,-52,44,44,44,44,44,44,44,44,]),'LBRACE':([0,15,21,22,23,24,30,33,34,42,43,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,92,93,94,95,96,98,100,106,113,118,123,130,140,142,143,150,151,156,160,162,165,170,171,174,179,182,],[34,34,34,34,34,34,34,34,-74,106,106,34,34,-9,-10,118,34,34,34,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,123,34,34,34,34,130,34,34,34,-33,-51,-52,34,130,34,34,160,34,163,34,106,34,34,34,130,34,34,]),'NUMBER_REAL':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[47,47,47,47,47,47,47,-74,47,47,-9,-10,47,47,47,47,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,47,47,47,47,47,-51,-52,47,47,47,47,47,47,47,47,]),'NUMBER_EXP':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[48,48,48,48,48,48,48,-74,48,48,-9,-10,48,48,48,48,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,48,48,48,48,48,-51,-52,48,48,48,48,48,48,48,48,]),'NUMBER_HEX':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[49,49,49,49,49,49,49,-74,49,49,-9,-10,49,49,49,49,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,49,49,49,49,49,-51,-52,49,49,49,49,49,49,49,49,]),'LSPAREN':([0,15,21,22,23,24,33,34,35,44,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,109,118,123,130,142,150,151,160,165,170,179,],[45,45,45,45,45,45,45,-74,104,-74,45,45,-9,-10,45,45,45,45,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,45,45,45,45,45,140,-51,-52,45,45,45,45,45,45,45,45,]),'STRING_SINGLE':([0,15,21,22,23,24,33,34,35,44,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,104,106,109,118,123,130,142,148,150,151,160,165,170,179,],[50,50,50,50,50,50,50,-74,50,-74,50,50,-9,-10,50,50,50,50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,50,50,50,50,50,50,50,-51,-52,50,50,50,50,50,50,50,50,50,]),'STRING_DOUBLE':([0,15,21,22,23,24,33,34,35,44,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,104,106,109,118,123,130,142,148,150,151,160,165,170,179,],[51,51,51,51,51,51,51,-74,51,-74,51,51,-9,-10,51,51,51,51,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,51,51,51,51,51,51,51,-51,-52,51,51,51,51,51,51,51,51,51,]),'WITH':([0,15,21,22,23,24,33,34,45,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,98,100,106,118,123,130,142,150,151,160,165,170,179,],[52,52,52,52,52,52,52,-74,52,52,-9,-10,52,52,52,52,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,52,52,52,52,52,-51,-52,52,52,52,52,52,52,52,52,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,25,31,34,36,37,38,39,40,41,47,48,49,50,51,53,54,55,56,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,100,101,102,103,105,107,108,110,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,134,137,138,141,144,146,147,149,154,155,158,159,160,163,164,167,168,169,172,173,175,176,177,178,181,183,184,185,],[-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-114,-46,-83,-84,-89,-66,-74,-56,-69,-57,-63,-65,-47,-109,-110,-111,-112,-113,-114,-9,-10,116,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-34,-114,-54,-55,-53,-28,-44,-35,-75,-32,-3,-48,-49,-51,-60,-61,-62,-50,-52,-29,-30,-37,-38,-36,-42,-114,-72,146,-79,149,-104,-76,155,-73,-80,-43,-31,-45,-61,-105,-74,-114,172,175,-25,-26,-106,-39,-24,-114,-22,-23,-27,-40,-41,-21,]),'SEMI_COLON':([3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,25,31,36,37,38,39,40,41,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,101,102,103,105,107,108,110,114,116,117,119,120,121,122,124,125,126,127,128,129,132,134,141,146,147,149,154,155,169,173,175,177,178,183,184,185,],[54,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-46,-83,-84,-89,-66,-56,-69,-57,-63,-65,-47,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-34,-54,-55,-53,-28,-44,-35,-75,-32,-48,-49,-60,-61,-62,-50,-29,-30,-37,-38,-36,-42,-72,-79,-76,-73,-80,-43,-31,-45,54,-39,-24,-22,-23,-40,-41,-21,]),'COMMA':([3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,25,31,36,37,38,39,40,41,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,101,102,103,105,107,108,110,112,114,116,117,119,120,121,122,124,125,126,127,128,129,132,134,136,141,146,147,149,152,154,155,166,169,173,175,177,178,183,184,185,],[55,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-46,-83,-84,-89,-66,-56,-69,-57,-63,-65,-47,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-34,-54,-55,-53,-28,-44,-35,-75,142,-32,-48,-49,-60,-61,-62,-50,-29,-30,-37,-38,-36,-42,-72,-79,148,-76,-73,-80,-43,162,-31,-45,174,55,-39,-24,-22,-23,-40,-41,-21,]),'BINARY_FNC':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,58,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,58,-32,58,-60,-61,-62,58,-66,58,58,-72,-79,58,-76,-73,-80,-43,-61,58,58,58,58,-41,]),'LT':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,61,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,61,-32,61,-60,-61,-62,61,-66,61,61,-72,-79,61,-76,-73,-80,-43,-61,61,61,61,61,-41,]),'GT':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,62,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,62,-32,62,-60,-61,-62,62,-66,62,62,-72,-79,62,-76,-73,-80,-43,-61,62,62,62,62,-41,]),'LTE':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,63,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,63,-32,63,-60,-61,-62,63,-66,63,63,-72,-79,63,-76,-73,-80,-43,-61,63,63,63,63,-41,]),'GTE':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,64,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,64,-32,64,-60,-61,-62,64,-66,64,64,-72,-79,64,-76,-73,-80,-43,-61,64,64,64,64,-41,]),'EQUALITY':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,65,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,65,-32,65,-60,-61,-62,65,-66,65,65,-72,-79,65,-76,-73,-80,-43,-61,65,65,65,65,-41,]),'INEQUALITY':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,66,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,66,-32,66,-60,-61,-62,66,-66,66,66,-72,-79,66,-76,-73,-80,-43,-61,66,66,66,66,-41,]),'AND':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,67,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,67,-32,67,-60,-61,-62,67,-66,67,67,-72,-79,67,-76,-73,-80,-43,-61,67,67,67,67,-41,]),'OR':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,68,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,68,-32,68,-60,-61,-62,68,-66,68,68,-72,-79,68,-76,-73,-80,-43,-61,68,68,68,68,-41,]),'TIMES':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,71,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,71,-32,71,71,71,71,71,-66,71,71,-72,-79,71,-76,-73,-80,-43,71,71,71,71,71,-41,]),'DIVIDE':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,72,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,72,-32,72,72,72,72,72,-66,72,72,-72,-79,72,-76,-73,-80,-43,72,72,72,72,72,-41,]),'MOD':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,73,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,73,-32,73,73,73,73,73,-66,73,73,-72,-79,73,-76,-73,-80,-43,73,73,73,73,73,-41,]),'POW':([6,7,8,16,17,19,20,25,26,27,28,29,31,36,37,38,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,112,114,117,119,120,121,122,126,127,131,132,134,138,141,146,147,149,158,161,173,177,183,184,],[-70,-68,-67,-46,74,-83,-64,-89,-17,-71,-18,-19,-66,-56,-69,-57,-63,-65,-47,-20,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-70,-54,-55,-53,-28,-44,-35,-75,74,-32,74,74,74,74,74,-66,74,74,-72,-79,74,-76,-73,-80,-43,74,74,74,74,74,-41,]),'EQUAL':([16,18,36,38,50,51,101,102,],[57,75,-58,-59,-112,-113,-54,-55,]),'RSPAREN':([19,25,31,37,39,40,41,45,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,102,103,104,105,107,108,110,111,112,114,119,120,121,132,134,135,136,141,146,147,149,153,155,157,173,180,183,184,],[-83,-89,-66,-69,-63,-65,-47,110,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-54,-55,-53,134,-28,-44,-35,-75,141,-77,-32,-60,-61,-62,-72,-79,147,-81,-76,-73,-80,-43,-78,-45,-82,-39,184,-40,-41,]),'RPAREN':([19,25,31,37,39,40,41,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,101,102,103,105,107,108,110,114,119,120,121,131,132,134,141,146,147,149,173,183,184,],[-83,-89,-66,-69,-63,-65,-47,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,132,-54,-55,-53,-28,-44,-35,-75,-32,-60,-61,-62,145,-72,-79,-76,-73,-80,-43,-39,-40,-41,]),'TO':([19,25,31,37,39,40,41,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,102,103,105,107,108,110,114,119,120,121,132,134,141,146,147,149,161,173,183,184,],[-83,-89,-66,-69,-63,-65,-47,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-54,-55,-53,-28,-44,-35,-75,-32,-60,-61,-62,-72,-79,-76,-73,-80,-43,165,-39,-40,-41,]),'STEP':([19,25,31,37,39,40,41,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,102,103,105,107,108,110,114,119,120,121,132,134,141,146,147,149,173,183,184,],[-83,-89,-66,-69,-63,-65,-47,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-54,-55,-53,-28,-44,-35,-75,-32,-60,-61,-62,-72,-79,-76,-73,-80,-43,179,-40,-41,]),'DO':([19,25,28,29,31,37,39,40,41,46,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,102,103,105,107,108,110,114,119,120,121,132,134,141,145,146,147,149,173,183,184,],[-83,-89,95,96,-66,-69,-63,-65,-47,113,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-54,-55,-53,-28,-44,-35,-75,-32,-60,-61,-62,-72,-79,-76,156,-73,-80,-43,-39,-40,-41,]),'COLON':([19,25,31,37,39,40,41,47,48,49,50,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,101,102,103,105,107,108,110,114,119,120,121,132,134,141,146,147,149,173,177,183,184,],[-83,-89,-66,-69,-63,-65,-47,-109,-110,-111,-112,-113,-85,-64,-67,-68,-70,-71,-56,-57,-17,-18,-19,-20,-46,-86,-87,-88,-54,-55,-53,-28,-44,-35,-75,-32,-60,-61,-62,-72,-79,-76,-73,-80,-43,-39,182,-40,-41,]),'THEN':([26,82,83,105,107,149,],[92,-56,-57,-28,-44,-43,]),'EXITWITH':([26,82,83,105,107,149,],[93,-56,-57,-28,-44,-43,]),'FOREACH':([27,146,],[94,-73,]),'FROM':([50,51,139,],[-112,-113,151,]),'NAMESPACE':([52,],[114,]),'CASE':([54,55,163,176,],[-9,-10,170,170,]),'DEFAULT':([54,55,163,176,],[-9,-10,171,171,]),'ELSE':([124,146,],[143,-73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,15,53,100,130,],[1,56,115,133,144,]),'empty':([0,15,53,100,130,163,176,],[2,2,2,2,2,168,168,]),'statement':([0,15,53,100,130,],[3,3,3,3,3,]),'controlstructure':([0,15,53,100,130,],[4,4,4,4,4,]),'assignment':([0,15,53,100,130,],[5,5,5,5,5,]),'binaryexp':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[6,6,80,80,80,80,99,80,6,80,80,80,80,80,80,80,6,80,6,80,80,80,80,80,80,80,]),'nularexp':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[7,7,79,79,79,79,79,79,7,79,79,79,79,79,79,79,7,79,7,79,79,79,79,79,79,79,]),'unaryexp':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[8,8,78,78,78,78,78,78,8,78,78,78,78,78,78,78,8,78,8,78,78,78,78,78,78,78,]),'ifstatement':([0,15,53,100,130,],[9,9,9,9,9,]),'whileloop':([0,15,53,100,130,],[10,10,10,10,10,]),'forloop':([0,15,53,100,130,],[11,11,11,11,11,]),'withstatement':([0,15,53,100,130,],[12,12,12,12,12,]),'foreachloop':([0,15,53,100,130,],[13,13,13,13,13,]),'switchstatement':([0,15,53,100,130,],[14,14,14,14,14,]),'assignment_code':([0,15,53,100,130,],[15,15,15,15,15,]),'definition':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[16,16,88,88,88,88,88,88,16,88,88,88,88,88,88,88,16,88,16,88,88,88,88,88,88,88,]),'primaryexp':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[17,17,76,89,90,91,17,112,17,117,119,120,121,122,127,131,17,138,17,112,158,161,138,173,177,183,]),'variable':([0,15,53,100,130,],[18,18,18,18,18,]),'identifier':([0,15,21,22,23,24,33,42,43,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,162,165,170,179,],[20,20,77,77,77,77,77,107,107,77,20,77,77,77,77,77,77,77,20,77,20,77,77,77,77,107,77,77,77,]),'vardefinition':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'iftype':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[26,26,84,84,84,84,84,84,26,84,84,84,84,84,84,84,26,84,26,84,84,84,84,84,84,84,]),'bracedexp':([0,15,21,22,23,24,30,33,45,53,57,58,59,60,75,92,93,94,95,98,100,106,130,142,143,150,151,160,165,170,171,179,182,],[27,27,81,81,81,81,97,81,81,27,81,81,81,81,81,124,125,81,128,81,27,81,27,81,154,81,81,81,81,81,178,81,185,]),'whiletype':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[28,28,85,85,85,85,85,85,28,85,85,85,85,85,85,85,28,85,28,85,85,85,85,85,85,85,]),'fortype':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[29,29,86,86,86,86,86,86,29,86,86,86,86,86,86,86,29,86,29,86,86,86,86,86,86,86,]),'withstatementinit':([0,15,53,100,130,],[30,30,30,30,30,]),'array':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,126,31,31,31,31,31,31,31,31,31,31,31,]),'string':([0,15,21,22,23,24,33,35,45,53,57,58,59,60,75,94,98,100,104,106,109,130,142,148,150,151,160,165,170,179,],[37,37,37,37,37,37,37,102,37,37,37,37,37,37,37,37,37,37,136,37,139,37,37,136,37,37,37,37,37,37,]),'number':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'helpertype':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'arraydefinition':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'withtype':([0,15,21,22,23,24,33,45,53,57,58,59,60,75,94,98,100,106,130,142,150,151,160,165,170,179,],[46,46,87,87,87,87,87,87,46,87,87,87,87,87,87,87,46,87,46,87,87,87,87,87,87,87,]),'terminator':([3,169,],[53,176,]),'comparisonoperator':([17,76,89,90,91,112,117,119,120,121,122,127,131,138,158,161,173,177,183,],[59,59,59,59,59,59,59,59,59,59,59,59,59,150,150,59,59,59,59,]),'mathoperator':([17,76,89,90,91,112,117,119,120,121,122,127,131,138,158,161,173,177,183,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'new_scope':([34,44,118,123,160,],[100,109,100,100,100,]),'stringarray':([35,],[103,]),'forloop_condition':([42,43,162,],[105,108,166,]),'arrayelement':([45,142,],[111,153,]),'bracedexp_noscope':([96,140,174,],[129,152,180,]),'stringarrayelement':([104,148,],[135,157,]),'booleanexp':([106,150,160,],[137,159,164,]),'switchbody':([163,176,],[167,181,]),'case':([163,176,],[169,169,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> empty','code',1,'p_code','sqf_yacc.py',36),
  ('code -> statement','code',1,'p_code','sqf_yacc.py',37),
  ('code -> statement terminator code','code',3,'p_code','sqf_yacc.py',38),
  ('statement -> controlstructure','statement',1,'p_statement','sqf_yacc.py',45),
  ('statement -> assignment','statement',1,'p_statement','sqf_yacc.py',46),
  ('statement -> binaryexp','statement',1,'p_statement','sqf_yacc.py',47),
  ('statement -> nularexp','statement',1,'p_statement','sqf_yacc.py',48),
  ('statement -> unaryexp','statement',1,'p_statement','sqf_yacc.py',49),
  ('terminator -> SEMI_COLON','terminator',1,'p_terminator','sqf_yacc.py',56),
  ('terminator -> COMMA','terminator',1,'p_terminator','sqf_yacc.py',57),
  ('controlstructure -> ifstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',71),
  ('controlstructure -> whileloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',72),
  ('controlstructure -> forloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',73),
  ('controlstructure -> withstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',74),
  ('controlstructure -> foreachloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',75),
  ('controlstructure -> switchstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',76),
  ('helpertype -> iftype','helpertype',1,'p_helpertype','sqf_yacc.py',83),
  ('helpertype -> whiletype','helpertype',1,'p_helpertype','sqf_yacc.py',84),
  ('helpertype -> fortype','helpertype',1,'p_helpertype','sqf_yacc.py',85),
  ('helpertype -> withtype','helpertype',1,'p_helpertype','sqf_yacc.py',86),
  ('case -> CASE primaryexp COLON bracedexp','case',4,'p_case','sqf_yacc.py',93),
  ('case -> CASE primaryexp','case',2,'p_case','sqf_yacc.py',94),
  ('case -> DEFAULT bracedexp','case',2,'p_case','sqf_yacc.py',95),
  ('switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE','switchstatement',8,'p_switchstatement','sqf_yacc.py',101),
  ('switchbody -> empty','switchbody',1,'p_switchbody','sqf_yacc.py',107),
  ('switchbody -> case','switchbody',1,'p_switchbody','sqf_yacc.py',108),
  ('switchbody -> case terminator switchbody','switchbody',3,'p_switchbody','sqf_yacc.py',109),
  ('iftype -> IF forloop_condition','iftype',2,'p_iftype','sqf_yacc.py',115),
  ('ifstatement -> iftype THEN bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',122),
  ('ifstatement -> iftype EXITWITH bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',123),
  ('ifstatement -> iftype THEN bracedexp ELSE bracedexp','ifstatement',5,'p_ifstatement','sqf_yacc.py',124),
  ('withtype -> WITH NAMESPACE','withtype',2,'p_withtype','sqf_yacc.py',131),
  ('withstatementinit -> withtype DO','withstatementinit',2,'p_withstatementinit','sqf_yacc.py',138),
  ('withstatement -> withstatementinit bracedexp','withstatement',2,'p_withstatement','sqf_yacc.py',148),
  ('whiletype -> WHILE forloop_condition','whiletype',2,'p_whiletype','sqf_yacc.py',155),
  ('whileloop -> whiletype DO bracedexp','whileloop',3,'p_whileloop','sqf_yacc.py',161),
  ('foreachloop -> bracedexp FOREACH array','foreachloop',3,'p_foreachloop','sqf_yacc.py',168),
  ('foreachloop -> bracedexp FOREACH primaryexp','foreachloop',3,'p_foreachloop','sqf_yacc.py',169),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp','fortype',7,'p_fortype','sqf_yacc.py',175),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp','fortype',9,'p_fortype','sqf_yacc.py',176),
  ('fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN','fortype',9,'p_fortype','sqf_yacc.py',177),
  ('forloop -> fortype DO bracedexp_noscope','forloop',3,'p_forloop','sqf_yacc.py',199),
  ('forloop_condition -> LBRACE booleanexp RBRACE','forloop_condition',3,'p_bracedexp_condition','sqf_yacc.py',207),
  ('forloop_condition -> identifier','forloop_condition',1,'p_bracedexp_condition','sqf_yacc.py',208),
  ('bracedexp_noscope -> LBRACE code RBRACE','bracedexp_noscope',3,'p_bracedexp_noscope','sqf_yacc.py',218),
  ('vardefinition -> definition','vardefinition',1,'p_vardefinition','sqf_yacc.py',225),
  ('vardefinition -> arraydefinition','vardefinition',1,'p_vardefinition','sqf_yacc.py',226),
  ('assignment -> assignment_code code RBRACE','assignment',3,'p_assignment','sqf_yacc.py',232),
  ('assignment -> definition EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',233),
  ('assignment -> variable EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',234),
  ('assignment_code -> definition EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',249),
  ('assignment_code -> variable EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',250),
  ('arraydefinition -> PRIVATE stringarray','arraydefinition',2,'p_arraydefinition','sqf_yacc.py',259),
  ('definition -> PRIVATE PRIVATE_ID','definition',2,'p_definition','sqf_yacc.py',278),
  ('definition -> PRIVATE string','definition',2,'p_definition','sqf_yacc.py',279),
  ('identifier -> PRIVATE_ID','identifier',1,'p_identifier','sqf_yacc.py',298),
  ('identifier -> GLOBAL_ID','identifier',1,'p_identifier','sqf_yacc.py',299),
  ('variable -> PRIVATE_ID','variable',1,'p_variable','sqf_yacc.py',319),
  ('variable -> GLOBAL_ID','variable',1,'p_variable','sqf_yacc.py',320),
  ('binaryexp -> primaryexp BINARY_FNC primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',327),
  ('binaryexp -> primaryexp comparisonoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',328),
  ('binaryexp -> primaryexp mathoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',329),
  ('primaryexp -> number','primaryexp',1,'p_primaryexp','sqf_yacc.py',335),
  ('primaryexp -> identifier','primaryexp',1,'p_primaryexp','sqf_yacc.py',336),
  ('primaryexp -> helpertype','primaryexp',1,'p_primaryexp','sqf_yacc.py',337),
  ('primaryexp -> array','primaryexp',1,'p_primaryexp','sqf_yacc.py',338),
  ('primaryexp -> unaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',339),
  ('primaryexp -> nularexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',340),
  ('primaryexp -> string','primaryexp',1,'p_primaryexp','sqf_yacc.py',341),
  ('primaryexp -> binaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',342),
  ('primaryexp -> bracedexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',343),
  ('primaryexp -> LPAREN binaryexp RPAREN','primaryexp',3,'p_primaryexp','sqf_yacc.py',344),
  ('bracedexp -> LBRACE new_scope code RBRACE','bracedexp',4,'p_bracedexp','sqf_yacc.py',354),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','sqf_yacc.py',361),
  ('array -> LSPAREN RSPAREN','array',2,'p_array','sqf_yacc.py',367),
  ('array -> LSPAREN arrayelement RSPAREN','array',3,'p_array','sqf_yacc.py',368),
  ('arrayelement -> primaryexp','arrayelement',1,'p_arrayelement','sqf_yacc.py',378),
  ('arrayelement -> primaryexp COMMA arrayelement','arrayelement',3,'p_arrayelement','sqf_yacc.py',379),
  ('stringarray -> LSPAREN RSPAREN','stringarray',2,'p_stringarray','sqf_yacc.py',392),
  ('stringarray -> LSPAREN stringarrayelement RSPAREN','stringarray',3,'p_stringarray','sqf_yacc.py',393),
  ('stringarrayelement -> string','stringarrayelement',1,'p_stringarrayelement','sqf_yacc.py',403),
  ('stringarrayelement -> string COMMA stringarrayelement','stringarrayelement',3,'p_stringarrayelement','sqf_yacc.py',404),
  ('nularexp -> NULAR_FNC','nularexp',1,'p_nularexp','sqf_yacc.py',418),
  ('nularexp -> identifier','nularexp',1,'p_nularexp','sqf_yacc.py',419),
  ('unaryexp -> UNARY_FNC primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',426),
  ('unaryexp -> PLUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',427),
  ('unaryexp -> MINUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',428),
  ('unaryexp -> NOT primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',429),
  ('unaryexp -> vardefinition','unaryexp',1,'p_unaryexp','sqf_yacc.py',430),
  ('comparisonoperator -> LT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',436),
  ('comparisonoperator -> GT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',437),
  ('comparisonoperator -> LTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',438),
  ('comparisonoperator -> GTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',439),
  ('comparisonoperator -> EQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',440),
  ('comparisonoperator -> INEQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',441),
  ('comparisonoperator -> AND','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',442),
  ('comparisonoperator -> OR','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',443),
  ('mathoperator -> PLUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',450),
  ('mathoperator -> MINUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',451),
  ('mathoperator -> TIMES','mathoperator',1,'p_mathoperator','sqf_yacc.py',452),
  ('mathoperator -> DIVIDE','mathoperator',1,'p_mathoperator','sqf_yacc.py',453),
  ('mathoperator -> MOD','mathoperator',1,'p_mathoperator','sqf_yacc.py',454),
  ('mathoperator -> POW','mathoperator',1,'p_mathoperator','sqf_yacc.py',455),
  ('booleanexp -> primaryexp','booleanexp',1,'p_booleanexp','sqf_yacc.py',462),
  ('booleanexp -> primaryexp comparisonoperator booleanexp','booleanexp',3,'p_booleanexp','sqf_yacc.py',463),
  ('booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE','booleanexp',5,'p_booleanexp','sqf_yacc.py',464),
  ('configaccessor -> GT GT','configaccessor',2,'p_configaccessor','sqf_yacc.py',470),
  ('configaccessor -> DIVIDE','configaccessor',1,'p_configaccessor','sqf_yacc.py',471),
  ('number -> NUMBER_REAL','number',1,'p_number','sqf_yacc.py',478),
  ('number -> NUMBER_EXP','number',1,'p_number','sqf_yacc.py',479),
  ('number -> NUMBER_HEX','number',1,'p_number','sqf_yacc.py',480),
  ('string -> STRING_SINGLE','string',1,'p_string','sqf_yacc.py',487),
  ('string -> STRING_DOUBLE','string',1,'p_string','sqf_yacc.py',488),
  ('empty -> <empty>','empty',0,'p_empty','sqf_yacc.py',495),
]
