
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARISON_OPCONFIG_ACCESSOR_GTGTleftBINARY_OPCOLONleftELSEleftPLUSMINUSleftTIMESDIVIDEMODCONFIG_ACCESSOR_SLASHleftPOWleftUNARY_OPleftNULAR_OPVARIABLEVALUEBRACED_EXPAND BINARY_FNC BOOL CASE COLON COMMA COMMENT_MULTI COMMENT_SINGLE DEFAULT DIVIDE DO ELSE EQUAL EQUALITY EXITWITH FOR FOREACH FROM GETVARIABLE GLOBAL_ID GT GTE IF INEQUALITY LBRACE LPAREN LSPAREN LT LTE MINUS MOD NAMESPACE NEWLINE NOT NULAR_FNC NUMBER_EXP NUMBER_HEX NUMBER_REAL OR PARAM PARAMS PLUS POW PRIVATE PRIVATE_ID RBRACE RPAREN RSPAREN SEMI_COLON SETVARIABLE STEP STRING_DOUBLE STRING_SINGLE SWITCH THEN TIMES TO UNARY_FNC WHILE WITH\n    code    : empty\n            | statement\n            | statement terminator code\n    \n    statement   : controlstructure\n                | assignment\n                | binaryexp\n                | nularexp\n                | unaryexp\n    \n    terminator  : SEMI_COLON\n                | COMMA\n    \n    controlstructure    : ifstatement\n                        | whileloop\n                        | forloop\n                        | withstatement\n                        | foreachloop\n                        | switchstatement\n    \n    helpertype  : iftype\n                | whiletype\n                | fortype\n                | withtype\n    \n    case    : CASE primaryexp COLON bracedexp\n            | CASE primaryexp\n            | DEFAULT bracedexp\n    \n    switchstatement : SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE\n    \n    switchbody  : empty\n                | case\n                | case terminator switchbody\n    \n    iftype : IF forloop_condition\n    \n    ifstatement : iftype THEN bracedexp\n                | iftype EXITWITH bracedexp\n                | iftype THEN bracedexp ELSE bracedexp\n    \n    withtype : WITH NAMESPACE\n    \n    withstatementinit : withtype DO\n    \n    withstatement : withstatementinit bracedexp\n    \n    whiletype   : WHILE forloop_condition\n    \n    whileloop : whiletype DO bracedexp\n    \n    foreachloop : bracedexp FOREACH array\n                | bracedexp FOREACH primaryexp\n                | bracedexp FOREACH LPAREN primaryexp RPAREN\n    \n    fortype : FOR new_scope string FROM primaryexp TO primaryexp\n            | FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp\n            | FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN\n    \n    forloop : fortype DO bracedexp_noscope\n    \n    forloop_condition   : LBRACE booleanexp RBRACE\n                        | identifier\n    \n     bracedexp_noscope : LBRACE code RBRACE\n    \n    getvariable_ns  : NAMESPACE GETVARIABLE string\n                    | NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN\n    \n    getvariable_any : primaryexp GETVARIABLE string\n                    | primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN\n    \n    setvariable_ns  : NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN\n                    | NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN\n    \n    setvariable_any     : primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN\n                        | primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN\n    \n    param_unary     : PARAM LSPAREN number RSPAREN\n                    | PARAM LSPAREN number COMMA primaryexp RSPAREN\n                    | PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN\n                    | PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN\n                    | PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN\n    \n    param_binary    : primaryexp PARAM LSPAREN number RSPAREN\n                    | primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN\n                    | primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN\n                    | primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN\n                    | primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN\n    \n    params_unary : PARAMS params_array\n    \n    params_binary : primaryexp PARAMS params_array\n    \n    params_array    : LSPAREN RSPAREN\n                    | LSPAREN params_element RSPAREN\n    \n    params_element  : params_array_entry\n                    | params_array_entry COMMA params_element\n    \n    params_array_entry  : string\n                        | LSPAREN string COMMA primaryexp RSPAREN\n                        | LSPAREN string COMMA primaryexp COMMA array RSPAREN\n                        | LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN\n                        | LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN\n    \n    vardefinition   : definition\n                    | arraydefinition\n    \n    assignment  : assignment_code code RBRACE\n                | definition EQUAL primaryexp\n                | variable EQUAL primaryexp\n    \n    assignment_code : definition EQUAL LBRACE\n                    | variable EQUAL LBRACE\n    \n    arraydefinition : PRIVATE stringarray\n    \n    definition  : PRIVATE PRIVATE_ID\n                | PRIVATE string\n    \n    identifier  : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID  %prec VARIABLE\n    \n    variable    : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID %prec VARIABLE\n    \n    binaryexp   : primaryexp BINARY_FNC primaryexp          %prec BINARY_OP\n                | primaryexp comparisonoperator primaryexp  %prec BINARY_OP\n                | primaryexp mathoperator primaryexp        %prec BINARY_OP\n                | getvariable_ns                            %prec BINARY_OP\n                | getvariable_any                           %prec BINARY_OP\n                | setvariable_ns                            %prec BINARY_OP\n                | setvariable_any                           %prec BINARY_OP\n                | param_binary                              %prec BINARY_OP\n                | params_binary                             %prec BINARY_OP\n    \n    primaryexp  : number                    %prec VALUE\n                | identifier                %prec VALUE\n                | helpertype                %prec VALUE\n                | array                     %prec VALUE\n                | unaryexp                  %prec UNARY_OP\n                | nularexp                  %prec NULAR_OP\n                | string                    %prec VALUE\n                | binaryexp                 %prec BINARY_OP\n                | bracedexp                 %prec BRACED_EXP\n                | LPAREN binaryexp RPAREN   %prec BRACED_EXP\n    \n    bracedexp : LBRACE new_scope code RBRACE\n    new_scope :\n    array   : LSPAREN RSPAREN\n            | LSPAREN arrayelement RSPAREN\n    \n    arrayelement    : primaryexp\n                    | primaryexp COMMA arrayelement\n    \n    stringarray : LSPAREN RSPAREN\n                | LSPAREN stringarrayelement RSPAREN\n    \n    stringarrayelement  : string\n                        | string COMMA stringarrayelement\n    \n    nularexp    : NULAR_FNC     %prec NULAR_OP\n                | identifier    %prec NULAR_OP\n    \n    unaryexp    : UNARY_FNC primaryexp  %prec UNARY_OP\n                | PLUS primaryexp       %prec UNARY_OP\n                | MINUS primaryexp      %prec UNARY_OP\n                | NOT primaryexp        %prec UNARY_OP\n                | vardefinition         %prec UNARY_OP\n                | param_unary           %prec UNARY_OP\n                | params_unary          %prec UNARY_OP\n    \n    comparisonoperator  : LT            %prec COMPARISON_OP\n                        | GT            %prec COMPARISON_OP\n                        | LTE           %prec COMPARISON_OP\n                        | GTE           %prec COMPARISON_OP\n                        | EQUALITY      %prec COMPARISON_OP\n                        | INEQUALITY    %prec COMPARISON_OP\n                        | AND           %prec COMPARISON_OP\n                        | OR            %prec COMPARISON_OP\n    \n    mathoperator : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MOD\n                    | POW\n    \n    booleanexp  : primaryexp\n                | primaryexp comparisonoperator booleanexp\n                | primaryexp comparisonoperator LBRACE booleanexp RBRACE\n    \n    configaccessor  : GT GT     %prec CONFIG_ACCESSOR_GTGT\n                    | DIVIDE    %prec CONFIG_ACCESSOR_SLASH\n    \n    number  : NUMBER_REAL\n            | NUMBER_EXP\n            | NUMBER_HEX\n    \n    string  : STRING_SINGLE\n            | STRING_DOUBLE\n    \n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,21,22,23,24,25,26,31,32,33,39,44,45,46,47,48,53,58,59,60,61,62,64,65,66,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,116,117,118,122,126,128,130,131,134,135,136,137,139,140,141,142,146,147,149,150,151,152,154,155,157,160,163,166,170,185,186,191,194,196,202,204,205,206,226,231,233,235,241,243,248,252,258,262,264,267,272,273,277,278,281,282,],[-152,0,-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-76,-93,-94,-95,-96,-97,-98,-119,-120,-125,-126,-127,-102,-86,-105,-87,-99,-101,-77,-147,-148,-149,-150,-151,-152,-9,-10,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-34,-84,-85,-83,-111,-65,-28,-45,-35,-32,-3,-78,-79,-90,-91,-92,-49,-66,-80,-29,-30,-37,-38,-36,-43,-108,-115,-47,-112,-67,-109,-116,-55,-68,-44,-60,-31,-39,-46,-56,-50,-53,-61,-48,-51,-40,-24,-57,-54,-62,-52,-41,-42,-58,-59,-63,-64,]),'NULAR_FNC':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[25,25,25,25,25,25,25,-110,25,25,-9,-10,25,25,25,25,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,25,25,25,25,25,-81,-82,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'UNARY_FNC':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[27,27,27,27,27,27,27,-110,27,27,-9,-10,27,27,27,27,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,27,27,27,27,27,-81,-82,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'PLUS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,42,44,45,46,47,48,50,53,57,58,59,60,61,62,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,113,114,115,116,117,118,122,124,126,128,129,130,131,134,137,138,139,140,141,142,146,147,148,151,152,153,156,157,158,160,163,166,167,170,175,182,185,186,191,192,194,196,197,198,200,201,202,203,209,210,211,212,214,216,217,219,220,221,223,224,226,227,229,231,232,233,235,239,241,242,243,248,254,258,260,262,264,267,272,273,277,278,281,282,],[28,-106,-104,-103,28,-76,84,-93,-94,-95,-96,-97,-98,-119,-100,28,28,28,28,-125,-126,-127,-17,-107,-18,-19,-102,28,-110,-86,-105,-87,-99,-101,28,-77,-20,-147,-148,-149,-150,-151,28,-9,-10,28,28,28,28,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,28,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,28,-106,28,28,-84,-85,-83,-111,84,-65,-28,28,-45,-35,-32,84,-81,84,84,84,-49,-66,84,-82,-102,84,28,28,-108,84,-115,-47,-112,28,-67,84,84,-109,-116,-55,28,-68,-44,28,28,28,28,-60,28,28,28,84,28,84,28,84,84,84,84,84,84,-56,84,28,-50,28,-53,-61,28,-48,28,-51,84,84,-57,28,-54,-62,-52,84,-42,-58,-59,-63,-64,]),'MINUS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,42,44,45,46,47,48,50,53,57,58,59,60,61,62,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,113,114,115,116,117,118,122,124,126,128,129,130,131,134,137,138,139,140,141,142,146,147,148,151,152,153,156,157,158,160,163,166,167,170,175,182,185,186,191,192,194,196,197,198,200,201,202,203,209,210,211,212,214,216,217,219,220,221,223,224,226,227,229,231,232,233,235,239,241,242,243,248,254,258,260,262,264,267,272,273,277,278,281,282,],[29,-106,-104,-103,29,-76,85,-93,-94,-95,-96,-97,-98,-119,-100,29,29,29,29,-125,-126,-127,-17,-107,-18,-19,-102,29,-110,-86,-105,-87,-99,-101,29,-77,-20,-147,-148,-149,-150,-151,29,-9,-10,29,29,29,29,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,29,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,29,-106,29,29,-84,-85,-83,-111,85,-65,-28,29,-45,-35,-32,85,-81,85,85,85,-49,-66,85,-82,-102,85,29,29,-108,85,-115,-47,-112,29,-67,85,85,-109,-116,-55,29,-68,-44,29,29,29,29,-60,29,29,29,85,29,85,29,85,85,85,85,85,85,-56,85,29,-50,29,-53,-61,29,-48,29,-51,85,85,-57,29,-54,-62,-52,85,-42,-58,-59,-63,-64,]),'NOT':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[30,30,30,30,30,30,30,-110,30,30,-9,-10,30,30,30,30,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,30,30,30,30,30,-81,-82,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'SWITCH':([0,15,42,64,65,66,115,138,148,156,216,],[41,41,-110,41,-9,-10,41,-81,-82,41,-110,]),'PRIVATE':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[43,43,43,43,43,43,43,-110,43,43,-9,-10,43,43,43,43,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,43,43,43,43,43,-81,-82,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'PRIVATE_ID':([0,15,27,28,29,30,40,42,43,50,54,55,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,218,229,232,239,242,260,],[44,44,97,97,97,97,97,-110,116,97,97,97,44,-9,-10,97,97,97,97,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,97,97,97,44,97,-81,-82,97,44,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'GLOBAL_ID':([0,15,27,28,29,30,40,42,50,54,55,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,218,229,232,239,242,260,],[46,46,98,98,98,98,98,-110,98,98,98,46,-9,-10,98,98,98,98,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,98,98,98,46,98,-81,-82,98,46,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'LPAREN':([0,15,27,28,29,30,40,41,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[40,40,40,40,40,40,40,114,-110,40,40,-9,-10,40,40,40,40,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,40,153,40,40,40,-81,-82,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'NAMESPACE':([0,15,27,28,29,30,40,42,50,63,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[49,49,49,49,49,49,49,-110,49,134,49,-9,-10,49,49,49,49,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,49,49,49,49,49,-81,-82,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'PARAM':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,42,44,45,46,47,48,50,53,57,58,59,60,61,62,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,113,114,115,116,117,118,122,124,126,128,129,130,131,134,137,138,139,140,141,142,146,147,148,151,152,153,156,157,158,160,163,166,167,170,175,182,185,186,191,192,194,196,197,198,200,201,202,203,209,210,211,212,214,216,217,219,220,221,223,224,226,227,229,231,232,233,235,239,241,242,243,248,254,258,260,262,264,267,272,273,277,278,281,282,],[51,-106,-104,-103,51,-76,74,-93,-94,-95,-96,-97,-98,-119,-100,51,51,51,51,-125,-126,-127,-17,-107,-18,-19,-102,51,-110,-86,-105,-87,-99,-101,51,-77,-20,-147,-148,-149,-150,-151,51,-9,-10,51,51,51,51,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,51,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,51,-106,51,51,-84,-85,-83,-111,74,-65,-28,51,-45,-35,-32,74,-81,-90,-91,-92,-49,-66,74,-82,-102,74,51,51,-108,74,-115,-47,-112,51,-67,74,74,-109,-116,-55,51,-68,-44,51,51,51,51,-60,51,51,51,74,51,-91,51,74,74,74,74,74,74,-56,74,51,-50,51,-53,-61,51,-48,51,-51,74,74,-57,51,-54,-62,-52,74,-42,-58,-59,-63,-64,]),'PARAMS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,42,44,45,46,47,48,50,53,57,58,59,60,61,62,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,113,114,115,116,117,118,122,124,126,128,129,130,131,134,137,138,139,140,141,142,146,147,148,151,152,153,156,157,158,160,163,166,167,170,175,182,185,186,191,192,194,196,197,198,200,201,202,203,209,210,211,212,214,216,217,219,220,221,223,224,226,227,229,231,232,233,235,239,241,242,243,248,254,258,260,262,264,267,272,273,277,278,281,282,],[52,-106,-104,-103,52,-76,75,-93,-94,-95,-96,-97,-98,-119,-100,52,52,52,52,-125,-126,-127,-17,-107,-18,-19,-102,52,-110,-86,-105,-87,-99,-101,52,-77,-20,-147,-148,-149,-150,-151,52,-9,-10,52,52,52,52,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,52,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,52,-106,52,52,-84,-85,-83,-111,75,-65,-28,52,-45,-35,-32,75,-81,-90,-91,-92,-49,-66,75,-82,-102,75,52,52,-108,75,-115,-47,-112,52,-67,75,75,-109,-116,-55,52,-68,-44,52,52,52,52,-60,52,52,52,75,52,-91,52,75,75,75,75,75,75,-56,75,52,-50,52,-53,-61,52,-48,52,-51,75,75,-57,52,-54,-62,-52,75,-42,-58,-59,-63,-64,]),'IF':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[54,54,54,54,54,54,54,-110,54,54,-9,-10,54,54,54,54,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,54,54,54,54,54,-81,-82,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'WHILE':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[55,55,55,55,55,55,55,-110,55,55,-9,-10,55,55,55,55,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,55,55,55,55,55,-81,-82,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FOR':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[56,56,56,56,56,56,56,-110,56,56,-9,-10,56,56,56,56,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,56,56,56,56,56,-81,-82,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'LBRACE':([0,15,27,28,29,30,38,40,42,50,54,55,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,107,108,109,110,111,114,115,129,133,138,148,153,156,167,177,181,192,197,198,200,201,203,207,209,210,212,216,218,229,232,239,240,242,249,260,266,],[42,42,42,42,42,42,42,42,-110,42,129,129,42,-9,-10,138,42,42,42,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,148,42,42,42,42,156,42,42,42,-33,-81,-82,42,42,42,156,42,42,216,42,42,42,42,222,42,42,42,42,129,42,42,42,42,42,156,42,42,]),'NUMBER_REAL':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,125,129,138,145,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,257,260,263,270,],[58,58,58,58,58,58,58,-110,58,58,-9,-10,58,58,58,58,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,58,58,58,58,58,58,-81,58,-82,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'NUMBER_EXP':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,125,129,138,145,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,257,260,263,270,],[59,59,59,59,59,59,59,-110,59,59,-9,-10,59,59,59,59,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,59,59,59,59,59,59,-81,59,-82,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NUMBER_HEX':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,125,129,138,145,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,257,260,263,270,],[60,60,60,60,60,60,60,-110,60,60,-9,-10,60,60,60,60,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,60,60,60,60,60,60,-81,60,-82,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'LSPAREN':([0,15,27,28,29,30,40,42,43,50,51,52,56,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,120,121,127,129,132,138,148,153,156,167,192,195,197,198,200,201,203,209,210,212,216,225,229,232,234,239,242,245,257,260,263,270,],[50,50,50,50,50,50,50,-110,119,50,125,127,-110,50,-9,-10,50,50,50,50,143,144,145,127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,50,50,50,50,164,165,169,50,177,-81,-82,50,50,50,50,169,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'STRING_SINGLE':([0,15,27,28,29,30,40,42,43,50,56,64,65,66,68,69,70,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,119,120,127,129,132,138,143,144,148,153,156,164,165,167,169,187,192,195,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[61,61,61,61,61,61,61,-110,61,61,-110,61,-9,-10,61,61,61,61,61,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,61,61,61,61,61,61,61,61,61,-81,61,61,-82,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'STRING_DOUBLE':([0,15,27,28,29,30,40,42,43,50,56,64,65,66,68,69,70,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,119,120,127,129,132,138,143,144,148,153,156,164,165,167,169,187,192,195,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[62,62,62,62,62,62,62,-110,62,62,-110,62,-9,-10,62,62,62,62,62,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,62,62,62,62,62,62,62,62,62,-81,62,62,-82,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'WITH':([0,15,27,28,29,30,40,42,50,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,109,114,115,129,138,148,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[63,63,63,63,63,63,63,-110,63,63,-9,-10,63,63,63,63,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,63,63,63,63,63,-81,-82,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,31,32,33,39,42,44,45,46,47,48,53,58,59,60,61,62,64,65,66,67,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,115,116,117,118,122,126,128,130,131,134,135,136,137,138,139,140,141,142,146,147,148,149,150,151,152,154,155,156,157,159,160,163,166,170,174,175,183,185,186,191,194,196,202,204,205,206,214,215,216,222,226,228,231,233,235,236,237,238,241,243,247,248,252,253,254,255,258,262,264,265,267,272,273,276,277,278,281,282,],[-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-152,-76,-93,-94,-95,-96,-97,-98,-119,-120,-125,-126,-127,-102,-110,-86,-105,-87,-99,-101,-77,-147,-148,-149,-150,-151,-152,-9,-10,136,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-34,-152,-84,-85,-83,-111,-65,-28,-45,-35,-32,-3,-78,-79,-81,-90,-91,-92,-49,-66,-80,-82,-29,-30,-37,-38,-36,-43,-152,-108,185,-115,-47,-112,-67,196,-142,206,-109,-116,-55,-68,-44,-60,-31,-39,-46,-91,-143,-110,-152,-56,247,-50,-53,-61,252,-25,-26,-48,-51,-144,-40,-24,-152,-22,-23,-57,-54,-62,-27,-52,-41,-42,-21,-58,-59,-63,-64,]),'SEMI_COLON':([3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,21,22,23,24,25,26,31,32,33,39,44,45,46,47,48,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,116,117,118,122,126,128,130,131,134,136,137,139,140,141,142,146,147,149,150,151,152,154,155,157,160,163,166,170,185,186,191,194,196,202,204,205,206,226,231,233,235,238,241,243,248,252,254,255,258,262,264,267,272,273,276,277,278,281,282,],[65,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-76,-93,-94,-95,-96,-97,-98,-119,-120,-125,-126,-127,-102,-86,-105,-87,-99,-101,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-34,-84,-85,-83,-111,-65,-28,-45,-35,-32,-78,-79,-90,-91,-92,-49,-66,-80,-29,-30,-37,-38,-36,-43,-108,-115,-47,-112,-67,-109,-116,-55,-68,-44,-60,-31,-39,-46,-56,-50,-53,-61,65,-48,-51,-40,-24,-22,-23,-57,-54,-62,-52,-41,-42,-21,-58,-59,-63,-64,]),'COMMA':([3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,21,22,23,24,25,26,31,32,33,39,44,45,46,47,48,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,116,117,118,122,124,126,128,130,131,134,136,137,139,140,141,142,146,147,149,150,151,152,154,155,157,160,162,163,166,168,170,172,173,178,179,180,185,186,188,189,191,193,194,196,199,202,204,205,206,211,220,221,224,226,227,230,231,233,235,238,241,243,244,246,248,251,252,254,255,258,259,262,264,267,271,272,273,276,277,278,281,282,283,284,],[66,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-76,-93,-94,-95,-96,-97,-98,-119,-120,-125,-126,-127,-102,-86,-105,-87,-99,-101,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-34,-84,-85,-83,-111,167,-65,-28,-45,-35,-32,-78,-79,-90,-91,-92,-49,-66,-80,-29,-30,-37,-38,-36,-43,-108,-115,187,-47,-112,192,-67,195,-71,200,201,203,-109,-116,209,210,-55,212,-68,-44,218,-60,-31,-39,-46,225,232,234,242,-56,245,249,-50,-53,-61,66,-48,-51,257,-72,-40,263,-24,-22,-23,-57,270,-54,-62,-52,-73,-41,-42,-21,-58,-59,-63,-64,-75,-74,]),'BINARY_FNC':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,69,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,69,-65,-28,-45,-35,-32,69,-90,-91,-92,-49,-66,69,-102,69,-108,69,-115,-47,-112,-67,69,69,-109,-116,-55,-68,-44,-60,69,-91,69,69,69,69,69,69,-56,69,-50,-53,-61,-48,-51,69,69,-57,-54,-62,-52,69,-42,-58,-59,-63,-64,]),'GETVARIABLE':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,49,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,72,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,120,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,72,-65,-28,-45,-35,-32,72,-90,-91,-92,-49,-66,72,-102,72,-108,72,-115,-47,-112,-67,72,72,-109,-116,-55,-68,-44,-60,72,-91,72,72,72,72,72,72,-56,72,-50,-53,-61,-48,-51,72,72,-57,-54,-62,-52,72,-42,-58,-59,-63,-64,]),'SETVARIABLE':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,49,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,73,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,121,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,73,-65,-28,-45,-35,-32,73,-90,-91,-92,-49,-66,73,-102,73,-108,73,-115,-47,-112,-67,73,73,-109,-116,-55,-68,-44,-60,73,-91,73,73,73,73,73,73,-56,73,-50,-53,-61,-48,-51,73,73,-57,-54,-62,-52,73,-42,-58,-59,-63,-64,]),'LT':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,76,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,76,-65,-28,-45,-35,-32,76,-90,-91,-92,-49,-66,76,-102,76,-108,76,-115,-47,-112,-67,76,76,-109,-116,-55,-68,-44,-60,76,-91,76,76,76,76,76,76,-56,76,-50,-53,-61,-48,-51,76,76,-57,-54,-62,-52,76,-42,-58,-59,-63,-64,]),'GT':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,77,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,77,-65,-28,-45,-35,-32,77,-90,-91,-92,-49,-66,77,-102,77,-108,77,-115,-47,-112,-67,77,77,-109,-116,-55,-68,-44,-60,77,-91,77,77,77,77,77,77,-56,77,-50,-53,-61,-48,-51,77,77,-57,-54,-62,-52,77,-42,-58,-59,-63,-64,]),'LTE':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,78,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,78,-65,-28,-45,-35,-32,78,-90,-91,-92,-49,-66,78,-102,78,-108,78,-115,-47,-112,-67,78,78,-109,-116,-55,-68,-44,-60,78,-91,78,78,78,78,78,78,-56,78,-50,-53,-61,-48,-51,78,78,-57,-54,-62,-52,78,-42,-58,-59,-63,-64,]),'GTE':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,79,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,79,-65,-28,-45,-35,-32,79,-90,-91,-92,-49,-66,79,-102,79,-108,79,-115,-47,-112,-67,79,79,-109,-116,-55,-68,-44,-60,79,-91,79,79,79,79,79,79,-56,79,-50,-53,-61,-48,-51,79,79,-57,-54,-62,-52,79,-42,-58,-59,-63,-64,]),'EQUALITY':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,80,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,80,-65,-28,-45,-35,-32,80,-90,-91,-92,-49,-66,80,-102,80,-108,80,-115,-47,-112,-67,80,80,-109,-116,-55,-68,-44,-60,80,-91,80,80,80,80,80,80,-56,80,-50,-53,-61,-48,-51,80,80,-57,-54,-62,-52,80,-42,-58,-59,-63,-64,]),'INEQUALITY':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,81,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,81,-65,-28,-45,-35,-32,81,-90,-91,-92,-49,-66,81,-102,81,-108,81,-115,-47,-112,-67,81,81,-109,-116,-55,-68,-44,-60,81,-91,81,81,81,81,81,81,-56,81,-50,-53,-61,-48,-51,81,81,-57,-54,-62,-52,81,-42,-58,-59,-63,-64,]),'AND':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,82,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,82,-65,-28,-45,-35,-32,82,-90,-91,-92,-49,-66,82,-102,82,-108,82,-115,-47,-112,-67,82,82,-109,-116,-55,-68,-44,-60,82,-91,82,82,82,82,82,82,-56,82,-50,-53,-61,-48,-51,82,82,-57,-54,-62,-52,82,-42,-58,-59,-63,-64,]),'OR':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,83,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,83,-65,-28,-45,-35,-32,83,-90,-91,-92,-49,-66,83,-102,83,-108,83,-115,-47,-112,-67,83,83,-109,-116,-55,-68,-44,-60,83,-91,83,83,83,83,83,83,-56,83,-50,-53,-61,-48,-51,83,83,-57,-54,-62,-52,83,-42,-58,-59,-63,-64,]),'TIMES':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,86,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,86,-65,-28,-45,-35,-32,86,86,86,86,-49,-66,86,-102,86,-108,86,-115,-47,-112,-67,86,86,-109,-116,-55,-68,-44,-60,86,86,86,86,86,86,86,86,-56,86,-50,-53,-61,-48,-51,86,86,-57,-54,-62,-52,86,-42,-58,-59,-63,-64,]),'DIVIDE':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,87,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,87,-65,-28,-45,-35,-32,87,87,87,87,-49,-66,87,-102,87,-108,87,-115,-47,-112,-67,87,87,-109,-116,-55,-68,-44,-60,87,87,87,87,87,87,87,87,-56,87,-50,-53,-61,-48,-51,87,87,-57,-54,-62,-52,87,-42,-58,-59,-63,-64,]),'MOD':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,88,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,88,-65,-28,-45,-35,-32,88,88,88,88,-49,-66,88,-102,88,-108,88,-115,-47,-112,-67,88,88,-109,-116,-55,-68,-44,-60,88,88,88,88,88,88,88,88,-56,88,-50,-53,-61,-48,-51,88,88,-57,-54,-62,-52,88,-42,-58,-59,-63,-64,]),'POW':([6,7,8,16,17,19,20,21,22,23,24,25,26,31,32,33,34,35,36,37,39,44,45,46,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,124,126,128,130,131,134,137,139,140,141,142,146,147,151,152,157,158,160,163,166,170,175,182,185,186,191,194,196,202,211,214,217,219,220,221,223,224,226,227,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-106,-104,-103,-76,89,-93,-94,-95,-96,-97,-98,-119,-100,-125,-126,-127,-17,-107,-18,-19,-102,-86,-105,-87,-99,-101,-77,-20,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,89,-65,-28,-45,-35,-32,89,89,89,89,-49,-66,89,-102,89,-108,89,-115,-47,-112,-67,89,89,-109,-116,-55,-68,-44,-60,89,89,89,89,89,89,89,89,-56,89,-50,-53,-61,-48,-51,89,89,-57,-54,-62,-52,89,-42,-58,-59,-63,-64,]),'EQUAL':([16,18,44,46,61,62,116,117,],[68,90,-88,-89,-150,-151,-84,-85,]),'RSPAREN':([19,20,21,22,23,24,25,31,32,33,39,45,47,48,50,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,116,117,118,119,122,123,124,126,127,128,130,131,134,139,140,141,142,146,157,160,161,162,163,166,168,170,171,172,173,175,180,185,186,190,191,194,196,202,206,208,211,213,214,215,219,220,221,223,224,226,227,231,233,235,241,243,244,246,247,248,250,251,256,258,259,261,262,264,267,268,269,271,272,273,274,275,277,278,279,280,281,282,283,284,],[-93,-94,-95,-96,-97,-98,-119,-125,-126,-127,-102,-105,-99,-101,122,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-84,-85,-83,160,-111,166,-113,-65,170,-28,-45,-35,-32,-90,-91,-92,-49,-66,-108,-115,186,-117,-47,-112,191,-67,194,-69,-71,-142,202,-109,-116,-114,-55,-68,-44,-60,-46,-118,226,-70,-91,-143,231,233,235,241,243,-56,246,-50,-53,-61,-48,-51,258,-72,-144,-40,262,264,267,-57,271,273,-54,-62,-52,277,278,-73,-41,-42,281,282,-58,-59,283,284,-63,-64,-75,-74,]),'RPAREN':([19,20,21,22,23,24,25,31,32,33,39,45,47,48,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,116,117,118,122,126,128,130,131,134,139,140,141,142,146,157,158,160,163,166,170,182,185,186,191,194,196,202,226,231,233,235,241,243,248,258,262,264,267,272,273,277,278,281,282,],[-93,-94,-95,-96,-97,-98,-119,-125,-126,-127,-102,-105,-99,-101,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-106,-84,-85,-83,-111,-65,-28,-45,-35,-32,-90,-91,-92,-49,-66,-108,184,-115,-47,-112,-67,205,-109,-116,-55,-68,-44,-60,-56,-50,-53,-61,-48,-51,-40,-57,-54,-62,-52,-41,-42,-58,-59,-63,-64,]),'TO':([19,20,21,22,23,24,25,31,32,33,39,45,47,48,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,116,117,118,122,126,128,130,131,134,139,140,141,142,146,157,160,163,166,170,185,186,191,194,196,202,217,226,231,233,235,241,243,248,258,262,264,267,272,273,277,278,281,282,],[-93,-94,-95,-96,-97,-98,-119,-125,-126,-127,-102,-105,-99,-101,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-84,-85,-83,-111,-65,-28,-45,-35,-32,-90,-91,-92,-49,-66,-108,-115,-47,-112,-67,-109,-116,-55,-68,-44,-60,229,-56,-50,-53,-61,-48,-51,-40,-57,-54,-62,-52,-41,-42,-58,-59,-63,-64,]),'STEP':([19,20,21,22,23,24,25,31,32,33,39,45,47,48,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,116,117,118,122,126,128,130,131,134,139,140,141,142,146,157,160,163,166,170,185,186,191,194,196,202,226,231,233,235,241,243,248,258,262,264,267,272,273,277,278,281,282,],[-93,-94,-95,-96,-97,-98,-119,-125,-126,-127,-102,-105,-99,-101,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-84,-85,-83,-111,-65,-28,-45,-35,-32,-90,-91,-92,-49,-66,-108,-115,-47,-112,-67,-109,-116,-55,-68,-44,-60,-56,-50,-53,-61,-48,-51,260,-57,-54,-62,-52,-41,-42,-58,-59,-63,-64,]),'DO':([19,20,21,22,23,24,25,31,32,33,36,37,39,45,47,48,53,57,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,116,117,118,122,126,128,130,131,134,139,140,141,142,146,157,160,163,166,170,184,185,186,191,194,196,202,226,231,233,235,241,243,248,258,262,264,267,272,273,277,278,281,282,],[-93,-94,-95,-96,-97,-98,-119,-125,-126,-127,110,111,-102,-105,-99,-101,-77,133,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-84,-85,-83,-111,-65,-28,-45,-35,-32,-90,-91,-92,-49,-66,-108,-115,-47,-112,-67,207,-109,-116,-55,-68,-44,-60,-56,-50,-53,-61,-48,-51,-40,-57,-54,-62,-52,-41,-42,-58,-59,-63,-64,]),'COLON':([19,20,21,22,23,24,25,31,32,33,39,45,47,48,53,58,59,60,61,62,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,116,117,118,122,126,128,130,131,134,139,140,141,142,146,157,160,163,166,170,185,186,191,194,196,202,226,231,233,235,241,243,248,254,258,262,264,267,272,273,277,278,281,282,],[-93,-94,-95,-96,-97,-98,-119,-125,-126,-127,-102,-105,-99,-101,-77,-147,-148,-149,-150,-151,-121,-100,-103,-104,-106,-107,-86,-87,-17,-18,-19,-20,-76,-122,-123,-124,-84,-85,-83,-111,-65,-28,-45,-35,-32,-90,-91,-92,-49,-66,-108,-115,-47,-112,-67,-109,-116,-55,-68,-44,-60,-56,-50,-53,-61,-48,-51,-40,266,-57,-54,-62,-52,-41,-42,-58,-59,-63,-64,]),'THEN':([34,97,98,128,130,196,],[107,-86,-87,-28,-45,-44,]),'EXITWITH':([34,97,98,128,130,196,],[108,-86,-87,-28,-45,-44,]),'FOREACH':([35,185,],[109,-109,]),'FROM':([61,62,176,],[-150,-151,198,]),'CASE':([65,66,222,253,],[-9,-10,239,239,]),'DEFAULT':([65,66,222,253,],[-9,-10,240,240,]),'ELSE':([149,185,],[181,-109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,15,64,115,156,],[1,67,135,159,183,]),'empty':([0,15,64,115,156,222,253,],[2,2,2,2,2,237,237,]),'statement':([0,15,64,115,156,],[3,3,3,3,3,]),'controlstructure':([0,15,64,115,156,],[4,4,4,4,4,]),'assignment':([0,15,64,115,156,],[5,5,5,5,5,]),'binaryexp':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[6,6,95,95,95,95,113,95,6,95,95,95,95,95,95,95,6,95,113,6,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'nularexp':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[7,7,94,94,94,94,94,94,7,94,94,94,94,94,94,94,7,94,94,7,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'unaryexp':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[8,8,93,93,93,93,93,93,8,93,93,93,93,93,93,93,8,93,93,8,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'ifstatement':([0,15,64,115,156,],[9,9,9,9,9,]),'whileloop':([0,15,64,115,156,],[10,10,10,10,10,]),'forloop':([0,15,64,115,156,],[11,11,11,11,11,]),'withstatement':([0,15,64,115,156,],[12,12,12,12,12,]),'foreachloop':([0,15,64,115,156,],[13,13,13,13,13,]),'switchstatement':([0,15,64,115,156,],[14,14,14,14,14,]),'assignment_code':([0,15,64,115,156,],[15,15,15,15,15,]),'definition':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[16,16,103,103,103,103,103,103,16,103,103,103,103,103,103,103,16,103,103,16,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'primaryexp':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[17,17,91,104,105,106,17,124,17,137,139,140,141,147,152,158,17,175,182,17,124,211,214,217,219,220,221,223,224,227,175,248,175,254,175,272,]),'variable':([0,15,64,115,156,],[18,18,18,18,18,]),'getvariable_ns':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'getvariable_any':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'setvariable_ns':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'setvariable_any':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'param_binary':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'params_binary':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'identifier':([0,15,27,28,29,30,40,50,54,55,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,218,229,232,239,242,260,],[26,26,92,92,92,92,92,92,130,130,26,92,92,92,92,92,92,92,26,92,92,26,92,92,92,92,92,92,92,92,92,92,92,130,92,92,92,92,92,]),'vardefinition':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'param_unary':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'params_unary':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'iftype':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[34,34,99,99,99,99,99,99,34,99,99,99,99,99,99,99,34,99,99,34,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'bracedexp':([0,15,27,28,29,30,38,40,50,64,68,69,70,71,90,107,108,109,110,114,115,129,153,156,167,181,192,197,198,200,201,203,209,210,212,216,229,232,239,240,242,260,266,],[35,35,96,96,96,96,112,96,96,35,96,96,96,96,96,149,150,96,154,96,35,96,96,35,96,204,96,96,96,96,96,96,96,96,96,96,96,96,96,255,96,96,276,]),'whiletype':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[36,36,100,100,100,100,100,100,36,100,100,100,100,100,100,100,36,100,100,36,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'fortype':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[37,37,101,101,101,101,101,101,37,101,101,101,101,101,101,101,37,101,101,37,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'withstatementinit':([0,15,64,115,156,],[38,38,38,38,38,]),'array':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,225,229,232,234,239,242,245,257,260,263,270,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,151,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,244,39,39,251,39,39,259,269,39,275,279,]),'string':([0,15,27,28,29,30,40,43,50,64,68,69,70,71,72,90,109,114,115,119,120,127,129,132,143,144,153,156,164,165,167,169,187,192,195,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[45,45,45,45,45,45,45,117,45,45,45,45,45,45,142,45,45,45,45,162,163,173,45,176,178,179,45,45,188,189,45,193,162,45,173,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'number':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,125,129,145,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,257,260,263,270,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,168,47,180,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,268,47,274,280,]),'helpertype':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'arraydefinition':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'withtype':([0,15,27,28,29,30,40,50,64,68,69,70,71,90,109,114,115,129,153,156,167,192,197,198,200,201,203,209,210,212,216,229,232,239,242,260,],[57,57,102,102,102,102,102,102,57,102,102,102,102,102,102,102,57,102,102,57,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'terminator':([3,238,],[64,253,]),'comparisonoperator':([17,91,104,105,106,124,137,139,140,141,147,152,158,175,182,211,214,217,219,220,221,223,224,227,248,254,272,],[70,70,70,70,70,70,70,70,70,70,70,70,70,197,70,70,197,70,70,70,70,70,70,70,70,70,70,]),'mathoperator':([17,91,104,105,106,124,137,139,140,141,147,152,158,175,182,211,214,217,219,220,221,223,224,227,248,254,272,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'new_scope':([42,56,138,148,216,],[115,132,115,115,115,]),'stringarray':([43,],[118,]),'arrayelement':([50,167,],[123,190,]),'params_array':([52,75,],[126,146,]),'forloop_condition':([54,55,218,],[128,131,230,]),'bracedexp_noscope':([111,177,249,],[155,199,261,]),'stringarrayelement':([119,187,],[161,208,]),'params_element':([127,195,],[171,213,]),'params_array_entry':([127,195,],[172,172,]),'booleanexp':([129,197,216,232,242,],[174,215,228,250,256,]),'switchbody':([222,253,],[236,265,]),'case':([222,253,],[238,238,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> empty','code',1,'p_code','sqf_yacc.py',36),
  ('code -> statement','code',1,'p_code','sqf_yacc.py',37),
  ('code -> statement terminator code','code',3,'p_code','sqf_yacc.py',38),
  ('statement -> controlstructure','statement',1,'p_statement','sqf_yacc.py',45),
  ('statement -> assignment','statement',1,'p_statement','sqf_yacc.py',46),
  ('statement -> binaryexp','statement',1,'p_statement','sqf_yacc.py',47),
  ('statement -> nularexp','statement',1,'p_statement','sqf_yacc.py',48),
  ('statement -> unaryexp','statement',1,'p_statement','sqf_yacc.py',49),
  ('terminator -> SEMI_COLON','terminator',1,'p_terminator','sqf_yacc.py',56),
  ('terminator -> COMMA','terminator',1,'p_terminator','sqf_yacc.py',57),
  ('controlstructure -> ifstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',71),
  ('controlstructure -> whileloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',72),
  ('controlstructure -> forloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',73),
  ('controlstructure -> withstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',74),
  ('controlstructure -> foreachloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',75),
  ('controlstructure -> switchstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',76),
  ('helpertype -> iftype','helpertype',1,'p_helpertype','sqf_yacc.py',83),
  ('helpertype -> whiletype','helpertype',1,'p_helpertype','sqf_yacc.py',84),
  ('helpertype -> fortype','helpertype',1,'p_helpertype','sqf_yacc.py',85),
  ('helpertype -> withtype','helpertype',1,'p_helpertype','sqf_yacc.py',86),
  ('case -> CASE primaryexp COLON bracedexp','case',4,'p_case','sqf_yacc.py',93),
  ('case -> CASE primaryexp','case',2,'p_case','sqf_yacc.py',94),
  ('case -> DEFAULT bracedexp','case',2,'p_case','sqf_yacc.py',95),
  ('switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE','switchstatement',8,'p_switchstatement','sqf_yacc.py',101),
  ('switchbody -> empty','switchbody',1,'p_switchbody','sqf_yacc.py',107),
  ('switchbody -> case','switchbody',1,'p_switchbody','sqf_yacc.py',108),
  ('switchbody -> case terminator switchbody','switchbody',3,'p_switchbody','sqf_yacc.py',109),
  ('iftype -> IF forloop_condition','iftype',2,'p_iftype','sqf_yacc.py',115),
  ('ifstatement -> iftype THEN bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',122),
  ('ifstatement -> iftype EXITWITH bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',123),
  ('ifstatement -> iftype THEN bracedexp ELSE bracedexp','ifstatement',5,'p_ifstatement','sqf_yacc.py',124),
  ('withtype -> WITH NAMESPACE','withtype',2,'p_withtype','sqf_yacc.py',131),
  ('withstatementinit -> withtype DO','withstatementinit',2,'p_withstatementinit','sqf_yacc.py',138),
  ('withstatement -> withstatementinit bracedexp','withstatement',2,'p_withstatement','sqf_yacc.py',148),
  ('whiletype -> WHILE forloop_condition','whiletype',2,'p_whiletype','sqf_yacc.py',155),
  ('whileloop -> whiletype DO bracedexp','whileloop',3,'p_whileloop','sqf_yacc.py',161),
  ('foreachloop -> bracedexp FOREACH array','foreachloop',3,'p_foreachloop','sqf_yacc.py',168),
  ('foreachloop -> bracedexp FOREACH primaryexp','foreachloop',3,'p_foreachloop','sqf_yacc.py',169),
  ('foreachloop -> bracedexp FOREACH LPAREN primaryexp RPAREN','foreachloop',5,'p_foreachloop','sqf_yacc.py',170),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp','fortype',7,'p_fortype','sqf_yacc.py',176),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp','fortype',9,'p_fortype','sqf_yacc.py',177),
  ('fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN','fortype',9,'p_fortype','sqf_yacc.py',178),
  ('forloop -> fortype DO bracedexp_noscope','forloop',3,'p_forloop','sqf_yacc.py',200),
  ('forloop_condition -> LBRACE booleanexp RBRACE','forloop_condition',3,'p_bracedexp_condition','sqf_yacc.py',208),
  ('forloop_condition -> identifier','forloop_condition',1,'p_bracedexp_condition','sqf_yacc.py',209),
  ('bracedexp_noscope -> LBRACE code RBRACE','bracedexp_noscope',3,'p_bracedexp_noscope','sqf_yacc.py',219),
  ('getvariable_ns -> NAMESPACE GETVARIABLE string','getvariable_ns',3,'p_getvariable_ns','sqf_yacc.py',226),
  ('getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN','getvariable_ns',7,'p_getvariable_ns','sqf_yacc.py',227),
  ('getvariable_any -> primaryexp GETVARIABLE string','getvariable_any',3,'p_getvariable_any','sqf_yacc.py',250),
  ('getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN','getvariable_any',7,'p_getvariable_any','sqf_yacc.py',251),
  ('setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN','setvariable_ns',7,'p_setvariable_ns','sqf_yacc.py',259),
  ('setvariable_ns -> NAMESPACE SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN','setvariable_ns',9,'p_setvariable_ns','sqf_yacc.py',260),
  ('setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp RSPAREN','setvariable_any',7,'p_setvariable_any','sqf_yacc.py',269),
  ('setvariable_any -> primaryexp SETVARIABLE LSPAREN string COMMA primaryexp COMMA booleanexp RSPAREN','setvariable_any',9,'p_setvariable_any','sqf_yacc.py',270),
  ('param_unary -> PARAM LSPAREN number RSPAREN','param_unary',4,'p_param_unary','sqf_yacc.py',278),
  ('param_unary -> PARAM LSPAREN number COMMA primaryexp RSPAREN','param_unary',6,'p_param_unary','sqf_yacc.py',279),
  ('param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN','param_unary',8,'p_param_unary','sqf_yacc.py',280),
  ('param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN','param_unary',10,'p_param_unary','sqf_yacc.py',281),
  ('param_unary -> PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN','param_unary',10,'p_param_unary','sqf_yacc.py',282),
  ('param_binary -> primaryexp PARAM LSPAREN number RSPAREN','param_binary',5,'p_param_binary','sqf_yacc.py',292),
  ('param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp RSPAREN','param_binary',7,'p_param_binary','sqf_yacc.py',293),
  ('param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array RSPAREN','param_binary',9,'p_param_binary','sqf_yacc.py',294),
  ('param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA number RSPAREN','param_binary',11,'p_param_binary','sqf_yacc.py',295),
  ('param_binary -> primaryexp PARAM LSPAREN number COMMA primaryexp COMMA array COMMA array RSPAREN','param_binary',11,'p_param_binary','sqf_yacc.py',296),
  ('params_unary -> PARAMS params_array','params_unary',2,'p_params_unary','sqf_yacc.py',306),
  ('params_binary -> primaryexp PARAMS params_array','params_binary',3,'p_params_binary','sqf_yacc.py',312),
  ('params_array -> LSPAREN RSPAREN','params_array',2,'p_params_array','sqf_yacc.py',318),
  ('params_array -> LSPAREN params_element RSPAREN','params_array',3,'p_params_array','sqf_yacc.py',319),
  ('params_element -> params_array_entry','params_element',1,'p_params_array_element','sqf_yacc.py',329),
  ('params_element -> params_array_entry COMMA params_element','params_element',3,'p_params_array_element','sqf_yacc.py',330),
  ('params_array_entry -> string','params_array_entry',1,'p_params_array_entry','sqf_yacc.py',343),
  ('params_array_entry -> LSPAREN string COMMA primaryexp RSPAREN','params_array_entry',5,'p_params_array_entry','sqf_yacc.py',344),
  ('params_array_entry -> LSPAREN string COMMA primaryexp COMMA array RSPAREN','params_array_entry',7,'p_params_array_entry','sqf_yacc.py',345),
  ('params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA number RSPAREN','params_array_entry',9,'p_params_array_entry','sqf_yacc.py',346),
  ('params_array_entry -> LSPAREN string COMMA primaryexp COMMA array COMMA array RSPAREN','params_array_entry',9,'p_params_array_entry','sqf_yacc.py',347),
  ('vardefinition -> definition','vardefinition',1,'p_vardefinition','sqf_yacc.py',367),
  ('vardefinition -> arraydefinition','vardefinition',1,'p_vardefinition','sqf_yacc.py',368),
  ('assignment -> assignment_code code RBRACE','assignment',3,'p_assignment','sqf_yacc.py',374),
  ('assignment -> definition EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',375),
  ('assignment -> variable EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',376),
  ('assignment_code -> definition EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',393),
  ('assignment_code -> variable EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',394),
  ('arraydefinition -> PRIVATE stringarray','arraydefinition',2,'p_arraydefinition','sqf_yacc.py',403),
  ('definition -> PRIVATE PRIVATE_ID','definition',2,'p_definition','sqf_yacc.py',422),
  ('definition -> PRIVATE string','definition',2,'p_definition','sqf_yacc.py',423),
  ('identifier -> PRIVATE_ID','identifier',1,'p_identifier','sqf_yacc.py',442),
  ('identifier -> GLOBAL_ID','identifier',1,'p_identifier','sqf_yacc.py',443),
  ('variable -> PRIVATE_ID','variable',1,'p_variable','sqf_yacc.py',465),
  ('variable -> GLOBAL_ID','variable',1,'p_variable','sqf_yacc.py',466),
  ('binaryexp -> primaryexp BINARY_FNC primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',473),
  ('binaryexp -> primaryexp comparisonoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',474),
  ('binaryexp -> primaryexp mathoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',475),
  ('binaryexp -> getvariable_ns','binaryexp',1,'p_binaryexp','sqf_yacc.py',476),
  ('binaryexp -> getvariable_any','binaryexp',1,'p_binaryexp','sqf_yacc.py',477),
  ('binaryexp -> setvariable_ns','binaryexp',1,'p_binaryexp','sqf_yacc.py',478),
  ('binaryexp -> setvariable_any','binaryexp',1,'p_binaryexp','sqf_yacc.py',479),
  ('binaryexp -> param_binary','binaryexp',1,'p_binaryexp','sqf_yacc.py',480),
  ('binaryexp -> params_binary','binaryexp',1,'p_binaryexp','sqf_yacc.py',481),
  ('primaryexp -> number','primaryexp',1,'p_primaryexp','sqf_yacc.py',487),
  ('primaryexp -> identifier','primaryexp',1,'p_primaryexp','sqf_yacc.py',488),
  ('primaryexp -> helpertype','primaryexp',1,'p_primaryexp','sqf_yacc.py',489),
  ('primaryexp -> array','primaryexp',1,'p_primaryexp','sqf_yacc.py',490),
  ('primaryexp -> unaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',491),
  ('primaryexp -> nularexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',492),
  ('primaryexp -> string','primaryexp',1,'p_primaryexp','sqf_yacc.py',493),
  ('primaryexp -> binaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',494),
  ('primaryexp -> bracedexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',495),
  ('primaryexp -> LPAREN binaryexp RPAREN','primaryexp',3,'p_primaryexp','sqf_yacc.py',496),
  ('bracedexp -> LBRACE new_scope code RBRACE','bracedexp',4,'p_bracedexp','sqf_yacc.py',506),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','sqf_yacc.py',513),
  ('array -> LSPAREN RSPAREN','array',2,'p_array','sqf_yacc.py',519),
  ('array -> LSPAREN arrayelement RSPAREN','array',3,'p_array','sqf_yacc.py',520),
  ('arrayelement -> primaryexp','arrayelement',1,'p_arrayelement','sqf_yacc.py',530),
  ('arrayelement -> primaryexp COMMA arrayelement','arrayelement',3,'p_arrayelement','sqf_yacc.py',531),
  ('stringarray -> LSPAREN RSPAREN','stringarray',2,'p_stringarray','sqf_yacc.py',544),
  ('stringarray -> LSPAREN stringarrayelement RSPAREN','stringarray',3,'p_stringarray','sqf_yacc.py',545),
  ('stringarrayelement -> string','stringarrayelement',1,'p_stringarrayelement','sqf_yacc.py',555),
  ('stringarrayelement -> string COMMA stringarrayelement','stringarrayelement',3,'p_stringarrayelement','sqf_yacc.py',556),
  ('nularexp -> NULAR_FNC','nularexp',1,'p_nularexp','sqf_yacc.py',569),
  ('nularexp -> identifier','nularexp',1,'p_nularexp','sqf_yacc.py',570),
  ('unaryexp -> UNARY_FNC primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',577),
  ('unaryexp -> PLUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',578),
  ('unaryexp -> MINUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',579),
  ('unaryexp -> NOT primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',580),
  ('unaryexp -> vardefinition','unaryexp',1,'p_unaryexp','sqf_yacc.py',581),
  ('unaryexp -> param_unary','unaryexp',1,'p_unaryexp','sqf_yacc.py',582),
  ('unaryexp -> params_unary','unaryexp',1,'p_unaryexp','sqf_yacc.py',583),
  ('comparisonoperator -> LT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',589),
  ('comparisonoperator -> GT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',590),
  ('comparisonoperator -> LTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',591),
  ('comparisonoperator -> GTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',592),
  ('comparisonoperator -> EQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',593),
  ('comparisonoperator -> INEQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',594),
  ('comparisonoperator -> AND','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',595),
  ('comparisonoperator -> OR','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',596),
  ('mathoperator -> PLUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',603),
  ('mathoperator -> MINUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',604),
  ('mathoperator -> TIMES','mathoperator',1,'p_mathoperator','sqf_yacc.py',605),
  ('mathoperator -> DIVIDE','mathoperator',1,'p_mathoperator','sqf_yacc.py',606),
  ('mathoperator -> MOD','mathoperator',1,'p_mathoperator','sqf_yacc.py',607),
  ('mathoperator -> POW','mathoperator',1,'p_mathoperator','sqf_yacc.py',608),
  ('booleanexp -> primaryexp','booleanexp',1,'p_booleanexp','sqf_yacc.py',615),
  ('booleanexp -> primaryexp comparisonoperator booleanexp','booleanexp',3,'p_booleanexp','sqf_yacc.py',616),
  ('booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE','booleanexp',5,'p_booleanexp','sqf_yacc.py',617),
  ('configaccessor -> GT GT','configaccessor',2,'p_configaccessor','sqf_yacc.py',623),
  ('configaccessor -> DIVIDE','configaccessor',1,'p_configaccessor','sqf_yacc.py',624),
  ('number -> NUMBER_REAL','number',1,'p_number','sqf_yacc.py',631),
  ('number -> NUMBER_EXP','number',1,'p_number','sqf_yacc.py',632),
  ('number -> NUMBER_HEX','number',1,'p_number','sqf_yacc.py',633),
  ('string -> STRING_SINGLE','string',1,'p_string','sqf_yacc.py',640),
  ('string -> STRING_DOUBLE','string',1,'p_string','sqf_yacc.py',641),
  ('empty -> <empty>','empty',0,'p_empty','sqf_yacc.py',648),
]
