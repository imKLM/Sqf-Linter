
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARISON_OPCONFIG_ACCESSOR_GTGTleftBINARY_OPCOLONleftELSEleftPLUSMINUSleftTIMESDIVIDEMODCONFIG_ACCESSOR_SLASHleftPOWleftUNARY_OPleftNULAR_OPVARIABLEVALUEBRACED_EXPAND BINARY_FNC BOOL CASE COLON COMMA COMMENT_MULTI COMMENT_SINGLE DEFAULT DIVIDE DO ELSE EQUAL EQUALITY EXITWITH FOR FOREACH FROM GETVARIABLE GLOBAL_ID GT GTE IF INEQUALITY LBRACE LPAREN LSPAREN LT LTE MINUS MOD NAMESPACE NEWLINE NOT NULAR_FNC NUMBER_EXP NUMBER_HEX NUMBER_REAL OR PLUS POW PRIVATE PRIVATE_ID RBRACE RPAREN RSPAREN SEMI_COLON SETVARIABLE STEP STRING_DOUBLE STRING_SINGLE SWITCH THEN TIMES TO UNARY_FNC WHILE WITH\n    code    : empty\n            | statement\n            | statement terminator code\n    \n    statement   : controlstructure\n                | assignment\n                | binaryexp\n                | nularexp\n                | unaryexp\n    \n    terminator  : SEMI_COLON\n                | COMMA\n    \n    controlstructure    : ifstatement\n                        | whileloop\n                        | forloop\n                        | withstatement\n                        | foreachloop\n                        | switchstatement\n    \n    helpertype  : iftype\n                | whiletype\n                | fortype\n                | withtype\n    \n    case    : CASE primaryexp COLON bracedexp\n            | CASE primaryexp\n            | DEFAULT bracedexp\n    \n    switchstatement : SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE\n    \n    switchbody  : empty\n                | case\n                | case terminator switchbody\n    \n    iftype : IF forloop_condition\n    \n    ifstatement : iftype THEN bracedexp\n                | iftype EXITWITH bracedexp\n                | iftype THEN bracedexp ELSE bracedexp\n    \n    withtype : WITH NAMESPACE\n    \n    withstatementinit : withtype DO\n    \n    withstatement : withstatementinit bracedexp\n    \n    whiletype   : WHILE forloop_condition\n    \n    whileloop : whiletype DO bracedexp\n    \n    foreachloop : bracedexp FOREACH array\n                | bracedexp FOREACH primaryexp\n    \n    fortype : FOR new_scope string FROM primaryexp TO primaryexp\n            | FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp\n            | FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN\n    \n    forloop : fortype DO bracedexp_noscope\n    \n    forloop_condition   : LBRACE booleanexp RBRACE\n                        | identifier\n    \n     bracedexp_noscope : LBRACE code RBRACE\n    \n    getvariable_ns  : NAMESPACE GETVARIABLE string\n                    | NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN\n    \n    getvariable_any : primaryexp GETVARIABLE string\n                    | primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN\n    \n    vardefinition   : definition\n                    | arraydefinition\n    \n    assignment  : assignment_code code RBRACE\n                | definition EQUAL primaryexp\n                | variable EQUAL primaryexp\n    \n    assignment_code : definition EQUAL LBRACE\n                    | variable EQUAL LBRACE\n    \n    arraydefinition : PRIVATE stringarray\n    \n    definition  : PRIVATE PRIVATE_ID\n                | PRIVATE string\n    \n    identifier  : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID  %prec VARIABLE\n    \n    variable    : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID %prec VARIABLE\n    \n    binaryexp   : primaryexp BINARY_FNC primaryexp          %prec BINARY_OP\n                | primaryexp comparisonoperator primaryexp  %prec BINARY_OP\n                | primaryexp mathoperator primaryexp        %prec BINARY_OP\n                | getvariable_ns                            %prec BINARY_OP\n                | getvariable_any                           %prec BINARY_OP\n    \n    primaryexp  : number                    %prec VALUE\n                | identifier                %prec VALUE\n                | helpertype                %prec VALUE\n                | array                     %prec VALUE\n                | unaryexp                  %prec UNARY_OP\n                | nularexp                  %prec NULAR_OP\n                | string                    %prec VALUE\n                | binaryexp                 %prec BINARY_OP\n                | bracedexp                 %prec BRACED_EXP\n                | LPAREN binaryexp RPAREN   %prec BRACED_EXP\n    \n    bracedexp : LBRACE new_scope code RBRACE\n    new_scope :\n    array   : LSPAREN RSPAREN\n            | LSPAREN arrayelement RSPAREN\n    \n    arrayelement    : primaryexp\n                    | primaryexp COMMA arrayelement\n    \n    stringarray : LSPAREN RSPAREN\n                | LSPAREN stringarrayelement RSPAREN\n    \n    stringarrayelement  : string\n                        | string COMMA stringarrayelement\n    \n    nularexp    : NULAR_FNC     %prec NULAR_OP\n                | identifier    %prec NULAR_OP\n    \n    unaryexp    : UNARY_FNC primaryexp  %prec UNARY_OP\n                | PLUS primaryexp       %prec UNARY_OP\n                | MINUS primaryexp      %prec UNARY_OP\n                | NOT primaryexp        %prec UNARY_OP\n                | vardefinition         %prec UNARY_OP\n    \n    comparisonoperator  : LT            %prec COMPARISON_OP\n                        | GT            %prec COMPARISON_OP\n                        | LTE           %prec COMPARISON_OP\n                        | GTE           %prec COMPARISON_OP\n                        | EQUALITY      %prec COMPARISON_OP\n                        | INEQUALITY    %prec COMPARISON_OP\n                        | AND           %prec COMPARISON_OP\n                        | OR            %prec COMPARISON_OP\n    \n    mathoperator : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MOD\n                    | POW\n    \n    booleanexp  : primaryexp\n                | primaryexp comparisonoperator booleanexp\n                | primaryexp comparisonoperator LBRACE booleanexp RBRACE\n    \n    configaccessor  : GT GT     %prec CONFIG_ACCESSOR_GTGT\n                    | DIVIDE    %prec CONFIG_ACCESSOR_SLASH\n    \n    number  : NUMBER_REAL\n            | NUMBER_EXP\n            | NUMBER_HEX\n    \n    string  : STRING_SINGLE\n            | STRING_DOUBLE\n    \n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,21,22,27,33,38,39,40,41,42,45,50,51,52,53,54,56,57,58,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,105,106,107,110,113,115,116,119,120,121,122,124,125,126,127,129,131,132,133,134,135,136,139,141,144,146,156,157,161,166,167,182,188,190,192,200,201,],[-120,0,-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-50,-67,-68,-89,-90,-95,-72,-60,-75,-61,-69,-71,-51,-115,-116,-117,-118,-119,-120,-9,-10,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-34,-58,-59,-57,-81,-28,-44,-35,-32,-3,-52,-53,-64,-65,-66,-48,-54,-29,-30,-37,-38,-36,-42,-78,-85,-46,-82,-79,-86,-43,-31,-45,-49,-47,-39,-24,-40,-41,]),'NULAR_FNC':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[21,21,21,21,21,21,21,-80,21,21,-9,-10,21,21,21,21,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,21,21,21,21,21,-55,-56,21,21,21,21,21,21,21,21,21,21,]),'UNARY_FNC':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[23,23,23,23,23,23,23,-80,23,23,-9,-10,23,23,23,23,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,23,23,23,23,23,-55,-56,23,23,23,23,23,23,23,23,23,23,]),'PLUS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,33,35,36,38,39,40,41,42,44,45,49,50,51,52,53,54,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,102,103,104,105,106,107,110,112,113,114,115,116,119,122,123,124,125,126,127,129,130,133,134,137,138,139,141,144,146,147,149,156,157,161,162,163,165,170,171,173,174,176,178,180,182,186,188,190,194,196,200,201,],[24,-76,-74,-73,24,-50,73,-67,-68,-89,-70,24,24,24,24,-95,-17,-77,-18,-19,-72,24,-80,-60,-75,-61,-69,-71,24,-51,-20,-115,-116,-117,-118,-119,24,-9,-10,24,24,24,24,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,24,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,24,24,-76,24,-58,-59,-57,-81,73,-28,24,-44,-35,-32,73,-55,73,73,73,-48,73,-56,-72,73,24,73,-78,-85,-46,-82,24,73,-79,-86,-43,24,24,24,24,73,24,73,73,73,24,-49,24,-47,73,73,24,73,-41,]),'MINUS':([0,6,7,8,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,33,35,36,38,39,40,41,42,44,45,49,50,51,52,53,54,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,102,103,104,105,106,107,110,112,113,114,115,116,119,122,123,124,125,126,127,129,130,133,134,137,138,139,141,144,146,147,149,156,157,161,162,163,165,170,171,173,174,176,178,180,182,186,188,190,194,196,200,201,],[25,-76,-74,-73,25,-50,74,-67,-68,-89,-70,25,25,25,25,-95,-17,-77,-18,-19,-72,25,-80,-60,-75,-61,-69,-71,25,-51,-20,-115,-116,-117,-118,-119,25,-9,-10,25,25,25,25,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,25,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,25,25,-76,25,-58,-59,-57,-81,74,-28,25,-44,-35,-32,74,-55,74,74,74,-48,74,-56,-72,74,25,74,-78,-85,-46,-82,25,74,-79,-86,-43,25,25,25,25,74,25,74,74,74,25,-49,25,-47,74,74,25,74,-41,]),'NOT':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[26,26,26,26,26,26,26,-80,26,26,-9,-10,26,26,26,26,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,26,26,26,26,26,-55,-56,26,26,26,26,26,26,26,26,26,26,]),'SWITCH':([0,15,36,56,57,58,104,123,130,137,173,],[34,34,-80,34,-9,-10,34,-55,-56,34,-80,]),'PRIVATE':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[37,37,37,37,37,37,37,-80,37,37,-9,-10,37,37,37,37,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,37,37,37,37,37,-55,-56,37,37,37,37,37,37,37,37,37,37,]),'PRIVATE_ID':([0,15,23,24,25,26,35,36,37,44,46,47,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,175,180,186,196,],[38,38,86,86,86,86,86,-80,105,86,86,86,38,-9,-10,86,86,86,86,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,86,86,86,38,86,-55,-56,38,86,86,86,86,86,86,86,86,86,86,]),'GLOBAL_ID':([0,15,23,24,25,26,35,36,44,46,47,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,175,180,186,196,],[40,40,87,87,87,87,87,-80,87,87,87,40,-9,-10,87,87,87,87,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,87,87,87,40,87,-55,-56,40,87,87,87,87,87,87,87,87,87,87,]),'LPAREN':([0,15,23,24,25,26,34,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[35,35,35,35,35,35,102,35,-80,35,35,-9,-10,35,35,35,35,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,35,35,35,35,35,-55,-56,35,35,35,35,35,35,35,35,35,35,]),'NAMESPACE':([0,15,23,24,25,26,35,36,44,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[43,43,43,43,43,43,43,-80,43,119,43,-9,-10,43,43,43,43,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,43,43,43,43,43,-55,-56,43,43,43,43,43,43,43,43,43,43,]),'IF':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[46,46,46,46,46,46,46,-80,46,46,-9,-10,46,46,46,46,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,46,46,46,46,46,-55,-56,46,46,46,46,46,46,46,46,46,46,]),'WHILE':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[47,47,47,47,47,47,47,-80,47,47,-9,-10,47,47,47,47,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,47,47,47,47,47,-55,-56,47,47,47,47,47,47,47,47,47,47,]),'FOR':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[48,48,48,48,48,48,48,-80,48,48,-9,-10,48,48,48,48,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,48,48,48,48,48,-55,-56,48,48,48,48,48,48,48,48,48,48,]),'LBRACE':([0,15,23,24,25,26,32,35,36,44,46,47,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,96,97,98,99,100,102,104,114,118,123,130,137,147,151,153,162,163,165,168,170,173,175,180,186,187,191,196,199,],[36,36,36,36,36,36,36,36,-80,36,114,114,36,-9,-10,123,36,36,36,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,130,36,36,36,36,137,36,36,36,-33,-55,-56,36,36,137,36,173,36,36,177,36,36,114,36,36,36,137,36,36,]),'NUMBER_REAL':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[50,50,50,50,50,50,50,-80,50,50,-9,-10,50,50,50,50,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,50,50,50,50,50,-55,-56,50,50,50,50,50,50,50,50,50,50,]),'NUMBER_EXP':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[51,51,51,51,51,51,51,-80,51,51,-9,-10,51,51,51,51,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,51,51,51,51,51,-55,-56,51,51,51,51,51,51,51,51,51,51,]),'NUMBER_HEX':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[52,52,52,52,52,52,52,-80,52,52,-9,-10,52,52,52,52,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,52,52,52,52,52,-55,-56,52,52,52,52,52,52,52,52,52,52,]),'LSPAREN':([0,15,23,24,25,26,35,36,37,44,48,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,109,114,117,123,130,137,147,162,163,165,170,173,180,186,196,],[44,44,44,44,44,44,44,-80,108,44,-80,44,-9,-10,44,44,44,44,128,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,44,44,44,44,145,44,151,-55,-56,44,44,44,44,44,44,44,44,44,44,]),'STRING_SINGLE':([0,15,23,24,25,26,35,36,37,44,48,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,108,109,114,117,123,128,130,137,145,147,158,162,163,165,170,173,180,186,196,],[53,53,53,53,53,53,53,-80,53,53,-80,53,-9,-10,53,53,53,53,53,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,53,53,53,53,53,53,53,53,-55,53,-56,53,53,53,53,53,53,53,53,53,53,53,53,]),'STRING_DOUBLE':([0,15,23,24,25,26,35,36,37,44,48,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,108,109,114,117,123,128,130,137,145,147,158,162,163,165,170,173,180,186,196,],[54,54,54,54,54,54,54,-80,54,54,-80,54,-9,-10,54,54,54,54,54,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,54,54,54,54,54,54,54,54,-55,54,-56,54,54,54,54,54,54,54,54,54,54,54,54,]),'WITH':([0,15,23,24,25,26,35,36,44,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,98,102,104,114,123,130,137,147,162,163,165,170,173,180,186,196,],[55,55,55,55,55,55,55,-80,55,55,-9,-10,55,55,55,55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,55,55,55,55,55,-55,-56,55,55,55,55,55,55,55,55,55,55,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,27,33,36,38,39,40,41,42,45,50,51,52,53,54,56,57,58,59,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,104,105,106,107,110,113,115,116,119,120,121,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,139,140,141,144,146,148,149,154,156,157,161,166,167,171,172,173,177,179,182,183,184,185,188,189,190,192,193,194,195,198,200,201,202,],[-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-120,-50,-67,-68,-89,-90,-95,-72,-80,-60,-75,-61,-69,-71,-51,-115,-116,-117,-118,-119,-120,-9,-10,121,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-34,-120,-58,-59,-57,-81,-28,-44,-35,-32,-3,-52,-53,-55,-64,-65,-66,-48,-54,-56,-29,-30,-37,-38,-36,-42,-120,-78,156,-85,-46,-82,161,-110,167,-79,-86,-43,-31,-45,-65,-111,-80,-120,189,-49,192,-25,-26,-47,-112,-39,-24,-120,-22,-23,-27,-40,-41,-21,]),'SEMI_COLON':([3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,21,22,27,33,38,39,40,41,42,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,105,106,107,110,113,115,116,119,121,122,124,125,126,127,129,131,132,133,134,135,136,139,141,144,146,156,157,161,166,167,182,185,188,190,192,194,195,200,201,202,],[57,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-50,-67,-68,-89,-90,-95,-72,-60,-75,-61,-69,-71,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-34,-58,-59,-57,-81,-28,-44,-35,-32,-52,-53,-64,-65,-66,-48,-54,-29,-30,-37,-38,-36,-42,-78,-85,-46,-82,-79,-86,-43,-31,-45,-49,57,-47,-39,-24,-22,-23,-40,-41,-21,]),'COMMA':([3,4,5,6,7,8,9,10,11,12,13,14,16,19,20,21,22,27,33,38,39,40,41,42,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,105,106,107,110,112,113,115,116,119,121,122,124,125,126,127,129,131,132,133,134,135,136,139,141,143,144,146,152,156,157,159,161,164,166,167,181,182,185,188,190,192,194,195,200,201,202,],[58,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,-50,-67,-68,-89,-90,-95,-72,-60,-75,-61,-69,-71,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-34,-58,-59,-57,-81,147,-28,-44,-35,-32,-52,-53,-64,-65,-66,-48,-54,-29,-30,-37,-38,-36,-42,-78,-85,158,-46,-82,165,-79,-86,170,-43,175,-31,-45,191,-49,58,-47,-39,-24,-22,-23,-40,-41,-21,]),'BINARY_FNC':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,61,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,61,-28,-44,-35,-32,61,-64,-65,-66,-48,61,-72,61,61,-78,-85,-46,-82,61,-79,-86,-43,-65,61,61,61,-49,-47,61,61,61,-41,]),'GETVARIABLE':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,43,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,64,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,109,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,64,-28,-44,-35,-32,64,-64,-65,-66,-48,64,-72,64,64,-78,-85,-46,-82,64,-79,-86,-43,-65,64,64,64,-49,-47,64,64,64,-41,]),'LT':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,65,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,65,-28,-44,-35,-32,65,-64,-65,-66,-48,65,-72,65,65,-78,-85,-46,-82,65,-79,-86,-43,-65,65,65,65,-49,-47,65,65,65,-41,]),'GT':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,66,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,66,-28,-44,-35,-32,66,-64,-65,-66,-48,66,-72,66,66,-78,-85,-46,-82,66,-79,-86,-43,-65,66,66,66,-49,-47,66,66,66,-41,]),'LTE':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,67,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,67,-28,-44,-35,-32,67,-64,-65,-66,-48,67,-72,67,67,-78,-85,-46,-82,67,-79,-86,-43,-65,67,67,67,-49,-47,67,67,67,-41,]),'GTE':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,68,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,68,-28,-44,-35,-32,68,-64,-65,-66,-48,68,-72,68,68,-78,-85,-46,-82,68,-79,-86,-43,-65,68,68,68,-49,-47,68,68,68,-41,]),'EQUALITY':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,69,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,69,-28,-44,-35,-32,69,-64,-65,-66,-48,69,-72,69,69,-78,-85,-46,-82,69,-79,-86,-43,-65,69,69,69,-49,-47,69,69,69,-41,]),'INEQUALITY':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,70,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,70,-28,-44,-35,-32,70,-64,-65,-66,-48,70,-72,70,70,-78,-85,-46,-82,70,-79,-86,-43,-65,70,70,70,-49,-47,70,70,70,-41,]),'AND':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,71,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,71,-28,-44,-35,-32,71,-64,-65,-66,-48,71,-72,71,71,-78,-85,-46,-82,71,-79,-86,-43,-65,71,71,71,-49,-47,71,71,71,-41,]),'OR':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,72,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,72,-28,-44,-35,-32,72,-64,-65,-66,-48,72,-72,72,72,-78,-85,-46,-82,72,-79,-86,-43,-65,72,72,72,-49,-47,72,72,72,-41,]),'TIMES':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,75,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,75,-28,-44,-35,-32,75,75,75,75,-48,75,-72,75,75,-78,-85,-46,-82,75,-79,-86,-43,75,75,75,75,-49,-47,75,75,75,-41,]),'DIVIDE':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,76,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,76,-28,-44,-35,-32,76,76,76,76,-48,76,-72,76,76,-78,-85,-46,-82,76,-79,-86,-43,76,76,76,76,-49,-47,76,76,76,-41,]),'MOD':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,77,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,77,-28,-44,-35,-32,77,77,77,77,-48,77,-72,77,77,-78,-85,-46,-82,77,-79,-86,-43,77,77,77,77,-49,-47,77,77,77,-41,]),'POW':([6,7,8,16,17,19,20,21,22,27,28,29,30,31,33,38,39,40,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,112,113,115,116,119,122,124,125,126,127,129,133,134,138,139,141,144,146,149,156,157,161,171,174,176,178,182,188,190,194,200,201,],[-76,-74,-73,-50,78,-67,-68,-89,-70,-95,-17,-77,-18,-19,-72,-60,-75,-61,-69,-71,-51,-20,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-76,-58,-59,-57,-81,78,-28,-44,-35,-32,78,78,78,78,-48,78,-72,78,78,-78,-85,-46,-82,78,-79,-86,-43,78,78,78,78,-49,-47,78,78,78,-41,]),'EQUAL':([16,18,38,40,53,54,105,106,],[60,79,-62,-63,-118,-119,-58,-59,]),'RSPAREN':([19,20,21,27,33,39,41,42,44,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,108,110,111,112,113,115,116,119,124,125,126,127,139,141,142,143,144,146,156,157,160,161,167,169,176,178,182,188,190,197,200,201,],[-67,-68,-89,-95,-72,-75,-69,-71,110,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-58,-59,-57,141,-81,146,-83,-28,-44,-35,-32,-64,-65,-66,-48,-78,-85,157,-87,-46,-82,-79,-86,-84,-43,-45,-88,182,188,-49,-47,-39,201,-40,-41,]),'RPAREN':([19,20,21,27,33,39,41,42,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,103,105,106,107,110,113,115,116,119,124,125,126,127,138,139,141,144,146,156,157,161,182,188,190,200,201,],[-67,-68,-89,-95,-72,-75,-69,-71,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,139,-58,-59,-57,-81,-28,-44,-35,-32,-64,-65,-66,-48,155,-78,-85,-46,-82,-79,-86,-43,-49,-47,-39,-40,-41,]),'TO':([19,20,21,27,33,39,41,42,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,110,113,115,116,119,124,125,126,127,139,141,144,146,156,157,161,174,182,188,190,200,201,],[-67,-68,-89,-95,-72,-75,-69,-71,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-58,-59,-57,-81,-28,-44,-35,-32,-64,-65,-66,-48,-78,-85,-46,-82,-79,-86,-43,180,-49,-47,-39,-40,-41,]),'STEP':([19,20,21,27,33,39,41,42,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,110,113,115,116,119,124,125,126,127,139,141,144,146,156,157,161,182,188,190,200,201,],[-67,-68,-89,-95,-72,-75,-69,-71,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-58,-59,-57,-81,-28,-44,-35,-32,-64,-65,-66,-48,-78,-85,-46,-82,-79,-86,-43,-49,-47,196,-40,-41,]),'DO':([19,20,21,27,30,31,33,39,41,42,45,49,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,110,113,115,116,119,124,125,126,127,139,141,144,146,155,156,157,161,182,188,190,200,201,],[-67,-68,-89,-95,99,100,-72,-75,-69,-71,-51,118,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-58,-59,-57,-81,-28,-44,-35,-32,-64,-65,-66,-48,-78,-85,-46,-82,168,-79,-86,-43,-49,-47,-39,-40,-41,]),'COLON':([19,20,21,27,33,39,41,42,45,50,51,52,53,54,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,105,106,107,110,113,115,116,119,124,125,126,127,139,141,144,146,156,157,161,182,188,190,194,200,201,],[-67,-68,-89,-95,-72,-75,-69,-71,-51,-115,-116,-117,-118,-119,-91,-70,-73,-74,-76,-77,-60,-61,-17,-18,-19,-20,-50,-92,-93,-94,-58,-59,-57,-81,-28,-44,-35,-32,-64,-65,-66,-48,-78,-85,-46,-82,-79,-86,-43,-49,-47,-39,199,-40,-41,]),'THEN':([28,86,87,113,115,161,],[96,-60,-61,-28,-44,-43,]),'EXITWITH':([28,86,87,113,115,161,],[97,-60,-61,-28,-44,-43,]),'FOREACH':([29,156,],[98,-79,]),'FROM':([53,54,150,],[-118,-119,163,]),'CASE':([57,58,177,193,],[-9,-10,186,186,]),'DEFAULT':([57,58,177,193,],[-9,-10,187,187,]),'ELSE':([131,156,],[153,-79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,15,56,104,137,],[1,59,120,140,154,]),'empty':([0,15,56,104,137,177,193,],[2,2,2,2,2,184,184,]),'statement':([0,15,56,104,137,],[3,3,3,3,3,]),'controlstructure':([0,15,56,104,137,],[4,4,4,4,4,]),'assignment':([0,15,56,104,137,],[5,5,5,5,5,]),'binaryexp':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[6,6,84,84,84,84,103,84,6,84,84,84,84,84,84,84,6,84,6,84,84,84,84,84,84,84,84,84,]),'nularexp':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[7,7,83,83,83,83,83,83,7,83,83,83,83,83,83,83,7,83,7,83,83,83,83,83,83,83,83,83,]),'unaryexp':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[8,8,82,82,82,82,82,82,8,82,82,82,82,82,82,82,8,82,8,82,82,82,82,82,82,82,82,82,]),'ifstatement':([0,15,56,104,137,],[9,9,9,9,9,]),'whileloop':([0,15,56,104,137,],[10,10,10,10,10,]),'forloop':([0,15,56,104,137,],[11,11,11,11,11,]),'withstatement':([0,15,56,104,137,],[12,12,12,12,12,]),'foreachloop':([0,15,56,104,137,],[13,13,13,13,13,]),'switchstatement':([0,15,56,104,137,],[14,14,14,14,14,]),'assignment_code':([0,15,56,104,137,],[15,15,15,15,15,]),'definition':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[16,16,92,92,92,92,92,92,16,92,92,92,92,92,92,92,16,92,16,92,92,92,92,92,92,92,92,92,]),'primaryexp':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[17,17,80,93,94,95,17,112,17,122,124,125,126,129,134,138,17,149,17,112,171,174,176,178,149,190,194,200,]),'variable':([0,15,56,104,137,],[18,18,18,18,18,]),'getvariable_ns':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'getvariable_any':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'identifier':([0,15,23,24,25,26,35,44,46,47,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,175,180,186,196,],[22,22,81,81,81,81,81,81,115,115,22,81,81,81,81,81,81,81,22,81,22,81,81,81,81,81,81,115,81,81,81,]),'vardefinition':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'iftype':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[28,28,88,88,88,88,88,88,28,88,88,88,88,88,88,88,28,88,28,88,88,88,88,88,88,88,88,88,]),'bracedexp':([0,15,23,24,25,26,32,35,44,56,60,61,62,63,79,96,97,98,99,102,104,114,137,147,153,162,163,165,170,173,180,186,187,196,199,],[29,29,85,85,85,85,101,85,85,29,85,85,85,85,85,131,132,85,135,85,29,85,29,85,166,85,85,85,85,85,85,85,195,85,202,]),'whiletype':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[30,30,89,89,89,89,89,89,30,89,89,89,89,89,89,89,30,89,30,89,89,89,89,89,89,89,89,89,]),'fortype':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[31,31,90,90,90,90,90,90,31,90,90,90,90,90,90,90,31,90,31,90,90,90,90,90,90,90,90,90,]),'withstatementinit':([0,15,56,104,137,],[32,32,32,32,32,]),'array':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,133,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'string':([0,15,23,24,25,26,35,37,44,56,60,61,62,63,64,79,98,102,104,108,109,114,117,128,137,145,147,158,162,163,165,170,173,180,186,196,],[39,39,39,39,39,39,39,106,39,39,39,39,39,39,127,39,39,39,39,143,144,39,150,152,39,159,39,143,39,39,39,39,39,39,39,39,]),'number':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'helpertype':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'arraydefinition':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'withtype':([0,15,23,24,25,26,35,44,56,60,61,62,63,79,98,102,104,114,137,147,162,163,165,170,173,180,186,196,],[49,49,91,91,91,91,91,91,49,91,91,91,91,91,91,91,49,91,49,91,91,91,91,91,91,91,91,91,]),'terminator':([3,185,],[56,193,]),'comparisonoperator':([17,80,93,94,95,112,122,124,125,126,129,134,138,149,171,174,176,178,190,194,200,],[62,62,62,62,62,62,62,62,62,62,62,62,62,162,162,62,62,62,62,62,62,]),'mathoperator':([17,80,93,94,95,112,122,124,125,126,129,134,138,149,171,174,176,178,190,194,200,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'new_scope':([36,48,123,130,173,],[104,117,104,104,104,]),'stringarray':([37,],[107,]),'arrayelement':([44,147,],[111,160,]),'forloop_condition':([46,47,175,],[113,116,181,]),'bracedexp_noscope':([100,151,191,],[136,164,197,]),'stringarrayelement':([108,158,],[142,169,]),'booleanexp':([114,162,173,],[148,172,179,]),'switchbody':([177,193,],[183,198,]),'case':([177,193,],[185,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> empty','code',1,'p_code','sqf_yacc.py',36),
  ('code -> statement','code',1,'p_code','sqf_yacc.py',37),
  ('code -> statement terminator code','code',3,'p_code','sqf_yacc.py',38),
  ('statement -> controlstructure','statement',1,'p_statement','sqf_yacc.py',45),
  ('statement -> assignment','statement',1,'p_statement','sqf_yacc.py',46),
  ('statement -> binaryexp','statement',1,'p_statement','sqf_yacc.py',47),
  ('statement -> nularexp','statement',1,'p_statement','sqf_yacc.py',48),
  ('statement -> unaryexp','statement',1,'p_statement','sqf_yacc.py',49),
  ('terminator -> SEMI_COLON','terminator',1,'p_terminator','sqf_yacc.py',56),
  ('terminator -> COMMA','terminator',1,'p_terminator','sqf_yacc.py',57),
  ('controlstructure -> ifstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',71),
  ('controlstructure -> whileloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',72),
  ('controlstructure -> forloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',73),
  ('controlstructure -> withstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',74),
  ('controlstructure -> foreachloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',75),
  ('controlstructure -> switchstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',76),
  ('helpertype -> iftype','helpertype',1,'p_helpertype','sqf_yacc.py',83),
  ('helpertype -> whiletype','helpertype',1,'p_helpertype','sqf_yacc.py',84),
  ('helpertype -> fortype','helpertype',1,'p_helpertype','sqf_yacc.py',85),
  ('helpertype -> withtype','helpertype',1,'p_helpertype','sqf_yacc.py',86),
  ('case -> CASE primaryexp COLON bracedexp','case',4,'p_case','sqf_yacc.py',93),
  ('case -> CASE primaryexp','case',2,'p_case','sqf_yacc.py',94),
  ('case -> DEFAULT bracedexp','case',2,'p_case','sqf_yacc.py',95),
  ('switchstatement -> SWITCH LPAREN primaryexp RPAREN DO LBRACE switchbody RBRACE','switchstatement',8,'p_switchstatement','sqf_yacc.py',101),
  ('switchbody -> empty','switchbody',1,'p_switchbody','sqf_yacc.py',107),
  ('switchbody -> case','switchbody',1,'p_switchbody','sqf_yacc.py',108),
  ('switchbody -> case terminator switchbody','switchbody',3,'p_switchbody','sqf_yacc.py',109),
  ('iftype -> IF forloop_condition','iftype',2,'p_iftype','sqf_yacc.py',115),
  ('ifstatement -> iftype THEN bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',122),
  ('ifstatement -> iftype EXITWITH bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',123),
  ('ifstatement -> iftype THEN bracedexp ELSE bracedexp','ifstatement',5,'p_ifstatement','sqf_yacc.py',124),
  ('withtype -> WITH NAMESPACE','withtype',2,'p_withtype','sqf_yacc.py',131),
  ('withstatementinit -> withtype DO','withstatementinit',2,'p_withstatementinit','sqf_yacc.py',138),
  ('withstatement -> withstatementinit bracedexp','withstatement',2,'p_withstatement','sqf_yacc.py',148),
  ('whiletype -> WHILE forloop_condition','whiletype',2,'p_whiletype','sqf_yacc.py',155),
  ('whileloop -> whiletype DO bracedexp','whileloop',3,'p_whileloop','sqf_yacc.py',161),
  ('foreachloop -> bracedexp FOREACH array','foreachloop',3,'p_foreachloop','sqf_yacc.py',168),
  ('foreachloop -> bracedexp FOREACH primaryexp','foreachloop',3,'p_foreachloop','sqf_yacc.py',169),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp','fortype',7,'p_fortype','sqf_yacc.py',175),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp','fortype',9,'p_fortype','sqf_yacc.py',176),
  ('fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN','fortype',9,'p_fortype','sqf_yacc.py',177),
  ('forloop -> fortype DO bracedexp_noscope','forloop',3,'p_forloop','sqf_yacc.py',199),
  ('forloop_condition -> LBRACE booleanexp RBRACE','forloop_condition',3,'p_bracedexp_condition','sqf_yacc.py',207),
  ('forloop_condition -> identifier','forloop_condition',1,'p_bracedexp_condition','sqf_yacc.py',208),
  ('bracedexp_noscope -> LBRACE code RBRACE','bracedexp_noscope',3,'p_bracedexp_noscope','sqf_yacc.py',218),
  ('getvariable_ns -> NAMESPACE GETVARIABLE string','getvariable_ns',3,'p_getvariable_ns','sqf_yacc.py',225),
  ('getvariable_ns -> NAMESPACE GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN','getvariable_ns',7,'p_getvariable_ns','sqf_yacc.py',226),
  ('getvariable_any -> primaryexp GETVARIABLE string','getvariable_any',3,'p_getvariable_any','sqf_yacc.py',245),
  ('getvariable_any -> primaryexp GETVARIABLE LSPAREN string COMMA primaryexp RSPAREN','getvariable_any',7,'p_getvariable_any','sqf_yacc.py',246),
  ('vardefinition -> definition','vardefinition',1,'p_vardefinition','sqf_yacc.py',254),
  ('vardefinition -> arraydefinition','vardefinition',1,'p_vardefinition','sqf_yacc.py',255),
  ('assignment -> assignment_code code RBRACE','assignment',3,'p_assignment','sqf_yacc.py',261),
  ('assignment -> definition EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',262),
  ('assignment -> variable EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',263),
  ('assignment_code -> definition EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',278),
  ('assignment_code -> variable EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',279),
  ('arraydefinition -> PRIVATE stringarray','arraydefinition',2,'p_arraydefinition','sqf_yacc.py',288),
  ('definition -> PRIVATE PRIVATE_ID','definition',2,'p_definition','sqf_yacc.py',307),
  ('definition -> PRIVATE string','definition',2,'p_definition','sqf_yacc.py',308),
  ('identifier -> PRIVATE_ID','identifier',1,'p_identifier','sqf_yacc.py',327),
  ('identifier -> GLOBAL_ID','identifier',1,'p_identifier','sqf_yacc.py',328),
  ('variable -> PRIVATE_ID','variable',1,'p_variable','sqf_yacc.py',348),
  ('variable -> GLOBAL_ID','variable',1,'p_variable','sqf_yacc.py',349),
  ('binaryexp -> primaryexp BINARY_FNC primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',356),
  ('binaryexp -> primaryexp comparisonoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',357),
  ('binaryexp -> primaryexp mathoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',358),
  ('binaryexp -> getvariable_ns','binaryexp',1,'p_binaryexp','sqf_yacc.py',359),
  ('binaryexp -> getvariable_any','binaryexp',1,'p_binaryexp','sqf_yacc.py',360),
  ('primaryexp -> number','primaryexp',1,'p_primaryexp','sqf_yacc.py',366),
  ('primaryexp -> identifier','primaryexp',1,'p_primaryexp','sqf_yacc.py',367),
  ('primaryexp -> helpertype','primaryexp',1,'p_primaryexp','sqf_yacc.py',368),
  ('primaryexp -> array','primaryexp',1,'p_primaryexp','sqf_yacc.py',369),
  ('primaryexp -> unaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',370),
  ('primaryexp -> nularexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',371),
  ('primaryexp -> string','primaryexp',1,'p_primaryexp','sqf_yacc.py',372),
  ('primaryexp -> binaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',373),
  ('primaryexp -> bracedexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',374),
  ('primaryexp -> LPAREN binaryexp RPAREN','primaryexp',3,'p_primaryexp','sqf_yacc.py',375),
  ('bracedexp -> LBRACE new_scope code RBRACE','bracedexp',4,'p_bracedexp','sqf_yacc.py',385),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','sqf_yacc.py',392),
  ('array -> LSPAREN RSPAREN','array',2,'p_array','sqf_yacc.py',398),
  ('array -> LSPAREN arrayelement RSPAREN','array',3,'p_array','sqf_yacc.py',399),
  ('arrayelement -> primaryexp','arrayelement',1,'p_arrayelement','sqf_yacc.py',409),
  ('arrayelement -> primaryexp COMMA arrayelement','arrayelement',3,'p_arrayelement','sqf_yacc.py',410),
  ('stringarray -> LSPAREN RSPAREN','stringarray',2,'p_stringarray','sqf_yacc.py',423),
  ('stringarray -> LSPAREN stringarrayelement RSPAREN','stringarray',3,'p_stringarray','sqf_yacc.py',424),
  ('stringarrayelement -> string','stringarrayelement',1,'p_stringarrayelement','sqf_yacc.py',434),
  ('stringarrayelement -> string COMMA stringarrayelement','stringarrayelement',3,'p_stringarrayelement','sqf_yacc.py',435),
  ('nularexp -> NULAR_FNC','nularexp',1,'p_nularexp','sqf_yacc.py',449),
  ('nularexp -> identifier','nularexp',1,'p_nularexp','sqf_yacc.py',450),
  ('unaryexp -> UNARY_FNC primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',457),
  ('unaryexp -> PLUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',458),
  ('unaryexp -> MINUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',459),
  ('unaryexp -> NOT primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',460),
  ('unaryexp -> vardefinition','unaryexp',1,'p_unaryexp','sqf_yacc.py',461),
  ('comparisonoperator -> LT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',467),
  ('comparisonoperator -> GT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',468),
  ('comparisonoperator -> LTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',469),
  ('comparisonoperator -> GTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',470),
  ('comparisonoperator -> EQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',471),
  ('comparisonoperator -> INEQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',472),
  ('comparisonoperator -> AND','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',473),
  ('comparisonoperator -> OR','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',474),
  ('mathoperator -> PLUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',481),
  ('mathoperator -> MINUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',482),
  ('mathoperator -> TIMES','mathoperator',1,'p_mathoperator','sqf_yacc.py',483),
  ('mathoperator -> DIVIDE','mathoperator',1,'p_mathoperator','sqf_yacc.py',484),
  ('mathoperator -> MOD','mathoperator',1,'p_mathoperator','sqf_yacc.py',485),
  ('mathoperator -> POW','mathoperator',1,'p_mathoperator','sqf_yacc.py',486),
  ('booleanexp -> primaryexp','booleanexp',1,'p_booleanexp','sqf_yacc.py',493),
  ('booleanexp -> primaryexp comparisonoperator booleanexp','booleanexp',3,'p_booleanexp','sqf_yacc.py',494),
  ('booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE','booleanexp',5,'p_booleanexp','sqf_yacc.py',495),
  ('configaccessor -> GT GT','configaccessor',2,'p_configaccessor','sqf_yacc.py',501),
  ('configaccessor -> DIVIDE','configaccessor',1,'p_configaccessor','sqf_yacc.py',502),
  ('number -> NUMBER_REAL','number',1,'p_number','sqf_yacc.py',509),
  ('number -> NUMBER_EXP','number',1,'p_number','sqf_yacc.py',510),
  ('number -> NUMBER_HEX','number',1,'p_number','sqf_yacc.py',511),
  ('string -> STRING_SINGLE','string',1,'p_string','sqf_yacc.py',518),
  ('string -> STRING_DOUBLE','string',1,'p_string','sqf_yacc.py',519),
  ('empty -> <empty>','empty',0,'p_empty','sqf_yacc.py',526),
]
