
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARISON_OPCONFIG_ACCESSOR_GTGTleftBINARY_OPCOLONleftELSEleftPLUSMINUSleftTIMESDIVIDEMODCONFIG_ACCESSOR_SLASHleftPOWleftUNARY_OPleftNULAR_OPVARIABLEVALUEBRACED_EXPAND BINARY_FNC BOOL COLON COMMA COMMENT_MULTI COMMENT_SINGLE DIVIDE DO ELSE EQUAL EQUALITY EXITWITH FOR FOREACH FROM GLOBAL_ID GT GTE IF INEQUALITY LBRACE LPAREN LSPAREN LT LTE MINUS MOD NAMESPACE NEWLINE NOT NULAR_FNC NUMBER_EXP NUMBER_HEX NUMBER_REAL OR PLUS POW PRIVATE PRIVATE_ID RBRACE RPAREN RSPAREN SEMI_COLON STEP STRING_DOUBLE STRING_SINGLE SWITCH THEN TIMES TO UNARY_FNC WHILE WITH\n    code    : empty\n            | statement\n            | statement terminator code\n    \n    statement   : controlstructure\n                | assignment\n                | binaryexp\n                | nularexp\n                | unaryexp\n    \n    terminator  : SEMI_COLON\n                | COMMA\n    \n    controlstructure    : ifstatement\n                        | whileloop\n                        | forloop\n                        | withstatement\n    \n    helpertype  : iftype\n                | whiletype\n                | fortype\n                | withtype\n    \n    iftype : IF forloop_condition\n    \n    ifstatement : iftype THEN bracedexp\n                | iftype EXITWITH bracedexp\n                | iftype THEN bracedexp ELSE bracedexp\n    \n    withtype : WITH NAMESPACE\n    \n    withstatementinit : withtype DO\n    \n    withstatement : withstatementinit bracedexp\n    \n    whiletype   : WHILE forloop_condition\n    \n    whileloop : whiletype DO bracedexp\n    \n    fortype : FOR new_scope string FROM primaryexp TO primaryexp\n            | FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp\n            | FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN\n    \n    forloop : fortype DO bracedexp_noscope\n    \n    forloop_condition   : LBRACE booleanexp RBRACE\n                        | identifier\n    \n     bracedexp_noscope : LBRACE code RBRACE\n    \n    vardefinition   : definition\n                    | arraydefinition\n    \n    assignment  : assignment_code code RBRACE\n                | definition EQUAL primaryexp\n                | variable EQUAL primaryexp\n    \n    assignment_code : definition EQUAL LBRACE\n                    | variable EQUAL LBRACE\n    \n    arraydefinition : PRIVATE stringarray\n    \n    definition  : PRIVATE PRIVATE_ID\n                | PRIVATE string\n    \n    identifier  : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID  %prec VARIABLE\n    \n    variable    : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID %prec VARIABLE\n    \n    binaryexp   : primaryexp BINARY_FNC primaryexp          %prec BINARY_OP\n                | primaryexp comparisonoperator primaryexp  %prec BINARY_OP\n                | primaryexp mathoperator primaryexp        %prec BINARY_OP\n    \n    primaryexp  : number                    %prec VALUE\n                | identifier                %prec VALUE\n                | helpertype                %prec VALUE\n                | unaryexp                  %prec UNARY_OP\n                | nularexp                  %prec NULAR_OP\n                | string                    %prec VALUE\n                | binaryexp                 %prec BINARY_OP\n                | bracedexp                 %prec BRACED_EXP\n                | LPAREN binaryexp RPAREN   %prec BRACED_EXP\n                | array                     %prec VALUE\n    \n    bracedexp : LBRACE new_scope code RBRACE\n    new_scope :\n    array   : LSPAREN RSPAREN\n            | LSPAREN arrayelement RSPAREN\n    \n    arrayelement    : binaryexp\n                    | binaryexp COMMA arrayelement\n    \n    stringarray : LSPAREN RSPAREN\n                | LSPAREN stringarrayelement RSPAREN\n    \n    stringarrayelement  : string\n                        | string COMMA stringarrayelement\n    \n    nularexp    : NULAR_FNC     %prec NULAR_OP\n                | identifier    %prec NULAR_OP\n    \n    unaryexp    : UNARY_FNC primaryexp  %prec UNARY_OP\n                | PLUS primaryexp       %prec UNARY_OP\n                | MINUS primaryexp      %prec UNARY_OP\n                | NOT primaryexp        %prec UNARY_OP\n                | vardefinition         %prec UNARY_OP\n    \n    comparisonoperator  : LT            %prec COMPARISON_OP\n                        | GT            %prec COMPARISON_OP\n                        | LTE           %prec COMPARISON_OP\n                        | GTE           %prec COMPARISON_OP\n                        | EQUALITY      %prec COMPARISON_OP\n                        | INEQUALITY    %prec COMPARISON_OP\n                        | AND           %prec COMPARISON_OP\n                        | OR            %prec COMPARISON_OP\n    \n    mathoperator : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MOD\n                    | POW\n    \n    booleanexp  : primaryexp\n                | primaryexp comparisonoperator booleanexp\n                | primaryexp comparisonoperator LBRACE booleanexp RBRACE\n    \n    configaccessor  : GT GT     %prec CONFIG_ACCESSOR_GTGT\n                    | DIVIDE    %prec CONFIG_ACCESSOR_SLASH\n    \n    number  : NUMBER_REAL\n            | NUMBER_EXP\n            | NUMBER_HEX\n    \n    string  : STRING_SINGLE\n            | STRING_DOUBLE\n    \n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,17,18,23,25,31,32,33,34,35,37,38,44,45,46,47,48,50,51,52,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,94,95,96,99,101,102,104,108,109,110,111,113,114,115,116,118,119,120,121,124,127,132,136,137,139,144,145,156,160,161,],[-103,0,-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-35,-72,-73,-78,-59,-45,-57,-46,-52,-54,-61,-36,-98,-99,-100,-101,-102,-103,-9,-10,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-25,-43,-44,-42,-19,-33,-26,-64,-23,-3,-37,-38,-49,-50,-51,-39,-20,-21,-27,-31,-68,-60,-65,-62,-69,-32,-22,-34,-28,-29,-30,]),'NULAR_FNC':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[17,17,17,17,17,17,-63,17,17,17,-9,-10,17,17,17,17,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,17,17,17,-40,-41,17,17,17,17,17,17,17,]),'UNARY_FNC':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[19,19,19,19,19,19,-63,19,19,19,-9,-10,19,19,19,19,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,19,19,19,-40,-41,19,19,19,19,19,19,19,]),'PLUS':([0,6,7,8,13,14,15,17,18,19,20,21,22,23,24,25,26,27,29,31,32,33,34,35,36,37,38,42,43,44,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,94,95,96,98,99,100,101,102,104,106,108,111,112,113,114,115,116,117,122,124,127,129,132,133,136,137,139,140,141,147,149,150,153,156,158,160,161,],[20,-58,-56,-55,20,-35,66,-72,-53,20,20,20,20,-78,-15,-59,-16,-17,-63,-45,-57,-46,-52,-54,20,-61,-36,20,-18,-98,-99,-100,-101,-102,20,-9,-10,20,20,20,20,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,20,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,20,-43,-44,-42,-58,-19,20,-33,-26,-64,-58,-23,66,-40,66,66,66,66,-41,20,-68,-60,66,-65,20,-62,-69,-32,20,20,66,20,66,20,66,20,66,-30,]),'MINUS':([0,6,7,8,13,14,15,17,18,19,20,21,22,23,24,25,26,27,29,31,32,33,34,35,36,37,38,42,43,44,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,94,95,96,98,99,100,101,102,104,106,108,111,112,113,114,115,116,117,122,124,127,129,132,133,136,137,139,140,141,147,149,150,153,156,158,160,161,],[21,-58,-56,-55,21,-35,67,-72,-53,21,21,21,21,-78,-15,-59,-16,-17,-63,-45,-57,-46,-52,-54,21,-61,-36,21,-18,-98,-99,-100,-101,-102,21,-9,-10,21,21,21,21,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,21,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,21,-43,-44,-42,-58,-19,21,-33,-26,-64,-58,-23,67,-40,67,67,67,67,-41,21,-68,-60,67,-65,21,-62,-69,-32,21,21,67,21,67,21,67,21,67,-30,]),'NOT':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[22,22,22,22,22,22,-63,22,22,22,-9,-10,22,22,22,22,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,22,22,22,-40,-41,22,22,22,22,22,22,22,]),'PRIVATE':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[30,30,30,30,30,30,-63,30,30,30,-9,-10,30,30,30,30,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,30,30,30,-40,-41,30,30,30,30,30,30,30,]),'PRIVATE_ID':([0,13,19,20,21,22,29,30,36,39,40,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,151,153,158,],[31,31,78,78,78,78,-63,94,78,78,78,78,31,-9,-10,78,78,78,78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,78,31,78,-40,-41,31,78,78,78,78,78,78,78,]),'GLOBAL_ID':([0,13,19,20,21,22,29,36,39,40,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,151,153,158,],[33,33,79,79,79,79,-63,79,79,79,79,33,-9,-10,79,79,79,79,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,79,33,79,-40,-41,33,79,79,79,79,79,79,79,]),'LPAREN':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[36,36,36,36,36,36,-63,36,36,36,-9,-10,36,36,36,36,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,36,36,36,-40,-41,36,36,36,36,36,36,36,]),'IF':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[39,39,39,39,39,39,-63,39,39,39,-9,-10,39,39,39,39,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,39,39,39,-40,-41,39,39,39,39,39,39,39,]),'WHILE':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[40,40,40,40,40,40,-63,40,40,40,-9,-10,40,40,40,40,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,40,40,40,-40,-41,40,40,40,40,40,40,40,]),'FOR':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[41,41,41,41,41,41,-63,41,41,41,-9,-10,41,41,41,41,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,41,41,41,-40,-41,41,41,41,41,41,41,41,]),'NUMBER_REAL':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[44,44,44,44,44,44,-63,44,44,44,-9,-10,44,44,44,44,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,44,44,44,-40,-41,44,44,44,44,44,44,44,]),'NUMBER_EXP':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[45,45,45,45,45,45,-63,45,45,45,-9,-10,45,45,45,45,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,45,45,45,-40,-41,45,45,45,45,45,45,45,]),'NUMBER_HEX':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[46,46,46,46,46,46,-63,46,46,46,-9,-10,46,46,46,46,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,46,46,46,-40,-41,46,46,46,46,46,46,46,]),'STRING_SINGLE':([0,13,19,20,21,22,29,30,36,41,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,97,100,103,112,117,122,133,138,140,141,149,153,158,],[47,47,47,47,47,47,-63,47,47,-63,47,47,-9,-10,47,47,47,47,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,47,47,47,47,47,-40,-41,47,47,47,47,47,47,47,47,]),'STRING_DOUBLE':([0,13,19,20,21,22,29,30,36,41,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,97,100,103,112,117,122,133,138,140,141,149,153,158,],[48,48,48,48,48,48,-63,48,48,-63,48,48,-9,-10,48,48,48,48,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,48,48,48,48,48,-40,-41,48,48,48,48,48,48,48,48,]),'LBRACE':([0,13,19,20,21,22,28,29,36,39,40,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,88,89,90,91,93,100,107,112,117,122,131,133,134,140,141,149,151,153,157,158,],[29,29,29,29,29,29,29,-63,29,100,100,29,29,-9,-10,112,29,29,29,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,117,29,29,29,122,29,29,-24,-40,-41,29,122,29,29,149,29,29,100,29,122,29,]),'LSPAREN':([0,13,19,20,21,22,29,30,36,41,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,103,112,117,122,133,140,141,149,153,158,],[42,42,42,42,42,42,-63,97,42,-63,42,42,-9,-10,42,42,42,42,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,42,42,42,131,-40,-41,42,42,42,42,42,42,42,]),'WITH':([0,13,19,20,21,22,29,36,42,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,100,112,117,122,133,140,141,149,153,158,],[49,49,49,49,49,49,-63,49,49,49,-9,-10,49,49,49,49,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,49,49,49,-40,-41,49,49,49,49,49,49,49,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,23,25,29,31,32,33,34,35,37,38,44,45,46,47,48,50,51,52,53,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,93,94,95,96,99,101,102,104,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,132,135,136,137,139,144,145,147,148,149,152,155,156,160,161,],[-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-103,-35,-72,-73,-78,-59,-63,-45,-57,-46,-52,-54,-61,-36,-98,-99,-100,-101,-102,-103,-9,-10,110,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-25,-103,-43,-44,-42,-19,-33,-26,-64,-23,-3,-37,-38,-40,-49,-50,-51,-39,-41,-20,-21,-27,-31,-103,136,-68,-60,139,-93,-65,145,-62,-69,-32,-22,-34,-50,-94,-63,155,-95,-28,-29,-30,]),'SEMI_COLON':([3,4,5,6,7,8,9,10,11,12,14,17,18,23,25,31,32,33,34,35,37,38,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,94,95,96,99,101,102,104,108,110,111,113,114,115,116,118,119,120,121,124,127,132,136,137,139,144,145,156,160,161,],[51,-4,-5,-6,-7,-8,-11,-12,-13,-14,-35,-72,-73,-78,-59,-45,-57,-46,-52,-54,-61,-36,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-25,-43,-44,-42,-19,-33,-26,-64,-23,-37,-38,-49,-50,-51,-39,-20,-21,-27,-31,-68,-60,-65,-62,-69,-32,-22,-34,-28,-29,-30,]),'COMMA':([3,4,5,6,7,8,9,10,11,12,14,17,18,23,25,31,32,33,34,35,37,38,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,94,95,96,99,101,102,104,106,108,110,111,113,114,115,116,118,119,120,121,124,126,127,132,136,137,139,142,144,145,154,156,160,161,],[52,-4,-5,-6,-7,-8,-11,-12,-13,-14,-35,-72,-73,-78,-59,-45,-57,-46,-52,-54,-61,-36,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-25,-43,-44,-42,-19,-33,-26,-64,133,-23,-37,-38,-49,-50,-51,-39,-20,-21,-27,-31,-68,138,-60,-65,-62,-69,-32,151,-22,-34,157,-28,-29,-30,]),'BINARY_FNC':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,55,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,55,-49,-50,-51,55,-68,-60,55,-65,-62,-69,-32,-50,55,55,55,-30,]),'LT':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,58,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,58,-49,-50,-51,58,-68,-60,58,-65,-62,-69,-32,-50,58,58,58,-30,]),'GT':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,59,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,59,-49,-50,-51,59,-68,-60,59,-65,-62,-69,-32,-50,59,59,59,-30,]),'LTE':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,60,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,60,-49,-50,-51,60,-68,-60,60,-65,-62,-69,-32,-50,60,60,60,-30,]),'GTE':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,61,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,61,-49,-50,-51,61,-68,-60,61,-65,-62,-69,-32,-50,61,61,61,-30,]),'EQUALITY':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,62,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,62,-49,-50,-51,62,-68,-60,62,-65,-62,-69,-32,-50,62,62,62,-30,]),'INEQUALITY':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,63,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,63,-49,-50,-51,63,-68,-60,63,-65,-62,-69,-32,-50,63,63,63,-30,]),'AND':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,64,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,64,-49,-50,-51,64,-68,-60,64,-65,-62,-69,-32,-50,64,64,64,-30,]),'OR':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,65,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,65,-49,-50,-51,65,-68,-60,65,-65,-62,-69,-32,-50,65,65,65,-30,]),'TIMES':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,68,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,68,68,68,68,68,-68,-60,68,-65,-62,-69,-32,68,68,68,68,-30,]),'DIVIDE':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,69,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,69,69,69,69,69,-68,-60,69,-65,-62,-69,-32,69,69,69,69,-30,]),'MOD':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,70,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,70,70,70,70,70,-68,-60,70,-65,-62,-69,-32,70,70,70,70,-30,]),'POW':([6,7,8,14,15,17,18,23,24,25,26,27,31,32,33,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,106,108,111,113,114,115,116,124,127,129,132,136,137,139,147,150,156,160,161,],[-58,-56,-55,-35,71,-72,-53,-78,-15,-59,-16,-17,-45,-57,-46,-52,-54,-61,-36,-18,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-58,-19,-33,-26,-64,-58,-23,71,71,71,71,71,-68,-60,71,-65,-62,-69,-32,71,71,71,71,-30,]),'EQUAL':([14,16,31,33,47,48,94,95,],[54,72,-47,-48,-101,-102,-43,-44,]),'RPAREN':([17,23,25,32,34,35,37,38,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,98,99,101,102,104,108,113,114,115,124,127,132,136,137,139,156,160,161,],[-72,-78,-59,-57,-52,-54,-61,-36,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,127,-19,-33,-26,-64,-23,-49,-50,-51,-68,-60,-65,-62,-69,-32,-28,-29,-30,]),'RSPAREN':([17,23,25,32,34,35,37,38,42,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,97,99,101,102,104,105,106,108,113,114,115,124,125,126,127,132,136,137,139,143,145,146,156,159,160,161,],[-72,-78,-59,-57,-52,-54,-61,-36,104,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,124,-19,-33,-26,-64,132,-66,-23,-49,-50,-51,-68,137,-70,-60,-65,-62,-69,-32,-67,-34,-71,-28,161,-29,-30,]),'TO':([17,23,25,32,34,35,37,38,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,99,101,102,104,108,113,114,115,124,127,132,136,137,139,150,156,160,161,],[-72,-78,-59,-57,-52,-54,-61,-36,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-19,-33,-26,-64,-23,-49,-50,-51,-68,-60,-65,-62,-69,-32,153,-28,-29,-30,]),'STEP':([17,23,25,32,34,35,37,38,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,99,101,102,104,108,113,114,115,124,127,132,136,137,139,156,160,161,],[-72,-78,-59,-57,-52,-54,-61,-36,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-19,-33,-26,-64,-23,-49,-50,-51,-68,-60,-65,-62,-69,-32,158,-29,-30,]),'DO':([17,23,25,26,27,32,34,35,37,38,43,44,45,46,47,48,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,99,101,102,104,108,113,114,115,124,127,132,136,137,139,156,160,161,],[-72,-78,-59,90,91,-57,-52,-54,-61,-36,107,-98,-99,-100,-101,-102,-74,-53,-55,-56,-58,-45,-46,-15,-16,-17,-18,-35,-75,-76,-77,-43,-44,-42,-19,-33,-26,-64,-23,-49,-50,-51,-68,-60,-65,-62,-69,-32,-28,-29,-30,]),'THEN':([24,78,79,99,101,139,],[88,-45,-46,-19,-33,-32,]),'EXITWITH':([24,78,79,99,101,139,],[89,-45,-46,-19,-33,-32,]),'FROM':([47,48,130,],[-101,-102,141,]),'NAMESPACE':([49,],[108,]),'ELSE':([118,136,],[134,-62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,13,50,93,122,],[1,53,109,123,135,]),'empty':([0,13,50,93,122,],[2,2,2,2,2,]),'statement':([0,13,50,93,122,],[3,3,3,3,3,]),'controlstructure':([0,13,50,93,122,],[4,4,4,4,4,]),'assignment':([0,13,50,93,122,],[5,5,5,5,5,]),'binaryexp':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[6,6,77,77,77,77,98,106,6,77,77,77,77,77,6,77,6,106,77,77,77,77,77,]),'nularexp':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[7,7,76,76,76,76,76,76,7,76,76,76,76,76,7,76,7,76,76,76,76,76,76,]),'unaryexp':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[8,8,75,75,75,75,75,75,8,75,75,75,75,75,8,75,8,75,75,75,75,75,75,]),'ifstatement':([0,13,50,93,122,],[9,9,9,9,9,]),'whileloop':([0,13,50,93,122,],[10,10,10,10,10,]),'forloop':([0,13,50,93,122,],[11,11,11,11,11,]),'withstatement':([0,13,50,93,122,],[12,12,12,12,12,]),'assignment_code':([0,13,50,93,122,],[13,13,13,13,13,]),'definition':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[14,14,84,84,84,84,84,84,14,84,84,84,84,84,14,84,14,84,84,84,84,84,84,]),'primaryexp':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[15,15,73,85,86,87,15,15,15,111,113,114,115,116,15,129,15,15,147,150,129,156,160,]),'variable':([0,13,50,93,122,],[16,16,16,16,16,]),'identifier':([0,13,19,20,21,22,36,39,40,42,50,54,55,56,57,72,93,100,122,133,140,141,149,151,153,158,],[18,18,74,74,74,74,74,101,101,74,18,74,74,74,74,74,18,74,18,74,74,74,74,101,74,74,]),'vardefinition':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'iftype':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[24,24,80,80,80,80,80,80,24,80,80,80,80,80,24,80,24,80,80,80,80,80,80,]),'bracedexp':([0,13,19,20,21,22,28,36,42,50,54,55,56,57,72,88,89,90,93,100,122,133,134,140,141,149,153,158,],[25,25,25,25,25,25,92,25,25,25,25,25,25,25,25,118,119,120,25,25,25,25,144,25,25,25,25,25,]),'whiletype':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[26,26,81,81,81,81,81,81,26,81,81,81,81,81,26,81,26,81,81,81,81,81,81,]),'fortype':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[27,27,82,82,82,82,82,82,27,82,82,82,82,82,27,82,27,82,82,82,82,82,82,]),'withstatementinit':([0,13,50,93,122,],[28,28,28,28,28,]),'string':([0,13,19,20,21,22,30,36,42,50,54,55,56,57,72,93,97,100,103,122,133,138,140,141,149,153,158,],[32,32,32,32,32,32,95,32,32,32,32,32,32,32,32,32,126,32,130,32,32,126,32,32,32,32,32,]),'number':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'helpertype':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'array':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'arraydefinition':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'withtype':([0,13,19,20,21,22,36,42,50,54,55,56,57,72,93,100,122,133,140,141,149,153,158,],[43,43,83,83,83,83,83,83,43,83,83,83,83,83,43,83,43,83,83,83,83,83,83,]),'terminator':([3,],[50,]),'comparisonoperator':([15,73,85,86,87,111,113,114,115,116,129,147,150,156,160,],[56,56,56,56,56,56,56,56,56,56,140,140,56,56,56,]),'mathoperator':([15,73,85,86,87,111,113,114,115,116,129,147,150,156,160,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'new_scope':([29,41,112,117,149,],[93,103,93,93,93,]),'stringarray':([30,],[96,]),'forloop_condition':([39,40,151,],[99,102,154,]),'arrayelement':([42,133,],[105,143,]),'bracedexp_noscope':([91,131,157,],[121,142,159,]),'stringarrayelement':([97,138,],[125,146,]),'booleanexp':([100,140,149,],[128,148,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> empty','code',1,'p_code','sqf_yacc.py',36),
  ('code -> statement','code',1,'p_code','sqf_yacc.py',37),
  ('code -> statement terminator code','code',3,'p_code','sqf_yacc.py',38),
  ('statement -> controlstructure','statement',1,'p_statement','sqf_yacc.py',45),
  ('statement -> assignment','statement',1,'p_statement','sqf_yacc.py',46),
  ('statement -> binaryexp','statement',1,'p_statement','sqf_yacc.py',47),
  ('statement -> nularexp','statement',1,'p_statement','sqf_yacc.py',48),
  ('statement -> unaryexp','statement',1,'p_statement','sqf_yacc.py',49),
  ('terminator -> SEMI_COLON','terminator',1,'p_terminator','sqf_yacc.py',56),
  ('terminator -> COMMA','terminator',1,'p_terminator','sqf_yacc.py',57),
  ('controlstructure -> ifstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',71),
  ('controlstructure -> whileloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',72),
  ('controlstructure -> forloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',73),
  ('controlstructure -> withstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',74),
  ('helpertype -> iftype','helpertype',1,'p_helpertype','sqf_yacc.py',81),
  ('helpertype -> whiletype','helpertype',1,'p_helpertype','sqf_yacc.py',82),
  ('helpertype -> fortype','helpertype',1,'p_helpertype','sqf_yacc.py',83),
  ('helpertype -> withtype','helpertype',1,'p_helpertype','sqf_yacc.py',84),
  ('iftype -> IF forloop_condition','iftype',2,'p_iftype','sqf_yacc.py',91),
  ('ifstatement -> iftype THEN bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',98),
  ('ifstatement -> iftype EXITWITH bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',99),
  ('ifstatement -> iftype THEN bracedexp ELSE bracedexp','ifstatement',5,'p_ifstatement','sqf_yacc.py',100),
  ('withtype -> WITH NAMESPACE','withtype',2,'p_withtype','sqf_yacc.py',107),
  ('withstatementinit -> withtype DO','withstatementinit',2,'p_withstatementinit','sqf_yacc.py',114),
  ('withstatement -> withstatementinit bracedexp','withstatement',2,'p_withstatement','sqf_yacc.py',124),
  ('whiletype -> WHILE forloop_condition','whiletype',2,'p_whiletype','sqf_yacc.py',131),
  ('whileloop -> whiletype DO bracedexp','whileloop',3,'p_whileloop','sqf_yacc.py',137),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp','fortype',7,'p_fortype','sqf_yacc.py',144),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp','fortype',9,'p_fortype','sqf_yacc.py',145),
  ('fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN','fortype',9,'p_fortype','sqf_yacc.py',146),
  ('forloop -> fortype DO bracedexp_noscope','forloop',3,'p_forloop','sqf_yacc.py',165),
  ('forloop_condition -> LBRACE booleanexp RBRACE','forloop_condition',3,'p_bracedexp_condition','sqf_yacc.py',173),
  ('forloop_condition -> identifier','forloop_condition',1,'p_bracedexp_condition','sqf_yacc.py',174),
  ('bracedexp_noscope -> LBRACE code RBRACE','bracedexp_noscope',3,'p_bracedexp_noscope','sqf_yacc.py',184),
  ('vardefinition -> definition','vardefinition',1,'p_vardefinition','sqf_yacc.py',191),
  ('vardefinition -> arraydefinition','vardefinition',1,'p_vardefinition','sqf_yacc.py',192),
  ('assignment -> assignment_code code RBRACE','assignment',3,'p_assignment','sqf_yacc.py',198),
  ('assignment -> definition EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',199),
  ('assignment -> variable EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',200),
  ('assignment_code -> definition EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',215),
  ('assignment_code -> variable EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',216),
  ('arraydefinition -> PRIVATE stringarray','arraydefinition',2,'p_arraydefinition','sqf_yacc.py',225),
  ('definition -> PRIVATE PRIVATE_ID','definition',2,'p_definition','sqf_yacc.py',244),
  ('definition -> PRIVATE string','definition',2,'p_definition','sqf_yacc.py',245),
  ('identifier -> PRIVATE_ID','identifier',1,'p_identifier','sqf_yacc.py',264),
  ('identifier -> GLOBAL_ID','identifier',1,'p_identifier','sqf_yacc.py',265),
  ('variable -> PRIVATE_ID','variable',1,'p_variable','sqf_yacc.py',285),
  ('variable -> GLOBAL_ID','variable',1,'p_variable','sqf_yacc.py',286),
  ('binaryexp -> primaryexp BINARY_FNC primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',293),
  ('binaryexp -> primaryexp comparisonoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',294),
  ('binaryexp -> primaryexp mathoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',295),
  ('primaryexp -> number','primaryexp',1,'p_primaryexp','sqf_yacc.py',301),
  ('primaryexp -> identifier','primaryexp',1,'p_primaryexp','sqf_yacc.py',302),
  ('primaryexp -> helpertype','primaryexp',1,'p_primaryexp','sqf_yacc.py',303),
  ('primaryexp -> unaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',304),
  ('primaryexp -> nularexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',305),
  ('primaryexp -> string','primaryexp',1,'p_primaryexp','sqf_yacc.py',306),
  ('primaryexp -> binaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',307),
  ('primaryexp -> bracedexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',308),
  ('primaryexp -> LPAREN binaryexp RPAREN','primaryexp',3,'p_primaryexp','sqf_yacc.py',309),
  ('primaryexp -> array','primaryexp',1,'p_primaryexp','sqf_yacc.py',310),
  ('bracedexp -> LBRACE new_scope code RBRACE','bracedexp',4,'p_bracedexp','sqf_yacc.py',320),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','sqf_yacc.py',327),
  ('array -> LSPAREN RSPAREN','array',2,'p_array','sqf_yacc.py',333),
  ('array -> LSPAREN arrayelement RSPAREN','array',3,'p_array','sqf_yacc.py',334),
  ('arrayelement -> binaryexp','arrayelement',1,'p_arrayelement','sqf_yacc.py',344),
  ('arrayelement -> binaryexp COMMA arrayelement','arrayelement',3,'p_arrayelement','sqf_yacc.py',345),
  ('stringarray -> LSPAREN RSPAREN','stringarray',2,'p_stringarray','sqf_yacc.py',358),
  ('stringarray -> LSPAREN stringarrayelement RSPAREN','stringarray',3,'p_stringarray','sqf_yacc.py',359),
  ('stringarrayelement -> string','stringarrayelement',1,'p_stringarrayelement','sqf_yacc.py',369),
  ('stringarrayelement -> string COMMA stringarrayelement','stringarrayelement',3,'p_stringarrayelement','sqf_yacc.py',370),
  ('nularexp -> NULAR_FNC','nularexp',1,'p_nularexp','sqf_yacc.py',384),
  ('nularexp -> identifier','nularexp',1,'p_nularexp','sqf_yacc.py',385),
  ('unaryexp -> UNARY_FNC primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',392),
  ('unaryexp -> PLUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',393),
  ('unaryexp -> MINUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',394),
  ('unaryexp -> NOT primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',395),
  ('unaryexp -> vardefinition','unaryexp',1,'p_unaryexp','sqf_yacc.py',396),
  ('comparisonoperator -> LT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',402),
  ('comparisonoperator -> GT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',403),
  ('comparisonoperator -> LTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',404),
  ('comparisonoperator -> GTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',405),
  ('comparisonoperator -> EQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',406),
  ('comparisonoperator -> INEQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',407),
  ('comparisonoperator -> AND','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',408),
  ('comparisonoperator -> OR','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',409),
  ('mathoperator -> PLUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',416),
  ('mathoperator -> MINUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',417),
  ('mathoperator -> TIMES','mathoperator',1,'p_mathoperator','sqf_yacc.py',418),
  ('mathoperator -> DIVIDE','mathoperator',1,'p_mathoperator','sqf_yacc.py',419),
  ('mathoperator -> MOD','mathoperator',1,'p_mathoperator','sqf_yacc.py',420),
  ('mathoperator -> POW','mathoperator',1,'p_mathoperator','sqf_yacc.py',421),
  ('booleanexp -> primaryexp','booleanexp',1,'p_booleanexp','sqf_yacc.py',428),
  ('booleanexp -> primaryexp comparisonoperator booleanexp','booleanexp',3,'p_booleanexp','sqf_yacc.py',429),
  ('booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE','booleanexp',5,'p_booleanexp','sqf_yacc.py',430),
  ('configaccessor -> GT GT','configaccessor',2,'p_configaccessor','sqf_yacc.py',436),
  ('configaccessor -> DIVIDE','configaccessor',1,'p_configaccessor','sqf_yacc.py',437),
  ('number -> NUMBER_REAL','number',1,'p_number','sqf_yacc.py',444),
  ('number -> NUMBER_EXP','number',1,'p_number','sqf_yacc.py',445),
  ('number -> NUMBER_HEX','number',1,'p_number','sqf_yacc.py',446),
  ('string -> STRING_SINGLE','string',1,'p_string','sqf_yacc.py',453),
  ('string -> STRING_DOUBLE','string',1,'p_string','sqf_yacc.py',454),
  ('empty -> <empty>','empty',0,'p_empty','sqf_yacc.py',461),
]
