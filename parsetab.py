
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND BOOL COLON COMMA COMMENT_MULTI COMMENT_SINGLE DIVIDE ELSE EQUAL FOR GLOBAL_ID GT IF LBRACE LPAREN LSPAREN LT MINUS MOD NEWLINE NOT NUMBER_EXP NUMBER_HEX NUMBER_REAL OR PLUS POW PRIVATE PRIVATE_ID RBRACE RPAREN RSPAREN SELECT SEMI_COLON STRING_DOUBLE STRING_SINGLE SWITCH TIMES WHILE WITH\n    expression  : expression PLUS expression\n                | expression MINUS expression\n                | expression TIMES expression\n                | expression DIVIDE expression\n                | LPAREN expression RPAREN\n                | number\n    \n    expression : MINUS expression %prec UMINUS\n    \n    number  : NUMBER_REAL\n            | NUMBER_HEX\n            | NUMBER_EXP\n    \n    empty :\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,8,9,10,11,],[3,3,3,3,3,3,3,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,],[2,9,2,2,-6,-8,-9,-10,2,2,2,2,-7,9,-1,-2,-3,-4,-5,]),'NUMBER_REAL':([0,2,3,8,9,10,11,],[5,5,5,5,5,5,5,]),'NUMBER_HEX':([0,2,3,8,9,10,11,],[6,6,6,6,6,6,6,]),'NUMBER_EXP':([0,2,3,8,9,10,11,],[7,7,7,7,7,7,7,]),'$end':([1,4,5,6,7,12,14,15,16,17,18,],[0,-6,-8,-9,-10,-7,-1,-2,-3,-4,-5,]),'PLUS':([1,4,5,6,7,12,13,14,15,16,17,18,],[8,-6,-8,-9,-10,-7,8,-1,-2,-3,-4,-5,]),'TIMES':([1,4,5,6,7,12,13,14,15,16,17,18,],[10,-6,-8,-9,-10,-7,10,10,10,-3,-4,-5,]),'DIVIDE':([1,4,5,6,7,12,13,14,15,16,17,18,],[11,-6,-8,-9,-10,-7,11,11,11,-3,-4,-5,]),'RPAREN':([4,5,6,7,12,13,14,15,16,17,18,],[-6,-8,-9,-10,-7,18,-1,-2,-3,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,8,9,10,11,],[1,12,13,14,15,16,17,]),'number':([0,2,3,8,9,10,11,],[4,4,4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression','sqf_yacc.py',17),
  ('expression -> expression MINUS expression','expression',3,'p_expression','sqf_yacc.py',18),
  ('expression -> expression TIMES expression','expression',3,'p_expression','sqf_yacc.py',19),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','sqf_yacc.py',20),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','sqf_yacc.py',21),
  ('expression -> number','expression',1,'p_expression','sqf_yacc.py',22),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','sqf_yacc.py',29),
  ('number -> NUMBER_REAL','number',1,'p_number','sqf_yacc.py',36),
  ('number -> NUMBER_HEX','number',1,'p_number','sqf_yacc.py',37),
  ('number -> NUMBER_EXP','number',1,'p_number','sqf_yacc.py',38),
  ('empty -> <empty>','empty',0,'p_empty','sqf_yacc.py',45),
]
