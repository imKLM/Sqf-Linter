
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARISON_OPCONFIG_ACCESSOR_GTGTleftBINARY_OPCOLONleftELSEleftPLUSMINUSleftTIMESDIVIDEMODCONFIG_ACCESSOR_SLASHleftPOWleftSELECTleftUNARY_OPleftNULAR_OPVARIABLEVALUEBRACED_EXPAND BINARY_FNC BOOL COLON COMMA COMMENT_MULTI COMMENT_SINGLE DIVIDE DO ELSE EQUAL EQUALITY EXITWITH FOR FOREACH FROM GLOBAL_ID GT GTE IF INEQUALITY LBRACE LPAREN LSPAREN LT LTE MINUS MOD NAMESPACE NEWLINE NOT NULAR_FNC NUMBER_EXP NUMBER_HEX NUMBER_REAL OR PLUS POW PRIVATE PRIVATE_ID RBRACE RPAREN RSPAREN SELECT SEMI_COLON STEP STRING_DOUBLE STRING_SINGLE SWITCH THEN TIMES TO UNARY_FNC WHILE WITH\n    code    : empty\n            | statement\n            | statement terminator code\n    \n    statement   : controlstructure\n                | assignment\n                | binaryexp\n                | nularexp\n                | unaryexp\n    \n    terminator  : SEMI_COLON\n                | COMMA\n    \n    controlstructure    : ifstatement\n                        | whileloop\n                        | forloop\n                        | withstatement\n    \n    helpertype  : iftype\n                | whiletype\n                | fortype\n                | withtype\n    \n    iftype : IF LPAREN booleanexp RPAREN\n    \n    ifstatement : iftype THEN bracedexp\n                | iftype EXITWITH bracedexp\n                | iftype THEN bracedexp ELSE bracedexp\n    \n    withtype : WITH NAMESPACE\n    \n    withstatementinit : withtype DO\n    \n    withstatement : withstatementinit bracedexp\n    \n    whiletype   : WHILE LBRACE booleanexp RBRACE\n    \n    whileloop : whiletype DO bracedexp\n    \n    fortype : FOR new_scope string FROM primaryexp TO primaryexp\n            | FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp\n            | FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN\n    \n    forloop : fortype DO bracedexp_noscope\n    \n    forloop_condition   : LBRACE booleanexp RBRACE\n                        | identifier\n    \n     bracedexp_noscope : LBRACE code RBRACE\n    \n    assignment  : assignment_code code RBRACE\n                | definition EQUAL primaryexp\n                | variable EQUAL primaryexp\n    \n    assignment_code : definition EQUAL LBRACE\n                    | variable EQUAL LBRACE\n    \n    arraydefinition : PRIVATE stringarray\n    \n    definition : PRIVATE PRIVATE_ID\n    \n    identifier  : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID  %prec VARIABLE\n    \n    variable    : PRIVATE_ID %prec VARIABLE\n                | GLOBAL_ID %prec VARIABLE\n    \n    binaryexp   : primaryexp BINARY_FNC primaryexp          %prec BINARY_OP\n                | primaryexp comparisonoperator primaryexp  %prec BINARY_OP\n                | primaryexp mathoperator primaryexp        %prec BINARY_OP\n    \n    primaryexp  : number                    %prec VALUE\n                | identifier                %prec VALUE\n                | helpertype                %prec VALUE\n                | unaryexp                  %prec UNARY_OP\n                | nularexp                  %prec NULAR_OP\n                | string                    %prec VALUE\n                | binaryexp                 %prec BINARY_OP\n                | bracedexp                 %prec BRACED_EXP\n                | LPAREN binaryexp RPAREN   %prec BRACED_EXP\n                | array                     %prec VALUE\n    \n    bracedexp : LBRACE new_scope code RBRACE\n    new_scope :\n    array   : LSPAREN RSPAREN\n            | LSPAREN arrayelement RSPAREN\n    \n    arrayelement    : binaryexp\n                    | binaryexp COMMA arrayelement\n    \n    stringarray : LSPAREN RSPAREN\n                | LSPAREN stringarrayelement RSPAREN\n    \n    stringarrayelement  : string\n                        | string COMMA stringarrayelement\n    \n    nularexp    : NULAR_FNC     %prec NULAR_OP\n                | identifier    %prec NULAR_OP\n    \n    unaryexp    : UNARY_FNC primaryexp  %prec UNARY_OP\n                | PLUS primaryexp       %prec UNARY_OP\n                | MINUS primaryexp      %prec UNARY_OP\n                | NOT primaryexp        %prec UNARY_OP\n                | arraydefinition       %prec UNARY_OP\n    \n    comparisonoperator  : LT            %prec COMPARISON_OP\n                        | GT            %prec COMPARISON_OP\n                        | LTE           %prec COMPARISON_OP\n                        | GTE           %prec COMPARISON_OP\n                        | EQUALITY      %prec COMPARISON_OP\n                        | INEQUALITY    %prec COMPARISON_OP\n                        | AND           %prec COMPARISON_OP\n                        | OR            %prec COMPARISON_OP\n    \n    mathoperator : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MOD\n                    | POW\n    \n    booleanexp  : primaryexp\n                | primaryexp comparisonoperator booleanexp\n                | primaryexp comparisonoperator LBRACE booleanexp RBRACE\n    \n    configaccessor  : GT GT     %prec CONFIG_ACCESSOR_GTGT\n                    | DIVIDE    %prec CONFIG_ACCESSOR_SLASH\n    \n    number  : NUMBER_REAL\n            | NUMBER_EXP\n            | NUMBER_HEX\n    \n    string  : STRING_SINGLE\n            | STRING_DOUBLE\n    \n    empty :\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,17,18,23,25,31,32,33,34,35,37,43,44,45,46,47,49,50,51,72,73,74,75,76,77,78,79,80,81,82,84,85,86,91,94,100,104,105,106,107,109,110,111,112,114,115,116,117,120,123,129,133,134,136,138,142,143,156,162,163,],[-100,0,-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-69,-70,-75,-56,-42,-43,-49,-51,-54,-58,-95,-96,-97,-98,-99,-100,-9,-10,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-25,-40,-61,-23,-3,-35,-36,-46,-47,-48,-37,-20,-21,-27,-31,-65,-57,-62,-59,-66,-19,-26,-22,-34,-28,-29,-30,]),'NULAR_FNC':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[17,17,17,17,17,17,-60,17,17,17,-9,-10,17,17,17,17,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,17,17,17,17,-38,-39,17,17,17,17,17,17,17,17,]),'UNARY_FNC':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[19,19,19,19,19,19,-60,19,19,19,-9,-10,19,19,19,19,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,19,19,19,19,-38,-39,19,19,19,19,19,19,19,19,]),'PLUS':([0,6,7,8,13,15,17,18,19,20,21,22,23,24,25,26,27,29,31,32,33,34,35,36,37,41,42,43,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,92,94,96,97,98,100,102,104,107,108,109,110,111,112,113,118,120,123,125,129,130,133,134,136,137,138,139,145,147,148,151,153,156,159,162,163,],[20,-55,-53,-52,20,65,-69,-50,20,20,20,20,-75,-15,-56,-16,-17,-60,-42,-43,-49,-51,-54,20,-58,20,-18,-95,-96,-97,-98,-99,20,-9,-10,20,20,20,20,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,20,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,20,-40,-55,20,20,-61,-55,-23,65,-38,65,65,65,65,-39,20,-65,-57,65,-62,20,-59,-66,-19,20,-26,20,65,20,65,20,20,65,20,65,-30,]),'MINUS':([0,6,7,8,13,15,17,18,19,20,21,22,23,24,25,26,27,29,31,32,33,34,35,36,37,41,42,43,44,45,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,92,94,96,97,98,100,102,104,107,108,109,110,111,112,113,118,120,123,125,129,130,133,134,136,137,138,139,145,147,148,151,153,156,159,162,163,],[21,-55,-53,-52,21,66,-69,-50,21,21,21,21,-75,-15,-56,-16,-17,-60,-42,-43,-49,-51,-54,21,-58,21,-18,-95,-96,-97,-98,-99,21,-9,-10,21,21,21,21,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,21,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,21,-40,-55,21,21,-61,-55,-23,66,-38,66,66,66,66,-39,21,-65,-57,66,-62,21,-59,-66,-19,21,-26,21,66,21,66,21,21,66,21,66,-30,]),'NOT':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[22,22,22,22,22,22,-60,22,22,22,-9,-10,22,22,22,22,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,22,22,22,22,-38,-39,22,22,22,22,22,22,22,22,]),'PRIVATE':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[30,30,83,83,83,83,-60,83,83,30,-9,-10,83,83,83,83,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,83,30,83,83,-38,-39,30,83,83,83,83,83,83,83,]),'PRIVATE_ID':([0,13,19,20,21,22,29,30,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,149,151,153,159,],[31,31,77,77,77,77,-60,93,77,77,31,-9,-10,77,77,77,77,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,77,31,77,77,-38,-39,31,77,77,77,77,77,77,77,77,]),'GLOBAL_ID':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,149,151,153,159,],[32,32,78,78,78,78,-60,78,78,32,-9,-10,78,78,78,78,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,78,32,78,78,-38,-39,32,78,78,78,78,78,78,78,78,]),'LPAREN':([0,13,19,20,21,22,29,36,38,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[36,36,36,36,36,36,-60,36,97,36,36,-9,-10,36,36,36,36,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,36,36,36,36,-38,-39,36,36,36,36,36,36,36,36,]),'IF':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[38,38,38,38,38,38,-60,38,38,38,-9,-10,38,38,38,38,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,38,38,38,38,-38,-39,38,38,38,38,38,38,38,38,]),'WHILE':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[39,39,39,39,39,39,-60,39,39,39,-9,-10,39,39,39,39,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,39,39,39,39,-38,-39,39,39,39,39,39,39,39,39,]),'FOR':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[40,40,40,40,40,40,-60,40,40,40,-9,-10,40,40,40,40,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,40,40,40,40,-38,-39,40,40,40,40,40,40,40,40,]),'NUMBER_REAL':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[43,43,43,43,43,43,-60,43,43,43,-9,-10,43,43,43,43,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,43,43,43,43,-38,-39,43,43,43,43,43,43,43,43,]),'NUMBER_EXP':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[44,44,44,44,44,44,-60,44,44,44,-9,-10,44,44,44,44,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,44,44,44,44,-38,-39,44,44,44,44,44,44,44,44,]),'NUMBER_HEX':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[45,45,45,45,45,45,-60,45,45,45,-9,-10,45,45,45,45,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,45,45,45,45,-38,-39,45,45,45,45,45,45,45,45,]),'STRING_SINGLE':([0,13,19,20,21,22,29,36,40,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,95,97,98,99,108,113,118,130,135,137,139,147,151,153,159,],[46,46,46,46,46,46,-60,46,-60,46,46,-9,-10,46,46,46,46,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,46,46,46,46,46,46,-38,-39,46,46,46,46,46,46,46,46,46,]),'STRING_DOUBLE':([0,13,19,20,21,22,29,36,40,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,95,97,98,99,108,113,118,130,135,137,139,147,151,153,159,],[47,47,47,47,47,47,-60,47,-60,47,47,-9,-10,47,47,47,47,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,47,47,47,47,47,47,-38,-39,47,47,47,47,47,47,47,47,47,]),'LBRACE':([0,13,19,20,21,22,28,29,36,39,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,88,89,90,92,97,98,103,108,113,118,128,130,131,137,139,147,149,151,153,157,159,],[29,29,29,29,29,29,29,-60,29,98,29,29,-9,-10,108,29,29,29,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,113,29,29,29,118,29,29,29,-24,-38,-39,29,118,29,29,147,29,29,153,29,29,118,29,]),'LSPAREN':([0,13,19,20,21,22,29,30,36,40,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,83,92,97,98,99,108,113,118,130,137,139,147,151,153,159,],[41,41,41,41,41,41,-60,95,41,-60,41,41,-9,-10,41,41,41,41,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,41,95,41,41,41,128,-38,-39,41,41,41,41,41,41,41,41,]),'WITH':([0,13,19,20,21,22,29,36,41,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,92,97,98,108,113,118,130,137,139,147,151,153,159,],[48,48,48,48,48,48,-60,48,48,48,-9,-10,48,48,48,48,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,48,48,48,48,-38,-39,48,48,48,48,48,48,48,48,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,17,18,23,25,29,31,32,33,34,35,37,43,44,45,46,47,49,50,51,52,72,73,74,75,76,77,78,79,80,81,82,84,85,86,91,92,94,100,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,125,126,129,132,133,134,136,138,142,143,145,146,147,150,155,156,158,162,163,],[-1,-2,-4,-5,-6,-7,-8,-11,-12,-13,-14,-100,-69,-70,-75,-56,-60,-42,-43,-49,-51,-54,-58,-95,-96,-97,-98,-99,-100,-9,-10,106,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-25,-100,-40,-61,-23,-3,-35,-36,-38,-46,-47,-48,-37,-39,-20,-21,-27,-31,-100,133,-65,-57,-90,138,-62,143,-59,-66,-19,-26,-22,-34,-47,-91,-60,155,-92,-28,161,-29,-30,]),'SEMI_COLON':([3,4,5,6,7,8,9,10,11,12,17,18,23,25,31,32,33,34,35,37,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,91,94,100,104,106,107,109,110,111,112,114,115,116,117,120,123,129,133,134,136,138,142,143,156,162,163,],[50,-4,-5,-6,-7,-8,-11,-12,-13,-14,-69,-70,-75,-56,-42,-43,-49,-51,-54,-58,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-25,-40,-61,-23,-35,-36,-46,-47,-48,-37,-20,-21,-27,-31,-65,-57,-62,-59,-66,-19,-26,-22,-34,-28,-29,-30,]),'COMMA':([3,4,5,6,7,8,9,10,11,12,17,18,23,25,31,32,33,34,35,37,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,91,94,100,102,104,106,107,109,110,111,112,114,115,116,117,120,122,123,129,133,134,136,138,140,142,143,152,154,156,161,162,163,],[51,-4,-5,-6,-7,-8,-11,-12,-13,-14,-69,-70,-75,-56,-42,-43,-49,-51,-54,-58,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-25,-40,-61,130,-23,-35,-36,-46,-47,-48,-37,-20,-21,-27,-31,-65,135,-57,-62,-59,-66,-19,-26,149,-22,-34,157,-33,-28,-32,-29,-30,]),'BINARY_FNC':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,54,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,54,-46,-47,-48,54,-65,-57,54,-62,-59,-66,-19,-26,-47,54,54,54,-30,]),'LT':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,57,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,57,-46,-47,-48,57,-65,-57,57,-62,-59,-66,-19,-26,-47,57,57,57,-30,]),'GT':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,58,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,58,-46,-47,-48,58,-65,-57,58,-62,-59,-66,-19,-26,-47,58,58,58,-30,]),'LTE':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,59,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,59,-46,-47,-48,59,-65,-57,59,-62,-59,-66,-19,-26,-47,59,59,59,-30,]),'GTE':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,60,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,60,-46,-47,-48,60,-65,-57,60,-62,-59,-66,-19,-26,-47,60,60,60,-30,]),'EQUALITY':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,61,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,61,-46,-47,-48,61,-65,-57,61,-62,-59,-66,-19,-26,-47,61,61,61,-30,]),'INEQUALITY':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,62,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,62,-46,-47,-48,62,-65,-57,62,-62,-59,-66,-19,-26,-47,62,62,62,-30,]),'AND':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,63,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,63,-46,-47,-48,63,-65,-57,63,-62,-59,-66,-19,-26,-47,63,63,63,-30,]),'OR':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,64,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,64,-46,-47,-48,64,-65,-57,64,-62,-59,-66,-19,-26,-47,64,64,64,-30,]),'TIMES':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,67,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,67,67,67,67,67,-65,-57,67,-62,-59,-66,-19,-26,67,67,67,67,-30,]),'DIVIDE':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,68,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,68,68,68,68,68,-65,-57,68,-62,-59,-66,-19,-26,68,68,68,68,-30,]),'MOD':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,69,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,69,69,69,69,69,-65,-57,69,-62,-59,-66,-19,-26,69,69,69,69,-30,]),'POW':([6,7,8,15,17,18,23,24,25,26,27,31,32,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,102,104,107,109,110,111,112,120,123,125,129,133,134,136,138,145,148,156,162,163,],[-55,-53,-52,70,-69,-50,-75,-15,-56,-16,-17,-42,-43,-49,-51,-54,-58,-18,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-55,-61,-55,-23,70,70,70,70,70,-65,-57,70,-62,-59,-66,-19,-26,70,70,70,70,-30,]),'EQUAL':([14,16,31,32,93,],[53,71,-44,-45,-41,]),'RPAREN':([17,23,25,33,34,35,37,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,96,100,104,109,110,111,120,123,124,125,129,133,134,136,138,145,146,155,156,162,163,],[-69,-75,-56,-49,-51,-54,-58,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,123,-61,-23,-46,-47,-48,-65,-57,136,-90,-62,-59,-66,-19,-26,-47,-91,-92,-28,-29,-30,]),'RSPAREN':([17,23,25,33,34,35,37,41,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,95,100,101,102,104,109,110,111,120,121,122,123,129,133,134,136,138,141,143,144,156,160,162,163,],[-69,-75,-56,-49,-51,-54,-58,100,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,120,-61,129,-63,-23,-46,-47,-48,-65,134,-67,-57,-62,-59,-66,-19,-26,-64,-34,-68,-28,163,-29,-30,]),'TO':([17,23,25,33,34,35,37,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,100,104,109,110,111,120,123,129,133,134,136,138,148,156,162,163,],[-69,-75,-56,-49,-51,-54,-58,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-61,-23,-46,-47,-48,-65,-57,-62,-59,-66,-19,-26,151,-28,-29,-30,]),'STEP':([17,23,25,33,34,35,37,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,100,104,109,110,111,120,123,129,133,134,136,138,156,162,163,],[-69,-75,-56,-49,-51,-54,-58,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-61,-23,-46,-47,-48,-65,-57,-62,-59,-66,-19,-26,159,-29,-30,]),'DO':([17,23,25,26,27,33,34,35,37,42,43,44,45,46,47,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,100,104,109,110,111,120,123,129,133,134,136,138,156,162,163,],[-69,-75,-56,89,90,-49,-51,-54,-58,103,-95,-96,-97,-98,-99,-71,-50,-52,-53,-55,-42,-43,-15,-16,-17,-18,-72,-73,-74,-40,-61,-23,-46,-47,-48,-65,-57,-62,-59,-66,-19,-26,-28,-29,-30,]),'THEN':([24,136,],[87,-19,]),'EXITWITH':([24,136,],[88,-19,]),'FROM':([46,47,127,],[-98,-99,139,]),'NAMESPACE':([48,],[104,]),'ELSE':([114,133,],[131,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,13,49,92,118,],[1,52,105,119,132,]),'empty':([0,13,49,92,118,],[2,2,2,2,2,]),'statement':([0,13,49,92,118,],[3,3,3,3,3,]),'controlstructure':([0,13,49,92,118,],[4,4,4,4,4,]),'assignment':([0,13,49,92,118,],[5,5,5,5,5,]),'binaryexp':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[6,6,76,76,76,76,96,102,6,76,76,76,76,76,6,76,76,6,102,76,76,76,76,76,76,]),'nularexp':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[7,7,75,75,75,75,75,75,7,75,75,75,75,75,7,75,75,7,75,75,75,75,75,75,75,]),'unaryexp':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[8,8,74,74,74,74,74,74,8,74,74,74,74,74,8,74,74,8,74,74,74,74,74,74,74,]),'ifstatement':([0,13,49,92,118,],[9,9,9,9,9,]),'whileloop':([0,13,49,92,118,],[10,10,10,10,10,]),'forloop':([0,13,49,92,118,],[11,11,11,11,11,]),'withstatement':([0,13,49,92,118,],[12,12,12,12,12,]),'assignment_code':([0,13,49,92,118,],[13,13,13,13,13,]),'definition':([0,13,49,92,118,],[14,14,14,14,14,]),'primaryexp':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[15,15,72,84,85,86,15,15,15,107,109,110,111,112,15,125,125,15,15,145,148,125,156,125,162,]),'variable':([0,13,49,92,118,],[16,16,16,16,16,]),'identifier':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,149,151,153,159,],[18,18,73,73,73,73,73,73,18,73,73,73,73,73,18,73,73,18,73,73,73,73,154,73,73,73,]),'arraydefinition':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'iftype':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[24,24,79,79,79,79,79,79,24,79,79,79,79,79,24,79,79,24,79,79,79,79,79,79,79,]),'bracedexp':([0,13,19,20,21,22,28,36,41,49,53,54,55,56,71,87,88,89,92,97,98,118,130,131,137,139,147,151,153,159,],[25,25,25,25,25,25,91,25,25,25,25,25,25,25,25,114,115,116,25,25,25,25,25,142,25,25,25,25,25,25,]),'whiletype':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[26,26,80,80,80,80,80,80,26,80,80,80,80,80,26,80,80,26,80,80,80,80,80,80,80,]),'fortype':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[27,27,81,81,81,81,81,81,27,81,81,81,81,81,27,81,81,27,81,81,81,81,81,81,81,]),'withstatementinit':([0,13,49,92,118,],[28,28,28,28,28,]),'number':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'helpertype':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'string':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,95,97,98,99,118,130,135,137,139,147,151,153,159,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,122,35,35,127,35,35,122,35,35,35,35,35,35,]),'array':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'withtype':([0,13,19,20,21,22,36,41,49,53,54,55,56,71,92,97,98,118,130,137,139,147,151,153,159,],[42,42,82,82,82,82,82,82,42,82,82,82,82,82,42,82,82,42,82,82,82,82,82,82,82,]),'terminator':([3,],[49,]),'comparisonoperator':([15,72,84,85,86,107,109,110,111,112,125,145,148,156,162,],[55,55,55,55,55,55,55,55,55,55,137,137,55,55,55,]),'mathoperator':([15,72,84,85,86,107,109,110,111,112,125,145,148,156,162,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'new_scope':([29,40,108,113,147,],[92,99,92,92,92,]),'stringarray':([30,83,],[94,94,]),'arrayelement':([41,130,],[101,141,]),'bracedexp_noscope':([90,128,157,],[117,140,160,]),'stringarrayelement':([95,135,],[121,144,]),'booleanexp':([97,98,137,147,153,],[124,126,146,150,158,]),'forloop_condition':([149,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> empty','code',1,'p_code','sqf_yacc.py',36),
  ('code -> statement','code',1,'p_code','sqf_yacc.py',37),
  ('code -> statement terminator code','code',3,'p_code','sqf_yacc.py',38),
  ('statement -> controlstructure','statement',1,'p_statement','sqf_yacc.py',45),
  ('statement -> assignment','statement',1,'p_statement','sqf_yacc.py',46),
  ('statement -> binaryexp','statement',1,'p_statement','sqf_yacc.py',47),
  ('statement -> nularexp','statement',1,'p_statement','sqf_yacc.py',48),
  ('statement -> unaryexp','statement',1,'p_statement','sqf_yacc.py',49),
  ('terminator -> SEMI_COLON','terminator',1,'p_terminator','sqf_yacc.py',56),
  ('terminator -> COMMA','terminator',1,'p_terminator','sqf_yacc.py',57),
  ('controlstructure -> ifstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',71),
  ('controlstructure -> whileloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',72),
  ('controlstructure -> forloop','controlstructure',1,'p_controlstructure','sqf_yacc.py',73),
  ('controlstructure -> withstatement','controlstructure',1,'p_controlstructure','sqf_yacc.py',74),
  ('helpertype -> iftype','helpertype',1,'p_helpertype','sqf_yacc.py',81),
  ('helpertype -> whiletype','helpertype',1,'p_helpertype','sqf_yacc.py',82),
  ('helpertype -> fortype','helpertype',1,'p_helpertype','sqf_yacc.py',83),
  ('helpertype -> withtype','helpertype',1,'p_helpertype','sqf_yacc.py',84),
  ('iftype -> IF LPAREN booleanexp RPAREN','iftype',4,'p_iftype','sqf_yacc.py',91),
  ('ifstatement -> iftype THEN bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',98),
  ('ifstatement -> iftype EXITWITH bracedexp','ifstatement',3,'p_ifstatement','sqf_yacc.py',99),
  ('ifstatement -> iftype THEN bracedexp ELSE bracedexp','ifstatement',5,'p_ifstatement','sqf_yacc.py',100),
  ('withtype -> WITH NAMESPACE','withtype',2,'p_withtype','sqf_yacc.py',107),
  ('withstatementinit -> withtype DO','withstatementinit',2,'p_withstatementinit','sqf_yacc.py',114),
  ('withstatement -> withstatementinit bracedexp','withstatement',2,'p_withstatement','sqf_yacc.py',124),
  ('whiletype -> WHILE LBRACE booleanexp RBRACE','whiletype',4,'p_whiletype','sqf_yacc.py',131),
  ('whileloop -> whiletype DO bracedexp','whileloop',3,'p_whileloop','sqf_yacc.py',137),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp','fortype',7,'p_fortype','sqf_yacc.py',144),
  ('fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp','fortype',9,'p_fortype','sqf_yacc.py',145),
  ('fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA forloop_condition COMMA bracedexp_noscope RSPAREN','fortype',9,'p_fortype','sqf_yacc.py',146),
  ('forloop -> fortype DO bracedexp_noscope','forloop',3,'p_forloop','sqf_yacc.py',154),
  ('forloop_condition -> LBRACE booleanexp RBRACE','forloop_condition',3,'p_bracedexp_condition','sqf_yacc.py',161),
  ('forloop_condition -> identifier','forloop_condition',1,'p_bracedexp_condition','sqf_yacc.py',162),
  ('bracedexp_noscope -> LBRACE code RBRACE','bracedexp_noscope',3,'p_bracedexp_noscope','sqf_yacc.py',172),
  ('assignment -> assignment_code code RBRACE','assignment',3,'p_assignment','sqf_yacc.py',179),
  ('assignment -> definition EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',180),
  ('assignment -> variable EQUAL primaryexp','assignment',3,'p_assignment','sqf_yacc.py',181),
  ('assignment_code -> definition EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',196),
  ('assignment_code -> variable EQUAL LBRACE','assignment_code',3,'p_assignment_code','sqf_yacc.py',197),
  ('arraydefinition -> PRIVATE stringarray','arraydefinition',2,'p_arraydefinition','sqf_yacc.py',206),
  ('definition -> PRIVATE PRIVATE_ID','definition',2,'p_definition','sqf_yacc.py',223),
  ('identifier -> PRIVATE_ID','identifier',1,'p_identifier','sqf_yacc.py',240),
  ('identifier -> GLOBAL_ID','identifier',1,'p_identifier','sqf_yacc.py',241),
  ('variable -> PRIVATE_ID','variable',1,'p_variable','sqf_yacc.py',261),
  ('variable -> GLOBAL_ID','variable',1,'p_variable','sqf_yacc.py',262),
  ('binaryexp -> primaryexp BINARY_FNC primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',269),
  ('binaryexp -> primaryexp comparisonoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',270),
  ('binaryexp -> primaryexp mathoperator primaryexp','binaryexp',3,'p_binaryexp','sqf_yacc.py',271),
  ('primaryexp -> number','primaryexp',1,'p_primaryexp','sqf_yacc.py',277),
  ('primaryexp -> identifier','primaryexp',1,'p_primaryexp','sqf_yacc.py',278),
  ('primaryexp -> helpertype','primaryexp',1,'p_primaryexp','sqf_yacc.py',279),
  ('primaryexp -> unaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',280),
  ('primaryexp -> nularexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',281),
  ('primaryexp -> string','primaryexp',1,'p_primaryexp','sqf_yacc.py',282),
  ('primaryexp -> binaryexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',283),
  ('primaryexp -> bracedexp','primaryexp',1,'p_primaryexp','sqf_yacc.py',284),
  ('primaryexp -> LPAREN binaryexp RPAREN','primaryexp',3,'p_primaryexp','sqf_yacc.py',285),
  ('primaryexp -> array','primaryexp',1,'p_primaryexp','sqf_yacc.py',286),
  ('bracedexp -> LBRACE new_scope code RBRACE','bracedexp',4,'p_bracedexp','sqf_yacc.py',296),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','sqf_yacc.py',303),
  ('array -> LSPAREN RSPAREN','array',2,'p_array','sqf_yacc.py',309),
  ('array -> LSPAREN arrayelement RSPAREN','array',3,'p_array','sqf_yacc.py',310),
  ('arrayelement -> binaryexp','arrayelement',1,'p_arrayelement','sqf_yacc.py',320),
  ('arrayelement -> binaryexp COMMA arrayelement','arrayelement',3,'p_arrayelement','sqf_yacc.py',321),
  ('stringarray -> LSPAREN RSPAREN','stringarray',2,'p_stringarray','sqf_yacc.py',331),
  ('stringarray -> LSPAREN stringarrayelement RSPAREN','stringarray',3,'p_stringarray','sqf_yacc.py',332),
  ('stringarrayelement -> string','stringarrayelement',1,'p_stringarrayelement','sqf_yacc.py',342),
  ('stringarrayelement -> string COMMA stringarrayelement','stringarrayelement',3,'p_stringarrayelement','sqf_yacc.py',343),
  ('nularexp -> NULAR_FNC','nularexp',1,'p_nularexp','sqf_yacc.py',353),
  ('nularexp -> identifier','nularexp',1,'p_nularexp','sqf_yacc.py',354),
  ('unaryexp -> UNARY_FNC primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',361),
  ('unaryexp -> PLUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',362),
  ('unaryexp -> MINUS primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',363),
  ('unaryexp -> NOT primaryexp','unaryexp',2,'p_unaryexp','sqf_yacc.py',364),
  ('unaryexp -> arraydefinition','unaryexp',1,'p_unaryexp','sqf_yacc.py',365),
  ('comparisonoperator -> LT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',371),
  ('comparisonoperator -> GT','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',372),
  ('comparisonoperator -> LTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',373),
  ('comparisonoperator -> GTE','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',374),
  ('comparisonoperator -> EQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',375),
  ('comparisonoperator -> INEQUALITY','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',376),
  ('comparisonoperator -> AND','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',377),
  ('comparisonoperator -> OR','comparisonoperator',1,'p_comparisonoperator','sqf_yacc.py',378),
  ('mathoperator -> PLUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',385),
  ('mathoperator -> MINUS','mathoperator',1,'p_mathoperator','sqf_yacc.py',386),
  ('mathoperator -> TIMES','mathoperator',1,'p_mathoperator','sqf_yacc.py',387),
  ('mathoperator -> DIVIDE','mathoperator',1,'p_mathoperator','sqf_yacc.py',388),
  ('mathoperator -> MOD','mathoperator',1,'p_mathoperator','sqf_yacc.py',389),
  ('mathoperator -> POW','mathoperator',1,'p_mathoperator','sqf_yacc.py',390),
  ('booleanexp -> primaryexp','booleanexp',1,'p_booleanexp','sqf_yacc.py',397),
  ('booleanexp -> primaryexp comparisonoperator booleanexp','booleanexp',3,'p_booleanexp','sqf_yacc.py',398),
  ('booleanexp -> primaryexp comparisonoperator LBRACE booleanexp RBRACE','booleanexp',5,'p_booleanexp','sqf_yacc.py',399),
  ('configaccessor -> GT GT','configaccessor',2,'p_configaccessor','sqf_yacc.py',405),
  ('configaccessor -> DIVIDE','configaccessor',1,'p_configaccessor','sqf_yacc.py',406),
  ('number -> NUMBER_REAL','number',1,'p_number','sqf_yacc.py',413),
  ('number -> NUMBER_EXP','number',1,'p_number','sqf_yacc.py',414),
  ('number -> NUMBER_HEX','number',1,'p_number','sqf_yacc.py',415),
  ('string -> STRING_SINGLE','string',1,'p_string','sqf_yacc.py',422),
  ('string -> STRING_DOUBLE','string',1,'p_string','sqf_yacc.py',423),
  ('empty -> <empty>','empty',0,'p_empty','sqf_yacc.py',430),
]
