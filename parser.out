Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT_MULTI
    COMMENT_SINGLE
    FOREACH
    NEWLINE
    SWITCH

Grammar

Rule 0     S' -> code
Rule 1     code -> empty
Rule 2     code -> statement
Rule 3     code -> statement terminator code
Rule 4     statement -> controlstructure
Rule 5     statement -> assignment
Rule 6     statement -> binaryexp
Rule 7     statement -> binaryexp operator binaryexp
Rule 8     terminator -> SEMI_COLON
Rule 9     terminator -> COMMA
Rule 10    controlstructure -> ifstatement
Rule 11    controlstructure -> whileloop
Rule 12    controlstructure -> forloop
Rule 13    helpertype -> iftype
Rule 14    helpertype -> withtype
Rule 15    helpertype -> whiletype
Rule 16    helpertype -> fortype
Rule 17    iftype -> IF LPAREN binaryexp RPAREN
Rule 18    ifstatement -> iftype THEN bracedexp
Rule 19    ifstatement -> iftype THEN bracedexp ELSE bracedexp
Rule 20    withtype -> WITH NAMESPACE
Rule 21    whiletype -> WHILE LPAREN binaryexp RPAREN
Rule 22    whiletype -> WHILE bracedexp
Rule 23    whileloop -> whiletype DO bracedexp
Rule 24    fortype -> FOR new_scope string FROM primaryexp TO primaryexp
Rule 25    fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
Rule 26    fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
Rule 27    forloop -> fortype DO bracedexp_noscope
Rule 28    bracedexp_noscope -> LBRACE code RBRACE
Rule 29    assignment -> definition EQUAL binaryexp
Rule 30    assignment -> variable EQUAL binaryexp
Rule 31    definition -> PRIVATE PRIVATE_ID
Rule 32    identifier -> PRIVATE_ID
Rule 33    identifier -> GLOBAL_ID
Rule 34    variable -> PRIVATE_ID
Rule 35    variable -> GLOBAL_ID
Rule 36    binaryexp -> binaryexp operator binaryexp
Rule 37    binaryexp -> primaryexp
Rule 38    primaryexp -> number
Rule 39    primaryexp -> identifier
Rule 40    primaryexp -> unaryexp
Rule 41    primaryexp -> nularexp
Rule 42    primaryexp -> string
Rule 43    primaryexp -> bracedexp
Rule 44    primaryexp -> LPAREN binaryexp RPAREN
Rule 45    primaryexp -> array
Rule 46    primaryexp -> helpertype
Rule 47    bracedexp -> LBRACE new_scope code RBRACE
Rule 48    new_scope -> <empty>
Rule 49    array -> LSPAREN RSPAREN
Rule 50    array -> LSPAREN arrayelement RSPAREN
Rule 51    arrayelement -> binaryexp
Rule 52    arrayelement -> binaryexp COMMA arrayelement
Rule 53    nularexp -> operator
Rule 54    unaryexp -> PLUS primaryexp
Rule 55    unaryexp -> MINUS primaryexp
Rule 56    unaryexp -> NOT primaryexp
Rule 57    unaryexp -> identifier primaryexp
Rule 58    unaryexp -> binaryexp identifier
Rule 59    operator -> identifier
Rule 60    operator -> punctuation
Rule 61    punctuation -> PLUS
Rule 62    punctuation -> MINUS
Rule 63    punctuation -> TIMES
Rule 64    punctuation -> DIVIDE
Rule 65    punctuation -> MOD
Rule 66    punctuation -> POW
Rule 67    punctuation -> SELECT
Rule 68    punctuation -> COLON
Rule 69    punctuation -> comparisonoperator
Rule 70    punctuation -> AND
Rule 71    punctuation -> OR
Rule 72    punctuation -> configaccessor
Rule 73    comparisonoperator -> LT
Rule 74    comparisonoperator -> GT
Rule 75    comparisonoperator -> LTE
Rule 76    comparisonoperator -> GTE
Rule 77    comparisonoperator -> EQUALITY
Rule 78    comparisonoperator -> INEQUALITY
Rule 79    configaccessor -> GT GT
Rule 80    configaccessor -> DIVIDE
Rule 81    number -> NUMBER_REAL
Rule 82    number -> NUMBER_EXP
Rule 83    number -> NUMBER_HEX
Rule 84    string -> STRING_SINGLE
Rule 85    string -> STRING_DOUBLE
Rule 86    empty -> <empty>

Terminals, with rules where they appear

AND                  : 70
BOOL                 : 
COLON                : 68
COMMA                : 9 26 26 52
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DIVIDE               : 64 80
DO                   : 23 27
ELSE                 : 19
EQUAL                : 29 30
EQUALITY             : 77
FOR                  : 24 25 26
FOREACH              : 
FROM                 : 24 25
GLOBAL_ID            : 33 35
GT                   : 74 79 79
GTE                  : 76
IF                   : 17
INEQUALITY           : 78
LBRACE               : 28 47
LPAREN               : 17 21 44
LSPAREN              : 26 49 50
LT                   : 73
LTE                  : 75
MINUS                : 55 62
MOD                  : 65
NAMESPACE            : 20
NEWLINE              : 
NOT                  : 56
NUMBER_EXP           : 82
NUMBER_HEX           : 83
NUMBER_REAL          : 81
OR                   : 71
PLUS                 : 54 61
POW                  : 66
PRIVATE              : 31
PRIVATE_ID           : 31 32 34
RBRACE               : 28 47
RPAREN               : 17 21 44
RSPAREN              : 26 49 50
SELECT               : 67
SEMI_COLON           : 8
STEP                 : 25
STRING_DOUBLE        : 85
STRING_SINGLE        : 84
SWITCH               : 
THEN                 : 18 19
TIMES                : 63
TO                   : 24 25
WHILE                : 21 22
WITH                 : 20
error                : 

Nonterminals, with rules where they appear

array                : 45
arrayelement         : 50 52
assignment           : 5
binaryexp            : 6 7 7 17 21 29 30 36 36 44 51 52 58
bracedexp            : 18 19 19 22 23 43
bracedexp_noscope    : 26 26 26 27
code                 : 3 28 47 0
comparisonoperator   : 69
configaccessor       : 72
controlstructure     : 4
definition           : 29
empty                : 1
forloop              : 12
fortype              : 16 27
helpertype           : 46
identifier           : 39 57 58 59
ifstatement          : 10
iftype               : 13 18 19
new_scope            : 24 25 26 47
nularexp             : 41
number               : 38
operator             : 7 36 53
primaryexp           : 24 24 25 25 25 37 54 55 56 57
punctuation          : 60
statement            : 2 3
string               : 24 25 42
terminator           : 3
unaryexp             : 40
variable             : 30
whileloop            : 11
whiletype            : 15 23
withtype             : 14

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (86) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . binaryexp operator binaryexp
    (10) controlstructure -> . ifstatement
    (11) controlstructure -> . whileloop
    (12) controlstructure -> . forloop
    (29) assignment -> . definition EQUAL binaryexp
    (30) assignment -> . variable EQUAL binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (18) ifstatement -> . iftype THEN bracedexp
    (19) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (23) whileloop -> . whiletype DO bracedexp
    (27) forloop -> . fortype DO bracedexp_noscope
    (31) definition -> . PRIVATE PRIVATE_ID
    (34) variable -> . PRIVATE_ID
    (35) variable -> . GLOBAL_ID
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (20) withtype -> . WITH NAMESPACE
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    $end            reduce using rule 86 (empty -> .)
    PRIVATE         shift and go to state 18
    PRIVATE_ID      shift and go to state 19
    GLOBAL_ID       shift and go to state 20
    LPAREN          shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    WITH            shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    code                           shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    operator                       shift and go to state 7
    ifstatement                    shift and go to state 8
    whileloop                      shift and go to state 9
    forloop                        shift and go to state 10
    definition                     shift and go to state 11
    variable                       shift and go to state 12
    primaryexp                     shift and go to state 13
    iftype                         shift and go to state 14
    bracedexp                      shift and go to state 15
    whiletype                      shift and go to state 16
    fortype                        shift and go to state 17
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    withtype                       shift and go to state 42
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 1

    (0) S' -> code .



state 2

    (1) code -> empty .

    $end            reduce using rule 1 (code -> empty .)
    RBRACE          reduce using rule 1 (code -> empty .)


state 3

    (2) code -> statement .
    (3) code -> statement . terminator code
    (8) terminator -> . SEMI_COLON
    (9) terminator -> . COMMA

    $end            reduce using rule 2 (code -> statement .)
    RBRACE          reduce using rule 2 (code -> statement .)
    SEMI_COLON      shift and go to state 62
    COMMA           shift and go to state 63

    terminator                     shift and go to state 61

state 4

    (4) statement -> controlstructure .

    SEMI_COLON      reduce using rule 4 (statement -> controlstructure .)
    COMMA           reduce using rule 4 (statement -> controlstructure .)
    $end            reduce using rule 4 (statement -> controlstructure .)
    RBRACE          reduce using rule 4 (statement -> controlstructure .)


state 5

    (5) statement -> assignment .

    SEMI_COLON      reduce using rule 5 (statement -> assignment .)
    COMMA           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> binaryexp .
    (7) statement -> binaryexp . operator binaryexp
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 6 (statement -> binaryexp .)
    COMMA           reduce using rule 6 (statement -> binaryexp .)
    $end            reduce using rule 6 (statement -> binaryexp .)
    RBRACE          reduce using rule 6 (statement -> binaryexp .)
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 64
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 7

    (53) nularexp -> operator .

    PRIVATE_ID      reduce using rule 53 (nularexp -> operator .)
    GLOBAL_ID       reduce using rule 53 (nularexp -> operator .)
    PLUS            reduce using rule 53 (nularexp -> operator .)
    MINUS           reduce using rule 53 (nularexp -> operator .)
    TIMES           reduce using rule 53 (nularexp -> operator .)
    DIVIDE          reduce using rule 53 (nularexp -> operator .)
    MOD             reduce using rule 53 (nularexp -> operator .)
    POW             reduce using rule 53 (nularexp -> operator .)
    SELECT          reduce using rule 53 (nularexp -> operator .)
    COLON           reduce using rule 53 (nularexp -> operator .)
    AND             reduce using rule 53 (nularexp -> operator .)
    OR              reduce using rule 53 (nularexp -> operator .)
    LT              reduce using rule 53 (nularexp -> operator .)
    GT              reduce using rule 53 (nularexp -> operator .)
    LTE             reduce using rule 53 (nularexp -> operator .)
    GTE             reduce using rule 53 (nularexp -> operator .)
    EQUALITY        reduce using rule 53 (nularexp -> operator .)
    INEQUALITY      reduce using rule 53 (nularexp -> operator .)
    SEMI_COLON      reduce using rule 53 (nularexp -> operator .)
    COMMA           reduce using rule 53 (nularexp -> operator .)
    $end            reduce using rule 53 (nularexp -> operator .)
    RPAREN          reduce using rule 53 (nularexp -> operator .)
    RSPAREN         reduce using rule 53 (nularexp -> operator .)
    RBRACE          reduce using rule 53 (nularexp -> operator .)
    TO              reduce using rule 53 (nularexp -> operator .)
    STEP            reduce using rule 53 (nularexp -> operator .)
    DO              reduce using rule 53 (nularexp -> operator .)


state 8

    (10) controlstructure -> ifstatement .

    SEMI_COLON      reduce using rule 10 (controlstructure -> ifstatement .)
    COMMA           reduce using rule 10 (controlstructure -> ifstatement .)
    $end            reduce using rule 10 (controlstructure -> ifstatement .)
    RBRACE          reduce using rule 10 (controlstructure -> ifstatement .)


state 9

    (11) controlstructure -> whileloop .

    SEMI_COLON      reduce using rule 11 (controlstructure -> whileloop .)
    COMMA           reduce using rule 11 (controlstructure -> whileloop .)
    $end            reduce using rule 11 (controlstructure -> whileloop .)
    RBRACE          reduce using rule 11 (controlstructure -> whileloop .)


state 10

    (12) controlstructure -> forloop .

    SEMI_COLON      reduce using rule 12 (controlstructure -> forloop .)
    COMMA           reduce using rule 12 (controlstructure -> forloop .)
    $end            reduce using rule 12 (controlstructure -> forloop .)
    RBRACE          reduce using rule 12 (controlstructure -> forloop .)


state 11

    (29) assignment -> definition . EQUAL binaryexp

    EQUAL           shift and go to state 70


state 12

    (30) assignment -> variable . EQUAL binaryexp

    EQUAL           shift and go to state 71


state 13

    (37) binaryexp -> primaryexp .

    PRIVATE_ID      reduce using rule 37 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 37 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 37 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 37 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 37 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 37 (binaryexp -> primaryexp .)
    MOD             reduce using rule 37 (binaryexp -> primaryexp .)
    POW             reduce using rule 37 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 37 (binaryexp -> primaryexp .)
    COLON           reduce using rule 37 (binaryexp -> primaryexp .)
    AND             reduce using rule 37 (binaryexp -> primaryexp .)
    OR              reduce using rule 37 (binaryexp -> primaryexp .)
    LT              reduce using rule 37 (binaryexp -> primaryexp .)
    GT              reduce using rule 37 (binaryexp -> primaryexp .)
    LTE             reduce using rule 37 (binaryexp -> primaryexp .)
    GTE             reduce using rule 37 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 37 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 37 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 37 (binaryexp -> primaryexp .)
    COMMA           reduce using rule 37 (binaryexp -> primaryexp .)
    $end            reduce using rule 37 (binaryexp -> primaryexp .)
    RPAREN          reduce using rule 37 (binaryexp -> primaryexp .)
    RSPAREN         reduce using rule 37 (binaryexp -> primaryexp .)
    RBRACE          reduce using rule 37 (binaryexp -> primaryexp .)


state 14

    (18) ifstatement -> iftype . THEN bracedexp
    (19) ifstatement -> iftype . THEN bracedexp ELSE bracedexp
    (13) helpertype -> iftype .

    THEN            shift and go to state 72
    PRIVATE_ID      reduce using rule 13 (helpertype -> iftype .)
    GLOBAL_ID       reduce using rule 13 (helpertype -> iftype .)
    PLUS            reduce using rule 13 (helpertype -> iftype .)
    MINUS           reduce using rule 13 (helpertype -> iftype .)
    TIMES           reduce using rule 13 (helpertype -> iftype .)
    DIVIDE          reduce using rule 13 (helpertype -> iftype .)
    MOD             reduce using rule 13 (helpertype -> iftype .)
    POW             reduce using rule 13 (helpertype -> iftype .)
    SELECT          reduce using rule 13 (helpertype -> iftype .)
    COLON           reduce using rule 13 (helpertype -> iftype .)
    AND             reduce using rule 13 (helpertype -> iftype .)
    OR              reduce using rule 13 (helpertype -> iftype .)
    LT              reduce using rule 13 (helpertype -> iftype .)
    GT              reduce using rule 13 (helpertype -> iftype .)
    LTE             reduce using rule 13 (helpertype -> iftype .)
    GTE             reduce using rule 13 (helpertype -> iftype .)
    EQUALITY        reduce using rule 13 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 13 (helpertype -> iftype .)
    SEMI_COLON      reduce using rule 13 (helpertype -> iftype .)
    COMMA           reduce using rule 13 (helpertype -> iftype .)
    $end            reduce using rule 13 (helpertype -> iftype .)
    RBRACE          reduce using rule 13 (helpertype -> iftype .)


state 15

    (43) primaryexp -> bracedexp .

    PRIVATE_ID      reduce using rule 43 (primaryexp -> bracedexp .)
    GLOBAL_ID       reduce using rule 43 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 43 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 43 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 43 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 43 (primaryexp -> bracedexp .)
    MOD             reduce using rule 43 (primaryexp -> bracedexp .)
    POW             reduce using rule 43 (primaryexp -> bracedexp .)
    SELECT          reduce using rule 43 (primaryexp -> bracedexp .)
    COLON           reduce using rule 43 (primaryexp -> bracedexp .)
    AND             reduce using rule 43 (primaryexp -> bracedexp .)
    OR              reduce using rule 43 (primaryexp -> bracedexp .)
    LT              reduce using rule 43 (primaryexp -> bracedexp .)
    GT              reduce using rule 43 (primaryexp -> bracedexp .)
    LTE             reduce using rule 43 (primaryexp -> bracedexp .)
    GTE             reduce using rule 43 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 43 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 43 (primaryexp -> bracedexp .)
    SEMI_COLON      reduce using rule 43 (primaryexp -> bracedexp .)
    COMMA           reduce using rule 43 (primaryexp -> bracedexp .)
    $end            reduce using rule 43 (primaryexp -> bracedexp .)
    RPAREN          reduce using rule 43 (primaryexp -> bracedexp .)
    RSPAREN         reduce using rule 43 (primaryexp -> bracedexp .)
    RBRACE          reduce using rule 43 (primaryexp -> bracedexp .)
    TO              reduce using rule 43 (primaryexp -> bracedexp .)
    STEP            reduce using rule 43 (primaryexp -> bracedexp .)
    DO              reduce using rule 43 (primaryexp -> bracedexp .)


state 16

    (23) whileloop -> whiletype . DO bracedexp
    (15) helpertype -> whiletype .

    DO              shift and go to state 73
    PRIVATE_ID      reduce using rule 15 (helpertype -> whiletype .)
    GLOBAL_ID       reduce using rule 15 (helpertype -> whiletype .)
    PLUS            reduce using rule 15 (helpertype -> whiletype .)
    MINUS           reduce using rule 15 (helpertype -> whiletype .)
    TIMES           reduce using rule 15 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 15 (helpertype -> whiletype .)
    MOD             reduce using rule 15 (helpertype -> whiletype .)
    POW             reduce using rule 15 (helpertype -> whiletype .)
    SELECT          reduce using rule 15 (helpertype -> whiletype .)
    COLON           reduce using rule 15 (helpertype -> whiletype .)
    AND             reduce using rule 15 (helpertype -> whiletype .)
    OR              reduce using rule 15 (helpertype -> whiletype .)
    LT              reduce using rule 15 (helpertype -> whiletype .)
    GT              reduce using rule 15 (helpertype -> whiletype .)
    LTE             reduce using rule 15 (helpertype -> whiletype .)
    GTE             reduce using rule 15 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 15 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 15 (helpertype -> whiletype .)
    SEMI_COLON      reduce using rule 15 (helpertype -> whiletype .)
    COMMA           reduce using rule 15 (helpertype -> whiletype .)
    $end            reduce using rule 15 (helpertype -> whiletype .)
    RBRACE          reduce using rule 15 (helpertype -> whiletype .)


state 17

    (27) forloop -> fortype . DO bracedexp_noscope
    (16) helpertype -> fortype .

    DO              shift and go to state 74
    PRIVATE_ID      reduce using rule 16 (helpertype -> fortype .)
    GLOBAL_ID       reduce using rule 16 (helpertype -> fortype .)
    PLUS            reduce using rule 16 (helpertype -> fortype .)
    MINUS           reduce using rule 16 (helpertype -> fortype .)
    TIMES           reduce using rule 16 (helpertype -> fortype .)
    DIVIDE          reduce using rule 16 (helpertype -> fortype .)
    MOD             reduce using rule 16 (helpertype -> fortype .)
    POW             reduce using rule 16 (helpertype -> fortype .)
    SELECT          reduce using rule 16 (helpertype -> fortype .)
    COLON           reduce using rule 16 (helpertype -> fortype .)
    AND             reduce using rule 16 (helpertype -> fortype .)
    OR              reduce using rule 16 (helpertype -> fortype .)
    LT              reduce using rule 16 (helpertype -> fortype .)
    GT              reduce using rule 16 (helpertype -> fortype .)
    LTE             reduce using rule 16 (helpertype -> fortype .)
    GTE             reduce using rule 16 (helpertype -> fortype .)
    EQUALITY        reduce using rule 16 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 16 (helpertype -> fortype .)
    SEMI_COLON      reduce using rule 16 (helpertype -> fortype .)
    COMMA           reduce using rule 16 (helpertype -> fortype .)
    $end            reduce using rule 16 (helpertype -> fortype .)
    RBRACE          reduce using rule 16 (helpertype -> fortype .)


state 18

    (31) definition -> PRIVATE . PRIVATE_ID

    PRIVATE_ID      shift and go to state 75


state 19

    (34) variable -> PRIVATE_ID .
    (32) identifier -> PRIVATE_ID .

    EQUAL           reduce using rule 34 (variable -> PRIVATE_ID .)
    LPAREN          reduce using rule 32 (identifier -> PRIVATE_ID .)
    NUMBER_REAL     reduce using rule 32 (identifier -> PRIVATE_ID .)
    NUMBER_EXP      reduce using rule 32 (identifier -> PRIVATE_ID .)
    NUMBER_HEX      reduce using rule 32 (identifier -> PRIVATE_ID .)
    PRIVATE_ID      reduce using rule 32 (identifier -> PRIVATE_ID .)
    GLOBAL_ID       reduce using rule 32 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 32 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 32 (identifier -> PRIVATE_ID .)
    NOT             reduce using rule 32 (identifier -> PRIVATE_ID .)
    STRING_SINGLE   reduce using rule 32 (identifier -> PRIVATE_ID .)
    STRING_DOUBLE   reduce using rule 32 (identifier -> PRIVATE_ID .)
    LBRACE          reduce using rule 32 (identifier -> PRIVATE_ID .)
    LSPAREN         reduce using rule 32 (identifier -> PRIVATE_ID .)
    IF              reduce using rule 32 (identifier -> PRIVATE_ID .)
    WITH            reduce using rule 32 (identifier -> PRIVATE_ID .)
    WHILE           reduce using rule 32 (identifier -> PRIVATE_ID .)
    FOR             reduce using rule 32 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 32 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 32 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 32 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 32 (identifier -> PRIVATE_ID .)
    SELECT          reduce using rule 32 (identifier -> PRIVATE_ID .)
    COLON           reduce using rule 32 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 32 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 32 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 32 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 32 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 32 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 32 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 32 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 32 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 32 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 32 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 32 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 32 (identifier -> PRIVATE_ID .)


state 20

    (35) variable -> GLOBAL_ID .
    (33) identifier -> GLOBAL_ID .

    EQUAL           reduce using rule 35 (variable -> GLOBAL_ID .)
    LPAREN          reduce using rule 33 (identifier -> GLOBAL_ID .)
    NUMBER_REAL     reduce using rule 33 (identifier -> GLOBAL_ID .)
    NUMBER_EXP      reduce using rule 33 (identifier -> GLOBAL_ID .)
    NUMBER_HEX      reduce using rule 33 (identifier -> GLOBAL_ID .)
    PRIVATE_ID      reduce using rule 33 (identifier -> GLOBAL_ID .)
    GLOBAL_ID       reduce using rule 33 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 33 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 33 (identifier -> GLOBAL_ID .)
    NOT             reduce using rule 33 (identifier -> GLOBAL_ID .)
    STRING_SINGLE   reduce using rule 33 (identifier -> GLOBAL_ID .)
    STRING_DOUBLE   reduce using rule 33 (identifier -> GLOBAL_ID .)
    LBRACE          reduce using rule 33 (identifier -> GLOBAL_ID .)
    LSPAREN         reduce using rule 33 (identifier -> GLOBAL_ID .)
    IF              reduce using rule 33 (identifier -> GLOBAL_ID .)
    WITH            reduce using rule 33 (identifier -> GLOBAL_ID .)
    WHILE           reduce using rule 33 (identifier -> GLOBAL_ID .)
    FOR             reduce using rule 33 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 33 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 33 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 33 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 33 (identifier -> GLOBAL_ID .)
    SELECT          reduce using rule 33 (identifier -> GLOBAL_ID .)
    COLON           reduce using rule 33 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 33 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 33 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 33 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 33 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 33 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 33 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 33 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 33 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 33 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 33 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 33 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 33 (identifier -> GLOBAL_ID .)


state 21

    (38) primaryexp -> number .

    PRIVATE_ID      reduce using rule 38 (primaryexp -> number .)
    GLOBAL_ID       reduce using rule 38 (primaryexp -> number .)
    PLUS            reduce using rule 38 (primaryexp -> number .)
    MINUS           reduce using rule 38 (primaryexp -> number .)
    TIMES           reduce using rule 38 (primaryexp -> number .)
    DIVIDE          reduce using rule 38 (primaryexp -> number .)
    MOD             reduce using rule 38 (primaryexp -> number .)
    POW             reduce using rule 38 (primaryexp -> number .)
    SELECT          reduce using rule 38 (primaryexp -> number .)
    COLON           reduce using rule 38 (primaryexp -> number .)
    AND             reduce using rule 38 (primaryexp -> number .)
    OR              reduce using rule 38 (primaryexp -> number .)
    LT              reduce using rule 38 (primaryexp -> number .)
    GT              reduce using rule 38 (primaryexp -> number .)
    LTE             reduce using rule 38 (primaryexp -> number .)
    GTE             reduce using rule 38 (primaryexp -> number .)
    EQUALITY        reduce using rule 38 (primaryexp -> number .)
    INEQUALITY      reduce using rule 38 (primaryexp -> number .)
    SEMI_COLON      reduce using rule 38 (primaryexp -> number .)
    COMMA           reduce using rule 38 (primaryexp -> number .)
    $end            reduce using rule 38 (primaryexp -> number .)
    RPAREN          reduce using rule 38 (primaryexp -> number .)
    RSPAREN         reduce using rule 38 (primaryexp -> number .)
    RBRACE          reduce using rule 38 (primaryexp -> number .)
    TO              reduce using rule 38 (primaryexp -> number .)
    STEP            reduce using rule 38 (primaryexp -> number .)
    DO              reduce using rule 38 (primaryexp -> number .)


state 22

    (39) primaryexp -> identifier .
    (57) unaryexp -> identifier . primaryexp
    (59) operator -> identifier .
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SELECT resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for STEP resolved using rule 39 (primaryexp -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 39 (primaryexp -> identifier .)
    PRIVATE_ID      reduce using rule 39 (primaryexp -> identifier .)
    GLOBAL_ID       reduce using rule 39 (primaryexp -> identifier .)
    PLUS            reduce using rule 39 (primaryexp -> identifier .)
    MINUS           reduce using rule 39 (primaryexp -> identifier .)
    TIMES           reduce using rule 39 (primaryexp -> identifier .)
    DIVIDE          reduce using rule 39 (primaryexp -> identifier .)
    MOD             reduce using rule 39 (primaryexp -> identifier .)
    POW             reduce using rule 39 (primaryexp -> identifier .)
    SELECT          reduce using rule 39 (primaryexp -> identifier .)
    COLON           reduce using rule 39 (primaryexp -> identifier .)
    AND             reduce using rule 39 (primaryexp -> identifier .)
    OR              reduce using rule 39 (primaryexp -> identifier .)
    LT              reduce using rule 39 (primaryexp -> identifier .)
    GT              reduce using rule 39 (primaryexp -> identifier .)
    LTE             reduce using rule 39 (primaryexp -> identifier .)
    GTE             reduce using rule 39 (primaryexp -> identifier .)
    EQUALITY        reduce using rule 39 (primaryexp -> identifier .)
    INEQUALITY      reduce using rule 39 (primaryexp -> identifier .)
    SEMI_COLON      reduce using rule 39 (primaryexp -> identifier .)
    COMMA           reduce using rule 39 (primaryexp -> identifier .)
    $end            reduce using rule 39 (primaryexp -> identifier .)
    RPAREN          reduce using rule 39 (primaryexp -> identifier .)
    RSPAREN         reduce using rule 39 (primaryexp -> identifier .)
    RBRACE          reduce using rule 39 (primaryexp -> identifier .)
    TO              reduce using rule 39 (primaryexp -> identifier .)
    STEP            reduce using rule 39 (primaryexp -> identifier .)
    DO              reduce using rule 39 (primaryexp -> identifier .)
    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31

  ! PRIVATE_ID      [ reduce using rule 59 (operator -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 59 (operator -> identifier .) ]
  ! PLUS            [ reduce using rule 59 (operator -> identifier .) ]
  ! MINUS           [ reduce using rule 59 (operator -> identifier .) ]
  ! TIMES           [ reduce using rule 59 (operator -> identifier .) ]
  ! DIVIDE          [ reduce using rule 59 (operator -> identifier .) ]
  ! MOD             [ reduce using rule 59 (operator -> identifier .) ]
  ! POW             [ reduce using rule 59 (operator -> identifier .) ]
  ! SELECT          [ reduce using rule 59 (operator -> identifier .) ]
  ! COLON           [ reduce using rule 59 (operator -> identifier .) ]
  ! AND             [ reduce using rule 59 (operator -> identifier .) ]
  ! OR              [ reduce using rule 59 (operator -> identifier .) ]
  ! LT              [ reduce using rule 59 (operator -> identifier .) ]
  ! GT              [ reduce using rule 59 (operator -> identifier .) ]
  ! LTE             [ reduce using rule 59 (operator -> identifier .) ]
  ! GTE             [ reduce using rule 59 (operator -> identifier .) ]
  ! EQUALITY        [ reduce using rule 59 (operator -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 59 (operator -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 59 (operator -> identifier .) ]
  ! COMMA           [ reduce using rule 59 (operator -> identifier .) ]
  ! $end            [ reduce using rule 59 (operator -> identifier .) ]
  ! RPAREN          [ reduce using rule 59 (operator -> identifier .) ]
  ! RSPAREN         [ reduce using rule 59 (operator -> identifier .) ]
  ! RBRACE          [ reduce using rule 59 (operator -> identifier .) ]
  ! TO              [ reduce using rule 59 (operator -> identifier .) ]
  ! STEP            [ reduce using rule 59 (operator -> identifier .) ]
  ! DO              [ reduce using rule 59 (operator -> identifier .) ]
  ! PRIVATE_ID      [ shift and go to state 66 ]
  ! GLOBAL_ID       [ shift and go to state 67 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 47 ]
  ! POW             [ shift and go to state 48 ]
  ! SELECT          [ shift and go to state 49 ]
  ! COLON           [ shift and go to state 50 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! GTE             [ shift and go to state 58 ]
  ! EQUALITY        [ shift and go to state 59 ]
  ! INEQUALITY      [ shift and go to state 60 ]

    identifier                     shift and go to state 22
    primaryexp                     shift and go to state 76
    number                         shift and go to state 21
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 23

    (40) primaryexp -> unaryexp .

    PRIVATE_ID      reduce using rule 40 (primaryexp -> unaryexp .)
    GLOBAL_ID       reduce using rule 40 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 40 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 40 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 40 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 40 (primaryexp -> unaryexp .)
    MOD             reduce using rule 40 (primaryexp -> unaryexp .)
    POW             reduce using rule 40 (primaryexp -> unaryexp .)
    SELECT          reduce using rule 40 (primaryexp -> unaryexp .)
    COLON           reduce using rule 40 (primaryexp -> unaryexp .)
    AND             reduce using rule 40 (primaryexp -> unaryexp .)
    OR              reduce using rule 40 (primaryexp -> unaryexp .)
    LT              reduce using rule 40 (primaryexp -> unaryexp .)
    GT              reduce using rule 40 (primaryexp -> unaryexp .)
    LTE             reduce using rule 40 (primaryexp -> unaryexp .)
    GTE             reduce using rule 40 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 40 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 40 (primaryexp -> unaryexp .)
    SEMI_COLON      reduce using rule 40 (primaryexp -> unaryexp .)
    COMMA           reduce using rule 40 (primaryexp -> unaryexp .)
    $end            reduce using rule 40 (primaryexp -> unaryexp .)
    RPAREN          reduce using rule 40 (primaryexp -> unaryexp .)
    RSPAREN         reduce using rule 40 (primaryexp -> unaryexp .)
    RBRACE          reduce using rule 40 (primaryexp -> unaryexp .)
    TO              reduce using rule 40 (primaryexp -> unaryexp .)
    STEP            reduce using rule 40 (primaryexp -> unaryexp .)
    DO              reduce using rule 40 (primaryexp -> unaryexp .)


state 24

    (41) primaryexp -> nularexp .

    PRIVATE_ID      reduce using rule 41 (primaryexp -> nularexp .)
    GLOBAL_ID       reduce using rule 41 (primaryexp -> nularexp .)
    PLUS            reduce using rule 41 (primaryexp -> nularexp .)
    MINUS           reduce using rule 41 (primaryexp -> nularexp .)
    TIMES           reduce using rule 41 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 41 (primaryexp -> nularexp .)
    MOD             reduce using rule 41 (primaryexp -> nularexp .)
    POW             reduce using rule 41 (primaryexp -> nularexp .)
    SELECT          reduce using rule 41 (primaryexp -> nularexp .)
    COLON           reduce using rule 41 (primaryexp -> nularexp .)
    AND             reduce using rule 41 (primaryexp -> nularexp .)
    OR              reduce using rule 41 (primaryexp -> nularexp .)
    LT              reduce using rule 41 (primaryexp -> nularexp .)
    GT              reduce using rule 41 (primaryexp -> nularexp .)
    LTE             reduce using rule 41 (primaryexp -> nularexp .)
    GTE             reduce using rule 41 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 41 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 41 (primaryexp -> nularexp .)
    SEMI_COLON      reduce using rule 41 (primaryexp -> nularexp .)
    COMMA           reduce using rule 41 (primaryexp -> nularexp .)
    $end            reduce using rule 41 (primaryexp -> nularexp .)
    RPAREN          reduce using rule 41 (primaryexp -> nularexp .)
    RSPAREN         reduce using rule 41 (primaryexp -> nularexp .)
    RBRACE          reduce using rule 41 (primaryexp -> nularexp .)
    TO              reduce using rule 41 (primaryexp -> nularexp .)
    STEP            reduce using rule 41 (primaryexp -> nularexp .)
    DO              reduce using rule 41 (primaryexp -> nularexp .)


state 25

    (42) primaryexp -> string .

    PRIVATE_ID      reduce using rule 42 (primaryexp -> string .)
    GLOBAL_ID       reduce using rule 42 (primaryexp -> string .)
    PLUS            reduce using rule 42 (primaryexp -> string .)
    MINUS           reduce using rule 42 (primaryexp -> string .)
    TIMES           reduce using rule 42 (primaryexp -> string .)
    DIVIDE          reduce using rule 42 (primaryexp -> string .)
    MOD             reduce using rule 42 (primaryexp -> string .)
    POW             reduce using rule 42 (primaryexp -> string .)
    SELECT          reduce using rule 42 (primaryexp -> string .)
    COLON           reduce using rule 42 (primaryexp -> string .)
    AND             reduce using rule 42 (primaryexp -> string .)
    OR              reduce using rule 42 (primaryexp -> string .)
    LT              reduce using rule 42 (primaryexp -> string .)
    GT              reduce using rule 42 (primaryexp -> string .)
    LTE             reduce using rule 42 (primaryexp -> string .)
    GTE             reduce using rule 42 (primaryexp -> string .)
    EQUALITY        reduce using rule 42 (primaryexp -> string .)
    INEQUALITY      reduce using rule 42 (primaryexp -> string .)
    SEMI_COLON      reduce using rule 42 (primaryexp -> string .)
    COMMA           reduce using rule 42 (primaryexp -> string .)
    $end            reduce using rule 42 (primaryexp -> string .)
    RPAREN          reduce using rule 42 (primaryexp -> string .)
    RSPAREN         reduce using rule 42 (primaryexp -> string .)
    RBRACE          reduce using rule 42 (primaryexp -> string .)
    TO              reduce using rule 42 (primaryexp -> string .)
    STEP            reduce using rule 42 (primaryexp -> string .)
    DO              reduce using rule 42 (primaryexp -> string .)


state 26

    (44) primaryexp -> LPAREN . binaryexp RPAREN
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 81
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 27

    (45) primaryexp -> array .

    PRIVATE_ID      reduce using rule 45 (primaryexp -> array .)
    GLOBAL_ID       reduce using rule 45 (primaryexp -> array .)
    PLUS            reduce using rule 45 (primaryexp -> array .)
    MINUS           reduce using rule 45 (primaryexp -> array .)
    TIMES           reduce using rule 45 (primaryexp -> array .)
    DIVIDE          reduce using rule 45 (primaryexp -> array .)
    MOD             reduce using rule 45 (primaryexp -> array .)
    POW             reduce using rule 45 (primaryexp -> array .)
    SELECT          reduce using rule 45 (primaryexp -> array .)
    COLON           reduce using rule 45 (primaryexp -> array .)
    AND             reduce using rule 45 (primaryexp -> array .)
    OR              reduce using rule 45 (primaryexp -> array .)
    LT              reduce using rule 45 (primaryexp -> array .)
    GT              reduce using rule 45 (primaryexp -> array .)
    LTE             reduce using rule 45 (primaryexp -> array .)
    GTE             reduce using rule 45 (primaryexp -> array .)
    EQUALITY        reduce using rule 45 (primaryexp -> array .)
    INEQUALITY      reduce using rule 45 (primaryexp -> array .)
    SEMI_COLON      reduce using rule 45 (primaryexp -> array .)
    COMMA           reduce using rule 45 (primaryexp -> array .)
    $end            reduce using rule 45 (primaryexp -> array .)
    RPAREN          reduce using rule 45 (primaryexp -> array .)
    RSPAREN         reduce using rule 45 (primaryexp -> array .)
    RBRACE          reduce using rule 45 (primaryexp -> array .)
    TO              reduce using rule 45 (primaryexp -> array .)
    STEP            reduce using rule 45 (primaryexp -> array .)
    DO              reduce using rule 45 (primaryexp -> array .)


state 28

    (46) primaryexp -> helpertype .

    PRIVATE_ID      reduce using rule 46 (primaryexp -> helpertype .)
    GLOBAL_ID       reduce using rule 46 (primaryexp -> helpertype .)
    PLUS            reduce using rule 46 (primaryexp -> helpertype .)
    MINUS           reduce using rule 46 (primaryexp -> helpertype .)
    TIMES           reduce using rule 46 (primaryexp -> helpertype .)
    DIVIDE          reduce using rule 46 (primaryexp -> helpertype .)
    MOD             reduce using rule 46 (primaryexp -> helpertype .)
    POW             reduce using rule 46 (primaryexp -> helpertype .)
    SELECT          reduce using rule 46 (primaryexp -> helpertype .)
    COLON           reduce using rule 46 (primaryexp -> helpertype .)
    AND             reduce using rule 46 (primaryexp -> helpertype .)
    OR              reduce using rule 46 (primaryexp -> helpertype .)
    LT              reduce using rule 46 (primaryexp -> helpertype .)
    GT              reduce using rule 46 (primaryexp -> helpertype .)
    LTE             reduce using rule 46 (primaryexp -> helpertype .)
    GTE             reduce using rule 46 (primaryexp -> helpertype .)
    EQUALITY        reduce using rule 46 (primaryexp -> helpertype .)
    INEQUALITY      reduce using rule 46 (primaryexp -> helpertype .)
    SEMI_COLON      reduce using rule 46 (primaryexp -> helpertype .)
    COMMA           reduce using rule 46 (primaryexp -> helpertype .)
    $end            reduce using rule 46 (primaryexp -> helpertype .)
    RPAREN          reduce using rule 46 (primaryexp -> helpertype .)
    RSPAREN         reduce using rule 46 (primaryexp -> helpertype .)
    RBRACE          reduce using rule 46 (primaryexp -> helpertype .)
    TO              reduce using rule 46 (primaryexp -> helpertype .)
    STEP            reduce using rule 46 (primaryexp -> helpertype .)
    DO              reduce using rule 46 (primaryexp -> helpertype .)


state 29

    (17) iftype -> IF . LPAREN binaryexp RPAREN

    LPAREN          shift and go to state 82


state 30

    (21) whiletype -> WHILE . LPAREN binaryexp RPAREN
    (22) whiletype -> WHILE . bracedexp
    (47) bracedexp -> . LBRACE new_scope code RBRACE

    LPAREN          shift and go to state 83
    LBRACE          shift and go to state 41

    bracedexp                      shift and go to state 84

state 31

    (24) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> FOR . new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> FOR . new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (48) new_scope -> .

    LSPAREN         reduce using rule 48 (new_scope -> .)
    STRING_SINGLE   reduce using rule 48 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 48 (new_scope -> .)

    new_scope                      shift and go to state 85

state 32

    (49) array -> LSPAREN . RSPAREN
    (50) array -> LSPAREN . arrayelement RSPAREN
    (51) arrayelement -> . binaryexp
    (52) arrayelement -> . binaryexp COMMA arrayelement
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RSPAREN         shift and go to state 86
    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    arrayelement                   shift and go to state 87
    binaryexp                      shift and go to state 88
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 33

    (81) number -> NUMBER_REAL .

    PRIVATE_ID      reduce using rule 81 (number -> NUMBER_REAL .)
    GLOBAL_ID       reduce using rule 81 (number -> NUMBER_REAL .)
    PLUS            reduce using rule 81 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 81 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 81 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 81 (number -> NUMBER_REAL .)
    MOD             reduce using rule 81 (number -> NUMBER_REAL .)
    POW             reduce using rule 81 (number -> NUMBER_REAL .)
    SELECT          reduce using rule 81 (number -> NUMBER_REAL .)
    COLON           reduce using rule 81 (number -> NUMBER_REAL .)
    AND             reduce using rule 81 (number -> NUMBER_REAL .)
    OR              reduce using rule 81 (number -> NUMBER_REAL .)
    LT              reduce using rule 81 (number -> NUMBER_REAL .)
    GT              reduce using rule 81 (number -> NUMBER_REAL .)
    LTE             reduce using rule 81 (number -> NUMBER_REAL .)
    GTE             reduce using rule 81 (number -> NUMBER_REAL .)
    EQUALITY        reduce using rule 81 (number -> NUMBER_REAL .)
    INEQUALITY      reduce using rule 81 (number -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 81 (number -> NUMBER_REAL .)
    COMMA           reduce using rule 81 (number -> NUMBER_REAL .)
    $end            reduce using rule 81 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 81 (number -> NUMBER_REAL .)
    RSPAREN         reduce using rule 81 (number -> NUMBER_REAL .)
    RBRACE          reduce using rule 81 (number -> NUMBER_REAL .)
    TO              reduce using rule 81 (number -> NUMBER_REAL .)
    STEP            reduce using rule 81 (number -> NUMBER_REAL .)
    DO              reduce using rule 81 (number -> NUMBER_REAL .)


state 34

    (82) number -> NUMBER_EXP .

    PRIVATE_ID      reduce using rule 82 (number -> NUMBER_EXP .)
    GLOBAL_ID       reduce using rule 82 (number -> NUMBER_EXP .)
    PLUS            reduce using rule 82 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 82 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 82 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 82 (number -> NUMBER_EXP .)
    MOD             reduce using rule 82 (number -> NUMBER_EXP .)
    POW             reduce using rule 82 (number -> NUMBER_EXP .)
    SELECT          reduce using rule 82 (number -> NUMBER_EXP .)
    COLON           reduce using rule 82 (number -> NUMBER_EXP .)
    AND             reduce using rule 82 (number -> NUMBER_EXP .)
    OR              reduce using rule 82 (number -> NUMBER_EXP .)
    LT              reduce using rule 82 (number -> NUMBER_EXP .)
    GT              reduce using rule 82 (number -> NUMBER_EXP .)
    LTE             reduce using rule 82 (number -> NUMBER_EXP .)
    GTE             reduce using rule 82 (number -> NUMBER_EXP .)
    EQUALITY        reduce using rule 82 (number -> NUMBER_EXP .)
    INEQUALITY      reduce using rule 82 (number -> NUMBER_EXP .)
    SEMI_COLON      reduce using rule 82 (number -> NUMBER_EXP .)
    COMMA           reduce using rule 82 (number -> NUMBER_EXP .)
    $end            reduce using rule 82 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 82 (number -> NUMBER_EXP .)
    RSPAREN         reduce using rule 82 (number -> NUMBER_EXP .)
    RBRACE          reduce using rule 82 (number -> NUMBER_EXP .)
    TO              reduce using rule 82 (number -> NUMBER_EXP .)
    STEP            reduce using rule 82 (number -> NUMBER_EXP .)
    DO              reduce using rule 82 (number -> NUMBER_EXP .)


state 35

    (83) number -> NUMBER_HEX .

    PRIVATE_ID      reduce using rule 83 (number -> NUMBER_HEX .)
    GLOBAL_ID       reduce using rule 83 (number -> NUMBER_HEX .)
    PLUS            reduce using rule 83 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 83 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 83 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 83 (number -> NUMBER_HEX .)
    MOD             reduce using rule 83 (number -> NUMBER_HEX .)
    POW             reduce using rule 83 (number -> NUMBER_HEX .)
    SELECT          reduce using rule 83 (number -> NUMBER_HEX .)
    COLON           reduce using rule 83 (number -> NUMBER_HEX .)
    AND             reduce using rule 83 (number -> NUMBER_HEX .)
    OR              reduce using rule 83 (number -> NUMBER_HEX .)
    LT              reduce using rule 83 (number -> NUMBER_HEX .)
    GT              reduce using rule 83 (number -> NUMBER_HEX .)
    LTE             reduce using rule 83 (number -> NUMBER_HEX .)
    GTE             reduce using rule 83 (number -> NUMBER_HEX .)
    EQUALITY        reduce using rule 83 (number -> NUMBER_HEX .)
    INEQUALITY      reduce using rule 83 (number -> NUMBER_HEX .)
    SEMI_COLON      reduce using rule 83 (number -> NUMBER_HEX .)
    COMMA           reduce using rule 83 (number -> NUMBER_HEX .)
    $end            reduce using rule 83 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 83 (number -> NUMBER_HEX .)
    RSPAREN         reduce using rule 83 (number -> NUMBER_HEX .)
    RBRACE          reduce using rule 83 (number -> NUMBER_HEX .)
    TO              reduce using rule 83 (number -> NUMBER_HEX .)
    STEP            reduce using rule 83 (number -> NUMBER_HEX .)
    DO              reduce using rule 83 (number -> NUMBER_HEX .)


state 36

    (54) unaryexp -> PLUS . primaryexp
    (61) punctuation -> PLUS .
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 61 (punctuation -> PLUS .)
    GLOBAL_ID       reduce using rule 61 (punctuation -> PLUS .)
    PLUS            reduce using rule 61 (punctuation -> PLUS .)
    MINUS           reduce using rule 61 (punctuation -> PLUS .)
    COLON           reduce using rule 61 (punctuation -> PLUS .)
    AND             reduce using rule 61 (punctuation -> PLUS .)
    OR              reduce using rule 61 (punctuation -> PLUS .)
    LT              reduce using rule 61 (punctuation -> PLUS .)
    GT              reduce using rule 61 (punctuation -> PLUS .)
    LTE             reduce using rule 61 (punctuation -> PLUS .)
    GTE             reduce using rule 61 (punctuation -> PLUS .)
    EQUALITY        reduce using rule 61 (punctuation -> PLUS .)
    INEQUALITY      reduce using rule 61 (punctuation -> PLUS .)
    SEMI_COLON      reduce using rule 61 (punctuation -> PLUS .)
    COMMA           reduce using rule 61 (punctuation -> PLUS .)
    $end            reduce using rule 61 (punctuation -> PLUS .)
    RPAREN          reduce using rule 61 (punctuation -> PLUS .)
    RSPAREN         reduce using rule 61 (punctuation -> PLUS .)
    RBRACE          reduce using rule 61 (punctuation -> PLUS .)
    TO              reduce using rule 61 (punctuation -> PLUS .)
    STEP            reduce using rule 61 (punctuation -> PLUS .)
    DO              reduce using rule 61 (punctuation -> PLUS .)
    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49

  ! TIMES           [ reduce using rule 61 (punctuation -> PLUS .) ]
  ! DIVIDE          [ reduce using rule 61 (punctuation -> PLUS .) ]
  ! MOD             [ reduce using rule 61 (punctuation -> PLUS .) ]
  ! POW             [ reduce using rule 61 (punctuation -> PLUS .) ]
  ! SELECT          [ reduce using rule 61 (punctuation -> PLUS .) ]
  ! PRIVATE_ID      [ shift and go to state 66 ]
  ! GLOBAL_ID       [ shift and go to state 67 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! COLON           [ shift and go to state 50 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! GTE             [ shift and go to state 58 ]
  ! EQUALITY        [ shift and go to state 59 ]
  ! INEQUALITY      [ shift and go to state 60 ]

    primaryexp                     shift and go to state 89
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 37

    (55) unaryexp -> MINUS . primaryexp
    (62) punctuation -> MINUS .
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 62 (punctuation -> MINUS .)
    GLOBAL_ID       reduce using rule 62 (punctuation -> MINUS .)
    PLUS            reduce using rule 62 (punctuation -> MINUS .)
    MINUS           reduce using rule 62 (punctuation -> MINUS .)
    COLON           reduce using rule 62 (punctuation -> MINUS .)
    AND             reduce using rule 62 (punctuation -> MINUS .)
    OR              reduce using rule 62 (punctuation -> MINUS .)
    LT              reduce using rule 62 (punctuation -> MINUS .)
    GT              reduce using rule 62 (punctuation -> MINUS .)
    LTE             reduce using rule 62 (punctuation -> MINUS .)
    GTE             reduce using rule 62 (punctuation -> MINUS .)
    EQUALITY        reduce using rule 62 (punctuation -> MINUS .)
    INEQUALITY      reduce using rule 62 (punctuation -> MINUS .)
    SEMI_COLON      reduce using rule 62 (punctuation -> MINUS .)
    COMMA           reduce using rule 62 (punctuation -> MINUS .)
    $end            reduce using rule 62 (punctuation -> MINUS .)
    RPAREN          reduce using rule 62 (punctuation -> MINUS .)
    RSPAREN         reduce using rule 62 (punctuation -> MINUS .)
    RBRACE          reduce using rule 62 (punctuation -> MINUS .)
    TO              reduce using rule 62 (punctuation -> MINUS .)
    STEP            reduce using rule 62 (punctuation -> MINUS .)
    DO              reduce using rule 62 (punctuation -> MINUS .)
    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49

  ! TIMES           [ reduce using rule 62 (punctuation -> MINUS .) ]
  ! DIVIDE          [ reduce using rule 62 (punctuation -> MINUS .) ]
  ! MOD             [ reduce using rule 62 (punctuation -> MINUS .) ]
  ! POW             [ reduce using rule 62 (punctuation -> MINUS .) ]
  ! SELECT          [ reduce using rule 62 (punctuation -> MINUS .) ]
  ! PRIVATE_ID      [ shift and go to state 66 ]
  ! GLOBAL_ID       [ shift and go to state 67 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! COLON           [ shift and go to state 50 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! GTE             [ shift and go to state 58 ]
  ! EQUALITY        [ shift and go to state 59 ]
  ! INEQUALITY      [ shift and go to state 60 ]

    primaryexp                     shift and go to state 90
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 38

    (56) unaryexp -> NOT . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    primaryexp                     shift and go to state 91
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 39

    (84) string -> STRING_SINGLE .

    PRIVATE_ID      reduce using rule 84 (string -> STRING_SINGLE .)
    GLOBAL_ID       reduce using rule 84 (string -> STRING_SINGLE .)
    PLUS            reduce using rule 84 (string -> STRING_SINGLE .)
    MINUS           reduce using rule 84 (string -> STRING_SINGLE .)
    TIMES           reduce using rule 84 (string -> STRING_SINGLE .)
    DIVIDE          reduce using rule 84 (string -> STRING_SINGLE .)
    MOD             reduce using rule 84 (string -> STRING_SINGLE .)
    POW             reduce using rule 84 (string -> STRING_SINGLE .)
    SELECT          reduce using rule 84 (string -> STRING_SINGLE .)
    COLON           reduce using rule 84 (string -> STRING_SINGLE .)
    AND             reduce using rule 84 (string -> STRING_SINGLE .)
    OR              reduce using rule 84 (string -> STRING_SINGLE .)
    LT              reduce using rule 84 (string -> STRING_SINGLE .)
    GT              reduce using rule 84 (string -> STRING_SINGLE .)
    LTE             reduce using rule 84 (string -> STRING_SINGLE .)
    GTE             reduce using rule 84 (string -> STRING_SINGLE .)
    EQUALITY        reduce using rule 84 (string -> STRING_SINGLE .)
    INEQUALITY      reduce using rule 84 (string -> STRING_SINGLE .)
    SEMI_COLON      reduce using rule 84 (string -> STRING_SINGLE .)
    COMMA           reduce using rule 84 (string -> STRING_SINGLE .)
    $end            reduce using rule 84 (string -> STRING_SINGLE .)
    RPAREN          reduce using rule 84 (string -> STRING_SINGLE .)
    RSPAREN         reduce using rule 84 (string -> STRING_SINGLE .)
    RBRACE          reduce using rule 84 (string -> STRING_SINGLE .)
    TO              reduce using rule 84 (string -> STRING_SINGLE .)
    STEP            reduce using rule 84 (string -> STRING_SINGLE .)
    DO              reduce using rule 84 (string -> STRING_SINGLE .)
    FROM            reduce using rule 84 (string -> STRING_SINGLE .)


state 40

    (85) string -> STRING_DOUBLE .

    PRIVATE_ID      reduce using rule 85 (string -> STRING_DOUBLE .)
    GLOBAL_ID       reduce using rule 85 (string -> STRING_DOUBLE .)
    PLUS            reduce using rule 85 (string -> STRING_DOUBLE .)
    MINUS           reduce using rule 85 (string -> STRING_DOUBLE .)
    TIMES           reduce using rule 85 (string -> STRING_DOUBLE .)
    DIVIDE          reduce using rule 85 (string -> STRING_DOUBLE .)
    MOD             reduce using rule 85 (string -> STRING_DOUBLE .)
    POW             reduce using rule 85 (string -> STRING_DOUBLE .)
    SELECT          reduce using rule 85 (string -> STRING_DOUBLE .)
    COLON           reduce using rule 85 (string -> STRING_DOUBLE .)
    AND             reduce using rule 85 (string -> STRING_DOUBLE .)
    OR              reduce using rule 85 (string -> STRING_DOUBLE .)
    LT              reduce using rule 85 (string -> STRING_DOUBLE .)
    GT              reduce using rule 85 (string -> STRING_DOUBLE .)
    LTE             reduce using rule 85 (string -> STRING_DOUBLE .)
    GTE             reduce using rule 85 (string -> STRING_DOUBLE .)
    EQUALITY        reduce using rule 85 (string -> STRING_DOUBLE .)
    INEQUALITY      reduce using rule 85 (string -> STRING_DOUBLE .)
    SEMI_COLON      reduce using rule 85 (string -> STRING_DOUBLE .)
    COMMA           reduce using rule 85 (string -> STRING_DOUBLE .)
    $end            reduce using rule 85 (string -> STRING_DOUBLE .)
    RPAREN          reduce using rule 85 (string -> STRING_DOUBLE .)
    RSPAREN         reduce using rule 85 (string -> STRING_DOUBLE .)
    RBRACE          reduce using rule 85 (string -> STRING_DOUBLE .)
    TO              reduce using rule 85 (string -> STRING_DOUBLE .)
    STEP            reduce using rule 85 (string -> STRING_DOUBLE .)
    DO              reduce using rule 85 (string -> STRING_DOUBLE .)
    FROM            reduce using rule 85 (string -> STRING_DOUBLE .)


state 41

    (47) bracedexp -> LBRACE . new_scope code RBRACE
    (48) new_scope -> .

    PRIVATE         reduce using rule 48 (new_scope -> .)
    PRIVATE_ID      reduce using rule 48 (new_scope -> .)
    GLOBAL_ID       reduce using rule 48 (new_scope -> .)
    LPAREN          reduce using rule 48 (new_scope -> .)
    IF              reduce using rule 48 (new_scope -> .)
    WHILE           reduce using rule 48 (new_scope -> .)
    FOR             reduce using rule 48 (new_scope -> .)
    NUMBER_REAL     reduce using rule 48 (new_scope -> .)
    NUMBER_EXP      reduce using rule 48 (new_scope -> .)
    NUMBER_HEX      reduce using rule 48 (new_scope -> .)
    PLUS            reduce using rule 48 (new_scope -> .)
    MINUS           reduce using rule 48 (new_scope -> .)
    NOT             reduce using rule 48 (new_scope -> .)
    STRING_SINGLE   reduce using rule 48 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 48 (new_scope -> .)
    LBRACE          reduce using rule 48 (new_scope -> .)
    LSPAREN         reduce using rule 48 (new_scope -> .)
    WITH            reduce using rule 48 (new_scope -> .)
    TIMES           reduce using rule 48 (new_scope -> .)
    DIVIDE          reduce using rule 48 (new_scope -> .)
    MOD             reduce using rule 48 (new_scope -> .)
    POW             reduce using rule 48 (new_scope -> .)
    SELECT          reduce using rule 48 (new_scope -> .)
    COLON           reduce using rule 48 (new_scope -> .)
    AND             reduce using rule 48 (new_scope -> .)
    OR              reduce using rule 48 (new_scope -> .)
    LT              reduce using rule 48 (new_scope -> .)
    GT              reduce using rule 48 (new_scope -> .)
    LTE             reduce using rule 48 (new_scope -> .)
    GTE             reduce using rule 48 (new_scope -> .)
    EQUALITY        reduce using rule 48 (new_scope -> .)
    INEQUALITY      reduce using rule 48 (new_scope -> .)
    RBRACE          reduce using rule 48 (new_scope -> .)

    new_scope                      shift and go to state 92

state 42

    (14) helpertype -> withtype .

    PRIVATE_ID      reduce using rule 14 (helpertype -> withtype .)
    GLOBAL_ID       reduce using rule 14 (helpertype -> withtype .)
    PLUS            reduce using rule 14 (helpertype -> withtype .)
    MINUS           reduce using rule 14 (helpertype -> withtype .)
    TIMES           reduce using rule 14 (helpertype -> withtype .)
    DIVIDE          reduce using rule 14 (helpertype -> withtype .)
    MOD             reduce using rule 14 (helpertype -> withtype .)
    POW             reduce using rule 14 (helpertype -> withtype .)
    SELECT          reduce using rule 14 (helpertype -> withtype .)
    COLON           reduce using rule 14 (helpertype -> withtype .)
    AND             reduce using rule 14 (helpertype -> withtype .)
    OR              reduce using rule 14 (helpertype -> withtype .)
    LT              reduce using rule 14 (helpertype -> withtype .)
    GT              reduce using rule 14 (helpertype -> withtype .)
    LTE             reduce using rule 14 (helpertype -> withtype .)
    GTE             reduce using rule 14 (helpertype -> withtype .)
    EQUALITY        reduce using rule 14 (helpertype -> withtype .)
    INEQUALITY      reduce using rule 14 (helpertype -> withtype .)
    SEMI_COLON      reduce using rule 14 (helpertype -> withtype .)
    COMMA           reduce using rule 14 (helpertype -> withtype .)
    $end            reduce using rule 14 (helpertype -> withtype .)
    RPAREN          reduce using rule 14 (helpertype -> withtype .)
    RSPAREN         reduce using rule 14 (helpertype -> withtype .)
    RBRACE          reduce using rule 14 (helpertype -> withtype .)
    TO              reduce using rule 14 (helpertype -> withtype .)
    STEP            reduce using rule 14 (helpertype -> withtype .)
    DO              reduce using rule 14 (helpertype -> withtype .)


state 43

    (60) operator -> punctuation .

    PRIVATE_ID      reduce using rule 60 (operator -> punctuation .)
    GLOBAL_ID       reduce using rule 60 (operator -> punctuation .)
    PLUS            reduce using rule 60 (operator -> punctuation .)
    MINUS           reduce using rule 60 (operator -> punctuation .)
    TIMES           reduce using rule 60 (operator -> punctuation .)
    DIVIDE          reduce using rule 60 (operator -> punctuation .)
    MOD             reduce using rule 60 (operator -> punctuation .)
    POW             reduce using rule 60 (operator -> punctuation .)
    SELECT          reduce using rule 60 (operator -> punctuation .)
    COLON           reduce using rule 60 (operator -> punctuation .)
    AND             reduce using rule 60 (operator -> punctuation .)
    OR              reduce using rule 60 (operator -> punctuation .)
    LT              reduce using rule 60 (operator -> punctuation .)
    GT              reduce using rule 60 (operator -> punctuation .)
    LTE             reduce using rule 60 (operator -> punctuation .)
    GTE             reduce using rule 60 (operator -> punctuation .)
    EQUALITY        reduce using rule 60 (operator -> punctuation .)
    INEQUALITY      reduce using rule 60 (operator -> punctuation .)
    SEMI_COLON      reduce using rule 60 (operator -> punctuation .)
    COMMA           reduce using rule 60 (operator -> punctuation .)
    $end            reduce using rule 60 (operator -> punctuation .)
    LPAREN          reduce using rule 60 (operator -> punctuation .)
    NUMBER_REAL     reduce using rule 60 (operator -> punctuation .)
    NUMBER_EXP      reduce using rule 60 (operator -> punctuation .)
    NUMBER_HEX      reduce using rule 60 (operator -> punctuation .)
    NOT             reduce using rule 60 (operator -> punctuation .)
    STRING_SINGLE   reduce using rule 60 (operator -> punctuation .)
    STRING_DOUBLE   reduce using rule 60 (operator -> punctuation .)
    LBRACE          reduce using rule 60 (operator -> punctuation .)
    LSPAREN         reduce using rule 60 (operator -> punctuation .)
    IF              reduce using rule 60 (operator -> punctuation .)
    WITH            reduce using rule 60 (operator -> punctuation .)
    WHILE           reduce using rule 60 (operator -> punctuation .)
    FOR             reduce using rule 60 (operator -> punctuation .)
    RPAREN          reduce using rule 60 (operator -> punctuation .)
    RSPAREN         reduce using rule 60 (operator -> punctuation .)
    RBRACE          reduce using rule 60 (operator -> punctuation .)
    TO              reduce using rule 60 (operator -> punctuation .)
    STEP            reduce using rule 60 (operator -> punctuation .)
    DO              reduce using rule 60 (operator -> punctuation .)


state 44

    (20) withtype -> WITH . NAMESPACE

    NAMESPACE       shift and go to state 93


state 45

    (63) punctuation -> TIMES .

    PRIVATE_ID      reduce using rule 63 (punctuation -> TIMES .)
    GLOBAL_ID       reduce using rule 63 (punctuation -> TIMES .)
    PLUS            reduce using rule 63 (punctuation -> TIMES .)
    MINUS           reduce using rule 63 (punctuation -> TIMES .)
    TIMES           reduce using rule 63 (punctuation -> TIMES .)
    DIVIDE          reduce using rule 63 (punctuation -> TIMES .)
    MOD             reduce using rule 63 (punctuation -> TIMES .)
    POW             reduce using rule 63 (punctuation -> TIMES .)
    SELECT          reduce using rule 63 (punctuation -> TIMES .)
    COLON           reduce using rule 63 (punctuation -> TIMES .)
    AND             reduce using rule 63 (punctuation -> TIMES .)
    OR              reduce using rule 63 (punctuation -> TIMES .)
    LT              reduce using rule 63 (punctuation -> TIMES .)
    GT              reduce using rule 63 (punctuation -> TIMES .)
    LTE             reduce using rule 63 (punctuation -> TIMES .)
    GTE             reduce using rule 63 (punctuation -> TIMES .)
    EQUALITY        reduce using rule 63 (punctuation -> TIMES .)
    INEQUALITY      reduce using rule 63 (punctuation -> TIMES .)
    SEMI_COLON      reduce using rule 63 (punctuation -> TIMES .)
    COMMA           reduce using rule 63 (punctuation -> TIMES .)
    $end            reduce using rule 63 (punctuation -> TIMES .)
    LPAREN          reduce using rule 63 (punctuation -> TIMES .)
    NUMBER_REAL     reduce using rule 63 (punctuation -> TIMES .)
    NUMBER_EXP      reduce using rule 63 (punctuation -> TIMES .)
    NUMBER_HEX      reduce using rule 63 (punctuation -> TIMES .)
    NOT             reduce using rule 63 (punctuation -> TIMES .)
    STRING_SINGLE   reduce using rule 63 (punctuation -> TIMES .)
    STRING_DOUBLE   reduce using rule 63 (punctuation -> TIMES .)
    LBRACE          reduce using rule 63 (punctuation -> TIMES .)
    LSPAREN         reduce using rule 63 (punctuation -> TIMES .)
    IF              reduce using rule 63 (punctuation -> TIMES .)
    WITH            reduce using rule 63 (punctuation -> TIMES .)
    WHILE           reduce using rule 63 (punctuation -> TIMES .)
    FOR             reduce using rule 63 (punctuation -> TIMES .)
    RPAREN          reduce using rule 63 (punctuation -> TIMES .)
    RSPAREN         reduce using rule 63 (punctuation -> TIMES .)
    RBRACE          reduce using rule 63 (punctuation -> TIMES .)
    TO              reduce using rule 63 (punctuation -> TIMES .)
    STEP            reduce using rule 63 (punctuation -> TIMES .)
    DO              reduce using rule 63 (punctuation -> TIMES .)


state 46

    (64) punctuation -> DIVIDE .
    (80) configaccessor -> DIVIDE .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for PLUS resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for TIMES resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for MOD resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for POW resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for SELECT resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for COLON resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for AND resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for OR resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LT resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GT resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LTE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GTE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for COMMA resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for $end resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NOT resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for IF resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for WITH resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for FOR resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for TO resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STEP resolved using rule 64 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for DO resolved using rule 64 (punctuation -> DIVIDE .)
    PRIVATE_ID      reduce using rule 64 (punctuation -> DIVIDE .)
    GLOBAL_ID       reduce using rule 64 (punctuation -> DIVIDE .)
    PLUS            reduce using rule 64 (punctuation -> DIVIDE .)
    MINUS           reduce using rule 64 (punctuation -> DIVIDE .)
    TIMES           reduce using rule 64 (punctuation -> DIVIDE .)
    DIVIDE          reduce using rule 64 (punctuation -> DIVIDE .)
    MOD             reduce using rule 64 (punctuation -> DIVIDE .)
    POW             reduce using rule 64 (punctuation -> DIVIDE .)
    SELECT          reduce using rule 64 (punctuation -> DIVIDE .)
    COLON           reduce using rule 64 (punctuation -> DIVIDE .)
    AND             reduce using rule 64 (punctuation -> DIVIDE .)
    OR              reduce using rule 64 (punctuation -> DIVIDE .)
    LT              reduce using rule 64 (punctuation -> DIVIDE .)
    GT              reduce using rule 64 (punctuation -> DIVIDE .)
    LTE             reduce using rule 64 (punctuation -> DIVIDE .)
    GTE             reduce using rule 64 (punctuation -> DIVIDE .)
    EQUALITY        reduce using rule 64 (punctuation -> DIVIDE .)
    INEQUALITY      reduce using rule 64 (punctuation -> DIVIDE .)
    SEMI_COLON      reduce using rule 64 (punctuation -> DIVIDE .)
    COMMA           reduce using rule 64 (punctuation -> DIVIDE .)
    $end            reduce using rule 64 (punctuation -> DIVIDE .)
    LPAREN          reduce using rule 64 (punctuation -> DIVIDE .)
    NUMBER_REAL     reduce using rule 64 (punctuation -> DIVIDE .)
    NUMBER_EXP      reduce using rule 64 (punctuation -> DIVIDE .)
    NUMBER_HEX      reduce using rule 64 (punctuation -> DIVIDE .)
    NOT             reduce using rule 64 (punctuation -> DIVIDE .)
    STRING_SINGLE   reduce using rule 64 (punctuation -> DIVIDE .)
    STRING_DOUBLE   reduce using rule 64 (punctuation -> DIVIDE .)
    LBRACE          reduce using rule 64 (punctuation -> DIVIDE .)
    LSPAREN         reduce using rule 64 (punctuation -> DIVIDE .)
    IF              reduce using rule 64 (punctuation -> DIVIDE .)
    WITH            reduce using rule 64 (punctuation -> DIVIDE .)
    WHILE           reduce using rule 64 (punctuation -> DIVIDE .)
    FOR             reduce using rule 64 (punctuation -> DIVIDE .)
    RPAREN          reduce using rule 64 (punctuation -> DIVIDE .)
    RSPAREN         reduce using rule 64 (punctuation -> DIVIDE .)
    RBRACE          reduce using rule 64 (punctuation -> DIVIDE .)
    TO              reduce using rule 64 (punctuation -> DIVIDE .)
    STEP            reduce using rule 64 (punctuation -> DIVIDE .)
    DO              reduce using rule 64 (punctuation -> DIVIDE .)

  ! PRIVATE_ID      [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! GLOBAL_ID       [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! PLUS            [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! MINUS           [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! TIMES           [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! DIVIDE          [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! MOD             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! POW             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! SELECT          [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! COLON           [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! AND             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! OR              [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! LT              [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! GT              [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! LTE             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! GTE             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! EQUALITY        [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! INEQUALITY      [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! SEMI_COLON      [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! COMMA           [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! $end            [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! LPAREN          [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! NUMBER_REAL     [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! NUMBER_EXP      [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! NUMBER_HEX      [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! NOT             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! STRING_SINGLE   [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! STRING_DOUBLE   [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! LBRACE          [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! LSPAREN         [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! IF              [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! WITH            [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! WHILE           [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! FOR             [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! RPAREN          [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! RSPAREN         [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! RBRACE          [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! TO              [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! STEP            [ reduce using rule 80 (configaccessor -> DIVIDE .) ]
  ! DO              [ reduce using rule 80 (configaccessor -> DIVIDE .) ]


state 47

    (65) punctuation -> MOD .

    PRIVATE_ID      reduce using rule 65 (punctuation -> MOD .)
    GLOBAL_ID       reduce using rule 65 (punctuation -> MOD .)
    PLUS            reduce using rule 65 (punctuation -> MOD .)
    MINUS           reduce using rule 65 (punctuation -> MOD .)
    TIMES           reduce using rule 65 (punctuation -> MOD .)
    DIVIDE          reduce using rule 65 (punctuation -> MOD .)
    MOD             reduce using rule 65 (punctuation -> MOD .)
    POW             reduce using rule 65 (punctuation -> MOD .)
    SELECT          reduce using rule 65 (punctuation -> MOD .)
    COLON           reduce using rule 65 (punctuation -> MOD .)
    AND             reduce using rule 65 (punctuation -> MOD .)
    OR              reduce using rule 65 (punctuation -> MOD .)
    LT              reduce using rule 65 (punctuation -> MOD .)
    GT              reduce using rule 65 (punctuation -> MOD .)
    LTE             reduce using rule 65 (punctuation -> MOD .)
    GTE             reduce using rule 65 (punctuation -> MOD .)
    EQUALITY        reduce using rule 65 (punctuation -> MOD .)
    INEQUALITY      reduce using rule 65 (punctuation -> MOD .)
    SEMI_COLON      reduce using rule 65 (punctuation -> MOD .)
    COMMA           reduce using rule 65 (punctuation -> MOD .)
    $end            reduce using rule 65 (punctuation -> MOD .)
    LPAREN          reduce using rule 65 (punctuation -> MOD .)
    NUMBER_REAL     reduce using rule 65 (punctuation -> MOD .)
    NUMBER_EXP      reduce using rule 65 (punctuation -> MOD .)
    NUMBER_HEX      reduce using rule 65 (punctuation -> MOD .)
    NOT             reduce using rule 65 (punctuation -> MOD .)
    STRING_SINGLE   reduce using rule 65 (punctuation -> MOD .)
    STRING_DOUBLE   reduce using rule 65 (punctuation -> MOD .)
    LBRACE          reduce using rule 65 (punctuation -> MOD .)
    LSPAREN         reduce using rule 65 (punctuation -> MOD .)
    IF              reduce using rule 65 (punctuation -> MOD .)
    WITH            reduce using rule 65 (punctuation -> MOD .)
    WHILE           reduce using rule 65 (punctuation -> MOD .)
    FOR             reduce using rule 65 (punctuation -> MOD .)
    RPAREN          reduce using rule 65 (punctuation -> MOD .)
    RSPAREN         reduce using rule 65 (punctuation -> MOD .)
    RBRACE          reduce using rule 65 (punctuation -> MOD .)
    TO              reduce using rule 65 (punctuation -> MOD .)
    STEP            reduce using rule 65 (punctuation -> MOD .)
    DO              reduce using rule 65 (punctuation -> MOD .)


state 48

    (66) punctuation -> POW .

    PRIVATE_ID      reduce using rule 66 (punctuation -> POW .)
    GLOBAL_ID       reduce using rule 66 (punctuation -> POW .)
    PLUS            reduce using rule 66 (punctuation -> POW .)
    MINUS           reduce using rule 66 (punctuation -> POW .)
    TIMES           reduce using rule 66 (punctuation -> POW .)
    DIVIDE          reduce using rule 66 (punctuation -> POW .)
    MOD             reduce using rule 66 (punctuation -> POW .)
    POW             reduce using rule 66 (punctuation -> POW .)
    SELECT          reduce using rule 66 (punctuation -> POW .)
    COLON           reduce using rule 66 (punctuation -> POW .)
    AND             reduce using rule 66 (punctuation -> POW .)
    OR              reduce using rule 66 (punctuation -> POW .)
    LT              reduce using rule 66 (punctuation -> POW .)
    GT              reduce using rule 66 (punctuation -> POW .)
    LTE             reduce using rule 66 (punctuation -> POW .)
    GTE             reduce using rule 66 (punctuation -> POW .)
    EQUALITY        reduce using rule 66 (punctuation -> POW .)
    INEQUALITY      reduce using rule 66 (punctuation -> POW .)
    SEMI_COLON      reduce using rule 66 (punctuation -> POW .)
    COMMA           reduce using rule 66 (punctuation -> POW .)
    $end            reduce using rule 66 (punctuation -> POW .)
    LPAREN          reduce using rule 66 (punctuation -> POW .)
    NUMBER_REAL     reduce using rule 66 (punctuation -> POW .)
    NUMBER_EXP      reduce using rule 66 (punctuation -> POW .)
    NUMBER_HEX      reduce using rule 66 (punctuation -> POW .)
    NOT             reduce using rule 66 (punctuation -> POW .)
    STRING_SINGLE   reduce using rule 66 (punctuation -> POW .)
    STRING_DOUBLE   reduce using rule 66 (punctuation -> POW .)
    LBRACE          reduce using rule 66 (punctuation -> POW .)
    LSPAREN         reduce using rule 66 (punctuation -> POW .)
    IF              reduce using rule 66 (punctuation -> POW .)
    WITH            reduce using rule 66 (punctuation -> POW .)
    WHILE           reduce using rule 66 (punctuation -> POW .)
    FOR             reduce using rule 66 (punctuation -> POW .)
    RPAREN          reduce using rule 66 (punctuation -> POW .)
    RSPAREN         reduce using rule 66 (punctuation -> POW .)
    RBRACE          reduce using rule 66 (punctuation -> POW .)
    TO              reduce using rule 66 (punctuation -> POW .)
    STEP            reduce using rule 66 (punctuation -> POW .)
    DO              reduce using rule 66 (punctuation -> POW .)


state 49

    (67) punctuation -> SELECT .

    PRIVATE_ID      reduce using rule 67 (punctuation -> SELECT .)
    GLOBAL_ID       reduce using rule 67 (punctuation -> SELECT .)
    PLUS            reduce using rule 67 (punctuation -> SELECT .)
    MINUS           reduce using rule 67 (punctuation -> SELECT .)
    TIMES           reduce using rule 67 (punctuation -> SELECT .)
    DIVIDE          reduce using rule 67 (punctuation -> SELECT .)
    MOD             reduce using rule 67 (punctuation -> SELECT .)
    POW             reduce using rule 67 (punctuation -> SELECT .)
    SELECT          reduce using rule 67 (punctuation -> SELECT .)
    COLON           reduce using rule 67 (punctuation -> SELECT .)
    AND             reduce using rule 67 (punctuation -> SELECT .)
    OR              reduce using rule 67 (punctuation -> SELECT .)
    LT              reduce using rule 67 (punctuation -> SELECT .)
    GT              reduce using rule 67 (punctuation -> SELECT .)
    LTE             reduce using rule 67 (punctuation -> SELECT .)
    GTE             reduce using rule 67 (punctuation -> SELECT .)
    EQUALITY        reduce using rule 67 (punctuation -> SELECT .)
    INEQUALITY      reduce using rule 67 (punctuation -> SELECT .)
    SEMI_COLON      reduce using rule 67 (punctuation -> SELECT .)
    COMMA           reduce using rule 67 (punctuation -> SELECT .)
    $end            reduce using rule 67 (punctuation -> SELECT .)
    LPAREN          reduce using rule 67 (punctuation -> SELECT .)
    NUMBER_REAL     reduce using rule 67 (punctuation -> SELECT .)
    NUMBER_EXP      reduce using rule 67 (punctuation -> SELECT .)
    NUMBER_HEX      reduce using rule 67 (punctuation -> SELECT .)
    NOT             reduce using rule 67 (punctuation -> SELECT .)
    STRING_SINGLE   reduce using rule 67 (punctuation -> SELECT .)
    STRING_DOUBLE   reduce using rule 67 (punctuation -> SELECT .)
    LBRACE          reduce using rule 67 (punctuation -> SELECT .)
    LSPAREN         reduce using rule 67 (punctuation -> SELECT .)
    IF              reduce using rule 67 (punctuation -> SELECT .)
    WITH            reduce using rule 67 (punctuation -> SELECT .)
    WHILE           reduce using rule 67 (punctuation -> SELECT .)
    FOR             reduce using rule 67 (punctuation -> SELECT .)
    RPAREN          reduce using rule 67 (punctuation -> SELECT .)
    RSPAREN         reduce using rule 67 (punctuation -> SELECT .)
    RBRACE          reduce using rule 67 (punctuation -> SELECT .)
    TO              reduce using rule 67 (punctuation -> SELECT .)
    STEP            reduce using rule 67 (punctuation -> SELECT .)
    DO              reduce using rule 67 (punctuation -> SELECT .)


state 50

    (68) punctuation -> COLON .

    PRIVATE_ID      reduce using rule 68 (punctuation -> COLON .)
    GLOBAL_ID       reduce using rule 68 (punctuation -> COLON .)
    PLUS            reduce using rule 68 (punctuation -> COLON .)
    MINUS           reduce using rule 68 (punctuation -> COLON .)
    TIMES           reduce using rule 68 (punctuation -> COLON .)
    DIVIDE          reduce using rule 68 (punctuation -> COLON .)
    MOD             reduce using rule 68 (punctuation -> COLON .)
    POW             reduce using rule 68 (punctuation -> COLON .)
    SELECT          reduce using rule 68 (punctuation -> COLON .)
    COLON           reduce using rule 68 (punctuation -> COLON .)
    AND             reduce using rule 68 (punctuation -> COLON .)
    OR              reduce using rule 68 (punctuation -> COLON .)
    LT              reduce using rule 68 (punctuation -> COLON .)
    GT              reduce using rule 68 (punctuation -> COLON .)
    LTE             reduce using rule 68 (punctuation -> COLON .)
    GTE             reduce using rule 68 (punctuation -> COLON .)
    EQUALITY        reduce using rule 68 (punctuation -> COLON .)
    INEQUALITY      reduce using rule 68 (punctuation -> COLON .)
    SEMI_COLON      reduce using rule 68 (punctuation -> COLON .)
    COMMA           reduce using rule 68 (punctuation -> COLON .)
    $end            reduce using rule 68 (punctuation -> COLON .)
    LPAREN          reduce using rule 68 (punctuation -> COLON .)
    NUMBER_REAL     reduce using rule 68 (punctuation -> COLON .)
    NUMBER_EXP      reduce using rule 68 (punctuation -> COLON .)
    NUMBER_HEX      reduce using rule 68 (punctuation -> COLON .)
    NOT             reduce using rule 68 (punctuation -> COLON .)
    STRING_SINGLE   reduce using rule 68 (punctuation -> COLON .)
    STRING_DOUBLE   reduce using rule 68 (punctuation -> COLON .)
    LBRACE          reduce using rule 68 (punctuation -> COLON .)
    LSPAREN         reduce using rule 68 (punctuation -> COLON .)
    IF              reduce using rule 68 (punctuation -> COLON .)
    WITH            reduce using rule 68 (punctuation -> COLON .)
    WHILE           reduce using rule 68 (punctuation -> COLON .)
    FOR             reduce using rule 68 (punctuation -> COLON .)
    RPAREN          reduce using rule 68 (punctuation -> COLON .)
    RSPAREN         reduce using rule 68 (punctuation -> COLON .)
    RBRACE          reduce using rule 68 (punctuation -> COLON .)
    TO              reduce using rule 68 (punctuation -> COLON .)
    STEP            reduce using rule 68 (punctuation -> COLON .)
    DO              reduce using rule 68 (punctuation -> COLON .)


state 51

    (69) punctuation -> comparisonoperator .

    PRIVATE_ID      reduce using rule 69 (punctuation -> comparisonoperator .)
    GLOBAL_ID       reduce using rule 69 (punctuation -> comparisonoperator .)
    PLUS            reduce using rule 69 (punctuation -> comparisonoperator .)
    MINUS           reduce using rule 69 (punctuation -> comparisonoperator .)
    TIMES           reduce using rule 69 (punctuation -> comparisonoperator .)
    DIVIDE          reduce using rule 69 (punctuation -> comparisonoperator .)
    MOD             reduce using rule 69 (punctuation -> comparisonoperator .)
    POW             reduce using rule 69 (punctuation -> comparisonoperator .)
    SELECT          reduce using rule 69 (punctuation -> comparisonoperator .)
    COLON           reduce using rule 69 (punctuation -> comparisonoperator .)
    AND             reduce using rule 69 (punctuation -> comparisonoperator .)
    OR              reduce using rule 69 (punctuation -> comparisonoperator .)
    LT              reduce using rule 69 (punctuation -> comparisonoperator .)
    GT              reduce using rule 69 (punctuation -> comparisonoperator .)
    LTE             reduce using rule 69 (punctuation -> comparisonoperator .)
    GTE             reduce using rule 69 (punctuation -> comparisonoperator .)
    EQUALITY        reduce using rule 69 (punctuation -> comparisonoperator .)
    INEQUALITY      reduce using rule 69 (punctuation -> comparisonoperator .)
    SEMI_COLON      reduce using rule 69 (punctuation -> comparisonoperator .)
    COMMA           reduce using rule 69 (punctuation -> comparisonoperator .)
    $end            reduce using rule 69 (punctuation -> comparisonoperator .)
    LPAREN          reduce using rule 69 (punctuation -> comparisonoperator .)
    NUMBER_REAL     reduce using rule 69 (punctuation -> comparisonoperator .)
    NUMBER_EXP      reduce using rule 69 (punctuation -> comparisonoperator .)
    NUMBER_HEX      reduce using rule 69 (punctuation -> comparisonoperator .)
    NOT             reduce using rule 69 (punctuation -> comparisonoperator .)
    STRING_SINGLE   reduce using rule 69 (punctuation -> comparisonoperator .)
    STRING_DOUBLE   reduce using rule 69 (punctuation -> comparisonoperator .)
    LBRACE          reduce using rule 69 (punctuation -> comparisonoperator .)
    LSPAREN         reduce using rule 69 (punctuation -> comparisonoperator .)
    IF              reduce using rule 69 (punctuation -> comparisonoperator .)
    WITH            reduce using rule 69 (punctuation -> comparisonoperator .)
    WHILE           reduce using rule 69 (punctuation -> comparisonoperator .)
    FOR             reduce using rule 69 (punctuation -> comparisonoperator .)
    RPAREN          reduce using rule 69 (punctuation -> comparisonoperator .)
    RSPAREN         reduce using rule 69 (punctuation -> comparisonoperator .)
    RBRACE          reduce using rule 69 (punctuation -> comparisonoperator .)
    TO              reduce using rule 69 (punctuation -> comparisonoperator .)
    STEP            reduce using rule 69 (punctuation -> comparisonoperator .)
    DO              reduce using rule 69 (punctuation -> comparisonoperator .)


state 52

    (70) punctuation -> AND .

    PRIVATE_ID      reduce using rule 70 (punctuation -> AND .)
    GLOBAL_ID       reduce using rule 70 (punctuation -> AND .)
    PLUS            reduce using rule 70 (punctuation -> AND .)
    MINUS           reduce using rule 70 (punctuation -> AND .)
    TIMES           reduce using rule 70 (punctuation -> AND .)
    DIVIDE          reduce using rule 70 (punctuation -> AND .)
    MOD             reduce using rule 70 (punctuation -> AND .)
    POW             reduce using rule 70 (punctuation -> AND .)
    SELECT          reduce using rule 70 (punctuation -> AND .)
    COLON           reduce using rule 70 (punctuation -> AND .)
    AND             reduce using rule 70 (punctuation -> AND .)
    OR              reduce using rule 70 (punctuation -> AND .)
    LT              reduce using rule 70 (punctuation -> AND .)
    GT              reduce using rule 70 (punctuation -> AND .)
    LTE             reduce using rule 70 (punctuation -> AND .)
    GTE             reduce using rule 70 (punctuation -> AND .)
    EQUALITY        reduce using rule 70 (punctuation -> AND .)
    INEQUALITY      reduce using rule 70 (punctuation -> AND .)
    SEMI_COLON      reduce using rule 70 (punctuation -> AND .)
    COMMA           reduce using rule 70 (punctuation -> AND .)
    $end            reduce using rule 70 (punctuation -> AND .)
    LPAREN          reduce using rule 70 (punctuation -> AND .)
    NUMBER_REAL     reduce using rule 70 (punctuation -> AND .)
    NUMBER_EXP      reduce using rule 70 (punctuation -> AND .)
    NUMBER_HEX      reduce using rule 70 (punctuation -> AND .)
    NOT             reduce using rule 70 (punctuation -> AND .)
    STRING_SINGLE   reduce using rule 70 (punctuation -> AND .)
    STRING_DOUBLE   reduce using rule 70 (punctuation -> AND .)
    LBRACE          reduce using rule 70 (punctuation -> AND .)
    LSPAREN         reduce using rule 70 (punctuation -> AND .)
    IF              reduce using rule 70 (punctuation -> AND .)
    WITH            reduce using rule 70 (punctuation -> AND .)
    WHILE           reduce using rule 70 (punctuation -> AND .)
    FOR             reduce using rule 70 (punctuation -> AND .)
    RPAREN          reduce using rule 70 (punctuation -> AND .)
    RSPAREN         reduce using rule 70 (punctuation -> AND .)
    RBRACE          reduce using rule 70 (punctuation -> AND .)
    TO              reduce using rule 70 (punctuation -> AND .)
    STEP            reduce using rule 70 (punctuation -> AND .)
    DO              reduce using rule 70 (punctuation -> AND .)


state 53

    (71) punctuation -> OR .

    PRIVATE_ID      reduce using rule 71 (punctuation -> OR .)
    GLOBAL_ID       reduce using rule 71 (punctuation -> OR .)
    PLUS            reduce using rule 71 (punctuation -> OR .)
    MINUS           reduce using rule 71 (punctuation -> OR .)
    TIMES           reduce using rule 71 (punctuation -> OR .)
    DIVIDE          reduce using rule 71 (punctuation -> OR .)
    MOD             reduce using rule 71 (punctuation -> OR .)
    POW             reduce using rule 71 (punctuation -> OR .)
    SELECT          reduce using rule 71 (punctuation -> OR .)
    COLON           reduce using rule 71 (punctuation -> OR .)
    AND             reduce using rule 71 (punctuation -> OR .)
    OR              reduce using rule 71 (punctuation -> OR .)
    LT              reduce using rule 71 (punctuation -> OR .)
    GT              reduce using rule 71 (punctuation -> OR .)
    LTE             reduce using rule 71 (punctuation -> OR .)
    GTE             reduce using rule 71 (punctuation -> OR .)
    EQUALITY        reduce using rule 71 (punctuation -> OR .)
    INEQUALITY      reduce using rule 71 (punctuation -> OR .)
    SEMI_COLON      reduce using rule 71 (punctuation -> OR .)
    COMMA           reduce using rule 71 (punctuation -> OR .)
    $end            reduce using rule 71 (punctuation -> OR .)
    LPAREN          reduce using rule 71 (punctuation -> OR .)
    NUMBER_REAL     reduce using rule 71 (punctuation -> OR .)
    NUMBER_EXP      reduce using rule 71 (punctuation -> OR .)
    NUMBER_HEX      reduce using rule 71 (punctuation -> OR .)
    NOT             reduce using rule 71 (punctuation -> OR .)
    STRING_SINGLE   reduce using rule 71 (punctuation -> OR .)
    STRING_DOUBLE   reduce using rule 71 (punctuation -> OR .)
    LBRACE          reduce using rule 71 (punctuation -> OR .)
    LSPAREN         reduce using rule 71 (punctuation -> OR .)
    IF              reduce using rule 71 (punctuation -> OR .)
    WITH            reduce using rule 71 (punctuation -> OR .)
    WHILE           reduce using rule 71 (punctuation -> OR .)
    FOR             reduce using rule 71 (punctuation -> OR .)
    RPAREN          reduce using rule 71 (punctuation -> OR .)
    RSPAREN         reduce using rule 71 (punctuation -> OR .)
    RBRACE          reduce using rule 71 (punctuation -> OR .)
    TO              reduce using rule 71 (punctuation -> OR .)
    STEP            reduce using rule 71 (punctuation -> OR .)
    DO              reduce using rule 71 (punctuation -> OR .)


state 54

    (72) punctuation -> configaccessor .

    PRIVATE_ID      reduce using rule 72 (punctuation -> configaccessor .)
    GLOBAL_ID       reduce using rule 72 (punctuation -> configaccessor .)
    PLUS            reduce using rule 72 (punctuation -> configaccessor .)
    MINUS           reduce using rule 72 (punctuation -> configaccessor .)
    TIMES           reduce using rule 72 (punctuation -> configaccessor .)
    DIVIDE          reduce using rule 72 (punctuation -> configaccessor .)
    MOD             reduce using rule 72 (punctuation -> configaccessor .)
    POW             reduce using rule 72 (punctuation -> configaccessor .)
    SELECT          reduce using rule 72 (punctuation -> configaccessor .)
    COLON           reduce using rule 72 (punctuation -> configaccessor .)
    AND             reduce using rule 72 (punctuation -> configaccessor .)
    OR              reduce using rule 72 (punctuation -> configaccessor .)
    LT              reduce using rule 72 (punctuation -> configaccessor .)
    GT              reduce using rule 72 (punctuation -> configaccessor .)
    LTE             reduce using rule 72 (punctuation -> configaccessor .)
    GTE             reduce using rule 72 (punctuation -> configaccessor .)
    EQUALITY        reduce using rule 72 (punctuation -> configaccessor .)
    INEQUALITY      reduce using rule 72 (punctuation -> configaccessor .)
    SEMI_COLON      reduce using rule 72 (punctuation -> configaccessor .)
    COMMA           reduce using rule 72 (punctuation -> configaccessor .)
    $end            reduce using rule 72 (punctuation -> configaccessor .)
    LPAREN          reduce using rule 72 (punctuation -> configaccessor .)
    NUMBER_REAL     reduce using rule 72 (punctuation -> configaccessor .)
    NUMBER_EXP      reduce using rule 72 (punctuation -> configaccessor .)
    NUMBER_HEX      reduce using rule 72 (punctuation -> configaccessor .)
    NOT             reduce using rule 72 (punctuation -> configaccessor .)
    STRING_SINGLE   reduce using rule 72 (punctuation -> configaccessor .)
    STRING_DOUBLE   reduce using rule 72 (punctuation -> configaccessor .)
    LBRACE          reduce using rule 72 (punctuation -> configaccessor .)
    LSPAREN         reduce using rule 72 (punctuation -> configaccessor .)
    IF              reduce using rule 72 (punctuation -> configaccessor .)
    WITH            reduce using rule 72 (punctuation -> configaccessor .)
    WHILE           reduce using rule 72 (punctuation -> configaccessor .)
    FOR             reduce using rule 72 (punctuation -> configaccessor .)
    RPAREN          reduce using rule 72 (punctuation -> configaccessor .)
    RSPAREN         reduce using rule 72 (punctuation -> configaccessor .)
    RBRACE          reduce using rule 72 (punctuation -> configaccessor .)
    TO              reduce using rule 72 (punctuation -> configaccessor .)
    STEP            reduce using rule 72 (punctuation -> configaccessor .)
    DO              reduce using rule 72 (punctuation -> configaccessor .)


state 55

    (73) comparisonoperator -> LT .

    PRIVATE_ID      reduce using rule 73 (comparisonoperator -> LT .)
    GLOBAL_ID       reduce using rule 73 (comparisonoperator -> LT .)
    PLUS            reduce using rule 73 (comparisonoperator -> LT .)
    MINUS           reduce using rule 73 (comparisonoperator -> LT .)
    TIMES           reduce using rule 73 (comparisonoperator -> LT .)
    DIVIDE          reduce using rule 73 (comparisonoperator -> LT .)
    MOD             reduce using rule 73 (comparisonoperator -> LT .)
    POW             reduce using rule 73 (comparisonoperator -> LT .)
    SELECT          reduce using rule 73 (comparisonoperator -> LT .)
    COLON           reduce using rule 73 (comparisonoperator -> LT .)
    AND             reduce using rule 73 (comparisonoperator -> LT .)
    OR              reduce using rule 73 (comparisonoperator -> LT .)
    LT              reduce using rule 73 (comparisonoperator -> LT .)
    GT              reduce using rule 73 (comparisonoperator -> LT .)
    LTE             reduce using rule 73 (comparisonoperator -> LT .)
    GTE             reduce using rule 73 (comparisonoperator -> LT .)
    EQUALITY        reduce using rule 73 (comparisonoperator -> LT .)
    INEQUALITY      reduce using rule 73 (comparisonoperator -> LT .)
    SEMI_COLON      reduce using rule 73 (comparisonoperator -> LT .)
    COMMA           reduce using rule 73 (comparisonoperator -> LT .)
    $end            reduce using rule 73 (comparisonoperator -> LT .)
    LPAREN          reduce using rule 73 (comparisonoperator -> LT .)
    NUMBER_REAL     reduce using rule 73 (comparisonoperator -> LT .)
    NUMBER_EXP      reduce using rule 73 (comparisonoperator -> LT .)
    NUMBER_HEX      reduce using rule 73 (comparisonoperator -> LT .)
    NOT             reduce using rule 73 (comparisonoperator -> LT .)
    STRING_SINGLE   reduce using rule 73 (comparisonoperator -> LT .)
    STRING_DOUBLE   reduce using rule 73 (comparisonoperator -> LT .)
    LBRACE          reduce using rule 73 (comparisonoperator -> LT .)
    LSPAREN         reduce using rule 73 (comparisonoperator -> LT .)
    IF              reduce using rule 73 (comparisonoperator -> LT .)
    WITH            reduce using rule 73 (comparisonoperator -> LT .)
    WHILE           reduce using rule 73 (comparisonoperator -> LT .)
    FOR             reduce using rule 73 (comparisonoperator -> LT .)
    RPAREN          reduce using rule 73 (comparisonoperator -> LT .)
    RSPAREN         reduce using rule 73 (comparisonoperator -> LT .)
    RBRACE          reduce using rule 73 (comparisonoperator -> LT .)
    TO              reduce using rule 73 (comparisonoperator -> LT .)
    STEP            reduce using rule 73 (comparisonoperator -> LT .)
    DO              reduce using rule 73 (comparisonoperator -> LT .)


state 56

    (74) comparisonoperator -> GT .
    (79) configaccessor -> GT . GT

  ! shift/reduce conflict for GT resolved as shift
    PRIVATE_ID      reduce using rule 74 (comparisonoperator -> GT .)
    GLOBAL_ID       reduce using rule 74 (comparisonoperator -> GT .)
    PLUS            reduce using rule 74 (comparisonoperator -> GT .)
    MINUS           reduce using rule 74 (comparisonoperator -> GT .)
    TIMES           reduce using rule 74 (comparisonoperator -> GT .)
    DIVIDE          reduce using rule 74 (comparisonoperator -> GT .)
    MOD             reduce using rule 74 (comparisonoperator -> GT .)
    POW             reduce using rule 74 (comparisonoperator -> GT .)
    SELECT          reduce using rule 74 (comparisonoperator -> GT .)
    COLON           reduce using rule 74 (comparisonoperator -> GT .)
    AND             reduce using rule 74 (comparisonoperator -> GT .)
    OR              reduce using rule 74 (comparisonoperator -> GT .)
    LT              reduce using rule 74 (comparisonoperator -> GT .)
    LTE             reduce using rule 74 (comparisonoperator -> GT .)
    GTE             reduce using rule 74 (comparisonoperator -> GT .)
    EQUALITY        reduce using rule 74 (comparisonoperator -> GT .)
    INEQUALITY      reduce using rule 74 (comparisonoperator -> GT .)
    SEMI_COLON      reduce using rule 74 (comparisonoperator -> GT .)
    COMMA           reduce using rule 74 (comparisonoperator -> GT .)
    $end            reduce using rule 74 (comparisonoperator -> GT .)
    LPAREN          reduce using rule 74 (comparisonoperator -> GT .)
    NUMBER_REAL     reduce using rule 74 (comparisonoperator -> GT .)
    NUMBER_EXP      reduce using rule 74 (comparisonoperator -> GT .)
    NUMBER_HEX      reduce using rule 74 (comparisonoperator -> GT .)
    NOT             reduce using rule 74 (comparisonoperator -> GT .)
    STRING_SINGLE   reduce using rule 74 (comparisonoperator -> GT .)
    STRING_DOUBLE   reduce using rule 74 (comparisonoperator -> GT .)
    LBRACE          reduce using rule 74 (comparisonoperator -> GT .)
    LSPAREN         reduce using rule 74 (comparisonoperator -> GT .)
    IF              reduce using rule 74 (comparisonoperator -> GT .)
    WITH            reduce using rule 74 (comparisonoperator -> GT .)
    WHILE           reduce using rule 74 (comparisonoperator -> GT .)
    FOR             reduce using rule 74 (comparisonoperator -> GT .)
    RPAREN          reduce using rule 74 (comparisonoperator -> GT .)
    RSPAREN         reduce using rule 74 (comparisonoperator -> GT .)
    RBRACE          reduce using rule 74 (comparisonoperator -> GT .)
    TO              reduce using rule 74 (comparisonoperator -> GT .)
    STEP            reduce using rule 74 (comparisonoperator -> GT .)
    DO              reduce using rule 74 (comparisonoperator -> GT .)
    GT              shift and go to state 94

  ! GT              [ reduce using rule 74 (comparisonoperator -> GT .) ]


state 57

    (75) comparisonoperator -> LTE .

    PRIVATE_ID      reduce using rule 75 (comparisonoperator -> LTE .)
    GLOBAL_ID       reduce using rule 75 (comparisonoperator -> LTE .)
    PLUS            reduce using rule 75 (comparisonoperator -> LTE .)
    MINUS           reduce using rule 75 (comparisonoperator -> LTE .)
    TIMES           reduce using rule 75 (comparisonoperator -> LTE .)
    DIVIDE          reduce using rule 75 (comparisonoperator -> LTE .)
    MOD             reduce using rule 75 (comparisonoperator -> LTE .)
    POW             reduce using rule 75 (comparisonoperator -> LTE .)
    SELECT          reduce using rule 75 (comparisonoperator -> LTE .)
    COLON           reduce using rule 75 (comparisonoperator -> LTE .)
    AND             reduce using rule 75 (comparisonoperator -> LTE .)
    OR              reduce using rule 75 (comparisonoperator -> LTE .)
    LT              reduce using rule 75 (comparisonoperator -> LTE .)
    GT              reduce using rule 75 (comparisonoperator -> LTE .)
    LTE             reduce using rule 75 (comparisonoperator -> LTE .)
    GTE             reduce using rule 75 (comparisonoperator -> LTE .)
    EQUALITY        reduce using rule 75 (comparisonoperator -> LTE .)
    INEQUALITY      reduce using rule 75 (comparisonoperator -> LTE .)
    SEMI_COLON      reduce using rule 75 (comparisonoperator -> LTE .)
    COMMA           reduce using rule 75 (comparisonoperator -> LTE .)
    $end            reduce using rule 75 (comparisonoperator -> LTE .)
    LPAREN          reduce using rule 75 (comparisonoperator -> LTE .)
    NUMBER_REAL     reduce using rule 75 (comparisonoperator -> LTE .)
    NUMBER_EXP      reduce using rule 75 (comparisonoperator -> LTE .)
    NUMBER_HEX      reduce using rule 75 (comparisonoperator -> LTE .)
    NOT             reduce using rule 75 (comparisonoperator -> LTE .)
    STRING_SINGLE   reduce using rule 75 (comparisonoperator -> LTE .)
    STRING_DOUBLE   reduce using rule 75 (comparisonoperator -> LTE .)
    LBRACE          reduce using rule 75 (comparisonoperator -> LTE .)
    LSPAREN         reduce using rule 75 (comparisonoperator -> LTE .)
    IF              reduce using rule 75 (comparisonoperator -> LTE .)
    WITH            reduce using rule 75 (comparisonoperator -> LTE .)
    WHILE           reduce using rule 75 (comparisonoperator -> LTE .)
    FOR             reduce using rule 75 (comparisonoperator -> LTE .)
    RPAREN          reduce using rule 75 (comparisonoperator -> LTE .)
    RSPAREN         reduce using rule 75 (comparisonoperator -> LTE .)
    RBRACE          reduce using rule 75 (comparisonoperator -> LTE .)
    TO              reduce using rule 75 (comparisonoperator -> LTE .)
    STEP            reduce using rule 75 (comparisonoperator -> LTE .)
    DO              reduce using rule 75 (comparisonoperator -> LTE .)


state 58

    (76) comparisonoperator -> GTE .

    PRIVATE_ID      reduce using rule 76 (comparisonoperator -> GTE .)
    GLOBAL_ID       reduce using rule 76 (comparisonoperator -> GTE .)
    PLUS            reduce using rule 76 (comparisonoperator -> GTE .)
    MINUS           reduce using rule 76 (comparisonoperator -> GTE .)
    TIMES           reduce using rule 76 (comparisonoperator -> GTE .)
    DIVIDE          reduce using rule 76 (comparisonoperator -> GTE .)
    MOD             reduce using rule 76 (comparisonoperator -> GTE .)
    POW             reduce using rule 76 (comparisonoperator -> GTE .)
    SELECT          reduce using rule 76 (comparisonoperator -> GTE .)
    COLON           reduce using rule 76 (comparisonoperator -> GTE .)
    AND             reduce using rule 76 (comparisonoperator -> GTE .)
    OR              reduce using rule 76 (comparisonoperator -> GTE .)
    LT              reduce using rule 76 (comparisonoperator -> GTE .)
    GT              reduce using rule 76 (comparisonoperator -> GTE .)
    LTE             reduce using rule 76 (comparisonoperator -> GTE .)
    GTE             reduce using rule 76 (comparisonoperator -> GTE .)
    EQUALITY        reduce using rule 76 (comparisonoperator -> GTE .)
    INEQUALITY      reduce using rule 76 (comparisonoperator -> GTE .)
    SEMI_COLON      reduce using rule 76 (comparisonoperator -> GTE .)
    COMMA           reduce using rule 76 (comparisonoperator -> GTE .)
    $end            reduce using rule 76 (comparisonoperator -> GTE .)
    LPAREN          reduce using rule 76 (comparisonoperator -> GTE .)
    NUMBER_REAL     reduce using rule 76 (comparisonoperator -> GTE .)
    NUMBER_EXP      reduce using rule 76 (comparisonoperator -> GTE .)
    NUMBER_HEX      reduce using rule 76 (comparisonoperator -> GTE .)
    NOT             reduce using rule 76 (comparisonoperator -> GTE .)
    STRING_SINGLE   reduce using rule 76 (comparisonoperator -> GTE .)
    STRING_DOUBLE   reduce using rule 76 (comparisonoperator -> GTE .)
    LBRACE          reduce using rule 76 (comparisonoperator -> GTE .)
    LSPAREN         reduce using rule 76 (comparisonoperator -> GTE .)
    IF              reduce using rule 76 (comparisonoperator -> GTE .)
    WITH            reduce using rule 76 (comparisonoperator -> GTE .)
    WHILE           reduce using rule 76 (comparisonoperator -> GTE .)
    FOR             reduce using rule 76 (comparisonoperator -> GTE .)
    RPAREN          reduce using rule 76 (comparisonoperator -> GTE .)
    RSPAREN         reduce using rule 76 (comparisonoperator -> GTE .)
    RBRACE          reduce using rule 76 (comparisonoperator -> GTE .)
    TO              reduce using rule 76 (comparisonoperator -> GTE .)
    STEP            reduce using rule 76 (comparisonoperator -> GTE .)
    DO              reduce using rule 76 (comparisonoperator -> GTE .)


state 59

    (77) comparisonoperator -> EQUALITY .

    PRIVATE_ID      reduce using rule 77 (comparisonoperator -> EQUALITY .)
    GLOBAL_ID       reduce using rule 77 (comparisonoperator -> EQUALITY .)
    PLUS            reduce using rule 77 (comparisonoperator -> EQUALITY .)
    MINUS           reduce using rule 77 (comparisonoperator -> EQUALITY .)
    TIMES           reduce using rule 77 (comparisonoperator -> EQUALITY .)
    DIVIDE          reduce using rule 77 (comparisonoperator -> EQUALITY .)
    MOD             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    POW             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    SELECT          reduce using rule 77 (comparisonoperator -> EQUALITY .)
    COLON           reduce using rule 77 (comparisonoperator -> EQUALITY .)
    AND             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    OR              reduce using rule 77 (comparisonoperator -> EQUALITY .)
    LT              reduce using rule 77 (comparisonoperator -> EQUALITY .)
    GT              reduce using rule 77 (comparisonoperator -> EQUALITY .)
    LTE             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    GTE             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    EQUALITY        reduce using rule 77 (comparisonoperator -> EQUALITY .)
    INEQUALITY      reduce using rule 77 (comparisonoperator -> EQUALITY .)
    SEMI_COLON      reduce using rule 77 (comparisonoperator -> EQUALITY .)
    COMMA           reduce using rule 77 (comparisonoperator -> EQUALITY .)
    $end            reduce using rule 77 (comparisonoperator -> EQUALITY .)
    LPAREN          reduce using rule 77 (comparisonoperator -> EQUALITY .)
    NUMBER_REAL     reduce using rule 77 (comparisonoperator -> EQUALITY .)
    NUMBER_EXP      reduce using rule 77 (comparisonoperator -> EQUALITY .)
    NUMBER_HEX      reduce using rule 77 (comparisonoperator -> EQUALITY .)
    NOT             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    STRING_SINGLE   reduce using rule 77 (comparisonoperator -> EQUALITY .)
    STRING_DOUBLE   reduce using rule 77 (comparisonoperator -> EQUALITY .)
    LBRACE          reduce using rule 77 (comparisonoperator -> EQUALITY .)
    LSPAREN         reduce using rule 77 (comparisonoperator -> EQUALITY .)
    IF              reduce using rule 77 (comparisonoperator -> EQUALITY .)
    WITH            reduce using rule 77 (comparisonoperator -> EQUALITY .)
    WHILE           reduce using rule 77 (comparisonoperator -> EQUALITY .)
    FOR             reduce using rule 77 (comparisonoperator -> EQUALITY .)
    RPAREN          reduce using rule 77 (comparisonoperator -> EQUALITY .)
    RSPAREN         reduce using rule 77 (comparisonoperator -> EQUALITY .)
    RBRACE          reduce using rule 77 (comparisonoperator -> EQUALITY .)
    TO              reduce using rule 77 (comparisonoperator -> EQUALITY .)
    STEP            reduce using rule 77 (comparisonoperator -> EQUALITY .)
    DO              reduce using rule 77 (comparisonoperator -> EQUALITY .)


state 60

    (78) comparisonoperator -> INEQUALITY .

    PRIVATE_ID      reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    GLOBAL_ID       reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    PLUS            reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    MINUS           reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    TIMES           reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    DIVIDE          reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    MOD             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    POW             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    SELECT          reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    COLON           reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    AND             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    OR              reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    LT              reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    GT              reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    LTE             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    GTE             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    EQUALITY        reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    INEQUALITY      reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    SEMI_COLON      reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    COMMA           reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    $end            reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    LPAREN          reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    NUMBER_REAL     reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    NUMBER_EXP      reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    NUMBER_HEX      reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    NOT             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    STRING_SINGLE   reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    STRING_DOUBLE   reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    LBRACE          reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    LSPAREN         reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    IF              reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    WITH            reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    WHILE           reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    FOR             reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    RPAREN          reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    RSPAREN         reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    RBRACE          reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    TO              reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    STEP            reduce using rule 78 (comparisonoperator -> INEQUALITY .)
    DO              reduce using rule 78 (comparisonoperator -> INEQUALITY .)


state 61

    (3) code -> statement terminator . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (86) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . binaryexp operator binaryexp
    (10) controlstructure -> . ifstatement
    (11) controlstructure -> . whileloop
    (12) controlstructure -> . forloop
    (29) assignment -> . definition EQUAL binaryexp
    (30) assignment -> . variable EQUAL binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (18) ifstatement -> . iftype THEN bracedexp
    (19) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (23) whileloop -> . whiletype DO bracedexp
    (27) forloop -> . fortype DO bracedexp_noscope
    (31) definition -> . PRIVATE PRIVATE_ID
    (34) variable -> . PRIVATE_ID
    (35) variable -> . GLOBAL_ID
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (20) withtype -> . WITH NAMESPACE
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    $end            reduce using rule 86 (empty -> .)
    RBRACE          reduce using rule 86 (empty -> .)
    PRIVATE         shift and go to state 18
    PRIVATE_ID      shift and go to state 19
    GLOBAL_ID       shift and go to state 20
    LPAREN          shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    WITH            shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    statement                      shift and go to state 3
    code                           shift and go to state 95
    empty                          shift and go to state 2
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    operator                       shift and go to state 7
    ifstatement                    shift and go to state 8
    whileloop                      shift and go to state 9
    forloop                        shift and go to state 10
    definition                     shift and go to state 11
    variable                       shift and go to state 12
    primaryexp                     shift and go to state 13
    iftype                         shift and go to state 14
    bracedexp                      shift and go to state 15
    whiletype                      shift and go to state 16
    fortype                        shift and go to state 17
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    withtype                       shift and go to state 42
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 62

    (8) terminator -> SEMI_COLON .

    PRIVATE         reduce using rule 8 (terminator -> SEMI_COLON .)
    PRIVATE_ID      reduce using rule 8 (terminator -> SEMI_COLON .)
    GLOBAL_ID       reduce using rule 8 (terminator -> SEMI_COLON .)
    LPAREN          reduce using rule 8 (terminator -> SEMI_COLON .)
    IF              reduce using rule 8 (terminator -> SEMI_COLON .)
    WHILE           reduce using rule 8 (terminator -> SEMI_COLON .)
    FOR             reduce using rule 8 (terminator -> SEMI_COLON .)
    NUMBER_REAL     reduce using rule 8 (terminator -> SEMI_COLON .)
    NUMBER_EXP      reduce using rule 8 (terminator -> SEMI_COLON .)
    NUMBER_HEX      reduce using rule 8 (terminator -> SEMI_COLON .)
    PLUS            reduce using rule 8 (terminator -> SEMI_COLON .)
    MINUS           reduce using rule 8 (terminator -> SEMI_COLON .)
    NOT             reduce using rule 8 (terminator -> SEMI_COLON .)
    STRING_SINGLE   reduce using rule 8 (terminator -> SEMI_COLON .)
    STRING_DOUBLE   reduce using rule 8 (terminator -> SEMI_COLON .)
    LBRACE          reduce using rule 8 (terminator -> SEMI_COLON .)
    LSPAREN         reduce using rule 8 (terminator -> SEMI_COLON .)
    WITH            reduce using rule 8 (terminator -> SEMI_COLON .)
    TIMES           reduce using rule 8 (terminator -> SEMI_COLON .)
    DIVIDE          reduce using rule 8 (terminator -> SEMI_COLON .)
    MOD             reduce using rule 8 (terminator -> SEMI_COLON .)
    POW             reduce using rule 8 (terminator -> SEMI_COLON .)
    SELECT          reduce using rule 8 (terminator -> SEMI_COLON .)
    COLON           reduce using rule 8 (terminator -> SEMI_COLON .)
    AND             reduce using rule 8 (terminator -> SEMI_COLON .)
    OR              reduce using rule 8 (terminator -> SEMI_COLON .)
    LT              reduce using rule 8 (terminator -> SEMI_COLON .)
    GT              reduce using rule 8 (terminator -> SEMI_COLON .)
    LTE             reduce using rule 8 (terminator -> SEMI_COLON .)
    GTE             reduce using rule 8 (terminator -> SEMI_COLON .)
    EQUALITY        reduce using rule 8 (terminator -> SEMI_COLON .)
    INEQUALITY      reduce using rule 8 (terminator -> SEMI_COLON .)
    $end            reduce using rule 8 (terminator -> SEMI_COLON .)
    RBRACE          reduce using rule 8 (terminator -> SEMI_COLON .)


state 63

    (9) terminator -> COMMA .

    PRIVATE         reduce using rule 9 (terminator -> COMMA .)
    PRIVATE_ID      reduce using rule 9 (terminator -> COMMA .)
    GLOBAL_ID       reduce using rule 9 (terminator -> COMMA .)
    LPAREN          reduce using rule 9 (terminator -> COMMA .)
    IF              reduce using rule 9 (terminator -> COMMA .)
    WHILE           reduce using rule 9 (terminator -> COMMA .)
    FOR             reduce using rule 9 (terminator -> COMMA .)
    NUMBER_REAL     reduce using rule 9 (terminator -> COMMA .)
    NUMBER_EXP      reduce using rule 9 (terminator -> COMMA .)
    NUMBER_HEX      reduce using rule 9 (terminator -> COMMA .)
    PLUS            reduce using rule 9 (terminator -> COMMA .)
    MINUS           reduce using rule 9 (terminator -> COMMA .)
    NOT             reduce using rule 9 (terminator -> COMMA .)
    STRING_SINGLE   reduce using rule 9 (terminator -> COMMA .)
    STRING_DOUBLE   reduce using rule 9 (terminator -> COMMA .)
    LBRACE          reduce using rule 9 (terminator -> COMMA .)
    LSPAREN         reduce using rule 9 (terminator -> COMMA .)
    WITH            reduce using rule 9 (terminator -> COMMA .)
    TIMES           reduce using rule 9 (terminator -> COMMA .)
    DIVIDE          reduce using rule 9 (terminator -> COMMA .)
    MOD             reduce using rule 9 (terminator -> COMMA .)
    POW             reduce using rule 9 (terminator -> COMMA .)
    SELECT          reduce using rule 9 (terminator -> COMMA .)
    COLON           reduce using rule 9 (terminator -> COMMA .)
    AND             reduce using rule 9 (terminator -> COMMA .)
    OR              reduce using rule 9 (terminator -> COMMA .)
    LT              reduce using rule 9 (terminator -> COMMA .)
    GT              reduce using rule 9 (terminator -> COMMA .)
    LTE             reduce using rule 9 (terminator -> COMMA .)
    GTE             reduce using rule 9 (terminator -> COMMA .)
    EQUALITY        reduce using rule 9 (terminator -> COMMA .)
    INEQUALITY      reduce using rule 9 (terminator -> COMMA .)
    $end            reduce using rule 9 (terminator -> COMMA .)
    RBRACE          reduce using rule 9 (terminator -> COMMA .)


state 64

    (7) statement -> binaryexp operator . binaryexp
    (36) binaryexp -> binaryexp operator . binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 96
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 65

    (58) unaryexp -> binaryexp identifier .
    (59) operator -> identifier .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for POW resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for SELECT resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for AND resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for OR resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for LT resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for GT resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 58 (unaryexp -> binaryexp identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 58 (unaryexp -> binaryexp identifier .)
    PRIVATE_ID      reduce using rule 58 (unaryexp -> binaryexp identifier .)
    GLOBAL_ID       reduce using rule 58 (unaryexp -> binaryexp identifier .)
    PLUS            reduce using rule 58 (unaryexp -> binaryexp identifier .)
    MINUS           reduce using rule 58 (unaryexp -> binaryexp identifier .)
    TIMES           reduce using rule 58 (unaryexp -> binaryexp identifier .)
    DIVIDE          reduce using rule 58 (unaryexp -> binaryexp identifier .)
    MOD             reduce using rule 58 (unaryexp -> binaryexp identifier .)
    POW             reduce using rule 58 (unaryexp -> binaryexp identifier .)
    SELECT          reduce using rule 58 (unaryexp -> binaryexp identifier .)
    COLON           reduce using rule 58 (unaryexp -> binaryexp identifier .)
    AND             reduce using rule 58 (unaryexp -> binaryexp identifier .)
    OR              reduce using rule 58 (unaryexp -> binaryexp identifier .)
    LT              reduce using rule 58 (unaryexp -> binaryexp identifier .)
    GT              reduce using rule 58 (unaryexp -> binaryexp identifier .)
    LTE             reduce using rule 58 (unaryexp -> binaryexp identifier .)
    GTE             reduce using rule 58 (unaryexp -> binaryexp identifier .)
    EQUALITY        reduce using rule 58 (unaryexp -> binaryexp identifier .)
    INEQUALITY      reduce using rule 58 (unaryexp -> binaryexp identifier .)
    SEMI_COLON      reduce using rule 58 (unaryexp -> binaryexp identifier .)
    COMMA           reduce using rule 58 (unaryexp -> binaryexp identifier .)
    $end            reduce using rule 58 (unaryexp -> binaryexp identifier .)
    RPAREN          reduce using rule 58 (unaryexp -> binaryexp identifier .)
    RSPAREN         reduce using rule 58 (unaryexp -> binaryexp identifier .)
    RBRACE          reduce using rule 58 (unaryexp -> binaryexp identifier .)
    TO              reduce using rule 58 (unaryexp -> binaryexp identifier .)
    STEP            reduce using rule 58 (unaryexp -> binaryexp identifier .)
    DO              reduce using rule 58 (unaryexp -> binaryexp identifier .)
    LPAREN          reduce using rule 59 (operator -> identifier .)
    NUMBER_REAL     reduce using rule 59 (operator -> identifier .)
    NUMBER_EXP      reduce using rule 59 (operator -> identifier .)
    NUMBER_HEX      reduce using rule 59 (operator -> identifier .)
    NOT             reduce using rule 59 (operator -> identifier .)
    STRING_SINGLE   reduce using rule 59 (operator -> identifier .)
    STRING_DOUBLE   reduce using rule 59 (operator -> identifier .)
    LBRACE          reduce using rule 59 (operator -> identifier .)
    LSPAREN         reduce using rule 59 (operator -> identifier .)
    IF              reduce using rule 59 (operator -> identifier .)
    WITH            reduce using rule 59 (operator -> identifier .)
    WHILE           reduce using rule 59 (operator -> identifier .)
    FOR             reduce using rule 59 (operator -> identifier .)

  ! PRIVATE_ID      [ reduce using rule 59 (operator -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 59 (operator -> identifier .) ]
  ! PLUS            [ reduce using rule 59 (operator -> identifier .) ]
  ! MINUS           [ reduce using rule 59 (operator -> identifier .) ]
  ! TIMES           [ reduce using rule 59 (operator -> identifier .) ]
  ! DIVIDE          [ reduce using rule 59 (operator -> identifier .) ]
  ! MOD             [ reduce using rule 59 (operator -> identifier .) ]
  ! POW             [ reduce using rule 59 (operator -> identifier .) ]
  ! SELECT          [ reduce using rule 59 (operator -> identifier .) ]
  ! COLON           [ reduce using rule 59 (operator -> identifier .) ]
  ! AND             [ reduce using rule 59 (operator -> identifier .) ]
  ! OR              [ reduce using rule 59 (operator -> identifier .) ]
  ! LT              [ reduce using rule 59 (operator -> identifier .) ]
  ! GT              [ reduce using rule 59 (operator -> identifier .) ]
  ! LTE             [ reduce using rule 59 (operator -> identifier .) ]
  ! GTE             [ reduce using rule 59 (operator -> identifier .) ]
  ! EQUALITY        [ reduce using rule 59 (operator -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 59 (operator -> identifier .) ]


state 66

    (32) identifier -> PRIVATE_ID .

    PRIVATE_ID      reduce using rule 32 (identifier -> PRIVATE_ID .)
    GLOBAL_ID       reduce using rule 32 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 32 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 32 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 32 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 32 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 32 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 32 (identifier -> PRIVATE_ID .)
    SELECT          reduce using rule 32 (identifier -> PRIVATE_ID .)
    COLON           reduce using rule 32 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 32 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 32 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 32 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 32 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 32 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 32 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 32 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 32 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 32 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 32 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 32 (identifier -> PRIVATE_ID .)
    LPAREN          reduce using rule 32 (identifier -> PRIVATE_ID .)
    NUMBER_REAL     reduce using rule 32 (identifier -> PRIVATE_ID .)
    NUMBER_EXP      reduce using rule 32 (identifier -> PRIVATE_ID .)
    NUMBER_HEX      reduce using rule 32 (identifier -> PRIVATE_ID .)
    NOT             reduce using rule 32 (identifier -> PRIVATE_ID .)
    STRING_SINGLE   reduce using rule 32 (identifier -> PRIVATE_ID .)
    STRING_DOUBLE   reduce using rule 32 (identifier -> PRIVATE_ID .)
    LBRACE          reduce using rule 32 (identifier -> PRIVATE_ID .)
    LSPAREN         reduce using rule 32 (identifier -> PRIVATE_ID .)
    IF              reduce using rule 32 (identifier -> PRIVATE_ID .)
    WITH            reduce using rule 32 (identifier -> PRIVATE_ID .)
    WHILE           reduce using rule 32 (identifier -> PRIVATE_ID .)
    FOR             reduce using rule 32 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 32 (identifier -> PRIVATE_ID .)
    RPAREN          reduce using rule 32 (identifier -> PRIVATE_ID .)
    RSPAREN         reduce using rule 32 (identifier -> PRIVATE_ID .)
    TO              reduce using rule 32 (identifier -> PRIVATE_ID .)
    STEP            reduce using rule 32 (identifier -> PRIVATE_ID .)
    DO              reduce using rule 32 (identifier -> PRIVATE_ID .)


state 67

    (33) identifier -> GLOBAL_ID .

    PRIVATE_ID      reduce using rule 33 (identifier -> GLOBAL_ID .)
    GLOBAL_ID       reduce using rule 33 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 33 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 33 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 33 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 33 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 33 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 33 (identifier -> GLOBAL_ID .)
    SELECT          reduce using rule 33 (identifier -> GLOBAL_ID .)
    COLON           reduce using rule 33 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 33 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 33 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 33 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 33 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 33 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 33 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 33 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 33 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 33 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 33 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 33 (identifier -> GLOBAL_ID .)
    LPAREN          reduce using rule 33 (identifier -> GLOBAL_ID .)
    NUMBER_REAL     reduce using rule 33 (identifier -> GLOBAL_ID .)
    NUMBER_EXP      reduce using rule 33 (identifier -> GLOBAL_ID .)
    NUMBER_HEX      reduce using rule 33 (identifier -> GLOBAL_ID .)
    NOT             reduce using rule 33 (identifier -> GLOBAL_ID .)
    STRING_SINGLE   reduce using rule 33 (identifier -> GLOBAL_ID .)
    STRING_DOUBLE   reduce using rule 33 (identifier -> GLOBAL_ID .)
    LBRACE          reduce using rule 33 (identifier -> GLOBAL_ID .)
    LSPAREN         reduce using rule 33 (identifier -> GLOBAL_ID .)
    IF              reduce using rule 33 (identifier -> GLOBAL_ID .)
    WITH            reduce using rule 33 (identifier -> GLOBAL_ID .)
    WHILE           reduce using rule 33 (identifier -> GLOBAL_ID .)
    FOR             reduce using rule 33 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 33 (identifier -> GLOBAL_ID .)
    RPAREN          reduce using rule 33 (identifier -> GLOBAL_ID .)
    RSPAREN         reduce using rule 33 (identifier -> GLOBAL_ID .)
    TO              reduce using rule 33 (identifier -> GLOBAL_ID .)
    STEP            reduce using rule 33 (identifier -> GLOBAL_ID .)
    DO              reduce using rule 33 (identifier -> GLOBAL_ID .)


state 68

    (61) punctuation -> PLUS .

    LPAREN          reduce using rule 61 (punctuation -> PLUS .)
    NUMBER_REAL     reduce using rule 61 (punctuation -> PLUS .)
    NUMBER_EXP      reduce using rule 61 (punctuation -> PLUS .)
    NUMBER_HEX      reduce using rule 61 (punctuation -> PLUS .)
    PRIVATE_ID      reduce using rule 61 (punctuation -> PLUS .)
    GLOBAL_ID       reduce using rule 61 (punctuation -> PLUS .)
    PLUS            reduce using rule 61 (punctuation -> PLUS .)
    MINUS           reduce using rule 61 (punctuation -> PLUS .)
    NOT             reduce using rule 61 (punctuation -> PLUS .)
    STRING_SINGLE   reduce using rule 61 (punctuation -> PLUS .)
    STRING_DOUBLE   reduce using rule 61 (punctuation -> PLUS .)
    LBRACE          reduce using rule 61 (punctuation -> PLUS .)
    LSPAREN         reduce using rule 61 (punctuation -> PLUS .)
    IF              reduce using rule 61 (punctuation -> PLUS .)
    WITH            reduce using rule 61 (punctuation -> PLUS .)
    WHILE           reduce using rule 61 (punctuation -> PLUS .)
    FOR             reduce using rule 61 (punctuation -> PLUS .)
    TIMES           reduce using rule 61 (punctuation -> PLUS .)
    DIVIDE          reduce using rule 61 (punctuation -> PLUS .)
    MOD             reduce using rule 61 (punctuation -> PLUS .)
    POW             reduce using rule 61 (punctuation -> PLUS .)
    SELECT          reduce using rule 61 (punctuation -> PLUS .)
    COLON           reduce using rule 61 (punctuation -> PLUS .)
    AND             reduce using rule 61 (punctuation -> PLUS .)
    OR              reduce using rule 61 (punctuation -> PLUS .)
    LT              reduce using rule 61 (punctuation -> PLUS .)
    GT              reduce using rule 61 (punctuation -> PLUS .)
    LTE             reduce using rule 61 (punctuation -> PLUS .)
    GTE             reduce using rule 61 (punctuation -> PLUS .)
    EQUALITY        reduce using rule 61 (punctuation -> PLUS .)
    INEQUALITY      reduce using rule 61 (punctuation -> PLUS .)


state 69

    (62) punctuation -> MINUS .

    LPAREN          reduce using rule 62 (punctuation -> MINUS .)
    NUMBER_REAL     reduce using rule 62 (punctuation -> MINUS .)
    NUMBER_EXP      reduce using rule 62 (punctuation -> MINUS .)
    NUMBER_HEX      reduce using rule 62 (punctuation -> MINUS .)
    PRIVATE_ID      reduce using rule 62 (punctuation -> MINUS .)
    GLOBAL_ID       reduce using rule 62 (punctuation -> MINUS .)
    PLUS            reduce using rule 62 (punctuation -> MINUS .)
    MINUS           reduce using rule 62 (punctuation -> MINUS .)
    NOT             reduce using rule 62 (punctuation -> MINUS .)
    STRING_SINGLE   reduce using rule 62 (punctuation -> MINUS .)
    STRING_DOUBLE   reduce using rule 62 (punctuation -> MINUS .)
    LBRACE          reduce using rule 62 (punctuation -> MINUS .)
    LSPAREN         reduce using rule 62 (punctuation -> MINUS .)
    IF              reduce using rule 62 (punctuation -> MINUS .)
    WITH            reduce using rule 62 (punctuation -> MINUS .)
    WHILE           reduce using rule 62 (punctuation -> MINUS .)
    FOR             reduce using rule 62 (punctuation -> MINUS .)
    TIMES           reduce using rule 62 (punctuation -> MINUS .)
    DIVIDE          reduce using rule 62 (punctuation -> MINUS .)
    MOD             reduce using rule 62 (punctuation -> MINUS .)
    POW             reduce using rule 62 (punctuation -> MINUS .)
    SELECT          reduce using rule 62 (punctuation -> MINUS .)
    COLON           reduce using rule 62 (punctuation -> MINUS .)
    AND             reduce using rule 62 (punctuation -> MINUS .)
    OR              reduce using rule 62 (punctuation -> MINUS .)
    LT              reduce using rule 62 (punctuation -> MINUS .)
    GT              reduce using rule 62 (punctuation -> MINUS .)
    LTE             reduce using rule 62 (punctuation -> MINUS .)
    GTE             reduce using rule 62 (punctuation -> MINUS .)
    EQUALITY        reduce using rule 62 (punctuation -> MINUS .)
    INEQUALITY      reduce using rule 62 (punctuation -> MINUS .)


state 70

    (29) assignment -> definition EQUAL . binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 97
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 71

    (30) assignment -> variable EQUAL . binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 98
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 72

    (18) ifstatement -> iftype THEN . bracedexp
    (19) ifstatement -> iftype THEN . bracedexp ELSE bracedexp
    (47) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 41

    bracedexp                      shift and go to state 99

state 73

    (23) whileloop -> whiletype DO . bracedexp
    (47) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 41

    bracedexp                      shift and go to state 100

state 74

    (27) forloop -> fortype DO . bracedexp_noscope
    (28) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 102

    bracedexp_noscope              shift and go to state 101

state 75

    (31) definition -> PRIVATE PRIVATE_ID .

    EQUAL           reduce using rule 31 (definition -> PRIVATE PRIVATE_ID .)


state 76

    (57) unaryexp -> identifier primaryexp .
    (37) binaryexp -> primaryexp .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MOD resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for POW resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for SELECT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for AND resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for OR resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 57 (unaryexp -> identifier primaryexp .)
    COMMA           reduce using rule 57 (unaryexp -> identifier primaryexp .)
    $end            reduce using rule 57 (unaryexp -> identifier primaryexp .)
    RPAREN          reduce using rule 57 (unaryexp -> identifier primaryexp .)
    RSPAREN         reduce using rule 57 (unaryexp -> identifier primaryexp .)
    RBRACE          reduce using rule 57 (unaryexp -> identifier primaryexp .)
    TO              reduce using rule 57 (unaryexp -> identifier primaryexp .)
    STEP            reduce using rule 57 (unaryexp -> identifier primaryexp .)
    DO              reduce using rule 57 (unaryexp -> identifier primaryexp .)
    PRIVATE_ID      reduce using rule 37 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 37 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 37 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 37 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 37 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 37 (binaryexp -> primaryexp .)
    MOD             reduce using rule 37 (binaryexp -> primaryexp .)
    POW             reduce using rule 37 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 37 (binaryexp -> primaryexp .)
    COLON           reduce using rule 37 (binaryexp -> primaryexp .)
    AND             reduce using rule 37 (binaryexp -> primaryexp .)
    OR              reduce using rule 37 (binaryexp -> primaryexp .)
    LT              reduce using rule 37 (binaryexp -> primaryexp .)
    GT              reduce using rule 37 (binaryexp -> primaryexp .)
    LTE             reduce using rule 37 (binaryexp -> primaryexp .)
    GTE             reduce using rule 37 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 37 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 37 (binaryexp -> primaryexp .)

  ! PRIVATE_ID      [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! GLOBAL_ID       [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! PLUS            [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! MINUS           [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! TIMES           [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! DIVIDE          [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! MOD             [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! POW             [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! SELECT          [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! COLON           [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! AND             [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! OR              [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! LT              [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! GT              [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! LTE             [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! GTE             [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! EQUALITY        [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 57 (unaryexp -> identifier primaryexp .) ]


state 77

    (58) unaryexp -> binaryexp . identifier
    (36) binaryexp -> binaryexp . operator binaryexp
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    identifier                     shift and go to state 65
    operator                       shift and go to state 103
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 78

    (13) helpertype -> iftype .

    PRIVATE_ID      reduce using rule 13 (helpertype -> iftype .)
    GLOBAL_ID       reduce using rule 13 (helpertype -> iftype .)
    PLUS            reduce using rule 13 (helpertype -> iftype .)
    MINUS           reduce using rule 13 (helpertype -> iftype .)
    TIMES           reduce using rule 13 (helpertype -> iftype .)
    DIVIDE          reduce using rule 13 (helpertype -> iftype .)
    MOD             reduce using rule 13 (helpertype -> iftype .)
    POW             reduce using rule 13 (helpertype -> iftype .)
    SELECT          reduce using rule 13 (helpertype -> iftype .)
    COLON           reduce using rule 13 (helpertype -> iftype .)
    AND             reduce using rule 13 (helpertype -> iftype .)
    OR              reduce using rule 13 (helpertype -> iftype .)
    LT              reduce using rule 13 (helpertype -> iftype .)
    GT              reduce using rule 13 (helpertype -> iftype .)
    LTE             reduce using rule 13 (helpertype -> iftype .)
    GTE             reduce using rule 13 (helpertype -> iftype .)
    EQUALITY        reduce using rule 13 (helpertype -> iftype .)
    INEQUALITY      reduce using rule 13 (helpertype -> iftype .)
    SEMI_COLON      reduce using rule 13 (helpertype -> iftype .)
    COMMA           reduce using rule 13 (helpertype -> iftype .)
    $end            reduce using rule 13 (helpertype -> iftype .)
    RPAREN          reduce using rule 13 (helpertype -> iftype .)
    RSPAREN         reduce using rule 13 (helpertype -> iftype .)
    RBRACE          reduce using rule 13 (helpertype -> iftype .)
    TO              reduce using rule 13 (helpertype -> iftype .)
    STEP            reduce using rule 13 (helpertype -> iftype .)
    DO              reduce using rule 13 (helpertype -> iftype .)


state 79

    (15) helpertype -> whiletype .

    PRIVATE_ID      reduce using rule 15 (helpertype -> whiletype .)
    GLOBAL_ID       reduce using rule 15 (helpertype -> whiletype .)
    PLUS            reduce using rule 15 (helpertype -> whiletype .)
    MINUS           reduce using rule 15 (helpertype -> whiletype .)
    TIMES           reduce using rule 15 (helpertype -> whiletype .)
    DIVIDE          reduce using rule 15 (helpertype -> whiletype .)
    MOD             reduce using rule 15 (helpertype -> whiletype .)
    POW             reduce using rule 15 (helpertype -> whiletype .)
    SELECT          reduce using rule 15 (helpertype -> whiletype .)
    COLON           reduce using rule 15 (helpertype -> whiletype .)
    AND             reduce using rule 15 (helpertype -> whiletype .)
    OR              reduce using rule 15 (helpertype -> whiletype .)
    LT              reduce using rule 15 (helpertype -> whiletype .)
    GT              reduce using rule 15 (helpertype -> whiletype .)
    LTE             reduce using rule 15 (helpertype -> whiletype .)
    GTE             reduce using rule 15 (helpertype -> whiletype .)
    EQUALITY        reduce using rule 15 (helpertype -> whiletype .)
    INEQUALITY      reduce using rule 15 (helpertype -> whiletype .)
    SEMI_COLON      reduce using rule 15 (helpertype -> whiletype .)
    COMMA           reduce using rule 15 (helpertype -> whiletype .)
    $end            reduce using rule 15 (helpertype -> whiletype .)
    RPAREN          reduce using rule 15 (helpertype -> whiletype .)
    RSPAREN         reduce using rule 15 (helpertype -> whiletype .)
    RBRACE          reduce using rule 15 (helpertype -> whiletype .)
    TO              reduce using rule 15 (helpertype -> whiletype .)
    STEP            reduce using rule 15 (helpertype -> whiletype .)
    DO              reduce using rule 15 (helpertype -> whiletype .)


state 80

    (16) helpertype -> fortype .

    PRIVATE_ID      reduce using rule 16 (helpertype -> fortype .)
    GLOBAL_ID       reduce using rule 16 (helpertype -> fortype .)
    PLUS            reduce using rule 16 (helpertype -> fortype .)
    MINUS           reduce using rule 16 (helpertype -> fortype .)
    TIMES           reduce using rule 16 (helpertype -> fortype .)
    DIVIDE          reduce using rule 16 (helpertype -> fortype .)
    MOD             reduce using rule 16 (helpertype -> fortype .)
    POW             reduce using rule 16 (helpertype -> fortype .)
    SELECT          reduce using rule 16 (helpertype -> fortype .)
    COLON           reduce using rule 16 (helpertype -> fortype .)
    AND             reduce using rule 16 (helpertype -> fortype .)
    OR              reduce using rule 16 (helpertype -> fortype .)
    LT              reduce using rule 16 (helpertype -> fortype .)
    GT              reduce using rule 16 (helpertype -> fortype .)
    LTE             reduce using rule 16 (helpertype -> fortype .)
    GTE             reduce using rule 16 (helpertype -> fortype .)
    EQUALITY        reduce using rule 16 (helpertype -> fortype .)
    INEQUALITY      reduce using rule 16 (helpertype -> fortype .)
    SEMI_COLON      reduce using rule 16 (helpertype -> fortype .)
    COMMA           reduce using rule 16 (helpertype -> fortype .)
    $end            reduce using rule 16 (helpertype -> fortype .)
    RPAREN          reduce using rule 16 (helpertype -> fortype .)
    RSPAREN         reduce using rule 16 (helpertype -> fortype .)
    RBRACE          reduce using rule 16 (helpertype -> fortype .)
    TO              reduce using rule 16 (helpertype -> fortype .)
    STEP            reduce using rule 16 (helpertype -> fortype .)
    DO              reduce using rule 16 (helpertype -> fortype .)


state 81

    (44) primaryexp -> LPAREN binaryexp . RPAREN
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RPAREN          shift and go to state 104
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 82

    (17) iftype -> IF LPAREN . binaryexp RPAREN
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 105
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 83

    (21) whiletype -> WHILE LPAREN . binaryexp RPAREN
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 106
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 84

    (22) whiletype -> WHILE bracedexp .

    DO              reduce using rule 22 (whiletype -> WHILE bracedexp .)
    PRIVATE_ID      reduce using rule 22 (whiletype -> WHILE bracedexp .)
    GLOBAL_ID       reduce using rule 22 (whiletype -> WHILE bracedexp .)
    PLUS            reduce using rule 22 (whiletype -> WHILE bracedexp .)
    MINUS           reduce using rule 22 (whiletype -> WHILE bracedexp .)
    TIMES           reduce using rule 22 (whiletype -> WHILE bracedexp .)
    DIVIDE          reduce using rule 22 (whiletype -> WHILE bracedexp .)
    MOD             reduce using rule 22 (whiletype -> WHILE bracedexp .)
    POW             reduce using rule 22 (whiletype -> WHILE bracedexp .)
    SELECT          reduce using rule 22 (whiletype -> WHILE bracedexp .)
    COLON           reduce using rule 22 (whiletype -> WHILE bracedexp .)
    AND             reduce using rule 22 (whiletype -> WHILE bracedexp .)
    OR              reduce using rule 22 (whiletype -> WHILE bracedexp .)
    LT              reduce using rule 22 (whiletype -> WHILE bracedexp .)
    GT              reduce using rule 22 (whiletype -> WHILE bracedexp .)
    LTE             reduce using rule 22 (whiletype -> WHILE bracedexp .)
    GTE             reduce using rule 22 (whiletype -> WHILE bracedexp .)
    EQUALITY        reduce using rule 22 (whiletype -> WHILE bracedexp .)
    INEQUALITY      reduce using rule 22 (whiletype -> WHILE bracedexp .)
    SEMI_COLON      reduce using rule 22 (whiletype -> WHILE bracedexp .)
    COMMA           reduce using rule 22 (whiletype -> WHILE bracedexp .)
    $end            reduce using rule 22 (whiletype -> WHILE bracedexp .)
    RPAREN          reduce using rule 22 (whiletype -> WHILE bracedexp .)
    RSPAREN         reduce using rule 22 (whiletype -> WHILE bracedexp .)
    RBRACE          reduce using rule 22 (whiletype -> WHILE bracedexp .)
    TO              reduce using rule 22 (whiletype -> WHILE bracedexp .)
    STEP            reduce using rule 22 (whiletype -> WHILE bracedexp .)


state 85

    (24) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp
    (25) fortype -> FOR new_scope . string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> FOR new_scope . LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE

    LSPAREN         shift and go to state 108
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40

    string                         shift and go to state 107

state 86

    (49) array -> LSPAREN RSPAREN .

    PRIVATE_ID      reduce using rule 49 (array -> LSPAREN RSPAREN .)
    GLOBAL_ID       reduce using rule 49 (array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 49 (array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 49 (array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 49 (array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 49 (array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 49 (array -> LSPAREN RSPAREN .)
    POW             reduce using rule 49 (array -> LSPAREN RSPAREN .)
    SELECT          reduce using rule 49 (array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 49 (array -> LSPAREN RSPAREN .)
    AND             reduce using rule 49 (array -> LSPAREN RSPAREN .)
    OR              reduce using rule 49 (array -> LSPAREN RSPAREN .)
    LT              reduce using rule 49 (array -> LSPAREN RSPAREN .)
    GT              reduce using rule 49 (array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 49 (array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 49 (array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 49 (array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 49 (array -> LSPAREN RSPAREN .)
    SEMI_COLON      reduce using rule 49 (array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 49 (array -> LSPAREN RSPAREN .)
    $end            reduce using rule 49 (array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 49 (array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 49 (array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 49 (array -> LSPAREN RSPAREN .)
    TO              reduce using rule 49 (array -> LSPAREN RSPAREN .)
    STEP            reduce using rule 49 (array -> LSPAREN RSPAREN .)
    DO              reduce using rule 49 (array -> LSPAREN RSPAREN .)


state 87

    (50) array -> LSPAREN arrayelement . RSPAREN

    RSPAREN         shift and go to state 109


state 88

    (51) arrayelement -> binaryexp .
    (52) arrayelement -> binaryexp . COMMA arrayelement
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RSPAREN         reduce using rule 51 (arrayelement -> binaryexp .)
    COMMA           shift and go to state 110
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 89

    (54) unaryexp -> PLUS primaryexp .
    (37) binaryexp -> primaryexp .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MOD resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for POW resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for SELECT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for AND resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for OR resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    COMMA           reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    $end            reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    RPAREN          reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    RSPAREN         reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    RBRACE          reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    TO              reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    STEP            reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    DO              reduce using rule 54 (unaryexp -> PLUS primaryexp .)
    PRIVATE_ID      reduce using rule 37 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 37 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 37 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 37 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 37 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 37 (binaryexp -> primaryexp .)
    MOD             reduce using rule 37 (binaryexp -> primaryexp .)
    POW             reduce using rule 37 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 37 (binaryexp -> primaryexp .)
    COLON           reduce using rule 37 (binaryexp -> primaryexp .)
    AND             reduce using rule 37 (binaryexp -> primaryexp .)
    OR              reduce using rule 37 (binaryexp -> primaryexp .)
    LT              reduce using rule 37 (binaryexp -> primaryexp .)
    GT              reduce using rule 37 (binaryexp -> primaryexp .)
    LTE             reduce using rule 37 (binaryexp -> primaryexp .)
    GTE             reduce using rule 37 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 37 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 37 (binaryexp -> primaryexp .)

  ! PRIVATE_ID      [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! GLOBAL_ID       [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! PLUS            [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! MINUS           [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! TIMES           [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! DIVIDE          [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! MOD             [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! POW             [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! SELECT          [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! COLON           [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! AND             [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! OR              [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! LT              [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! GT              [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! LTE             [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! GTE             [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! EQUALITY        [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 54 (unaryexp -> PLUS primaryexp .) ]


state 90

    (55) unaryexp -> MINUS primaryexp .
    (37) binaryexp -> primaryexp .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MOD resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for POW resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for SELECT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for AND resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for OR resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    COMMA           reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    $end            reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    RPAREN          reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    RSPAREN         reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    RBRACE          reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    TO              reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    STEP            reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    DO              reduce using rule 55 (unaryexp -> MINUS primaryexp .)
    PRIVATE_ID      reduce using rule 37 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 37 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 37 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 37 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 37 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 37 (binaryexp -> primaryexp .)
    MOD             reduce using rule 37 (binaryexp -> primaryexp .)
    POW             reduce using rule 37 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 37 (binaryexp -> primaryexp .)
    COLON           reduce using rule 37 (binaryexp -> primaryexp .)
    AND             reduce using rule 37 (binaryexp -> primaryexp .)
    OR              reduce using rule 37 (binaryexp -> primaryexp .)
    LT              reduce using rule 37 (binaryexp -> primaryexp .)
    GT              reduce using rule 37 (binaryexp -> primaryexp .)
    LTE             reduce using rule 37 (binaryexp -> primaryexp .)
    GTE             reduce using rule 37 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 37 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 37 (binaryexp -> primaryexp .)

  ! PRIVATE_ID      [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! GLOBAL_ID       [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! PLUS            [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! MINUS           [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! TIMES           [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! DIVIDE          [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! MOD             [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! POW             [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! SELECT          [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! COLON           [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! AND             [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! OR              [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! LT              [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! GT              [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! LTE             [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! GTE             [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! EQUALITY        [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 55 (unaryexp -> MINUS primaryexp .) ]


state 91

    (56) unaryexp -> NOT primaryexp .
    (37) binaryexp -> primaryexp .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for MOD resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for POW resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for SELECT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for AND resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for OR resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GT resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for LTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for GTE resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 37 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 56 (unaryexp -> NOT primaryexp .)
    COMMA           reduce using rule 56 (unaryexp -> NOT primaryexp .)
    $end            reduce using rule 56 (unaryexp -> NOT primaryexp .)
    RPAREN          reduce using rule 56 (unaryexp -> NOT primaryexp .)
    RSPAREN         reduce using rule 56 (unaryexp -> NOT primaryexp .)
    RBRACE          reduce using rule 56 (unaryexp -> NOT primaryexp .)
    TO              reduce using rule 56 (unaryexp -> NOT primaryexp .)
    STEP            reduce using rule 56 (unaryexp -> NOT primaryexp .)
    DO              reduce using rule 56 (unaryexp -> NOT primaryexp .)
    PRIVATE_ID      reduce using rule 37 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 37 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 37 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 37 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 37 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 37 (binaryexp -> primaryexp .)
    MOD             reduce using rule 37 (binaryexp -> primaryexp .)
    POW             reduce using rule 37 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 37 (binaryexp -> primaryexp .)
    COLON           reduce using rule 37 (binaryexp -> primaryexp .)
    AND             reduce using rule 37 (binaryexp -> primaryexp .)
    OR              reduce using rule 37 (binaryexp -> primaryexp .)
    LT              reduce using rule 37 (binaryexp -> primaryexp .)
    GT              reduce using rule 37 (binaryexp -> primaryexp .)
    LTE             reduce using rule 37 (binaryexp -> primaryexp .)
    GTE             reduce using rule 37 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 37 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 37 (binaryexp -> primaryexp .)

  ! PRIVATE_ID      [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! GLOBAL_ID       [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! PLUS            [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! MINUS           [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! TIMES           [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! DIVIDE          [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! MOD             [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! POW             [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! SELECT          [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! COLON           [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! AND             [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! OR              [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! LT              [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! GT              [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! LTE             [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! GTE             [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! EQUALITY        [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 56 (unaryexp -> NOT primaryexp .) ]


state 92

    (47) bracedexp -> LBRACE new_scope . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (86) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . binaryexp operator binaryexp
    (10) controlstructure -> . ifstatement
    (11) controlstructure -> . whileloop
    (12) controlstructure -> . forloop
    (29) assignment -> . definition EQUAL binaryexp
    (30) assignment -> . variable EQUAL binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (18) ifstatement -> . iftype THEN bracedexp
    (19) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (23) whileloop -> . whiletype DO bracedexp
    (27) forloop -> . fortype DO bracedexp_noscope
    (31) definition -> . PRIVATE PRIVATE_ID
    (34) variable -> . PRIVATE_ID
    (35) variable -> . GLOBAL_ID
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (20) withtype -> . WITH NAMESPACE
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RBRACE          reduce using rule 86 (empty -> .)
    PRIVATE         shift and go to state 18
    PRIVATE_ID      shift and go to state 19
    GLOBAL_ID       shift and go to state 20
    LPAREN          shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    WITH            shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    code                           shift and go to state 111
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    operator                       shift and go to state 7
    ifstatement                    shift and go to state 8
    whileloop                      shift and go to state 9
    forloop                        shift and go to state 10
    definition                     shift and go to state 11
    variable                       shift and go to state 12
    primaryexp                     shift and go to state 13
    iftype                         shift and go to state 14
    bracedexp                      shift and go to state 15
    whiletype                      shift and go to state 16
    fortype                        shift and go to state 17
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    withtype                       shift and go to state 42
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 93

    (20) withtype -> WITH NAMESPACE .

    PRIVATE_ID      reduce using rule 20 (withtype -> WITH NAMESPACE .)
    GLOBAL_ID       reduce using rule 20 (withtype -> WITH NAMESPACE .)
    PLUS            reduce using rule 20 (withtype -> WITH NAMESPACE .)
    MINUS           reduce using rule 20 (withtype -> WITH NAMESPACE .)
    TIMES           reduce using rule 20 (withtype -> WITH NAMESPACE .)
    DIVIDE          reduce using rule 20 (withtype -> WITH NAMESPACE .)
    MOD             reduce using rule 20 (withtype -> WITH NAMESPACE .)
    POW             reduce using rule 20 (withtype -> WITH NAMESPACE .)
    SELECT          reduce using rule 20 (withtype -> WITH NAMESPACE .)
    COLON           reduce using rule 20 (withtype -> WITH NAMESPACE .)
    AND             reduce using rule 20 (withtype -> WITH NAMESPACE .)
    OR              reduce using rule 20 (withtype -> WITH NAMESPACE .)
    LT              reduce using rule 20 (withtype -> WITH NAMESPACE .)
    GT              reduce using rule 20 (withtype -> WITH NAMESPACE .)
    LTE             reduce using rule 20 (withtype -> WITH NAMESPACE .)
    GTE             reduce using rule 20 (withtype -> WITH NAMESPACE .)
    EQUALITY        reduce using rule 20 (withtype -> WITH NAMESPACE .)
    INEQUALITY      reduce using rule 20 (withtype -> WITH NAMESPACE .)
    SEMI_COLON      reduce using rule 20 (withtype -> WITH NAMESPACE .)
    COMMA           reduce using rule 20 (withtype -> WITH NAMESPACE .)
    $end            reduce using rule 20 (withtype -> WITH NAMESPACE .)
    RPAREN          reduce using rule 20 (withtype -> WITH NAMESPACE .)
    RSPAREN         reduce using rule 20 (withtype -> WITH NAMESPACE .)
    RBRACE          reduce using rule 20 (withtype -> WITH NAMESPACE .)
    TO              reduce using rule 20 (withtype -> WITH NAMESPACE .)
    STEP            reduce using rule 20 (withtype -> WITH NAMESPACE .)
    DO              reduce using rule 20 (withtype -> WITH NAMESPACE .)


state 94

    (79) configaccessor -> GT GT .

    PRIVATE_ID      reduce using rule 79 (configaccessor -> GT GT .)
    GLOBAL_ID       reduce using rule 79 (configaccessor -> GT GT .)
    PLUS            reduce using rule 79 (configaccessor -> GT GT .)
    MINUS           reduce using rule 79 (configaccessor -> GT GT .)
    TIMES           reduce using rule 79 (configaccessor -> GT GT .)
    DIVIDE          reduce using rule 79 (configaccessor -> GT GT .)
    MOD             reduce using rule 79 (configaccessor -> GT GT .)
    POW             reduce using rule 79 (configaccessor -> GT GT .)
    SELECT          reduce using rule 79 (configaccessor -> GT GT .)
    COLON           reduce using rule 79 (configaccessor -> GT GT .)
    AND             reduce using rule 79 (configaccessor -> GT GT .)
    OR              reduce using rule 79 (configaccessor -> GT GT .)
    LT              reduce using rule 79 (configaccessor -> GT GT .)
    GT              reduce using rule 79 (configaccessor -> GT GT .)
    LTE             reduce using rule 79 (configaccessor -> GT GT .)
    GTE             reduce using rule 79 (configaccessor -> GT GT .)
    EQUALITY        reduce using rule 79 (configaccessor -> GT GT .)
    INEQUALITY      reduce using rule 79 (configaccessor -> GT GT .)
    SEMI_COLON      reduce using rule 79 (configaccessor -> GT GT .)
    COMMA           reduce using rule 79 (configaccessor -> GT GT .)
    $end            reduce using rule 79 (configaccessor -> GT GT .)
    LPAREN          reduce using rule 79 (configaccessor -> GT GT .)
    NUMBER_REAL     reduce using rule 79 (configaccessor -> GT GT .)
    NUMBER_EXP      reduce using rule 79 (configaccessor -> GT GT .)
    NUMBER_HEX      reduce using rule 79 (configaccessor -> GT GT .)
    NOT             reduce using rule 79 (configaccessor -> GT GT .)
    STRING_SINGLE   reduce using rule 79 (configaccessor -> GT GT .)
    STRING_DOUBLE   reduce using rule 79 (configaccessor -> GT GT .)
    LBRACE          reduce using rule 79 (configaccessor -> GT GT .)
    LSPAREN         reduce using rule 79 (configaccessor -> GT GT .)
    IF              reduce using rule 79 (configaccessor -> GT GT .)
    WITH            reduce using rule 79 (configaccessor -> GT GT .)
    WHILE           reduce using rule 79 (configaccessor -> GT GT .)
    FOR             reduce using rule 79 (configaccessor -> GT GT .)
    RPAREN          reduce using rule 79 (configaccessor -> GT GT .)
    RSPAREN         reduce using rule 79 (configaccessor -> GT GT .)
    RBRACE          reduce using rule 79 (configaccessor -> GT GT .)
    TO              reduce using rule 79 (configaccessor -> GT GT .)
    STEP            reduce using rule 79 (configaccessor -> GT GT .)
    DO              reduce using rule 79 (configaccessor -> GT GT .)


state 95

    (3) code -> statement terminator code .

    $end            reduce using rule 3 (code -> statement terminator code .)
    RBRACE          reduce using rule 3 (code -> statement terminator code .)


state 96

    (7) statement -> binaryexp operator binaryexp .
    (36) binaryexp -> binaryexp operator binaryexp .
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 7 (statement -> binaryexp operator binaryexp .)
  ! reduce/reduce conflict for COMMA resolved using rule 7 (statement -> binaryexp operator binaryexp .)
  ! reduce/reduce conflict for $end resolved using rule 7 (statement -> binaryexp operator binaryexp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (statement -> binaryexp operator binaryexp .)
    SEMI_COLON      reduce using rule 7 (statement -> binaryexp operator binaryexp .)
    COMMA           reduce using rule 7 (statement -> binaryexp operator binaryexp .)
    $end            reduce using rule 7 (statement -> binaryexp operator binaryexp .)
    RBRACE          reduce using rule 7 (statement -> binaryexp operator binaryexp .)
    PRIVATE_ID      reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    GLOBAL_ID       reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    COLON           reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    AND             reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    OR              reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    LT              reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    GT              reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    LTE             reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    GTE             reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    EQUALITY        reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    INEQUALITY      reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49

  ! PLUS            [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MINUS           [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! TIMES           [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! DIVIDE          [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MOD             [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! POW             [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SELECT          [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SEMI_COLON      [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! COMMA           [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! $end            [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! RBRACE          [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! PRIVATE_ID      [ shift and go to state 66 ]
  ! GLOBAL_ID       [ shift and go to state 67 ]
  ! COLON           [ shift and go to state 50 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! GTE             [ shift and go to state 58 ]
  ! EQUALITY        [ shift and go to state 59 ]
  ! INEQUALITY      [ shift and go to state 60 ]

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 97

    (29) assignment -> definition EQUAL binaryexp .
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 29 (assignment -> definition EQUAL binaryexp .)
    COMMA           reduce using rule 29 (assignment -> definition EQUAL binaryexp .)
    $end            reduce using rule 29 (assignment -> definition EQUAL binaryexp .)
    RBRACE          reduce using rule 29 (assignment -> definition EQUAL binaryexp .)
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 98

    (30) assignment -> variable EQUAL binaryexp .
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 30 (assignment -> variable EQUAL binaryexp .)
    COMMA           reduce using rule 30 (assignment -> variable EQUAL binaryexp .)
    $end            reduce using rule 30 (assignment -> variable EQUAL binaryexp .)
    RBRACE          reduce using rule 30 (assignment -> variable EQUAL binaryexp .)
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 99

    (18) ifstatement -> iftype THEN bracedexp .
    (19) ifstatement -> iftype THEN bracedexp . ELSE bracedexp

    SEMI_COLON      reduce using rule 18 (ifstatement -> iftype THEN bracedexp .)
    COMMA           reduce using rule 18 (ifstatement -> iftype THEN bracedexp .)
    $end            reduce using rule 18 (ifstatement -> iftype THEN bracedexp .)
    RBRACE          reduce using rule 18 (ifstatement -> iftype THEN bracedexp .)
    ELSE            shift and go to state 112


state 100

    (23) whileloop -> whiletype DO bracedexp .

    SEMI_COLON      reduce using rule 23 (whileloop -> whiletype DO bracedexp .)
    COMMA           reduce using rule 23 (whileloop -> whiletype DO bracedexp .)
    $end            reduce using rule 23 (whileloop -> whiletype DO bracedexp .)
    RBRACE          reduce using rule 23 (whileloop -> whiletype DO bracedexp .)


state 101

    (27) forloop -> fortype DO bracedexp_noscope .

    SEMI_COLON      reduce using rule 27 (forloop -> fortype DO bracedexp_noscope .)
    COMMA           reduce using rule 27 (forloop -> fortype DO bracedexp_noscope .)
    $end            reduce using rule 27 (forloop -> fortype DO bracedexp_noscope .)
    RBRACE          reduce using rule 27 (forloop -> fortype DO bracedexp_noscope .)


state 102

    (28) bracedexp_noscope -> LBRACE . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (86) empty -> .
    (4) statement -> . controlstructure
    (5) statement -> . assignment
    (6) statement -> . binaryexp
    (7) statement -> . binaryexp operator binaryexp
    (10) controlstructure -> . ifstatement
    (11) controlstructure -> . whileloop
    (12) controlstructure -> . forloop
    (29) assignment -> . definition EQUAL binaryexp
    (30) assignment -> . variable EQUAL binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (18) ifstatement -> . iftype THEN bracedexp
    (19) ifstatement -> . iftype THEN bracedexp ELSE bracedexp
    (23) whileloop -> . whiletype DO bracedexp
    (27) forloop -> . fortype DO bracedexp_noscope
    (31) definition -> . PRIVATE PRIVATE_ID
    (34) variable -> . PRIVATE_ID
    (35) variable -> . GLOBAL_ID
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (20) withtype -> . WITH NAMESPACE
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RBRACE          reduce using rule 86 (empty -> .)
    PRIVATE         shift and go to state 18
    PRIVATE_ID      shift and go to state 19
    GLOBAL_ID       shift and go to state 20
    LPAREN          shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    WITH            shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    code                           shift and go to state 113
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    controlstructure               shift and go to state 4
    assignment                     shift and go to state 5
    binaryexp                      shift and go to state 6
    operator                       shift and go to state 7
    ifstatement                    shift and go to state 8
    whileloop                      shift and go to state 9
    forloop                        shift and go to state 10
    definition                     shift and go to state 11
    variable                       shift and go to state 12
    primaryexp                     shift and go to state 13
    iftype                         shift and go to state 14
    bracedexp                      shift and go to state 15
    whiletype                      shift and go to state 16
    fortype                        shift and go to state 17
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    withtype                       shift and go to state 42
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 103

    (36) binaryexp -> binaryexp operator . binaryexp
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 114
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 104

    (44) primaryexp -> LPAREN binaryexp RPAREN .

    PRIVATE_ID      reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    GLOBAL_ID       reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    PLUS            reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    MINUS           reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    TIMES           reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    DIVIDE          reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    MOD             reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    POW             reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    SELECT          reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    COLON           reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    AND             reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    OR              reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    LT              reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    GT              reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    LTE             reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    GTE             reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    EQUALITY        reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    INEQUALITY      reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    SEMI_COLON      reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    COMMA           reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    $end            reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    RPAREN          reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    RSPAREN         reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    RBRACE          reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    TO              reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    STEP            reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)
    DO              reduce using rule 44 (primaryexp -> LPAREN binaryexp RPAREN .)


state 105

    (17) iftype -> IF LPAREN binaryexp . RPAREN
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RPAREN          shift and go to state 115
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 106

    (21) whiletype -> WHILE LPAREN binaryexp . RPAREN
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    RPAREN          shift and go to state 116
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 107

    (24) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp
    (25) fortype -> FOR new_scope string . FROM primaryexp TO primaryexp STEP primaryexp

    FROM            shift and go to state 117


state 108

    (26) fortype -> FOR new_scope LSPAREN . bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (28) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 102

    bracedexp_noscope              shift and go to state 118

state 109

    (50) array -> LSPAREN arrayelement RSPAREN .

    PRIVATE_ID      reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    GLOBAL_ID       reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    PLUS            reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    MINUS           reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    TIMES           reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    DIVIDE          reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    MOD             reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    POW             reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    SELECT          reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    COLON           reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    AND             reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    OR              reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    LT              reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    GT              reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    LTE             reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    GTE             reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    EQUALITY        reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    INEQUALITY      reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    SEMI_COLON      reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    COMMA           reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    $end            reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    RPAREN          reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    RSPAREN         reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    RBRACE          reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    TO              reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    STEP            reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)
    DO              reduce using rule 50 (array -> LSPAREN arrayelement RSPAREN .)


state 110

    (52) arrayelement -> binaryexp COMMA . arrayelement
    (51) arrayelement -> . binaryexp
    (52) arrayelement -> . binaryexp COMMA arrayelement
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    binaryexp                      shift and go to state 88
    arrayelement                   shift and go to state 119
    operator                       shift and go to state 7
    primaryexp                     shift and go to state 13
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    string                         shift and go to state 25
    bracedexp                      shift and go to state 15
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 111

    (47) bracedexp -> LBRACE new_scope code . RBRACE

    RBRACE          shift and go to state 120


state 112

    (19) ifstatement -> iftype THEN bracedexp ELSE . bracedexp
    (47) bracedexp -> . LBRACE new_scope code RBRACE

    LBRACE          shift and go to state 41

    bracedexp                      shift and go to state 121

state 113

    (28) bracedexp_noscope -> LBRACE code . RBRACE

    RBRACE          shift and go to state 122


state 114

    (36) binaryexp -> binaryexp operator binaryexp .
    (36) binaryexp -> binaryexp . operator binaryexp
    (58) unaryexp -> binaryexp . identifier
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    GLOBAL_ID       reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    COLON           reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    AND             reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    OR              reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    LT              reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    GT              reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    LTE             reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    GTE             reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    EQUALITY        reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    INEQUALITY      reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    RPAREN          reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    COMMA           reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    RSPAREN         reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    SEMI_COLON      reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    $end            reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    RBRACE          reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49

  ! PLUS            [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MINUS           [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! TIMES           [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! DIVIDE          [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MOD             [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! POW             [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SELECT          [ reduce using rule 36 (binaryexp -> binaryexp operator binaryexp .) ]
  ! PRIVATE_ID      [ shift and go to state 66 ]
  ! GLOBAL_ID       [ shift and go to state 67 ]
  ! COLON           [ shift and go to state 50 ]
  ! AND             [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! GTE             [ shift and go to state 58 ]
  ! EQUALITY        [ shift and go to state 59 ]
  ! INEQUALITY      [ shift and go to state 60 ]

    operator                       shift and go to state 103
    identifier                     shift and go to state 65
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 115

    (17) iftype -> IF LPAREN binaryexp RPAREN .

    THEN            reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    PRIVATE_ID      reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    GLOBAL_ID       reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    PLUS            reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    MINUS           reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    TIMES           reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    DIVIDE          reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    MOD             reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    POW             reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    SELECT          reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    COLON           reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    AND             reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    OR              reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    LT              reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    GT              reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    LTE             reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    GTE             reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    EQUALITY        reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    INEQUALITY      reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    SEMI_COLON      reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    COMMA           reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    $end            reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    RPAREN          reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    RSPAREN         reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    RBRACE          reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    TO              reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    STEP            reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)
    DO              reduce using rule 17 (iftype -> IF LPAREN binaryexp RPAREN .)


state 116

    (21) whiletype -> WHILE LPAREN binaryexp RPAREN .

    DO              reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    PRIVATE_ID      reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    GLOBAL_ID       reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    PLUS            reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    MINUS           reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    TIMES           reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    DIVIDE          reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    MOD             reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    POW             reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    SELECT          reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    COLON           reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    AND             reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    OR              reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    LT              reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    GT              reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    LTE             reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    GTE             reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    EQUALITY        reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    INEQUALITY      reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    SEMI_COLON      reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    COMMA           reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    $end            reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    RPAREN          reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    RSPAREN         reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    RBRACE          reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    TO              reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)
    STEP            reduce using rule 21 (whiletype -> WHILE LPAREN binaryexp RPAREN .)


state 117

    (24) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp
    (25) fortype -> FOR new_scope string FROM . primaryexp TO primaryexp STEP primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    string                         shift and go to state 25
    primaryexp                     shift and go to state 123
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 118

    (26) fortype -> FOR new_scope LSPAREN bracedexp_noscope . COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 124


state 119

    (52) arrayelement -> binaryexp COMMA arrayelement .

    RSPAREN         reduce using rule 52 (arrayelement -> binaryexp COMMA arrayelement .)


state 120

    (47) bracedexp -> LBRACE new_scope code RBRACE .

    PRIVATE_ID      reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    GLOBAL_ID       reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    PLUS            reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    MINUS           reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    TIMES           reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    DIVIDE          reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    MOD             reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    POW             reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    SELECT          reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    COLON           reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    AND             reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    OR              reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    LT              reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    GT              reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    LTE             reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    GTE             reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    EQUALITY        reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    INEQUALITY      reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    SEMI_COLON      reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    COMMA           reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    $end            reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    RPAREN          reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    RSPAREN         reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    RBRACE          reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    TO              reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    STEP            reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    DO              reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)
    ELSE            reduce using rule 47 (bracedexp -> LBRACE new_scope code RBRACE .)


state 121

    (19) ifstatement -> iftype THEN bracedexp ELSE bracedexp .

    SEMI_COLON      reduce using rule 19 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    COMMA           reduce using rule 19 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    $end            reduce using rule 19 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)
    RBRACE          reduce using rule 19 (ifstatement -> iftype THEN bracedexp ELSE bracedexp .)


state 122

    (28) bracedexp_noscope -> LBRACE code RBRACE .

    SEMI_COLON      reduce using rule 28 (bracedexp_noscope -> LBRACE code RBRACE .)
    COMMA           reduce using rule 28 (bracedexp_noscope -> LBRACE code RBRACE .)
    $end            reduce using rule 28 (bracedexp_noscope -> LBRACE code RBRACE .)
    RBRACE          reduce using rule 28 (bracedexp_noscope -> LBRACE code RBRACE .)
    RSPAREN         reduce using rule 28 (bracedexp_noscope -> LBRACE code RBRACE .)


state 123

    (24) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp
    (25) fortype -> FOR new_scope string FROM primaryexp . TO primaryexp STEP primaryexp
    (37) binaryexp -> primaryexp .

    TO              shift and go to state 125
    PRIVATE_ID      reduce using rule 37 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 37 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 37 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 37 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 37 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 37 (binaryexp -> primaryexp .)
    MOD             reduce using rule 37 (binaryexp -> primaryexp .)
    POW             reduce using rule 37 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 37 (binaryexp -> primaryexp .)
    COLON           reduce using rule 37 (binaryexp -> primaryexp .)
    AND             reduce using rule 37 (binaryexp -> primaryexp .)
    OR              reduce using rule 37 (binaryexp -> primaryexp .)
    LT              reduce using rule 37 (binaryexp -> primaryexp .)
    GT              reduce using rule 37 (binaryexp -> primaryexp .)
    LTE             reduce using rule 37 (binaryexp -> primaryexp .)
    GTE             reduce using rule 37 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 37 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 37 (binaryexp -> primaryexp .)


state 124

    (26) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA . bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (28) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 102

    bracedexp_noscope              shift and go to state 126

state 125

    (24) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp
    (25) fortype -> FOR new_scope string FROM primaryexp TO . primaryexp STEP primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    string                         shift and go to state 25
    primaryexp                     shift and go to state 127
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 126

    (26) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope . COMMA bracedexp_noscope RSPAREN

    COMMA           shift and go to state 128


state 127

    (24) fortype -> FOR new_scope string FROM primaryexp TO primaryexp .
    (25) fortype -> FOR new_scope string FROM primaryexp TO primaryexp . STEP primaryexp
    (37) binaryexp -> primaryexp .

  ! shift/reduce conflict for STEP resolved as shift
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for PLUS resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for MINUS resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for TIMES resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for MOD resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for POW resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for SELECT resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for COLON resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for AND resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for OR resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for LT resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for GT resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for LTE resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for GTE resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    DO              reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    PRIVATE_ID      reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    GLOBAL_ID       reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    PLUS            reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    MINUS           reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    TIMES           reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    DIVIDE          reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    MOD             reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    POW             reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    SELECT          reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COLON           reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    AND             reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    OR              reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    LT              reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    GT              reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    LTE             reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    GTE             reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    EQUALITY        reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    INEQUALITY      reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    SEMI_COLON      reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    COMMA           reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    $end            reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RPAREN          reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RSPAREN         reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    RBRACE          reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    TO              reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .)
    STEP            shift and go to state 129

  ! STEP            [ reduce using rule 24 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp .) ]
  ! PRIVATE_ID      [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! GLOBAL_ID       [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! PLUS            [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! MINUS           [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! TIMES           [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! DIVIDE          [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! MOD             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! POW             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! SELECT          [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! COLON           [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! AND             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! OR              [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! LT              [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! GT              [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! LTE             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! GTE             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! EQUALITY        [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 37 (binaryexp -> primaryexp .) ]


state 128

    (26) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA . bracedexp_noscope RSPAREN
    (28) bracedexp_noscope -> . LBRACE code RBRACE

    LBRACE          shift and go to state 102

    bracedexp_noscope              shift and go to state 130

state 129

    (25) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP . primaryexp
    (38) primaryexp -> . number
    (39) primaryexp -> . identifier
    (40) primaryexp -> . unaryexp
    (41) primaryexp -> . nularexp
    (42) primaryexp -> . string
    (43) primaryexp -> . bracedexp
    (44) primaryexp -> . LPAREN binaryexp RPAREN
    (45) primaryexp -> . array
    (46) primaryexp -> . helpertype
    (81) number -> . NUMBER_REAL
    (82) number -> . NUMBER_EXP
    (83) number -> . NUMBER_HEX
    (32) identifier -> . PRIVATE_ID
    (33) identifier -> . GLOBAL_ID
    (54) unaryexp -> . PLUS primaryexp
    (55) unaryexp -> . MINUS primaryexp
    (56) unaryexp -> . NOT primaryexp
    (57) unaryexp -> . identifier primaryexp
    (58) unaryexp -> . binaryexp identifier
    (53) nularexp -> . operator
    (84) string -> . STRING_SINGLE
    (85) string -> . STRING_DOUBLE
    (47) bracedexp -> . LBRACE new_scope code RBRACE
    (49) array -> . LSPAREN RSPAREN
    (50) array -> . LSPAREN arrayelement RSPAREN
    (13) helpertype -> . iftype
    (14) helpertype -> . withtype
    (15) helpertype -> . whiletype
    (16) helpertype -> . fortype
    (36) binaryexp -> . binaryexp operator binaryexp
    (37) binaryexp -> . primaryexp
    (59) operator -> . identifier
    (60) operator -> . punctuation
    (17) iftype -> . IF LPAREN binaryexp RPAREN
    (20) withtype -> . WITH NAMESPACE
    (21) whiletype -> . WHILE LPAREN binaryexp RPAREN
    (22) whiletype -> . WHILE bracedexp
    (24) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp
    (25) fortype -> . FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp
    (26) fortype -> . FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN
    (61) punctuation -> . PLUS
    (62) punctuation -> . MINUS
    (63) punctuation -> . TIMES
    (64) punctuation -> . DIVIDE
    (65) punctuation -> . MOD
    (66) punctuation -> . POW
    (67) punctuation -> . SELECT
    (68) punctuation -> . COLON
    (69) punctuation -> . comparisonoperator
    (70) punctuation -> . AND
    (71) punctuation -> . OR
    (72) punctuation -> . configaccessor
    (73) comparisonoperator -> . LT
    (74) comparisonoperator -> . GT
    (75) comparisonoperator -> . LTE
    (76) comparisonoperator -> . GTE
    (77) comparisonoperator -> . EQUALITY
    (78) comparisonoperator -> . INEQUALITY
    (79) configaccessor -> . GT GT
    (80) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 26
    NUMBER_REAL     shift and go to state 33
    NUMBER_EXP      shift and go to state 34
    NUMBER_HEX      shift and go to state 35
    PRIVATE_ID      shift and go to state 66
    GLOBAL_ID       shift and go to state 67
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    NOT             shift and go to state 38
    STRING_SINGLE   shift and go to state 39
    STRING_DOUBLE   shift and go to state 40
    LBRACE          shift and go to state 41
    LSPAREN         shift and go to state 32
    IF              shift and go to state 29
    WITH            shift and go to state 44
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    POW             shift and go to state 48
    SELECT          shift and go to state 49
    COLON           shift and go to state 50
    AND             shift and go to state 52
    OR              shift and go to state 53
    LT              shift and go to state 55
    GT              shift and go to state 56
    LTE             shift and go to state 57
    GTE             shift and go to state 58
    EQUALITY        shift and go to state 59
    INEQUALITY      shift and go to state 60

    string                         shift and go to state 25
    primaryexp                     shift and go to state 131
    number                         shift and go to state 21
    identifier                     shift and go to state 22
    unaryexp                       shift and go to state 23
    nularexp                       shift and go to state 24
    bracedexp                      shift and go to state 15
    binaryexp                      shift and go to state 77
    array                          shift and go to state 27
    helpertype                     shift and go to state 28
    operator                       shift and go to state 7
    iftype                         shift and go to state 78
    withtype                       shift and go to state 42
    whiletype                      shift and go to state 79
    fortype                        shift and go to state 80
    punctuation                    shift and go to state 43
    comparisonoperator             shift and go to state 51
    configaccessor                 shift and go to state 54

state 130

    (26) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope . RSPAREN

    RSPAREN         shift and go to state 132


state 131

    (25) fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .
    (37) binaryexp -> primaryexp .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for PLUS resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for TIMES resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for MOD resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for POW resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for SELECT resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for COLON resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for AND resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for OR resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for LT resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for GT resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for LTE resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for GTE resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    DO              reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    PRIVATE_ID      reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    GLOBAL_ID       reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    PLUS            reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    MINUS           reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    TIMES           reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    DIVIDE          reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    MOD             reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    POW             reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    SELECT          reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COLON           reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    AND             reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    OR              reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    LT              reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    GT              reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    LTE             reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    GTE             reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    EQUALITY        reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    INEQUALITY      reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    SEMI_COLON      reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    COMMA           reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    $end            reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RPAREN          reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RSPAREN         reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    RBRACE          reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    TO              reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)
    STEP            reduce using rule 25 (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp .)

  ! PRIVATE_ID      [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! GLOBAL_ID       [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! PLUS            [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! MINUS           [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! TIMES           [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! DIVIDE          [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! MOD             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! POW             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! SELECT          [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! COLON           [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! AND             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! OR              [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! LT              [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! GT              [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! LTE             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! GTE             [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! EQUALITY        [ reduce using rule 37 (binaryexp -> primaryexp .) ]
  ! INEQUALITY      [ reduce using rule 37 (binaryexp -> primaryexp .) ]


state 132

    (26) fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .

    DO              reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    PRIVATE_ID      reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    GLOBAL_ID       reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    PLUS            reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    MINUS           reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    TIMES           reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    DIVIDE          reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    MOD             reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    POW             reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    SELECT          reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    COLON           reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    AND             reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    OR              reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    LT              reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    GT              reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    LTE             reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    GTE             reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    EQUALITY        reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    INEQUALITY      reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    SEMI_COLON      reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    COMMA           reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    $end            reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    RPAREN          reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    RSPAREN         reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    RBRACE          reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    TO              reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)
    STEP            reduce using rule 26 (fortype -> FOR new_scope LSPAREN bracedexp_noscope COMMA bracedexp_noscope COMMA bracedexp_noscope RSPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GT in state 56 resolved as shift
WARNING: shift/reduce conflict for STEP in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (primaryexp -> identifier)
WARNING: rejected rule (operator -> identifier) in state 22
WARNING: reduce/reduce conflict in state 46 resolved using rule (punctuation -> DIVIDE)
WARNING: rejected rule (configaccessor -> DIVIDE) in state 46
WARNING: reduce/reduce conflict in state 65 resolved using rule (unaryexp -> binaryexp identifier)
WARNING: rejected rule (operator -> identifier) in state 65
WARNING: reduce/reduce conflict in state 76 resolved using rule (binaryexp -> primaryexp)
WARNING: rejected rule (unaryexp -> identifier primaryexp) in state 76
WARNING: reduce/reduce conflict in state 89 resolved using rule (binaryexp -> primaryexp)
WARNING: rejected rule (unaryexp -> PLUS primaryexp) in state 89
WARNING: reduce/reduce conflict in state 90 resolved using rule (binaryexp -> primaryexp)
WARNING: rejected rule (unaryexp -> MINUS primaryexp) in state 90
WARNING: reduce/reduce conflict in state 91 resolved using rule (binaryexp -> primaryexp)
WARNING: rejected rule (unaryexp -> NOT primaryexp) in state 91
WARNING: reduce/reduce conflict in state 96 resolved using rule (statement -> binaryexp operator binaryexp)
WARNING: rejected rule (binaryexp -> binaryexp operator binaryexp) in state 96
WARNING: reduce/reduce conflict in state 127 resolved using rule (fortype -> FOR new_scope string FROM primaryexp TO primaryexp)
WARNING: rejected rule (binaryexp -> primaryexp) in state 127
WARNING: reduce/reduce conflict in state 131 resolved using rule (fortype -> FOR new_scope string FROM primaryexp TO primaryexp STEP primaryexp)
WARNING: rejected rule (binaryexp -> primaryexp) in state 131
WARNING: Rule (configaccessor -> DIVIDE) is never reduced
