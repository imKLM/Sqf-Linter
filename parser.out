Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COLON
    COMMENT_MULTI
    COMMENT_SINGLE
    NEWLINE

Grammar

Rule 0     S' -> code
Rule 1     code -> empty
Rule 2     code -> statement
Rule 3     code -> statement SEMI_COLON code
Rule 4     statement -> assignment
Rule 5     statement -> binaryexp
Rule 6     assignment -> definition EQUAL binaryexp
Rule 7     assignment -> identifier EQUAL binaryexp
Rule 8     definition -> PRIVATE PRIVATE_ID
Rule 9     binaryexp -> binaryexp operator binaryexp
Rule 10    binaryexp -> primaryexp
Rule 11    primaryexp -> number
Rule 12    primaryexp -> unaryexp
Rule 13    primaryexp -> nularexp
Rule 14    primaryexp -> variable
Rule 15    primaryexp -> string
Rule 16    primaryexp -> LBRACE code RBRACE
Rule 17    primaryexp -> LPAREN binaryexp RPAREN
Rule 18    primaryexp -> array
Rule 19    array -> LSPAREN RSPAREN
Rule 20    array -> LSPAREN arrayelement RSPAREN
Rule 21    arrayelement -> binaryexp
Rule 22    arrayelement -> binaryexp COMMA arrayelement
Rule 23    nularexp -> operator
Rule 24    unaryexp -> PLUS primaryexp
Rule 25    unaryexp -> MINUS primaryexp
Rule 26    unaryexp -> identifier primaryexp
Rule 27    variable -> identifier
Rule 28    operator -> identifier
Rule 29    operator -> punctuation
Rule 30    punctuation -> PLUS
Rule 31    punctuation -> MINUS
Rule 32    punctuation -> TIMES
Rule 33    punctuation -> DIVIDE
Rule 34    punctuation -> MOD
Rule 35    punctuation -> POW
Rule 36    punctuation -> SELECT
Rule 37    punctuation -> comparisonoperator
Rule 38    punctuation -> AND
Rule 39    punctuation -> OR
Rule 40    punctuation -> configaccessor
Rule 41    comparisonoperator -> LT
Rule 42    comparisonoperator -> GT
Rule 43    comparisonoperator -> LT EQUAL
Rule 44    comparisonoperator -> GT EQUAL
Rule 45    comparisonoperator -> EQUAL EQUAL
Rule 46    comparisonoperator -> NOT EQUAL
Rule 47    configaccessor -> GT GT
Rule 48    configaccessor -> DIVIDE
Rule 49    identifier -> PRIVATE_ID
Rule 50    identifier -> GLOBAL_ID
Rule 51    number -> NUMBER_REAL
Rule 52    number -> NUMBER_EXP
Rule 53    number -> NUMBER_HEX
Rule 54    string -> STRING_SINGLE
Rule 55    string -> STRING_DOUBLE
Rule 56    empty -> <empty>

Terminals, with rules where they appear

AND                  : 38
BOOL                 : 
COLON                : 
COMMA                : 22
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DIVIDE               : 33 48
EQUAL                : 6 7 43 44 45 45 46
GLOBAL_ID            : 50
GT                   : 42 44 47 47
LBRACE               : 16
LPAREN               : 17
LSPAREN              : 19 20
LT                   : 41 43
MINUS                : 25 31
MOD                  : 34
NEWLINE              : 
NOT                  : 46
NUMBER_EXP           : 52
NUMBER_HEX           : 53
NUMBER_REAL          : 51
OR                   : 39
PLUS                 : 24 30
POW                  : 35
PRIVATE              : 8
PRIVATE_ID           : 8 49
RBRACE               : 16
RPAREN               : 17
RSPAREN              : 19 20
SELECT               : 36
SEMI_COLON           : 3
STRING_DOUBLE        : 55
STRING_SINGLE        : 54
TIMES                : 32
error                : 

Nonterminals, with rules where they appear

array                : 18
arrayelement         : 20 22
assignment           : 4
binaryexp            : 5 6 7 9 9 17 21 22
code                 : 3 16 0
comparisonoperator   : 37
configaccessor       : 40
definition           : 6
empty                : 1
identifier           : 7 26 27 28
nularexp             : 13
number               : 11
operator             : 9 23
primaryexp           : 10 24 25 26
punctuation          : 29
statement            : 2 3
string               : 15
unaryexp             : 12
variable             : 14

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement SEMI_COLON code
    (56) empty -> .
    (4) statement -> . assignment
    (5) statement -> . binaryexp
    (6) assignment -> . definition EQUAL binaryexp
    (7) assignment -> . identifier EQUAL binaryexp
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (8) definition -> . PRIVATE PRIVATE_ID
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    $end            reduce using rule 56 (empty -> .)
    PRIVATE         shift and go to state 11
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    code                           shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    binaryexp                      shift and go to state 5
    definition                     shift and go to state 6
    identifier                     shift and go to state 8
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 1

    (0) S' -> code .



state 2

    (1) code -> empty .

    $end            reduce using rule 1 (code -> empty .)
    RBRACE          reduce using rule 1 (code -> empty .)


state 3

    (2) code -> statement .
    (3) code -> statement . SEMI_COLON code

    $end            reduce using rule 2 (code -> statement .)
    RBRACE          reduce using rule 2 (code -> statement .)
    SEMI_COLON      shift and go to state 43


state 4

    (4) statement -> assignment .

    SEMI_COLON      reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> binaryexp .
    (9) binaryexp -> binaryexp . operator binaryexp
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 5 (statement -> binaryexp .)
    $end            reduce using rule 5 (statement -> binaryexp .)
    RBRACE          reduce using rule 5 (statement -> binaryexp .)
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    operator                       shift and go to state 44
    identifier                     shift and go to state 45
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 6

    (6) assignment -> definition . EQUAL binaryexp

    EQUAL           shift and go to state 48


state 7

    (45) comparisonoperator -> EQUAL . EQUAL

    EQUAL           shift and go to state 49


state 8

    (7) assignment -> identifier . EQUAL binaryexp
    (26) unaryexp -> identifier . primaryexp
    (27) variable -> identifier .
    (28) operator -> identifier .
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for SELECT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 27 (variable -> identifier .)
  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for NOT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 27 (variable -> identifier .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    EQUAL           shift and go to state 51
    SEMI_COLON      reduce using rule 27 (variable -> identifier .)
    $end            reduce using rule 27 (variable -> identifier .)
    RBRACE          reduce using rule 27 (variable -> identifier .)
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    NOT             shift and go to state 42

  ! PRIVATE_ID      [ reduce using rule 27 (variable -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 27 (variable -> identifier .) ]
  ! PLUS            [ reduce using rule 27 (variable -> identifier .) ]
  ! MINUS           [ reduce using rule 27 (variable -> identifier .) ]
  ! TIMES           [ reduce using rule 27 (variable -> identifier .) ]
  ! DIVIDE          [ reduce using rule 27 (variable -> identifier .) ]
  ! MOD             [ reduce using rule 27 (variable -> identifier .) ]
  ! POW             [ reduce using rule 27 (variable -> identifier .) ]
  ! SELECT          [ reduce using rule 27 (variable -> identifier .) ]
  ! AND             [ reduce using rule 27 (variable -> identifier .) ]
  ! OR              [ reduce using rule 27 (variable -> identifier .) ]
  ! LT              [ reduce using rule 27 (variable -> identifier .) ]
  ! GT              [ reduce using rule 27 (variable -> identifier .) ]
  ! EQUAL           [ reduce using rule 27 (variable -> identifier .) ]
  ! NOT             [ reduce using rule 27 (variable -> identifier .) ]
  ! PRIVATE_ID      [ reduce using rule 28 (operator -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 28 (operator -> identifier .) ]
  ! PLUS            [ reduce using rule 28 (operator -> identifier .) ]
  ! MINUS           [ reduce using rule 28 (operator -> identifier .) ]
  ! TIMES           [ reduce using rule 28 (operator -> identifier .) ]
  ! DIVIDE          [ reduce using rule 28 (operator -> identifier .) ]
  ! MOD             [ reduce using rule 28 (operator -> identifier .) ]
  ! POW             [ reduce using rule 28 (operator -> identifier .) ]
  ! SELECT          [ reduce using rule 28 (operator -> identifier .) ]
  ! AND             [ reduce using rule 28 (operator -> identifier .) ]
  ! OR              [ reduce using rule 28 (operator -> identifier .) ]
  ! LT              [ reduce using rule 28 (operator -> identifier .) ]
  ! GT              [ reduce using rule 28 (operator -> identifier .) ]
  ! EQUAL           [ reduce using rule 28 (operator -> identifier .) ]
  ! NOT             [ reduce using rule 28 (operator -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 28 (operator -> identifier .) ]
  ! $end            [ reduce using rule 28 (operator -> identifier .) ]
  ! RBRACE          [ reduce using rule 28 (operator -> identifier .) ]

    identifier                     shift and go to state 50
    primaryexp                     shift and go to state 52
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    operator                       shift and go to state 9
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 9

    (23) nularexp -> operator .

    PRIVATE_ID      reduce using rule 23 (nularexp -> operator .)
    GLOBAL_ID       reduce using rule 23 (nularexp -> operator .)
    PLUS            reduce using rule 23 (nularexp -> operator .)
    MINUS           reduce using rule 23 (nularexp -> operator .)
    TIMES           reduce using rule 23 (nularexp -> operator .)
    DIVIDE          reduce using rule 23 (nularexp -> operator .)
    MOD             reduce using rule 23 (nularexp -> operator .)
    POW             reduce using rule 23 (nularexp -> operator .)
    SELECT          reduce using rule 23 (nularexp -> operator .)
    AND             reduce using rule 23 (nularexp -> operator .)
    OR              reduce using rule 23 (nularexp -> operator .)
    LT              reduce using rule 23 (nularexp -> operator .)
    GT              reduce using rule 23 (nularexp -> operator .)
    EQUAL           reduce using rule 23 (nularexp -> operator .)
    NOT             reduce using rule 23 (nularexp -> operator .)
    SEMI_COLON      reduce using rule 23 (nularexp -> operator .)
    $end            reduce using rule 23 (nularexp -> operator .)
    RBRACE          reduce using rule 23 (nularexp -> operator .)
    RPAREN          reduce using rule 23 (nularexp -> operator .)
    COMMA           reduce using rule 23 (nularexp -> operator .)
    RSPAREN         reduce using rule 23 (nularexp -> operator .)


state 10

    (10) binaryexp -> primaryexp .

    PRIVATE_ID      reduce using rule 10 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 10 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 10 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 10 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 10 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 10 (binaryexp -> primaryexp .)
    MOD             reduce using rule 10 (binaryexp -> primaryexp .)
    POW             reduce using rule 10 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 10 (binaryexp -> primaryexp .)
    AND             reduce using rule 10 (binaryexp -> primaryexp .)
    OR              reduce using rule 10 (binaryexp -> primaryexp .)
    LT              reduce using rule 10 (binaryexp -> primaryexp .)
    GT              reduce using rule 10 (binaryexp -> primaryexp .)
    EQUAL           reduce using rule 10 (binaryexp -> primaryexp .)
    NOT             reduce using rule 10 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 10 (binaryexp -> primaryexp .)
    $end            reduce using rule 10 (binaryexp -> primaryexp .)
    RBRACE          reduce using rule 10 (binaryexp -> primaryexp .)
    RPAREN          reduce using rule 10 (binaryexp -> primaryexp .)
    COMMA           reduce using rule 10 (binaryexp -> primaryexp .)
    RSPAREN         reduce using rule 10 (binaryexp -> primaryexp .)


state 11

    (8) definition -> PRIVATE . PRIVATE_ID

    PRIVATE_ID      shift and go to state 53


state 12

    (49) identifier -> PRIVATE_ID .

    EQUAL           reduce using rule 49 (identifier -> PRIVATE_ID .)
    LBRACE          reduce using rule 49 (identifier -> PRIVATE_ID .)
    LPAREN          reduce using rule 49 (identifier -> PRIVATE_ID .)
    NUMBER_REAL     reduce using rule 49 (identifier -> PRIVATE_ID .)
    NUMBER_EXP      reduce using rule 49 (identifier -> PRIVATE_ID .)
    NUMBER_HEX      reduce using rule 49 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 49 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 49 (identifier -> PRIVATE_ID .)
    STRING_SINGLE   reduce using rule 49 (identifier -> PRIVATE_ID .)
    STRING_DOUBLE   reduce using rule 49 (identifier -> PRIVATE_ID .)
    LSPAREN         reduce using rule 49 (identifier -> PRIVATE_ID .)
    PRIVATE_ID      reduce using rule 49 (identifier -> PRIVATE_ID .)
    GLOBAL_ID       reduce using rule 49 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 49 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 49 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 49 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 49 (identifier -> PRIVATE_ID .)
    SELECT          reduce using rule 49 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 49 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 49 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 49 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 49 (identifier -> PRIVATE_ID .)
    NOT             reduce using rule 49 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 49 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 49 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 49 (identifier -> PRIVATE_ID .)
    RPAREN          reduce using rule 49 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 49 (identifier -> PRIVATE_ID .)
    RSPAREN         reduce using rule 49 (identifier -> PRIVATE_ID .)


state 13

    (50) identifier -> GLOBAL_ID .

    EQUAL           reduce using rule 50 (identifier -> GLOBAL_ID .)
    LBRACE          reduce using rule 50 (identifier -> GLOBAL_ID .)
    LPAREN          reduce using rule 50 (identifier -> GLOBAL_ID .)
    NUMBER_REAL     reduce using rule 50 (identifier -> GLOBAL_ID .)
    NUMBER_EXP      reduce using rule 50 (identifier -> GLOBAL_ID .)
    NUMBER_HEX      reduce using rule 50 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 50 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 50 (identifier -> GLOBAL_ID .)
    STRING_SINGLE   reduce using rule 50 (identifier -> GLOBAL_ID .)
    STRING_DOUBLE   reduce using rule 50 (identifier -> GLOBAL_ID .)
    LSPAREN         reduce using rule 50 (identifier -> GLOBAL_ID .)
    PRIVATE_ID      reduce using rule 50 (identifier -> GLOBAL_ID .)
    GLOBAL_ID       reduce using rule 50 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 50 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 50 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 50 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 50 (identifier -> GLOBAL_ID .)
    SELECT          reduce using rule 50 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 50 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 50 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 50 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 50 (identifier -> GLOBAL_ID .)
    NOT             reduce using rule 50 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 50 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 50 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 50 (identifier -> GLOBAL_ID .)
    RPAREN          reduce using rule 50 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 50 (identifier -> GLOBAL_ID .)
    RSPAREN         reduce using rule 50 (identifier -> GLOBAL_ID .)


state 14

    (11) primaryexp -> number .

    PRIVATE_ID      reduce using rule 11 (primaryexp -> number .)
    GLOBAL_ID       reduce using rule 11 (primaryexp -> number .)
    PLUS            reduce using rule 11 (primaryexp -> number .)
    MINUS           reduce using rule 11 (primaryexp -> number .)
    TIMES           reduce using rule 11 (primaryexp -> number .)
    DIVIDE          reduce using rule 11 (primaryexp -> number .)
    MOD             reduce using rule 11 (primaryexp -> number .)
    POW             reduce using rule 11 (primaryexp -> number .)
    SELECT          reduce using rule 11 (primaryexp -> number .)
    AND             reduce using rule 11 (primaryexp -> number .)
    OR              reduce using rule 11 (primaryexp -> number .)
    LT              reduce using rule 11 (primaryexp -> number .)
    GT              reduce using rule 11 (primaryexp -> number .)
    EQUAL           reduce using rule 11 (primaryexp -> number .)
    NOT             reduce using rule 11 (primaryexp -> number .)
    SEMI_COLON      reduce using rule 11 (primaryexp -> number .)
    $end            reduce using rule 11 (primaryexp -> number .)
    RBRACE          reduce using rule 11 (primaryexp -> number .)
    RPAREN          reduce using rule 11 (primaryexp -> number .)
    COMMA           reduce using rule 11 (primaryexp -> number .)
    RSPAREN         reduce using rule 11 (primaryexp -> number .)


state 15

    (12) primaryexp -> unaryexp .

    PRIVATE_ID      reduce using rule 12 (primaryexp -> unaryexp .)
    GLOBAL_ID       reduce using rule 12 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 12 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 12 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 12 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 12 (primaryexp -> unaryexp .)
    MOD             reduce using rule 12 (primaryexp -> unaryexp .)
    POW             reduce using rule 12 (primaryexp -> unaryexp .)
    SELECT          reduce using rule 12 (primaryexp -> unaryexp .)
    AND             reduce using rule 12 (primaryexp -> unaryexp .)
    OR              reduce using rule 12 (primaryexp -> unaryexp .)
    LT              reduce using rule 12 (primaryexp -> unaryexp .)
    GT              reduce using rule 12 (primaryexp -> unaryexp .)
    EQUAL           reduce using rule 12 (primaryexp -> unaryexp .)
    NOT             reduce using rule 12 (primaryexp -> unaryexp .)
    SEMI_COLON      reduce using rule 12 (primaryexp -> unaryexp .)
    $end            reduce using rule 12 (primaryexp -> unaryexp .)
    RBRACE          reduce using rule 12 (primaryexp -> unaryexp .)
    RPAREN          reduce using rule 12 (primaryexp -> unaryexp .)
    COMMA           reduce using rule 12 (primaryexp -> unaryexp .)
    RSPAREN         reduce using rule 12 (primaryexp -> unaryexp .)


state 16

    (13) primaryexp -> nularexp .

    PRIVATE_ID      reduce using rule 13 (primaryexp -> nularexp .)
    GLOBAL_ID       reduce using rule 13 (primaryexp -> nularexp .)
    PLUS            reduce using rule 13 (primaryexp -> nularexp .)
    MINUS           reduce using rule 13 (primaryexp -> nularexp .)
    TIMES           reduce using rule 13 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 13 (primaryexp -> nularexp .)
    MOD             reduce using rule 13 (primaryexp -> nularexp .)
    POW             reduce using rule 13 (primaryexp -> nularexp .)
    SELECT          reduce using rule 13 (primaryexp -> nularexp .)
    AND             reduce using rule 13 (primaryexp -> nularexp .)
    OR              reduce using rule 13 (primaryexp -> nularexp .)
    LT              reduce using rule 13 (primaryexp -> nularexp .)
    GT              reduce using rule 13 (primaryexp -> nularexp .)
    EQUAL           reduce using rule 13 (primaryexp -> nularexp .)
    NOT             reduce using rule 13 (primaryexp -> nularexp .)
    SEMI_COLON      reduce using rule 13 (primaryexp -> nularexp .)
    $end            reduce using rule 13 (primaryexp -> nularexp .)
    RBRACE          reduce using rule 13 (primaryexp -> nularexp .)
    RPAREN          reduce using rule 13 (primaryexp -> nularexp .)
    COMMA           reduce using rule 13 (primaryexp -> nularexp .)
    RSPAREN         reduce using rule 13 (primaryexp -> nularexp .)


state 17

    (14) primaryexp -> variable .

    PRIVATE_ID      reduce using rule 14 (primaryexp -> variable .)
    GLOBAL_ID       reduce using rule 14 (primaryexp -> variable .)
    PLUS            reduce using rule 14 (primaryexp -> variable .)
    MINUS           reduce using rule 14 (primaryexp -> variable .)
    TIMES           reduce using rule 14 (primaryexp -> variable .)
    DIVIDE          reduce using rule 14 (primaryexp -> variable .)
    MOD             reduce using rule 14 (primaryexp -> variable .)
    POW             reduce using rule 14 (primaryexp -> variable .)
    SELECT          reduce using rule 14 (primaryexp -> variable .)
    AND             reduce using rule 14 (primaryexp -> variable .)
    OR              reduce using rule 14 (primaryexp -> variable .)
    LT              reduce using rule 14 (primaryexp -> variable .)
    GT              reduce using rule 14 (primaryexp -> variable .)
    EQUAL           reduce using rule 14 (primaryexp -> variable .)
    NOT             reduce using rule 14 (primaryexp -> variable .)
    SEMI_COLON      reduce using rule 14 (primaryexp -> variable .)
    $end            reduce using rule 14 (primaryexp -> variable .)
    RBRACE          reduce using rule 14 (primaryexp -> variable .)
    RPAREN          reduce using rule 14 (primaryexp -> variable .)
    COMMA           reduce using rule 14 (primaryexp -> variable .)
    RSPAREN         reduce using rule 14 (primaryexp -> variable .)


state 18

    (15) primaryexp -> string .

    PRIVATE_ID      reduce using rule 15 (primaryexp -> string .)
    GLOBAL_ID       reduce using rule 15 (primaryexp -> string .)
    PLUS            reduce using rule 15 (primaryexp -> string .)
    MINUS           reduce using rule 15 (primaryexp -> string .)
    TIMES           reduce using rule 15 (primaryexp -> string .)
    DIVIDE          reduce using rule 15 (primaryexp -> string .)
    MOD             reduce using rule 15 (primaryexp -> string .)
    POW             reduce using rule 15 (primaryexp -> string .)
    SELECT          reduce using rule 15 (primaryexp -> string .)
    AND             reduce using rule 15 (primaryexp -> string .)
    OR              reduce using rule 15 (primaryexp -> string .)
    LT              reduce using rule 15 (primaryexp -> string .)
    GT              reduce using rule 15 (primaryexp -> string .)
    EQUAL           reduce using rule 15 (primaryexp -> string .)
    NOT             reduce using rule 15 (primaryexp -> string .)
    SEMI_COLON      reduce using rule 15 (primaryexp -> string .)
    $end            reduce using rule 15 (primaryexp -> string .)
    RBRACE          reduce using rule 15 (primaryexp -> string .)
    RPAREN          reduce using rule 15 (primaryexp -> string .)
    COMMA           reduce using rule 15 (primaryexp -> string .)
    RSPAREN         reduce using rule 15 (primaryexp -> string .)


state 19

    (16) primaryexp -> LBRACE . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement SEMI_COLON code
    (56) empty -> .
    (4) statement -> . assignment
    (5) statement -> . binaryexp
    (6) assignment -> . definition EQUAL binaryexp
    (7) assignment -> . identifier EQUAL binaryexp
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (8) definition -> . PRIVATE PRIVATE_ID
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    RBRACE          reduce using rule 56 (empty -> .)
    PRIVATE         shift and go to state 11
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    code                           shift and go to state 54
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    binaryexp                      shift and go to state 5
    definition                     shift and go to state 6
    identifier                     shift and go to state 8
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 20

    (17) primaryexp -> LPAREN . binaryexp RPAREN
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    binaryexp                      shift and go to state 55
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 21

    (18) primaryexp -> array .

    PRIVATE_ID      reduce using rule 18 (primaryexp -> array .)
    GLOBAL_ID       reduce using rule 18 (primaryexp -> array .)
    PLUS            reduce using rule 18 (primaryexp -> array .)
    MINUS           reduce using rule 18 (primaryexp -> array .)
    TIMES           reduce using rule 18 (primaryexp -> array .)
    DIVIDE          reduce using rule 18 (primaryexp -> array .)
    MOD             reduce using rule 18 (primaryexp -> array .)
    POW             reduce using rule 18 (primaryexp -> array .)
    SELECT          reduce using rule 18 (primaryexp -> array .)
    AND             reduce using rule 18 (primaryexp -> array .)
    OR              reduce using rule 18 (primaryexp -> array .)
    LT              reduce using rule 18 (primaryexp -> array .)
    GT              reduce using rule 18 (primaryexp -> array .)
    EQUAL           reduce using rule 18 (primaryexp -> array .)
    NOT             reduce using rule 18 (primaryexp -> array .)
    SEMI_COLON      reduce using rule 18 (primaryexp -> array .)
    $end            reduce using rule 18 (primaryexp -> array .)
    RBRACE          reduce using rule 18 (primaryexp -> array .)
    RPAREN          reduce using rule 18 (primaryexp -> array .)
    COMMA           reduce using rule 18 (primaryexp -> array .)
    RSPAREN         reduce using rule 18 (primaryexp -> array .)


state 22

    (51) number -> NUMBER_REAL .

    PRIVATE_ID      reduce using rule 51 (number -> NUMBER_REAL .)
    GLOBAL_ID       reduce using rule 51 (number -> NUMBER_REAL .)
    PLUS            reduce using rule 51 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 51 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 51 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 51 (number -> NUMBER_REAL .)
    MOD             reduce using rule 51 (number -> NUMBER_REAL .)
    POW             reduce using rule 51 (number -> NUMBER_REAL .)
    SELECT          reduce using rule 51 (number -> NUMBER_REAL .)
    AND             reduce using rule 51 (number -> NUMBER_REAL .)
    OR              reduce using rule 51 (number -> NUMBER_REAL .)
    LT              reduce using rule 51 (number -> NUMBER_REAL .)
    GT              reduce using rule 51 (number -> NUMBER_REAL .)
    EQUAL           reduce using rule 51 (number -> NUMBER_REAL .)
    NOT             reduce using rule 51 (number -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 51 (number -> NUMBER_REAL .)
    $end            reduce using rule 51 (number -> NUMBER_REAL .)
    RBRACE          reduce using rule 51 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 51 (number -> NUMBER_REAL .)
    COMMA           reduce using rule 51 (number -> NUMBER_REAL .)
    RSPAREN         reduce using rule 51 (number -> NUMBER_REAL .)


state 23

    (52) number -> NUMBER_EXP .

    PRIVATE_ID      reduce using rule 52 (number -> NUMBER_EXP .)
    GLOBAL_ID       reduce using rule 52 (number -> NUMBER_EXP .)
    PLUS            reduce using rule 52 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 52 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 52 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 52 (number -> NUMBER_EXP .)
    MOD             reduce using rule 52 (number -> NUMBER_EXP .)
    POW             reduce using rule 52 (number -> NUMBER_EXP .)
    SELECT          reduce using rule 52 (number -> NUMBER_EXP .)
    AND             reduce using rule 52 (number -> NUMBER_EXP .)
    OR              reduce using rule 52 (number -> NUMBER_EXP .)
    LT              reduce using rule 52 (number -> NUMBER_EXP .)
    GT              reduce using rule 52 (number -> NUMBER_EXP .)
    EQUAL           reduce using rule 52 (number -> NUMBER_EXP .)
    NOT             reduce using rule 52 (number -> NUMBER_EXP .)
    SEMI_COLON      reduce using rule 52 (number -> NUMBER_EXP .)
    $end            reduce using rule 52 (number -> NUMBER_EXP .)
    RBRACE          reduce using rule 52 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 52 (number -> NUMBER_EXP .)
    COMMA           reduce using rule 52 (number -> NUMBER_EXP .)
    RSPAREN         reduce using rule 52 (number -> NUMBER_EXP .)


state 24

    (53) number -> NUMBER_HEX .

    PRIVATE_ID      reduce using rule 53 (number -> NUMBER_HEX .)
    GLOBAL_ID       reduce using rule 53 (number -> NUMBER_HEX .)
    PLUS            reduce using rule 53 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 53 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 53 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 53 (number -> NUMBER_HEX .)
    MOD             reduce using rule 53 (number -> NUMBER_HEX .)
    POW             reduce using rule 53 (number -> NUMBER_HEX .)
    SELECT          reduce using rule 53 (number -> NUMBER_HEX .)
    AND             reduce using rule 53 (number -> NUMBER_HEX .)
    OR              reduce using rule 53 (number -> NUMBER_HEX .)
    LT              reduce using rule 53 (number -> NUMBER_HEX .)
    GT              reduce using rule 53 (number -> NUMBER_HEX .)
    EQUAL           reduce using rule 53 (number -> NUMBER_HEX .)
    NOT             reduce using rule 53 (number -> NUMBER_HEX .)
    SEMI_COLON      reduce using rule 53 (number -> NUMBER_HEX .)
    $end            reduce using rule 53 (number -> NUMBER_HEX .)
    RBRACE          reduce using rule 53 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 53 (number -> NUMBER_HEX .)
    COMMA           reduce using rule 53 (number -> NUMBER_HEX .)
    RSPAREN         reduce using rule 53 (number -> NUMBER_HEX .)


state 25

    (24) unaryexp -> PLUS . primaryexp
    (30) punctuation -> PLUS .
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 30 (punctuation -> PLUS .)
    GLOBAL_ID       reduce using rule 30 (punctuation -> PLUS .)
    PLUS            reduce using rule 30 (punctuation -> PLUS .)
    MINUS           reduce using rule 30 (punctuation -> PLUS .)
    AND             reduce using rule 30 (punctuation -> PLUS .)
    OR              reduce using rule 30 (punctuation -> PLUS .)
    LT              reduce using rule 30 (punctuation -> PLUS .)
    GT              reduce using rule 30 (punctuation -> PLUS .)
    EQUAL           reduce using rule 30 (punctuation -> PLUS .)
    NOT             reduce using rule 30 (punctuation -> PLUS .)
    SEMI_COLON      reduce using rule 30 (punctuation -> PLUS .)
    $end            reduce using rule 30 (punctuation -> PLUS .)
    RBRACE          reduce using rule 30 (punctuation -> PLUS .)
    RPAREN          reduce using rule 30 (punctuation -> PLUS .)
    COMMA           reduce using rule 30 (punctuation -> PLUS .)
    RSPAREN         reduce using rule 30 (punctuation -> PLUS .)
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35

  ! TIMES           [ reduce using rule 30 (punctuation -> PLUS .) ]
  ! DIVIDE          [ reduce using rule 30 (punctuation -> PLUS .) ]
  ! MOD             [ reduce using rule 30 (punctuation -> PLUS .) ]
  ! POW             [ reduce using rule 30 (punctuation -> PLUS .) ]
  ! SELECT          [ reduce using rule 30 (punctuation -> PLUS .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! PRIVATE_ID      [ shift and go to state 12 ]
  ! GLOBAL_ID       [ shift and go to state 13 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 40 ]
  ! GT              [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 7 ]
  ! NOT             [ shift and go to state 42 ]

    primaryexp                     shift and go to state 56
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    operator                       shift and go to state 9
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 26

    (25) unaryexp -> MINUS . primaryexp
    (31) punctuation -> MINUS .
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 31 (punctuation -> MINUS .)
    GLOBAL_ID       reduce using rule 31 (punctuation -> MINUS .)
    PLUS            reduce using rule 31 (punctuation -> MINUS .)
    MINUS           reduce using rule 31 (punctuation -> MINUS .)
    AND             reduce using rule 31 (punctuation -> MINUS .)
    OR              reduce using rule 31 (punctuation -> MINUS .)
    LT              reduce using rule 31 (punctuation -> MINUS .)
    GT              reduce using rule 31 (punctuation -> MINUS .)
    EQUAL           reduce using rule 31 (punctuation -> MINUS .)
    NOT             reduce using rule 31 (punctuation -> MINUS .)
    SEMI_COLON      reduce using rule 31 (punctuation -> MINUS .)
    $end            reduce using rule 31 (punctuation -> MINUS .)
    RBRACE          reduce using rule 31 (punctuation -> MINUS .)
    RPAREN          reduce using rule 31 (punctuation -> MINUS .)
    COMMA           reduce using rule 31 (punctuation -> MINUS .)
    RSPAREN         reduce using rule 31 (punctuation -> MINUS .)
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35

  ! TIMES           [ reduce using rule 31 (punctuation -> MINUS .) ]
  ! DIVIDE          [ reduce using rule 31 (punctuation -> MINUS .) ]
  ! MOD             [ reduce using rule 31 (punctuation -> MINUS .) ]
  ! POW             [ reduce using rule 31 (punctuation -> MINUS .) ]
  ! SELECT          [ reduce using rule 31 (punctuation -> MINUS .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! PRIVATE_ID      [ shift and go to state 12 ]
  ! GLOBAL_ID       [ shift and go to state 13 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 40 ]
  ! GT              [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 7 ]
  ! NOT             [ shift and go to state 42 ]

    primaryexp                     shift and go to state 57
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    operator                       shift and go to state 9
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 27

    (54) string -> STRING_SINGLE .

    PRIVATE_ID      reduce using rule 54 (string -> STRING_SINGLE .)
    GLOBAL_ID       reduce using rule 54 (string -> STRING_SINGLE .)
    PLUS            reduce using rule 54 (string -> STRING_SINGLE .)
    MINUS           reduce using rule 54 (string -> STRING_SINGLE .)
    TIMES           reduce using rule 54 (string -> STRING_SINGLE .)
    DIVIDE          reduce using rule 54 (string -> STRING_SINGLE .)
    MOD             reduce using rule 54 (string -> STRING_SINGLE .)
    POW             reduce using rule 54 (string -> STRING_SINGLE .)
    SELECT          reduce using rule 54 (string -> STRING_SINGLE .)
    AND             reduce using rule 54 (string -> STRING_SINGLE .)
    OR              reduce using rule 54 (string -> STRING_SINGLE .)
    LT              reduce using rule 54 (string -> STRING_SINGLE .)
    GT              reduce using rule 54 (string -> STRING_SINGLE .)
    EQUAL           reduce using rule 54 (string -> STRING_SINGLE .)
    NOT             reduce using rule 54 (string -> STRING_SINGLE .)
    SEMI_COLON      reduce using rule 54 (string -> STRING_SINGLE .)
    $end            reduce using rule 54 (string -> STRING_SINGLE .)
    RBRACE          reduce using rule 54 (string -> STRING_SINGLE .)
    RPAREN          reduce using rule 54 (string -> STRING_SINGLE .)
    COMMA           reduce using rule 54 (string -> STRING_SINGLE .)
    RSPAREN         reduce using rule 54 (string -> STRING_SINGLE .)


state 28

    (55) string -> STRING_DOUBLE .

    PRIVATE_ID      reduce using rule 55 (string -> STRING_DOUBLE .)
    GLOBAL_ID       reduce using rule 55 (string -> STRING_DOUBLE .)
    PLUS            reduce using rule 55 (string -> STRING_DOUBLE .)
    MINUS           reduce using rule 55 (string -> STRING_DOUBLE .)
    TIMES           reduce using rule 55 (string -> STRING_DOUBLE .)
    DIVIDE          reduce using rule 55 (string -> STRING_DOUBLE .)
    MOD             reduce using rule 55 (string -> STRING_DOUBLE .)
    POW             reduce using rule 55 (string -> STRING_DOUBLE .)
    SELECT          reduce using rule 55 (string -> STRING_DOUBLE .)
    AND             reduce using rule 55 (string -> STRING_DOUBLE .)
    OR              reduce using rule 55 (string -> STRING_DOUBLE .)
    LT              reduce using rule 55 (string -> STRING_DOUBLE .)
    GT              reduce using rule 55 (string -> STRING_DOUBLE .)
    EQUAL           reduce using rule 55 (string -> STRING_DOUBLE .)
    NOT             reduce using rule 55 (string -> STRING_DOUBLE .)
    SEMI_COLON      reduce using rule 55 (string -> STRING_DOUBLE .)
    $end            reduce using rule 55 (string -> STRING_DOUBLE .)
    RBRACE          reduce using rule 55 (string -> STRING_DOUBLE .)
    RPAREN          reduce using rule 55 (string -> STRING_DOUBLE .)
    COMMA           reduce using rule 55 (string -> STRING_DOUBLE .)
    RSPAREN         reduce using rule 55 (string -> STRING_DOUBLE .)


state 29

    (19) array -> LSPAREN . RSPAREN
    (20) array -> LSPAREN . arrayelement RSPAREN
    (21) arrayelement -> . binaryexp
    (22) arrayelement -> . binaryexp COMMA arrayelement
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    RSPAREN         shift and go to state 58
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    arrayelement                   shift and go to state 59
    binaryexp                      shift and go to state 60
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 30

    (29) operator -> punctuation .

    PRIVATE_ID      reduce using rule 29 (operator -> punctuation .)
    GLOBAL_ID       reduce using rule 29 (operator -> punctuation .)
    PLUS            reduce using rule 29 (operator -> punctuation .)
    MINUS           reduce using rule 29 (operator -> punctuation .)
    TIMES           reduce using rule 29 (operator -> punctuation .)
    DIVIDE          reduce using rule 29 (operator -> punctuation .)
    MOD             reduce using rule 29 (operator -> punctuation .)
    POW             reduce using rule 29 (operator -> punctuation .)
    SELECT          reduce using rule 29 (operator -> punctuation .)
    AND             reduce using rule 29 (operator -> punctuation .)
    OR              reduce using rule 29 (operator -> punctuation .)
    LT              reduce using rule 29 (operator -> punctuation .)
    GT              reduce using rule 29 (operator -> punctuation .)
    EQUAL           reduce using rule 29 (operator -> punctuation .)
    NOT             reduce using rule 29 (operator -> punctuation .)
    SEMI_COLON      reduce using rule 29 (operator -> punctuation .)
    $end            reduce using rule 29 (operator -> punctuation .)
    LBRACE          reduce using rule 29 (operator -> punctuation .)
    LPAREN          reduce using rule 29 (operator -> punctuation .)
    NUMBER_REAL     reduce using rule 29 (operator -> punctuation .)
    NUMBER_EXP      reduce using rule 29 (operator -> punctuation .)
    NUMBER_HEX      reduce using rule 29 (operator -> punctuation .)
    STRING_SINGLE   reduce using rule 29 (operator -> punctuation .)
    STRING_DOUBLE   reduce using rule 29 (operator -> punctuation .)
    LSPAREN         reduce using rule 29 (operator -> punctuation .)
    RBRACE          reduce using rule 29 (operator -> punctuation .)
    RPAREN          reduce using rule 29 (operator -> punctuation .)
    COMMA           reduce using rule 29 (operator -> punctuation .)
    RSPAREN         reduce using rule 29 (operator -> punctuation .)


state 31

    (32) punctuation -> TIMES .

    PRIVATE_ID      reduce using rule 32 (punctuation -> TIMES .)
    GLOBAL_ID       reduce using rule 32 (punctuation -> TIMES .)
    PLUS            reduce using rule 32 (punctuation -> TIMES .)
    MINUS           reduce using rule 32 (punctuation -> TIMES .)
    TIMES           reduce using rule 32 (punctuation -> TIMES .)
    DIVIDE          reduce using rule 32 (punctuation -> TIMES .)
    MOD             reduce using rule 32 (punctuation -> TIMES .)
    POW             reduce using rule 32 (punctuation -> TIMES .)
    SELECT          reduce using rule 32 (punctuation -> TIMES .)
    AND             reduce using rule 32 (punctuation -> TIMES .)
    OR              reduce using rule 32 (punctuation -> TIMES .)
    LT              reduce using rule 32 (punctuation -> TIMES .)
    GT              reduce using rule 32 (punctuation -> TIMES .)
    EQUAL           reduce using rule 32 (punctuation -> TIMES .)
    NOT             reduce using rule 32 (punctuation -> TIMES .)
    SEMI_COLON      reduce using rule 32 (punctuation -> TIMES .)
    $end            reduce using rule 32 (punctuation -> TIMES .)
    LBRACE          reduce using rule 32 (punctuation -> TIMES .)
    LPAREN          reduce using rule 32 (punctuation -> TIMES .)
    NUMBER_REAL     reduce using rule 32 (punctuation -> TIMES .)
    NUMBER_EXP      reduce using rule 32 (punctuation -> TIMES .)
    NUMBER_HEX      reduce using rule 32 (punctuation -> TIMES .)
    STRING_SINGLE   reduce using rule 32 (punctuation -> TIMES .)
    STRING_DOUBLE   reduce using rule 32 (punctuation -> TIMES .)
    LSPAREN         reduce using rule 32 (punctuation -> TIMES .)
    RBRACE          reduce using rule 32 (punctuation -> TIMES .)
    RPAREN          reduce using rule 32 (punctuation -> TIMES .)
    COMMA           reduce using rule 32 (punctuation -> TIMES .)
    RSPAREN         reduce using rule 32 (punctuation -> TIMES .)


state 32

    (33) punctuation -> DIVIDE .
    (48) configaccessor -> DIVIDE .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for PLUS resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for MINUS resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for TIMES resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for MOD resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for POW resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for SELECT resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for AND resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for OR resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LT resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GT resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for EQUAL resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NOT resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for $end resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 33 (punctuation -> DIVIDE .)
    PRIVATE_ID      reduce using rule 33 (punctuation -> DIVIDE .)
    GLOBAL_ID       reduce using rule 33 (punctuation -> DIVIDE .)
    PLUS            reduce using rule 33 (punctuation -> DIVIDE .)
    MINUS           reduce using rule 33 (punctuation -> DIVIDE .)
    TIMES           reduce using rule 33 (punctuation -> DIVIDE .)
    DIVIDE          reduce using rule 33 (punctuation -> DIVIDE .)
    MOD             reduce using rule 33 (punctuation -> DIVIDE .)
    POW             reduce using rule 33 (punctuation -> DIVIDE .)
    SELECT          reduce using rule 33 (punctuation -> DIVIDE .)
    AND             reduce using rule 33 (punctuation -> DIVIDE .)
    OR              reduce using rule 33 (punctuation -> DIVIDE .)
    LT              reduce using rule 33 (punctuation -> DIVIDE .)
    GT              reduce using rule 33 (punctuation -> DIVIDE .)
    EQUAL           reduce using rule 33 (punctuation -> DIVIDE .)
    NOT             reduce using rule 33 (punctuation -> DIVIDE .)
    SEMI_COLON      reduce using rule 33 (punctuation -> DIVIDE .)
    $end            reduce using rule 33 (punctuation -> DIVIDE .)
    LBRACE          reduce using rule 33 (punctuation -> DIVIDE .)
    LPAREN          reduce using rule 33 (punctuation -> DIVIDE .)
    NUMBER_REAL     reduce using rule 33 (punctuation -> DIVIDE .)
    NUMBER_EXP      reduce using rule 33 (punctuation -> DIVIDE .)
    NUMBER_HEX      reduce using rule 33 (punctuation -> DIVIDE .)
    STRING_SINGLE   reduce using rule 33 (punctuation -> DIVIDE .)
    STRING_DOUBLE   reduce using rule 33 (punctuation -> DIVIDE .)
    LSPAREN         reduce using rule 33 (punctuation -> DIVIDE .)
    RBRACE          reduce using rule 33 (punctuation -> DIVIDE .)
    RPAREN          reduce using rule 33 (punctuation -> DIVIDE .)
    COMMA           reduce using rule 33 (punctuation -> DIVIDE .)
    RSPAREN         reduce using rule 33 (punctuation -> DIVIDE .)

  ! PRIVATE_ID      [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! GLOBAL_ID       [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! PLUS            [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! MINUS           [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! TIMES           [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! DIVIDE          [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! MOD             [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! POW             [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! SELECT          [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! AND             [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! OR              [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! LT              [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! GT              [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! EQUAL           [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! NOT             [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! SEMI_COLON      [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! $end            [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! LBRACE          [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! LPAREN          [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! NUMBER_REAL     [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! NUMBER_EXP      [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! NUMBER_HEX      [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! STRING_SINGLE   [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! STRING_DOUBLE   [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! LSPAREN         [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! RBRACE          [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! RPAREN          [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! COMMA           [ reduce using rule 48 (configaccessor -> DIVIDE .) ]
  ! RSPAREN         [ reduce using rule 48 (configaccessor -> DIVIDE .) ]


state 33

    (34) punctuation -> MOD .

    PRIVATE_ID      reduce using rule 34 (punctuation -> MOD .)
    GLOBAL_ID       reduce using rule 34 (punctuation -> MOD .)
    PLUS            reduce using rule 34 (punctuation -> MOD .)
    MINUS           reduce using rule 34 (punctuation -> MOD .)
    TIMES           reduce using rule 34 (punctuation -> MOD .)
    DIVIDE          reduce using rule 34 (punctuation -> MOD .)
    MOD             reduce using rule 34 (punctuation -> MOD .)
    POW             reduce using rule 34 (punctuation -> MOD .)
    SELECT          reduce using rule 34 (punctuation -> MOD .)
    AND             reduce using rule 34 (punctuation -> MOD .)
    OR              reduce using rule 34 (punctuation -> MOD .)
    LT              reduce using rule 34 (punctuation -> MOD .)
    GT              reduce using rule 34 (punctuation -> MOD .)
    EQUAL           reduce using rule 34 (punctuation -> MOD .)
    NOT             reduce using rule 34 (punctuation -> MOD .)
    SEMI_COLON      reduce using rule 34 (punctuation -> MOD .)
    $end            reduce using rule 34 (punctuation -> MOD .)
    LBRACE          reduce using rule 34 (punctuation -> MOD .)
    LPAREN          reduce using rule 34 (punctuation -> MOD .)
    NUMBER_REAL     reduce using rule 34 (punctuation -> MOD .)
    NUMBER_EXP      reduce using rule 34 (punctuation -> MOD .)
    NUMBER_HEX      reduce using rule 34 (punctuation -> MOD .)
    STRING_SINGLE   reduce using rule 34 (punctuation -> MOD .)
    STRING_DOUBLE   reduce using rule 34 (punctuation -> MOD .)
    LSPAREN         reduce using rule 34 (punctuation -> MOD .)
    RBRACE          reduce using rule 34 (punctuation -> MOD .)
    RPAREN          reduce using rule 34 (punctuation -> MOD .)
    COMMA           reduce using rule 34 (punctuation -> MOD .)
    RSPAREN         reduce using rule 34 (punctuation -> MOD .)


state 34

    (35) punctuation -> POW .

    PRIVATE_ID      reduce using rule 35 (punctuation -> POW .)
    GLOBAL_ID       reduce using rule 35 (punctuation -> POW .)
    PLUS            reduce using rule 35 (punctuation -> POW .)
    MINUS           reduce using rule 35 (punctuation -> POW .)
    TIMES           reduce using rule 35 (punctuation -> POW .)
    DIVIDE          reduce using rule 35 (punctuation -> POW .)
    MOD             reduce using rule 35 (punctuation -> POW .)
    POW             reduce using rule 35 (punctuation -> POW .)
    SELECT          reduce using rule 35 (punctuation -> POW .)
    AND             reduce using rule 35 (punctuation -> POW .)
    OR              reduce using rule 35 (punctuation -> POW .)
    LT              reduce using rule 35 (punctuation -> POW .)
    GT              reduce using rule 35 (punctuation -> POW .)
    EQUAL           reduce using rule 35 (punctuation -> POW .)
    NOT             reduce using rule 35 (punctuation -> POW .)
    SEMI_COLON      reduce using rule 35 (punctuation -> POW .)
    $end            reduce using rule 35 (punctuation -> POW .)
    LBRACE          reduce using rule 35 (punctuation -> POW .)
    LPAREN          reduce using rule 35 (punctuation -> POW .)
    NUMBER_REAL     reduce using rule 35 (punctuation -> POW .)
    NUMBER_EXP      reduce using rule 35 (punctuation -> POW .)
    NUMBER_HEX      reduce using rule 35 (punctuation -> POW .)
    STRING_SINGLE   reduce using rule 35 (punctuation -> POW .)
    STRING_DOUBLE   reduce using rule 35 (punctuation -> POW .)
    LSPAREN         reduce using rule 35 (punctuation -> POW .)
    RBRACE          reduce using rule 35 (punctuation -> POW .)
    RPAREN          reduce using rule 35 (punctuation -> POW .)
    COMMA           reduce using rule 35 (punctuation -> POW .)
    RSPAREN         reduce using rule 35 (punctuation -> POW .)


state 35

    (36) punctuation -> SELECT .

    PRIVATE_ID      reduce using rule 36 (punctuation -> SELECT .)
    GLOBAL_ID       reduce using rule 36 (punctuation -> SELECT .)
    PLUS            reduce using rule 36 (punctuation -> SELECT .)
    MINUS           reduce using rule 36 (punctuation -> SELECT .)
    TIMES           reduce using rule 36 (punctuation -> SELECT .)
    DIVIDE          reduce using rule 36 (punctuation -> SELECT .)
    MOD             reduce using rule 36 (punctuation -> SELECT .)
    POW             reduce using rule 36 (punctuation -> SELECT .)
    SELECT          reduce using rule 36 (punctuation -> SELECT .)
    AND             reduce using rule 36 (punctuation -> SELECT .)
    OR              reduce using rule 36 (punctuation -> SELECT .)
    LT              reduce using rule 36 (punctuation -> SELECT .)
    GT              reduce using rule 36 (punctuation -> SELECT .)
    EQUAL           reduce using rule 36 (punctuation -> SELECT .)
    NOT             reduce using rule 36 (punctuation -> SELECT .)
    SEMI_COLON      reduce using rule 36 (punctuation -> SELECT .)
    $end            reduce using rule 36 (punctuation -> SELECT .)
    LBRACE          reduce using rule 36 (punctuation -> SELECT .)
    LPAREN          reduce using rule 36 (punctuation -> SELECT .)
    NUMBER_REAL     reduce using rule 36 (punctuation -> SELECT .)
    NUMBER_EXP      reduce using rule 36 (punctuation -> SELECT .)
    NUMBER_HEX      reduce using rule 36 (punctuation -> SELECT .)
    STRING_SINGLE   reduce using rule 36 (punctuation -> SELECT .)
    STRING_DOUBLE   reduce using rule 36 (punctuation -> SELECT .)
    LSPAREN         reduce using rule 36 (punctuation -> SELECT .)
    RBRACE          reduce using rule 36 (punctuation -> SELECT .)
    RPAREN          reduce using rule 36 (punctuation -> SELECT .)
    COMMA           reduce using rule 36 (punctuation -> SELECT .)
    RSPAREN         reduce using rule 36 (punctuation -> SELECT .)


state 36

    (37) punctuation -> comparisonoperator .

    PRIVATE_ID      reduce using rule 37 (punctuation -> comparisonoperator .)
    GLOBAL_ID       reduce using rule 37 (punctuation -> comparisonoperator .)
    PLUS            reduce using rule 37 (punctuation -> comparisonoperator .)
    MINUS           reduce using rule 37 (punctuation -> comparisonoperator .)
    TIMES           reduce using rule 37 (punctuation -> comparisonoperator .)
    DIVIDE          reduce using rule 37 (punctuation -> comparisonoperator .)
    MOD             reduce using rule 37 (punctuation -> comparisonoperator .)
    POW             reduce using rule 37 (punctuation -> comparisonoperator .)
    SELECT          reduce using rule 37 (punctuation -> comparisonoperator .)
    AND             reduce using rule 37 (punctuation -> comparisonoperator .)
    OR              reduce using rule 37 (punctuation -> comparisonoperator .)
    LT              reduce using rule 37 (punctuation -> comparisonoperator .)
    GT              reduce using rule 37 (punctuation -> comparisonoperator .)
    EQUAL           reduce using rule 37 (punctuation -> comparisonoperator .)
    NOT             reduce using rule 37 (punctuation -> comparisonoperator .)
    SEMI_COLON      reduce using rule 37 (punctuation -> comparisonoperator .)
    $end            reduce using rule 37 (punctuation -> comparisonoperator .)
    LBRACE          reduce using rule 37 (punctuation -> comparisonoperator .)
    LPAREN          reduce using rule 37 (punctuation -> comparisonoperator .)
    NUMBER_REAL     reduce using rule 37 (punctuation -> comparisonoperator .)
    NUMBER_EXP      reduce using rule 37 (punctuation -> comparisonoperator .)
    NUMBER_HEX      reduce using rule 37 (punctuation -> comparisonoperator .)
    STRING_SINGLE   reduce using rule 37 (punctuation -> comparisonoperator .)
    STRING_DOUBLE   reduce using rule 37 (punctuation -> comparisonoperator .)
    LSPAREN         reduce using rule 37 (punctuation -> comparisonoperator .)
    RBRACE          reduce using rule 37 (punctuation -> comparisonoperator .)
    RPAREN          reduce using rule 37 (punctuation -> comparisonoperator .)
    COMMA           reduce using rule 37 (punctuation -> comparisonoperator .)
    RSPAREN         reduce using rule 37 (punctuation -> comparisonoperator .)


state 37

    (38) punctuation -> AND .

    PRIVATE_ID      reduce using rule 38 (punctuation -> AND .)
    GLOBAL_ID       reduce using rule 38 (punctuation -> AND .)
    PLUS            reduce using rule 38 (punctuation -> AND .)
    MINUS           reduce using rule 38 (punctuation -> AND .)
    TIMES           reduce using rule 38 (punctuation -> AND .)
    DIVIDE          reduce using rule 38 (punctuation -> AND .)
    MOD             reduce using rule 38 (punctuation -> AND .)
    POW             reduce using rule 38 (punctuation -> AND .)
    SELECT          reduce using rule 38 (punctuation -> AND .)
    AND             reduce using rule 38 (punctuation -> AND .)
    OR              reduce using rule 38 (punctuation -> AND .)
    LT              reduce using rule 38 (punctuation -> AND .)
    GT              reduce using rule 38 (punctuation -> AND .)
    EQUAL           reduce using rule 38 (punctuation -> AND .)
    NOT             reduce using rule 38 (punctuation -> AND .)
    SEMI_COLON      reduce using rule 38 (punctuation -> AND .)
    $end            reduce using rule 38 (punctuation -> AND .)
    LBRACE          reduce using rule 38 (punctuation -> AND .)
    LPAREN          reduce using rule 38 (punctuation -> AND .)
    NUMBER_REAL     reduce using rule 38 (punctuation -> AND .)
    NUMBER_EXP      reduce using rule 38 (punctuation -> AND .)
    NUMBER_HEX      reduce using rule 38 (punctuation -> AND .)
    STRING_SINGLE   reduce using rule 38 (punctuation -> AND .)
    STRING_DOUBLE   reduce using rule 38 (punctuation -> AND .)
    LSPAREN         reduce using rule 38 (punctuation -> AND .)
    RBRACE          reduce using rule 38 (punctuation -> AND .)
    RPAREN          reduce using rule 38 (punctuation -> AND .)
    COMMA           reduce using rule 38 (punctuation -> AND .)
    RSPAREN         reduce using rule 38 (punctuation -> AND .)


state 38

    (39) punctuation -> OR .

    PRIVATE_ID      reduce using rule 39 (punctuation -> OR .)
    GLOBAL_ID       reduce using rule 39 (punctuation -> OR .)
    PLUS            reduce using rule 39 (punctuation -> OR .)
    MINUS           reduce using rule 39 (punctuation -> OR .)
    TIMES           reduce using rule 39 (punctuation -> OR .)
    DIVIDE          reduce using rule 39 (punctuation -> OR .)
    MOD             reduce using rule 39 (punctuation -> OR .)
    POW             reduce using rule 39 (punctuation -> OR .)
    SELECT          reduce using rule 39 (punctuation -> OR .)
    AND             reduce using rule 39 (punctuation -> OR .)
    OR              reduce using rule 39 (punctuation -> OR .)
    LT              reduce using rule 39 (punctuation -> OR .)
    GT              reduce using rule 39 (punctuation -> OR .)
    EQUAL           reduce using rule 39 (punctuation -> OR .)
    NOT             reduce using rule 39 (punctuation -> OR .)
    SEMI_COLON      reduce using rule 39 (punctuation -> OR .)
    $end            reduce using rule 39 (punctuation -> OR .)
    LBRACE          reduce using rule 39 (punctuation -> OR .)
    LPAREN          reduce using rule 39 (punctuation -> OR .)
    NUMBER_REAL     reduce using rule 39 (punctuation -> OR .)
    NUMBER_EXP      reduce using rule 39 (punctuation -> OR .)
    NUMBER_HEX      reduce using rule 39 (punctuation -> OR .)
    STRING_SINGLE   reduce using rule 39 (punctuation -> OR .)
    STRING_DOUBLE   reduce using rule 39 (punctuation -> OR .)
    LSPAREN         reduce using rule 39 (punctuation -> OR .)
    RBRACE          reduce using rule 39 (punctuation -> OR .)
    RPAREN          reduce using rule 39 (punctuation -> OR .)
    COMMA           reduce using rule 39 (punctuation -> OR .)
    RSPAREN         reduce using rule 39 (punctuation -> OR .)


state 39

    (40) punctuation -> configaccessor .

    PRIVATE_ID      reduce using rule 40 (punctuation -> configaccessor .)
    GLOBAL_ID       reduce using rule 40 (punctuation -> configaccessor .)
    PLUS            reduce using rule 40 (punctuation -> configaccessor .)
    MINUS           reduce using rule 40 (punctuation -> configaccessor .)
    TIMES           reduce using rule 40 (punctuation -> configaccessor .)
    DIVIDE          reduce using rule 40 (punctuation -> configaccessor .)
    MOD             reduce using rule 40 (punctuation -> configaccessor .)
    POW             reduce using rule 40 (punctuation -> configaccessor .)
    SELECT          reduce using rule 40 (punctuation -> configaccessor .)
    AND             reduce using rule 40 (punctuation -> configaccessor .)
    OR              reduce using rule 40 (punctuation -> configaccessor .)
    LT              reduce using rule 40 (punctuation -> configaccessor .)
    GT              reduce using rule 40 (punctuation -> configaccessor .)
    EQUAL           reduce using rule 40 (punctuation -> configaccessor .)
    NOT             reduce using rule 40 (punctuation -> configaccessor .)
    SEMI_COLON      reduce using rule 40 (punctuation -> configaccessor .)
    $end            reduce using rule 40 (punctuation -> configaccessor .)
    LBRACE          reduce using rule 40 (punctuation -> configaccessor .)
    LPAREN          reduce using rule 40 (punctuation -> configaccessor .)
    NUMBER_REAL     reduce using rule 40 (punctuation -> configaccessor .)
    NUMBER_EXP      reduce using rule 40 (punctuation -> configaccessor .)
    NUMBER_HEX      reduce using rule 40 (punctuation -> configaccessor .)
    STRING_SINGLE   reduce using rule 40 (punctuation -> configaccessor .)
    STRING_DOUBLE   reduce using rule 40 (punctuation -> configaccessor .)
    LSPAREN         reduce using rule 40 (punctuation -> configaccessor .)
    RBRACE          reduce using rule 40 (punctuation -> configaccessor .)
    RPAREN          reduce using rule 40 (punctuation -> configaccessor .)
    COMMA           reduce using rule 40 (punctuation -> configaccessor .)
    RSPAREN         reduce using rule 40 (punctuation -> configaccessor .)


state 40

    (41) comparisonoperator -> LT .
    (43) comparisonoperator -> LT . EQUAL

  ! shift/reduce conflict for EQUAL resolved as shift
    PRIVATE_ID      reduce using rule 41 (comparisonoperator -> LT .)
    GLOBAL_ID       reduce using rule 41 (comparisonoperator -> LT .)
    PLUS            reduce using rule 41 (comparisonoperator -> LT .)
    MINUS           reduce using rule 41 (comparisonoperator -> LT .)
    TIMES           reduce using rule 41 (comparisonoperator -> LT .)
    DIVIDE          reduce using rule 41 (comparisonoperator -> LT .)
    MOD             reduce using rule 41 (comparisonoperator -> LT .)
    POW             reduce using rule 41 (comparisonoperator -> LT .)
    SELECT          reduce using rule 41 (comparisonoperator -> LT .)
    AND             reduce using rule 41 (comparisonoperator -> LT .)
    OR              reduce using rule 41 (comparisonoperator -> LT .)
    LT              reduce using rule 41 (comparisonoperator -> LT .)
    GT              reduce using rule 41 (comparisonoperator -> LT .)
    NOT             reduce using rule 41 (comparisonoperator -> LT .)
    SEMI_COLON      reduce using rule 41 (comparisonoperator -> LT .)
    $end            reduce using rule 41 (comparisonoperator -> LT .)
    LBRACE          reduce using rule 41 (comparisonoperator -> LT .)
    LPAREN          reduce using rule 41 (comparisonoperator -> LT .)
    NUMBER_REAL     reduce using rule 41 (comparisonoperator -> LT .)
    NUMBER_EXP      reduce using rule 41 (comparisonoperator -> LT .)
    NUMBER_HEX      reduce using rule 41 (comparisonoperator -> LT .)
    STRING_SINGLE   reduce using rule 41 (comparisonoperator -> LT .)
    STRING_DOUBLE   reduce using rule 41 (comparisonoperator -> LT .)
    LSPAREN         reduce using rule 41 (comparisonoperator -> LT .)
    RBRACE          reduce using rule 41 (comparisonoperator -> LT .)
    RPAREN          reduce using rule 41 (comparisonoperator -> LT .)
    COMMA           reduce using rule 41 (comparisonoperator -> LT .)
    RSPAREN         reduce using rule 41 (comparisonoperator -> LT .)
    EQUAL           shift and go to state 61

  ! EQUAL           [ reduce using rule 41 (comparisonoperator -> LT .) ]


state 41

    (42) comparisonoperator -> GT .
    (44) comparisonoperator -> GT . EQUAL
    (47) configaccessor -> GT . GT

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    PRIVATE_ID      reduce using rule 42 (comparisonoperator -> GT .)
    GLOBAL_ID       reduce using rule 42 (comparisonoperator -> GT .)
    PLUS            reduce using rule 42 (comparisonoperator -> GT .)
    MINUS           reduce using rule 42 (comparisonoperator -> GT .)
    TIMES           reduce using rule 42 (comparisonoperator -> GT .)
    DIVIDE          reduce using rule 42 (comparisonoperator -> GT .)
    MOD             reduce using rule 42 (comparisonoperator -> GT .)
    POW             reduce using rule 42 (comparisonoperator -> GT .)
    SELECT          reduce using rule 42 (comparisonoperator -> GT .)
    AND             reduce using rule 42 (comparisonoperator -> GT .)
    OR              reduce using rule 42 (comparisonoperator -> GT .)
    LT              reduce using rule 42 (comparisonoperator -> GT .)
    NOT             reduce using rule 42 (comparisonoperator -> GT .)
    SEMI_COLON      reduce using rule 42 (comparisonoperator -> GT .)
    $end            reduce using rule 42 (comparisonoperator -> GT .)
    LBRACE          reduce using rule 42 (comparisonoperator -> GT .)
    LPAREN          reduce using rule 42 (comparisonoperator -> GT .)
    NUMBER_REAL     reduce using rule 42 (comparisonoperator -> GT .)
    NUMBER_EXP      reduce using rule 42 (comparisonoperator -> GT .)
    NUMBER_HEX      reduce using rule 42 (comparisonoperator -> GT .)
    STRING_SINGLE   reduce using rule 42 (comparisonoperator -> GT .)
    STRING_DOUBLE   reduce using rule 42 (comparisonoperator -> GT .)
    LSPAREN         reduce using rule 42 (comparisonoperator -> GT .)
    RBRACE          reduce using rule 42 (comparisonoperator -> GT .)
    RPAREN          reduce using rule 42 (comparisonoperator -> GT .)
    COMMA           reduce using rule 42 (comparisonoperator -> GT .)
    RSPAREN         reduce using rule 42 (comparisonoperator -> GT .)
    EQUAL           shift and go to state 63
    GT              shift and go to state 62

  ! GT              [ reduce using rule 42 (comparisonoperator -> GT .) ]
  ! EQUAL           [ reduce using rule 42 (comparisonoperator -> GT .) ]


state 42

    (46) comparisonoperator -> NOT . EQUAL

    EQUAL           shift and go to state 64


state 43

    (3) code -> statement SEMI_COLON . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement SEMI_COLON code
    (56) empty -> .
    (4) statement -> . assignment
    (5) statement -> . binaryexp
    (6) assignment -> . definition EQUAL binaryexp
    (7) assignment -> . identifier EQUAL binaryexp
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (8) definition -> . PRIVATE PRIVATE_ID
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    $end            reduce using rule 56 (empty -> .)
    RBRACE          reduce using rule 56 (empty -> .)
    PRIVATE         shift and go to state 11
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    statement                      shift and go to state 3
    code                           shift and go to state 65
    empty                          shift and go to state 2
    assignment                     shift and go to state 4
    binaryexp                      shift and go to state 5
    definition                     shift and go to state 6
    identifier                     shift and go to state 8
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 44

    (9) binaryexp -> binaryexp operator . binaryexp
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    binaryexp                      shift and go to state 66
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 45

    (28) operator -> identifier .

    LBRACE          reduce using rule 28 (operator -> identifier .)
    LPAREN          reduce using rule 28 (operator -> identifier .)
    NUMBER_REAL     reduce using rule 28 (operator -> identifier .)
    NUMBER_EXP      reduce using rule 28 (operator -> identifier .)
    NUMBER_HEX      reduce using rule 28 (operator -> identifier .)
    PLUS            reduce using rule 28 (operator -> identifier .)
    MINUS           reduce using rule 28 (operator -> identifier .)
    STRING_SINGLE   reduce using rule 28 (operator -> identifier .)
    STRING_DOUBLE   reduce using rule 28 (operator -> identifier .)
    LSPAREN         reduce using rule 28 (operator -> identifier .)
    PRIVATE_ID      reduce using rule 28 (operator -> identifier .)
    GLOBAL_ID       reduce using rule 28 (operator -> identifier .)
    TIMES           reduce using rule 28 (operator -> identifier .)
    DIVIDE          reduce using rule 28 (operator -> identifier .)
    MOD             reduce using rule 28 (operator -> identifier .)
    POW             reduce using rule 28 (operator -> identifier .)
    SELECT          reduce using rule 28 (operator -> identifier .)
    AND             reduce using rule 28 (operator -> identifier .)
    OR              reduce using rule 28 (operator -> identifier .)
    LT              reduce using rule 28 (operator -> identifier .)
    GT              reduce using rule 28 (operator -> identifier .)
    EQUAL           reduce using rule 28 (operator -> identifier .)
    NOT             reduce using rule 28 (operator -> identifier .)


state 46

    (30) punctuation -> PLUS .

    LBRACE          reduce using rule 30 (punctuation -> PLUS .)
    LPAREN          reduce using rule 30 (punctuation -> PLUS .)
    NUMBER_REAL     reduce using rule 30 (punctuation -> PLUS .)
    NUMBER_EXP      reduce using rule 30 (punctuation -> PLUS .)
    NUMBER_HEX      reduce using rule 30 (punctuation -> PLUS .)
    PLUS            reduce using rule 30 (punctuation -> PLUS .)
    MINUS           reduce using rule 30 (punctuation -> PLUS .)
    STRING_SINGLE   reduce using rule 30 (punctuation -> PLUS .)
    STRING_DOUBLE   reduce using rule 30 (punctuation -> PLUS .)
    LSPAREN         reduce using rule 30 (punctuation -> PLUS .)
    PRIVATE_ID      reduce using rule 30 (punctuation -> PLUS .)
    GLOBAL_ID       reduce using rule 30 (punctuation -> PLUS .)
    TIMES           reduce using rule 30 (punctuation -> PLUS .)
    DIVIDE          reduce using rule 30 (punctuation -> PLUS .)
    MOD             reduce using rule 30 (punctuation -> PLUS .)
    POW             reduce using rule 30 (punctuation -> PLUS .)
    SELECT          reduce using rule 30 (punctuation -> PLUS .)
    AND             reduce using rule 30 (punctuation -> PLUS .)
    OR              reduce using rule 30 (punctuation -> PLUS .)
    LT              reduce using rule 30 (punctuation -> PLUS .)
    GT              reduce using rule 30 (punctuation -> PLUS .)
    EQUAL           reduce using rule 30 (punctuation -> PLUS .)
    NOT             reduce using rule 30 (punctuation -> PLUS .)


state 47

    (31) punctuation -> MINUS .

    LBRACE          reduce using rule 31 (punctuation -> MINUS .)
    LPAREN          reduce using rule 31 (punctuation -> MINUS .)
    NUMBER_REAL     reduce using rule 31 (punctuation -> MINUS .)
    NUMBER_EXP      reduce using rule 31 (punctuation -> MINUS .)
    NUMBER_HEX      reduce using rule 31 (punctuation -> MINUS .)
    PLUS            reduce using rule 31 (punctuation -> MINUS .)
    MINUS           reduce using rule 31 (punctuation -> MINUS .)
    STRING_SINGLE   reduce using rule 31 (punctuation -> MINUS .)
    STRING_DOUBLE   reduce using rule 31 (punctuation -> MINUS .)
    LSPAREN         reduce using rule 31 (punctuation -> MINUS .)
    PRIVATE_ID      reduce using rule 31 (punctuation -> MINUS .)
    GLOBAL_ID       reduce using rule 31 (punctuation -> MINUS .)
    TIMES           reduce using rule 31 (punctuation -> MINUS .)
    DIVIDE          reduce using rule 31 (punctuation -> MINUS .)
    MOD             reduce using rule 31 (punctuation -> MINUS .)
    POW             reduce using rule 31 (punctuation -> MINUS .)
    SELECT          reduce using rule 31 (punctuation -> MINUS .)
    AND             reduce using rule 31 (punctuation -> MINUS .)
    OR              reduce using rule 31 (punctuation -> MINUS .)
    LT              reduce using rule 31 (punctuation -> MINUS .)
    GT              reduce using rule 31 (punctuation -> MINUS .)
    EQUAL           reduce using rule 31 (punctuation -> MINUS .)
    NOT             reduce using rule 31 (punctuation -> MINUS .)


state 48

    (6) assignment -> definition EQUAL . binaryexp
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    binaryexp                      shift and go to state 67
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 49

    (45) comparisonoperator -> EQUAL EQUAL .

    PRIVATE_ID      reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    GLOBAL_ID       reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    PLUS            reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    MINUS           reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    TIMES           reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    DIVIDE          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    MOD             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    POW             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    SELECT          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    AND             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    OR              reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    LT              reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    GT              reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    EQUAL           reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    NOT             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    SEMI_COLON      reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    $end            reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    LBRACE          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    LPAREN          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    NUMBER_REAL     reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    NUMBER_EXP      reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    NUMBER_HEX      reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    STRING_SINGLE   reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    STRING_DOUBLE   reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    LSPAREN         reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    RBRACE          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    RPAREN          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    COMMA           reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    RSPAREN         reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)


state 50

    (26) unaryexp -> identifier . primaryexp
    (27) variable -> identifier .
    (28) operator -> identifier .
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for SELECT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for EQUAL resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for NOT resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 27 (variable -> identifier .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 27 (variable -> identifier .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    SEMI_COLON      reduce using rule 27 (variable -> identifier .)
    $end            reduce using rule 27 (variable -> identifier .)
    RBRACE          reduce using rule 27 (variable -> identifier .)
    RPAREN          reduce using rule 27 (variable -> identifier .)
    COMMA           reduce using rule 27 (variable -> identifier .)
    RSPAREN         reduce using rule 27 (variable -> identifier .)
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

  ! PRIVATE_ID      [ reduce using rule 27 (variable -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 27 (variable -> identifier .) ]
  ! PLUS            [ reduce using rule 27 (variable -> identifier .) ]
  ! MINUS           [ reduce using rule 27 (variable -> identifier .) ]
  ! TIMES           [ reduce using rule 27 (variable -> identifier .) ]
  ! DIVIDE          [ reduce using rule 27 (variable -> identifier .) ]
  ! MOD             [ reduce using rule 27 (variable -> identifier .) ]
  ! POW             [ reduce using rule 27 (variable -> identifier .) ]
  ! SELECT          [ reduce using rule 27 (variable -> identifier .) ]
  ! AND             [ reduce using rule 27 (variable -> identifier .) ]
  ! OR              [ reduce using rule 27 (variable -> identifier .) ]
  ! LT              [ reduce using rule 27 (variable -> identifier .) ]
  ! GT              [ reduce using rule 27 (variable -> identifier .) ]
  ! EQUAL           [ reduce using rule 27 (variable -> identifier .) ]
  ! NOT             [ reduce using rule 27 (variable -> identifier .) ]
  ! PRIVATE_ID      [ reduce using rule 28 (operator -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 28 (operator -> identifier .) ]
  ! PLUS            [ reduce using rule 28 (operator -> identifier .) ]
  ! MINUS           [ reduce using rule 28 (operator -> identifier .) ]
  ! TIMES           [ reduce using rule 28 (operator -> identifier .) ]
  ! DIVIDE          [ reduce using rule 28 (operator -> identifier .) ]
  ! MOD             [ reduce using rule 28 (operator -> identifier .) ]
  ! POW             [ reduce using rule 28 (operator -> identifier .) ]
  ! SELECT          [ reduce using rule 28 (operator -> identifier .) ]
  ! AND             [ reduce using rule 28 (operator -> identifier .) ]
  ! OR              [ reduce using rule 28 (operator -> identifier .) ]
  ! LT              [ reduce using rule 28 (operator -> identifier .) ]
  ! GT              [ reduce using rule 28 (operator -> identifier .) ]
  ! EQUAL           [ reduce using rule 28 (operator -> identifier .) ]
  ! NOT             [ reduce using rule 28 (operator -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 28 (operator -> identifier .) ]
  ! $end            [ reduce using rule 28 (operator -> identifier .) ]
  ! RBRACE          [ reduce using rule 28 (operator -> identifier .) ]
  ! RPAREN          [ reduce using rule 28 (operator -> identifier .) ]
  ! COMMA           [ reduce using rule 28 (operator -> identifier .) ]
  ! RSPAREN         [ reduce using rule 28 (operator -> identifier .) ]

    identifier                     shift and go to state 50
    primaryexp                     shift and go to state 52
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    operator                       shift and go to state 9
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 51

    (7) assignment -> identifier EQUAL . binaryexp
    (45) comparisonoperator -> EQUAL . EQUAL
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    EQUAL           shift and go to state 68
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    NOT             shift and go to state 42

    identifier                     shift and go to state 50
    binaryexp                      shift and go to state 69
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 52

    (26) unaryexp -> identifier primaryexp .

    PRIVATE_ID      reduce using rule 26 (unaryexp -> identifier primaryexp .)
    GLOBAL_ID       reduce using rule 26 (unaryexp -> identifier primaryexp .)
    PLUS            reduce using rule 26 (unaryexp -> identifier primaryexp .)
    MINUS           reduce using rule 26 (unaryexp -> identifier primaryexp .)
    TIMES           reduce using rule 26 (unaryexp -> identifier primaryexp .)
    DIVIDE          reduce using rule 26 (unaryexp -> identifier primaryexp .)
    MOD             reduce using rule 26 (unaryexp -> identifier primaryexp .)
    POW             reduce using rule 26 (unaryexp -> identifier primaryexp .)
    SELECT          reduce using rule 26 (unaryexp -> identifier primaryexp .)
    AND             reduce using rule 26 (unaryexp -> identifier primaryexp .)
    OR              reduce using rule 26 (unaryexp -> identifier primaryexp .)
    LT              reduce using rule 26 (unaryexp -> identifier primaryexp .)
    GT              reduce using rule 26 (unaryexp -> identifier primaryexp .)
    EQUAL           reduce using rule 26 (unaryexp -> identifier primaryexp .)
    NOT             reduce using rule 26 (unaryexp -> identifier primaryexp .)
    SEMI_COLON      reduce using rule 26 (unaryexp -> identifier primaryexp .)
    $end            reduce using rule 26 (unaryexp -> identifier primaryexp .)
    RBRACE          reduce using rule 26 (unaryexp -> identifier primaryexp .)
    RPAREN          reduce using rule 26 (unaryexp -> identifier primaryexp .)
    COMMA           reduce using rule 26 (unaryexp -> identifier primaryexp .)
    RSPAREN         reduce using rule 26 (unaryexp -> identifier primaryexp .)


state 53

    (8) definition -> PRIVATE PRIVATE_ID .

    EQUAL           reduce using rule 8 (definition -> PRIVATE PRIVATE_ID .)


state 54

    (16) primaryexp -> LBRACE code . RBRACE

    RBRACE          shift and go to state 70


state 55

    (17) primaryexp -> LPAREN binaryexp . RPAREN
    (9) binaryexp -> binaryexp . operator binaryexp
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    RPAREN          shift and go to state 71
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    operator                       shift and go to state 44
    identifier                     shift and go to state 45
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 56

    (24) unaryexp -> PLUS primaryexp .

    PRIVATE_ID      reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    GLOBAL_ID       reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    PLUS            reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    MINUS           reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    TIMES           reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    DIVIDE          reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    MOD             reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    POW             reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    SELECT          reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    AND             reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    OR              reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    LT              reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    GT              reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    EQUAL           reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    NOT             reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    SEMI_COLON      reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    $end            reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    RBRACE          reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    RPAREN          reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    COMMA           reduce using rule 24 (unaryexp -> PLUS primaryexp .)
    RSPAREN         reduce using rule 24 (unaryexp -> PLUS primaryexp .)


state 57

    (25) unaryexp -> MINUS primaryexp .

    PRIVATE_ID      reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    GLOBAL_ID       reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    PLUS            reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    MINUS           reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    TIMES           reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    DIVIDE          reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    MOD             reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    POW             reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    SELECT          reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    AND             reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    OR              reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    LT              reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    GT              reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    EQUAL           reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    NOT             reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    SEMI_COLON      reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    $end            reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    RBRACE          reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    RPAREN          reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    COMMA           reduce using rule 25 (unaryexp -> MINUS primaryexp .)
    RSPAREN         reduce using rule 25 (unaryexp -> MINUS primaryexp .)


state 58

    (19) array -> LSPAREN RSPAREN .

    PRIVATE_ID      reduce using rule 19 (array -> LSPAREN RSPAREN .)
    GLOBAL_ID       reduce using rule 19 (array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 19 (array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 19 (array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 19 (array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 19 (array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 19 (array -> LSPAREN RSPAREN .)
    POW             reduce using rule 19 (array -> LSPAREN RSPAREN .)
    SELECT          reduce using rule 19 (array -> LSPAREN RSPAREN .)
    AND             reduce using rule 19 (array -> LSPAREN RSPAREN .)
    OR              reduce using rule 19 (array -> LSPAREN RSPAREN .)
    LT              reduce using rule 19 (array -> LSPAREN RSPAREN .)
    GT              reduce using rule 19 (array -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 19 (array -> LSPAREN RSPAREN .)
    NOT             reduce using rule 19 (array -> LSPAREN RSPAREN .)
    SEMI_COLON      reduce using rule 19 (array -> LSPAREN RSPAREN .)
    $end            reduce using rule 19 (array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 19 (array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 19 (array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 19 (array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 19 (array -> LSPAREN RSPAREN .)


state 59

    (20) array -> LSPAREN arrayelement . RSPAREN

    RSPAREN         shift and go to state 72


state 60

    (21) arrayelement -> binaryexp .
    (22) arrayelement -> binaryexp . COMMA arrayelement
    (9) binaryexp -> binaryexp . operator binaryexp
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    RSPAREN         reduce using rule 21 (arrayelement -> binaryexp .)
    COMMA           shift and go to state 73
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    operator                       shift and go to state 44
    identifier                     shift and go to state 45
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 61

    (43) comparisonoperator -> LT EQUAL .

    PRIVATE_ID      reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    GLOBAL_ID       reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    PLUS            reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    MINUS           reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    TIMES           reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    DIVIDE          reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    MOD             reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    POW             reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    SELECT          reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    AND             reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    OR              reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    LT              reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    GT              reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    EQUAL           reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    NOT             reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    SEMI_COLON      reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    $end            reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    LBRACE          reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    LPAREN          reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    NUMBER_REAL     reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    NUMBER_EXP      reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    NUMBER_HEX      reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    STRING_SINGLE   reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    STRING_DOUBLE   reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    LSPAREN         reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    RBRACE          reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    RPAREN          reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    COMMA           reduce using rule 43 (comparisonoperator -> LT EQUAL .)
    RSPAREN         reduce using rule 43 (comparisonoperator -> LT EQUAL .)


state 62

    (47) configaccessor -> GT GT .

    PRIVATE_ID      reduce using rule 47 (configaccessor -> GT GT .)
    GLOBAL_ID       reduce using rule 47 (configaccessor -> GT GT .)
    PLUS            reduce using rule 47 (configaccessor -> GT GT .)
    MINUS           reduce using rule 47 (configaccessor -> GT GT .)
    TIMES           reduce using rule 47 (configaccessor -> GT GT .)
    DIVIDE          reduce using rule 47 (configaccessor -> GT GT .)
    MOD             reduce using rule 47 (configaccessor -> GT GT .)
    POW             reduce using rule 47 (configaccessor -> GT GT .)
    SELECT          reduce using rule 47 (configaccessor -> GT GT .)
    AND             reduce using rule 47 (configaccessor -> GT GT .)
    OR              reduce using rule 47 (configaccessor -> GT GT .)
    LT              reduce using rule 47 (configaccessor -> GT GT .)
    GT              reduce using rule 47 (configaccessor -> GT GT .)
    EQUAL           reduce using rule 47 (configaccessor -> GT GT .)
    NOT             reduce using rule 47 (configaccessor -> GT GT .)
    SEMI_COLON      reduce using rule 47 (configaccessor -> GT GT .)
    $end            reduce using rule 47 (configaccessor -> GT GT .)
    LBRACE          reduce using rule 47 (configaccessor -> GT GT .)
    LPAREN          reduce using rule 47 (configaccessor -> GT GT .)
    NUMBER_REAL     reduce using rule 47 (configaccessor -> GT GT .)
    NUMBER_EXP      reduce using rule 47 (configaccessor -> GT GT .)
    NUMBER_HEX      reduce using rule 47 (configaccessor -> GT GT .)
    STRING_SINGLE   reduce using rule 47 (configaccessor -> GT GT .)
    STRING_DOUBLE   reduce using rule 47 (configaccessor -> GT GT .)
    LSPAREN         reduce using rule 47 (configaccessor -> GT GT .)
    RBRACE          reduce using rule 47 (configaccessor -> GT GT .)
    RPAREN          reduce using rule 47 (configaccessor -> GT GT .)
    COMMA           reduce using rule 47 (configaccessor -> GT GT .)
    RSPAREN         reduce using rule 47 (configaccessor -> GT GT .)


state 63

    (44) comparisonoperator -> GT EQUAL .

    PRIVATE_ID      reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    GLOBAL_ID       reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    PLUS            reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    MINUS           reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    TIMES           reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    DIVIDE          reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    MOD             reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    POW             reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    SELECT          reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    AND             reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    OR              reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    LT              reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    GT              reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    EQUAL           reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    NOT             reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    SEMI_COLON      reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    $end            reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    LBRACE          reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    LPAREN          reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    NUMBER_REAL     reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    NUMBER_EXP      reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    NUMBER_HEX      reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    STRING_SINGLE   reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    STRING_DOUBLE   reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    LSPAREN         reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    RBRACE          reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    RPAREN          reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    COMMA           reduce using rule 44 (comparisonoperator -> GT EQUAL .)
    RSPAREN         reduce using rule 44 (comparisonoperator -> GT EQUAL .)


state 64

    (46) comparisonoperator -> NOT EQUAL .

    PRIVATE_ID      reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    GLOBAL_ID       reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    PLUS            reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    MINUS           reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    TIMES           reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    DIVIDE          reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    MOD             reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    POW             reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    SELECT          reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    AND             reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    OR              reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    LT              reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    GT              reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    EQUAL           reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    NOT             reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    SEMI_COLON      reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    $end            reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    LBRACE          reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    LPAREN          reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    NUMBER_REAL     reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    NUMBER_EXP      reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    NUMBER_HEX      reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    STRING_SINGLE   reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    STRING_DOUBLE   reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    LSPAREN         reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    RBRACE          reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    RPAREN          reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    COMMA           reduce using rule 46 (comparisonoperator -> NOT EQUAL .)
    RSPAREN         reduce using rule 46 (comparisonoperator -> NOT EQUAL .)


state 65

    (3) code -> statement SEMI_COLON code .

    $end            reduce using rule 3 (code -> statement SEMI_COLON code .)
    RBRACE          reduce using rule 3 (code -> statement SEMI_COLON code .)


state 66

    (9) binaryexp -> binaryexp operator binaryexp .
    (9) binaryexp -> binaryexp . operator binaryexp
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    GLOBAL_ID       reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    AND             reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    OR              reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    LT              reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    GT              reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    EQUAL           reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    NOT             reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    SEMI_COLON      reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    $end            reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    RBRACE          reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    RPAREN          reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    COMMA           reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    RSPAREN         reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35

  ! PLUS            [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MINUS           [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! TIMES           [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! DIVIDE          [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MOD             [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! POW             [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SELECT          [ reduce using rule 9 (binaryexp -> binaryexp operator binaryexp .) ]
  ! PRIVATE_ID      [ shift and go to state 12 ]
  ! GLOBAL_ID       [ shift and go to state 13 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 40 ]
  ! GT              [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 7 ]
  ! NOT             [ shift and go to state 42 ]

    operator                       shift and go to state 44
    identifier                     shift and go to state 45
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 67

    (6) assignment -> definition EQUAL binaryexp .
    (9) binaryexp -> binaryexp . operator binaryexp
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 6 (assignment -> definition EQUAL binaryexp .)
    $end            reduce using rule 6 (assignment -> definition EQUAL binaryexp .)
    RBRACE          reduce using rule 6 (assignment -> definition EQUAL binaryexp .)
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    operator                       shift and go to state 44
    identifier                     shift and go to state 45
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 68

    (45) comparisonoperator -> EQUAL EQUAL .
    (45) comparisonoperator -> EQUAL . EQUAL

  ! shift/reduce conflict for EQUAL resolved as shift
    PRIVATE_ID      reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    GLOBAL_ID       reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    PLUS            reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    MINUS           reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    TIMES           reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    DIVIDE          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    MOD             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    POW             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    SELECT          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    AND             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    OR              reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    LT              reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    GT              reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    NOT             reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    SEMI_COLON      reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    $end            reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    RBRACE          reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .)
    EQUAL           shift and go to state 49

  ! EQUAL           [ reduce using rule 45 (comparisonoperator -> EQUAL EQUAL .) ]


state 69

    (7) assignment -> identifier EQUAL binaryexp .
    (9) binaryexp -> binaryexp . operator binaryexp
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 7 (assignment -> identifier EQUAL binaryexp .)
    $end            reduce using rule 7 (assignment -> identifier EQUAL binaryexp .)
    RBRACE          reduce using rule 7 (assignment -> identifier EQUAL binaryexp .)
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    identifier                     shift and go to state 45
    operator                       shift and go to state 44
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 70

    (16) primaryexp -> LBRACE code RBRACE .

    PRIVATE_ID      reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    GLOBAL_ID       reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    PLUS            reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    MINUS           reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    TIMES           reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    DIVIDE          reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    MOD             reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    POW             reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    SELECT          reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    AND             reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    OR              reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    LT              reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    GT              reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    EQUAL           reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    NOT             reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    SEMI_COLON      reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    $end            reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    RBRACE          reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    RPAREN          reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    COMMA           reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)
    RSPAREN         reduce using rule 16 (primaryexp -> LBRACE code RBRACE .)


state 71

    (17) primaryexp -> LPAREN binaryexp RPAREN .

    PRIVATE_ID      reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    GLOBAL_ID       reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    PLUS            reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    MINUS           reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    TIMES           reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    DIVIDE          reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    MOD             reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    POW             reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    SELECT          reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    AND             reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    OR              reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    LT              reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    GT              reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    EQUAL           reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    NOT             reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    SEMI_COLON      reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    $end            reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    RBRACE          reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    RPAREN          reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    COMMA           reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)
    RSPAREN         reduce using rule 17 (primaryexp -> LPAREN binaryexp RPAREN .)


state 72

    (20) array -> LSPAREN arrayelement RSPAREN .

    PRIVATE_ID      reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    GLOBAL_ID       reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    PLUS            reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    MINUS           reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    TIMES           reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    DIVIDE          reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    MOD             reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    POW             reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    SELECT          reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    AND             reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    OR              reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    LT              reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    GT              reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    EQUAL           reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    NOT             reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    SEMI_COLON      reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    $end            reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    RBRACE          reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    RPAREN          reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    COMMA           reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)
    RSPAREN         reduce using rule 20 (array -> LSPAREN arrayelement RSPAREN .)


state 73

    (22) arrayelement -> binaryexp COMMA . arrayelement
    (21) arrayelement -> . binaryexp
    (22) arrayelement -> . binaryexp COMMA arrayelement
    (9) binaryexp -> . binaryexp operator binaryexp
    (10) binaryexp -> . primaryexp
    (11) primaryexp -> . number
    (12) primaryexp -> . unaryexp
    (13) primaryexp -> . nularexp
    (14) primaryexp -> . variable
    (15) primaryexp -> . string
    (16) primaryexp -> . LBRACE code RBRACE
    (17) primaryexp -> . LPAREN binaryexp RPAREN
    (18) primaryexp -> . array
    (51) number -> . NUMBER_REAL
    (52) number -> . NUMBER_EXP
    (53) number -> . NUMBER_HEX
    (24) unaryexp -> . PLUS primaryexp
    (25) unaryexp -> . MINUS primaryexp
    (26) unaryexp -> . identifier primaryexp
    (23) nularexp -> . operator
    (27) variable -> . identifier
    (54) string -> . STRING_SINGLE
    (55) string -> . STRING_DOUBLE
    (19) array -> . LSPAREN RSPAREN
    (20) array -> . LSPAREN arrayelement RSPAREN
    (49) identifier -> . PRIVATE_ID
    (50) identifier -> . GLOBAL_ID
    (28) operator -> . identifier
    (29) operator -> . punctuation
    (30) punctuation -> . PLUS
    (31) punctuation -> . MINUS
    (32) punctuation -> . TIMES
    (33) punctuation -> . DIVIDE
    (34) punctuation -> . MOD
    (35) punctuation -> . POW
    (36) punctuation -> . SELECT
    (37) punctuation -> . comparisonoperator
    (38) punctuation -> . AND
    (39) punctuation -> . OR
    (40) punctuation -> . configaccessor
    (41) comparisonoperator -> . LT
    (42) comparisonoperator -> . GT
    (43) comparisonoperator -> . LT EQUAL
    (44) comparisonoperator -> . GT EQUAL
    (45) comparisonoperator -> . EQUAL EQUAL
    (46) comparisonoperator -> . NOT EQUAL
    (47) configaccessor -> . GT GT
    (48) configaccessor -> . DIVIDE

    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_EXP      shift and go to state 23
    NUMBER_HEX      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LSPAREN         shift and go to state 29
    PRIVATE_ID      shift and go to state 12
    GLOBAL_ID       shift and go to state 13
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32
    MOD             shift and go to state 33
    POW             shift and go to state 34
    SELECT          shift and go to state 35
    AND             shift and go to state 37
    OR              shift and go to state 38
    LT              shift and go to state 40
    GT              shift and go to state 41
    EQUAL           shift and go to state 7
    NOT             shift and go to state 42

    binaryexp                      shift and go to state 60
    arrayelement                   shift and go to state 74
    operator                       shift and go to state 9
    primaryexp                     shift and go to state 10
    number                         shift and go to state 14
    unaryexp                       shift and go to state 15
    nularexp                       shift and go to state 16
    variable                       shift and go to state 17
    string                         shift and go to state 18
    array                          shift and go to state 21
    identifier                     shift and go to state 50
    punctuation                    shift and go to state 30
    comparisonoperator             shift and go to state 36
    configaccessor                 shift and go to state 39

state 74

    (22) arrayelement -> binaryexp COMMA arrayelement .

    RSPAREN         reduce using rule 22 (arrayelement -> binaryexp COMMA arrayelement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 8 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 8 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 8 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 8 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 8 resolved as shift
WARNING: shift/reduce conflict for MOD in state 8 resolved as shift
WARNING: shift/reduce conflict for POW in state 8 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 8 resolved as shift
WARNING: shift/reduce conflict for AND in state 8 resolved as shift
WARNING: shift/reduce conflict for OR in state 8 resolved as shift
WARNING: shift/reduce conflict for LT in state 8 resolved as shift
WARNING: shift/reduce conflict for GT in state 8 resolved as shift
WARNING: shift/reduce conflict for NOT in state 8 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 41 resolved as shift
WARNING: shift/reduce conflict for GT in state 41 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 50 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 50 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 50 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 50 resolved as shift
WARNING: shift/reduce conflict for MOD in state 50 resolved as shift
WARNING: shift/reduce conflict for POW in state 50 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 50 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OR in state 50 resolved as shift
WARNING: shift/reduce conflict for LT in state 50 resolved as shift
WARNING: shift/reduce conflict for GT in state 50 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 50 resolved as shift
WARNING: shift/reduce conflict for NOT in state 50 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 68 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (variable -> identifier)
WARNING: rejected rule (operator -> identifier) in state 8
WARNING: reduce/reduce conflict in state 32 resolved using rule (punctuation -> DIVIDE)
WARNING: rejected rule (configaccessor -> DIVIDE) in state 32
WARNING: reduce/reduce conflict in state 50 resolved using rule (variable -> identifier)
WARNING: rejected rule (operator -> identifier) in state 50
WARNING: Rule (configaccessor -> DIVIDE) is never reduced
