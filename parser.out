Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT_MULTI
    COMMENT_SINGLE
    NEWLINE

Grammar

Rule 0     S' -> code
Rule 1     code -> empty
Rule 2     code -> statement
Rule 3     code -> statement terminator code
Rule 4     statement -> assignment
Rule 5     statement -> binaryexp
Rule 6     statement -> binaryexp operator binaryexp
Rule 7     terminator -> SEMI_COLON
Rule 8     terminator -> COMMA
Rule 9     assignment -> definition EQUAL binaryexp
Rule 10    assignment -> identifier EQUAL binaryexp
Rule 11    definition -> PRIVATE PRIVATE_ID
Rule 12    identifier -> PRIVATE_ID
Rule 13    identifier -> GLOBAL_ID
Rule 14    binaryexp -> binaryexp operator binaryexp
Rule 15    binaryexp -> primaryexp
Rule 16    primaryexp -> number
Rule 17    primaryexp -> unaryexp
Rule 18    primaryexp -> nularexp
Rule 19    primaryexp -> variable
Rule 20    primaryexp -> string
Rule 21    primaryexp -> bracedexp
Rule 22    primaryexp -> LPAREN binaryexp RPAREN
Rule 23    primaryexp -> array
Rule 24    bracedexp -> LBRACE new_scope code RBRACE
Rule 25    new_scope -> <empty>
Rule 26    array -> LSPAREN RSPAREN
Rule 27    array -> LSPAREN arrayelement RSPAREN
Rule 28    arrayelement -> binaryexp
Rule 29    arrayelement -> binaryexp COMMA arrayelement
Rule 30    nularexp -> operator
Rule 31    unaryexp -> PLUS primaryexp
Rule 32    unaryexp -> MINUS primaryexp
Rule 33    unaryexp -> NOT primaryexp
Rule 34    unaryexp -> identifier primaryexp
Rule 35    variable -> identifier
Rule 36    operator -> identifier
Rule 37    operator -> punctuation
Rule 38    punctuation -> PLUS
Rule 39    punctuation -> MINUS
Rule 40    punctuation -> TIMES
Rule 41    punctuation -> DIVIDE
Rule 42    punctuation -> MOD
Rule 43    punctuation -> POW
Rule 44    punctuation -> SELECT
Rule 45    punctuation -> COLON
Rule 46    punctuation -> comparisonoperator
Rule 47    punctuation -> AND
Rule 48    punctuation -> OR
Rule 49    punctuation -> configaccessor
Rule 50    comparisonoperator -> LT
Rule 51    comparisonoperator -> GT
Rule 52    comparisonoperator -> LTE
Rule 53    comparisonoperator -> GTE
Rule 54    comparisonoperator -> EQUALITY
Rule 55    comparisonoperator -> INEQUALITY
Rule 56    configaccessor -> GT GT
Rule 57    configaccessor -> DIVIDE
Rule 58    number -> NUMBER_REAL
Rule 59    number -> NUMBER_EXP
Rule 60    number -> NUMBER_HEX
Rule 61    string -> STRING_SINGLE
Rule 62    string -> STRING_DOUBLE
Rule 63    empty -> <empty>

Terminals, with rules where they appear

AND                  : 47
BOOL                 : 
COLON                : 45
COMMA                : 8 29
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DIVIDE               : 41 57
EQUAL                : 9 10
EQUALITY             : 54
GLOBAL_ID            : 13
GT                   : 51 56 56
GTE                  : 53
INEQUALITY           : 55
LBRACE               : 24
LPAREN               : 22
LSPAREN              : 26 27
LT                   : 50
LTE                  : 52
MINUS                : 32 39
MOD                  : 42
NEWLINE              : 
NOT                  : 33
NUMBER_EXP           : 59
NUMBER_HEX           : 60
NUMBER_REAL          : 58
OR                   : 48
PLUS                 : 31 38
POW                  : 43
PRIVATE              : 11
PRIVATE_ID           : 11 12
RBRACE               : 24
RPAREN               : 22
RSPAREN              : 26 27
SELECT               : 44
SEMI_COLON           : 7
STRING_DOUBLE        : 62
STRING_SINGLE        : 61
TIMES                : 40
error                : 

Nonterminals, with rules where they appear

array                : 23
arrayelement         : 27 29
assignment           : 4
binaryexp            : 5 6 6 9 10 14 14 22 28 29
bracedexp            : 21
code                 : 3 24 0
comparisonoperator   : 46
configaccessor       : 49
definition           : 9
empty                : 1
identifier           : 10 34 35 36
new_scope            : 24
nularexp             : 18
number               : 16
operator             : 6 14 30
primaryexp           : 15 31 32 33 34
punctuation          : 37
statement            : 2 3
string               : 20
terminator           : 3
unaryexp             : 17
variable             : 19

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (63) empty -> .
    (4) statement -> . assignment
    (5) statement -> . binaryexp
    (6) statement -> . binaryexp operator binaryexp
    (9) assignment -> . definition EQUAL binaryexp
    (10) assignment -> . identifier EQUAL binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (11) definition -> . PRIVATE PRIVATE_ID
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    $end            reduce using rule 63 (empty -> .)
    PRIVATE         shift and go to state 10
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    code                           shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    binaryexp                      shift and go to state 5
    operator                       shift and go to state 6
    definition                     shift and go to state 7
    identifier                     shift and go to state 8
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 1

    (0) S' -> code .



state 2

    (1) code -> empty .

    $end            reduce using rule 1 (code -> empty .)
    RBRACE          reduce using rule 1 (code -> empty .)


state 3

    (2) code -> statement .
    (3) code -> statement . terminator code
    (7) terminator -> . SEMI_COLON
    (8) terminator -> . COMMA

    $end            reduce using rule 2 (code -> statement .)
    RBRACE          reduce using rule 2 (code -> statement .)
    SEMI_COLON      shift and go to state 49
    COMMA           shift and go to state 50

    terminator                     shift and go to state 48

state 4

    (4) statement -> assignment .

    SEMI_COLON      reduce using rule 4 (statement -> assignment .)
    COMMA           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> binaryexp .
    (6) statement -> binaryexp . operator binaryexp
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 5 (statement -> binaryexp .)
    COMMA           reduce using rule 5 (statement -> binaryexp .)
    $end            reduce using rule 5 (statement -> binaryexp .)
    RBRACE          reduce using rule 5 (statement -> binaryexp .)
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    operator                       shift and go to state 51
    identifier                     shift and go to state 52
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 6

    (30) nularexp -> operator .

    PRIVATE_ID      reduce using rule 30 (nularexp -> operator .)
    GLOBAL_ID       reduce using rule 30 (nularexp -> operator .)
    PLUS            reduce using rule 30 (nularexp -> operator .)
    MINUS           reduce using rule 30 (nularexp -> operator .)
    TIMES           reduce using rule 30 (nularexp -> operator .)
    DIVIDE          reduce using rule 30 (nularexp -> operator .)
    MOD             reduce using rule 30 (nularexp -> operator .)
    POW             reduce using rule 30 (nularexp -> operator .)
    SELECT          reduce using rule 30 (nularexp -> operator .)
    COLON           reduce using rule 30 (nularexp -> operator .)
    AND             reduce using rule 30 (nularexp -> operator .)
    OR              reduce using rule 30 (nularexp -> operator .)
    LT              reduce using rule 30 (nularexp -> operator .)
    GT              reduce using rule 30 (nularexp -> operator .)
    LTE             reduce using rule 30 (nularexp -> operator .)
    GTE             reduce using rule 30 (nularexp -> operator .)
    EQUALITY        reduce using rule 30 (nularexp -> operator .)
    INEQUALITY      reduce using rule 30 (nularexp -> operator .)
    SEMI_COLON      reduce using rule 30 (nularexp -> operator .)
    COMMA           reduce using rule 30 (nularexp -> operator .)
    $end            reduce using rule 30 (nularexp -> operator .)
    RBRACE          reduce using rule 30 (nularexp -> operator .)
    RPAREN          reduce using rule 30 (nularexp -> operator .)
    RSPAREN         reduce using rule 30 (nularexp -> operator .)


state 7

    (9) assignment -> definition . EQUAL binaryexp

    EQUAL           shift and go to state 55


state 8

    (10) assignment -> identifier . EQUAL binaryexp
    (34) unaryexp -> identifier . primaryexp
    (35) variable -> identifier .
    (36) operator -> identifier .
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for SELECT resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 35 (variable -> identifier .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
    EQUAL           shift and go to state 57
    SEMI_COLON      reduce using rule 35 (variable -> identifier .)
    COMMA           reduce using rule 35 (variable -> identifier .)
    $end            reduce using rule 35 (variable -> identifier .)
    RBRACE          reduce using rule 35 (variable -> identifier .)
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

  ! PRIVATE_ID      [ reduce using rule 35 (variable -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 35 (variable -> identifier .) ]
  ! PLUS            [ reduce using rule 35 (variable -> identifier .) ]
  ! MINUS           [ reduce using rule 35 (variable -> identifier .) ]
  ! TIMES           [ reduce using rule 35 (variable -> identifier .) ]
  ! DIVIDE          [ reduce using rule 35 (variable -> identifier .) ]
  ! MOD             [ reduce using rule 35 (variable -> identifier .) ]
  ! POW             [ reduce using rule 35 (variable -> identifier .) ]
  ! SELECT          [ reduce using rule 35 (variable -> identifier .) ]
  ! COLON           [ reduce using rule 35 (variable -> identifier .) ]
  ! AND             [ reduce using rule 35 (variable -> identifier .) ]
  ! OR              [ reduce using rule 35 (variable -> identifier .) ]
  ! LT              [ reduce using rule 35 (variable -> identifier .) ]
  ! GT              [ reduce using rule 35 (variable -> identifier .) ]
  ! LTE             [ reduce using rule 35 (variable -> identifier .) ]
  ! GTE             [ reduce using rule 35 (variable -> identifier .) ]
  ! EQUALITY        [ reduce using rule 35 (variable -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 35 (variable -> identifier .) ]
  ! PRIVATE_ID      [ reduce using rule 36 (operator -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 36 (operator -> identifier .) ]
  ! PLUS            [ reduce using rule 36 (operator -> identifier .) ]
  ! MINUS           [ reduce using rule 36 (operator -> identifier .) ]
  ! TIMES           [ reduce using rule 36 (operator -> identifier .) ]
  ! DIVIDE          [ reduce using rule 36 (operator -> identifier .) ]
  ! MOD             [ reduce using rule 36 (operator -> identifier .) ]
  ! POW             [ reduce using rule 36 (operator -> identifier .) ]
  ! SELECT          [ reduce using rule 36 (operator -> identifier .) ]
  ! COLON           [ reduce using rule 36 (operator -> identifier .) ]
  ! AND             [ reduce using rule 36 (operator -> identifier .) ]
  ! OR              [ reduce using rule 36 (operator -> identifier .) ]
  ! LT              [ reduce using rule 36 (operator -> identifier .) ]
  ! GT              [ reduce using rule 36 (operator -> identifier .) ]
  ! LTE             [ reduce using rule 36 (operator -> identifier .) ]
  ! GTE             [ reduce using rule 36 (operator -> identifier .) ]
  ! EQUALITY        [ reduce using rule 36 (operator -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 36 (operator -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 36 (operator -> identifier .) ]
  ! COMMA           [ reduce using rule 36 (operator -> identifier .) ]
  ! $end            [ reduce using rule 36 (operator -> identifier .) ]
  ! RBRACE          [ reduce using rule 36 (operator -> identifier .) ]

    identifier                     shift and go to state 56
    primaryexp                     shift and go to state 58
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    operator                       shift and go to state 6
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 9

    (15) binaryexp -> primaryexp .

    PRIVATE_ID      reduce using rule 15 (binaryexp -> primaryexp .)
    GLOBAL_ID       reduce using rule 15 (binaryexp -> primaryexp .)
    PLUS            reduce using rule 15 (binaryexp -> primaryexp .)
    MINUS           reduce using rule 15 (binaryexp -> primaryexp .)
    TIMES           reduce using rule 15 (binaryexp -> primaryexp .)
    DIVIDE          reduce using rule 15 (binaryexp -> primaryexp .)
    MOD             reduce using rule 15 (binaryexp -> primaryexp .)
    POW             reduce using rule 15 (binaryexp -> primaryexp .)
    SELECT          reduce using rule 15 (binaryexp -> primaryexp .)
    COLON           reduce using rule 15 (binaryexp -> primaryexp .)
    AND             reduce using rule 15 (binaryexp -> primaryexp .)
    OR              reduce using rule 15 (binaryexp -> primaryexp .)
    LT              reduce using rule 15 (binaryexp -> primaryexp .)
    GT              reduce using rule 15 (binaryexp -> primaryexp .)
    LTE             reduce using rule 15 (binaryexp -> primaryexp .)
    GTE             reduce using rule 15 (binaryexp -> primaryexp .)
    EQUALITY        reduce using rule 15 (binaryexp -> primaryexp .)
    INEQUALITY      reduce using rule 15 (binaryexp -> primaryexp .)
    SEMI_COLON      reduce using rule 15 (binaryexp -> primaryexp .)
    COMMA           reduce using rule 15 (binaryexp -> primaryexp .)
    $end            reduce using rule 15 (binaryexp -> primaryexp .)
    RPAREN          reduce using rule 15 (binaryexp -> primaryexp .)
    RSPAREN         reduce using rule 15 (binaryexp -> primaryexp .)
    RBRACE          reduce using rule 15 (binaryexp -> primaryexp .)


state 10

    (11) definition -> PRIVATE . PRIVATE_ID

    PRIVATE_ID      shift and go to state 59


state 11

    (12) identifier -> PRIVATE_ID .

    EQUAL           reduce using rule 12 (identifier -> PRIVATE_ID .)
    LPAREN          reduce using rule 12 (identifier -> PRIVATE_ID .)
    NUMBER_REAL     reduce using rule 12 (identifier -> PRIVATE_ID .)
    NUMBER_EXP      reduce using rule 12 (identifier -> PRIVATE_ID .)
    NUMBER_HEX      reduce using rule 12 (identifier -> PRIVATE_ID .)
    PLUS            reduce using rule 12 (identifier -> PRIVATE_ID .)
    MINUS           reduce using rule 12 (identifier -> PRIVATE_ID .)
    NOT             reduce using rule 12 (identifier -> PRIVATE_ID .)
    STRING_SINGLE   reduce using rule 12 (identifier -> PRIVATE_ID .)
    STRING_DOUBLE   reduce using rule 12 (identifier -> PRIVATE_ID .)
    LBRACE          reduce using rule 12 (identifier -> PRIVATE_ID .)
    LSPAREN         reduce using rule 12 (identifier -> PRIVATE_ID .)
    PRIVATE_ID      reduce using rule 12 (identifier -> PRIVATE_ID .)
    GLOBAL_ID       reduce using rule 12 (identifier -> PRIVATE_ID .)
    TIMES           reduce using rule 12 (identifier -> PRIVATE_ID .)
    DIVIDE          reduce using rule 12 (identifier -> PRIVATE_ID .)
    MOD             reduce using rule 12 (identifier -> PRIVATE_ID .)
    POW             reduce using rule 12 (identifier -> PRIVATE_ID .)
    SELECT          reduce using rule 12 (identifier -> PRIVATE_ID .)
    COLON           reduce using rule 12 (identifier -> PRIVATE_ID .)
    AND             reduce using rule 12 (identifier -> PRIVATE_ID .)
    OR              reduce using rule 12 (identifier -> PRIVATE_ID .)
    LT              reduce using rule 12 (identifier -> PRIVATE_ID .)
    GT              reduce using rule 12 (identifier -> PRIVATE_ID .)
    LTE             reduce using rule 12 (identifier -> PRIVATE_ID .)
    GTE             reduce using rule 12 (identifier -> PRIVATE_ID .)
    EQUALITY        reduce using rule 12 (identifier -> PRIVATE_ID .)
    INEQUALITY      reduce using rule 12 (identifier -> PRIVATE_ID .)
    SEMI_COLON      reduce using rule 12 (identifier -> PRIVATE_ID .)
    COMMA           reduce using rule 12 (identifier -> PRIVATE_ID .)
    $end            reduce using rule 12 (identifier -> PRIVATE_ID .)
    RBRACE          reduce using rule 12 (identifier -> PRIVATE_ID .)
    RPAREN          reduce using rule 12 (identifier -> PRIVATE_ID .)
    RSPAREN         reduce using rule 12 (identifier -> PRIVATE_ID .)


state 12

    (13) identifier -> GLOBAL_ID .

    EQUAL           reduce using rule 13 (identifier -> GLOBAL_ID .)
    LPAREN          reduce using rule 13 (identifier -> GLOBAL_ID .)
    NUMBER_REAL     reduce using rule 13 (identifier -> GLOBAL_ID .)
    NUMBER_EXP      reduce using rule 13 (identifier -> GLOBAL_ID .)
    NUMBER_HEX      reduce using rule 13 (identifier -> GLOBAL_ID .)
    PLUS            reduce using rule 13 (identifier -> GLOBAL_ID .)
    MINUS           reduce using rule 13 (identifier -> GLOBAL_ID .)
    NOT             reduce using rule 13 (identifier -> GLOBAL_ID .)
    STRING_SINGLE   reduce using rule 13 (identifier -> GLOBAL_ID .)
    STRING_DOUBLE   reduce using rule 13 (identifier -> GLOBAL_ID .)
    LBRACE          reduce using rule 13 (identifier -> GLOBAL_ID .)
    LSPAREN         reduce using rule 13 (identifier -> GLOBAL_ID .)
    PRIVATE_ID      reduce using rule 13 (identifier -> GLOBAL_ID .)
    GLOBAL_ID       reduce using rule 13 (identifier -> GLOBAL_ID .)
    TIMES           reduce using rule 13 (identifier -> GLOBAL_ID .)
    DIVIDE          reduce using rule 13 (identifier -> GLOBAL_ID .)
    MOD             reduce using rule 13 (identifier -> GLOBAL_ID .)
    POW             reduce using rule 13 (identifier -> GLOBAL_ID .)
    SELECT          reduce using rule 13 (identifier -> GLOBAL_ID .)
    COLON           reduce using rule 13 (identifier -> GLOBAL_ID .)
    AND             reduce using rule 13 (identifier -> GLOBAL_ID .)
    OR              reduce using rule 13 (identifier -> GLOBAL_ID .)
    LT              reduce using rule 13 (identifier -> GLOBAL_ID .)
    GT              reduce using rule 13 (identifier -> GLOBAL_ID .)
    LTE             reduce using rule 13 (identifier -> GLOBAL_ID .)
    GTE             reduce using rule 13 (identifier -> GLOBAL_ID .)
    EQUALITY        reduce using rule 13 (identifier -> GLOBAL_ID .)
    INEQUALITY      reduce using rule 13 (identifier -> GLOBAL_ID .)
    SEMI_COLON      reduce using rule 13 (identifier -> GLOBAL_ID .)
    COMMA           reduce using rule 13 (identifier -> GLOBAL_ID .)
    $end            reduce using rule 13 (identifier -> GLOBAL_ID .)
    RBRACE          reduce using rule 13 (identifier -> GLOBAL_ID .)
    RPAREN          reduce using rule 13 (identifier -> GLOBAL_ID .)
    RSPAREN         reduce using rule 13 (identifier -> GLOBAL_ID .)


state 13

    (16) primaryexp -> number .

    PRIVATE_ID      reduce using rule 16 (primaryexp -> number .)
    GLOBAL_ID       reduce using rule 16 (primaryexp -> number .)
    PLUS            reduce using rule 16 (primaryexp -> number .)
    MINUS           reduce using rule 16 (primaryexp -> number .)
    TIMES           reduce using rule 16 (primaryexp -> number .)
    DIVIDE          reduce using rule 16 (primaryexp -> number .)
    MOD             reduce using rule 16 (primaryexp -> number .)
    POW             reduce using rule 16 (primaryexp -> number .)
    SELECT          reduce using rule 16 (primaryexp -> number .)
    COLON           reduce using rule 16 (primaryexp -> number .)
    AND             reduce using rule 16 (primaryexp -> number .)
    OR              reduce using rule 16 (primaryexp -> number .)
    LT              reduce using rule 16 (primaryexp -> number .)
    GT              reduce using rule 16 (primaryexp -> number .)
    LTE             reduce using rule 16 (primaryexp -> number .)
    GTE             reduce using rule 16 (primaryexp -> number .)
    EQUALITY        reduce using rule 16 (primaryexp -> number .)
    INEQUALITY      reduce using rule 16 (primaryexp -> number .)
    SEMI_COLON      reduce using rule 16 (primaryexp -> number .)
    COMMA           reduce using rule 16 (primaryexp -> number .)
    $end            reduce using rule 16 (primaryexp -> number .)
    RBRACE          reduce using rule 16 (primaryexp -> number .)
    RPAREN          reduce using rule 16 (primaryexp -> number .)
    RSPAREN         reduce using rule 16 (primaryexp -> number .)


state 14

    (17) primaryexp -> unaryexp .

    PRIVATE_ID      reduce using rule 17 (primaryexp -> unaryexp .)
    GLOBAL_ID       reduce using rule 17 (primaryexp -> unaryexp .)
    PLUS            reduce using rule 17 (primaryexp -> unaryexp .)
    MINUS           reduce using rule 17 (primaryexp -> unaryexp .)
    TIMES           reduce using rule 17 (primaryexp -> unaryexp .)
    DIVIDE          reduce using rule 17 (primaryexp -> unaryexp .)
    MOD             reduce using rule 17 (primaryexp -> unaryexp .)
    POW             reduce using rule 17 (primaryexp -> unaryexp .)
    SELECT          reduce using rule 17 (primaryexp -> unaryexp .)
    COLON           reduce using rule 17 (primaryexp -> unaryexp .)
    AND             reduce using rule 17 (primaryexp -> unaryexp .)
    OR              reduce using rule 17 (primaryexp -> unaryexp .)
    LT              reduce using rule 17 (primaryexp -> unaryexp .)
    GT              reduce using rule 17 (primaryexp -> unaryexp .)
    LTE             reduce using rule 17 (primaryexp -> unaryexp .)
    GTE             reduce using rule 17 (primaryexp -> unaryexp .)
    EQUALITY        reduce using rule 17 (primaryexp -> unaryexp .)
    INEQUALITY      reduce using rule 17 (primaryexp -> unaryexp .)
    SEMI_COLON      reduce using rule 17 (primaryexp -> unaryexp .)
    COMMA           reduce using rule 17 (primaryexp -> unaryexp .)
    $end            reduce using rule 17 (primaryexp -> unaryexp .)
    RBRACE          reduce using rule 17 (primaryexp -> unaryexp .)
    RPAREN          reduce using rule 17 (primaryexp -> unaryexp .)
    RSPAREN         reduce using rule 17 (primaryexp -> unaryexp .)


state 15

    (18) primaryexp -> nularexp .

    PRIVATE_ID      reduce using rule 18 (primaryexp -> nularexp .)
    GLOBAL_ID       reduce using rule 18 (primaryexp -> nularexp .)
    PLUS            reduce using rule 18 (primaryexp -> nularexp .)
    MINUS           reduce using rule 18 (primaryexp -> nularexp .)
    TIMES           reduce using rule 18 (primaryexp -> nularexp .)
    DIVIDE          reduce using rule 18 (primaryexp -> nularexp .)
    MOD             reduce using rule 18 (primaryexp -> nularexp .)
    POW             reduce using rule 18 (primaryexp -> nularexp .)
    SELECT          reduce using rule 18 (primaryexp -> nularexp .)
    COLON           reduce using rule 18 (primaryexp -> nularexp .)
    AND             reduce using rule 18 (primaryexp -> nularexp .)
    OR              reduce using rule 18 (primaryexp -> nularexp .)
    LT              reduce using rule 18 (primaryexp -> nularexp .)
    GT              reduce using rule 18 (primaryexp -> nularexp .)
    LTE             reduce using rule 18 (primaryexp -> nularexp .)
    GTE             reduce using rule 18 (primaryexp -> nularexp .)
    EQUALITY        reduce using rule 18 (primaryexp -> nularexp .)
    INEQUALITY      reduce using rule 18 (primaryexp -> nularexp .)
    SEMI_COLON      reduce using rule 18 (primaryexp -> nularexp .)
    COMMA           reduce using rule 18 (primaryexp -> nularexp .)
    $end            reduce using rule 18 (primaryexp -> nularexp .)
    RBRACE          reduce using rule 18 (primaryexp -> nularexp .)
    RPAREN          reduce using rule 18 (primaryexp -> nularexp .)
    RSPAREN         reduce using rule 18 (primaryexp -> nularexp .)


state 16

    (19) primaryexp -> variable .

    PRIVATE_ID      reduce using rule 19 (primaryexp -> variable .)
    GLOBAL_ID       reduce using rule 19 (primaryexp -> variable .)
    PLUS            reduce using rule 19 (primaryexp -> variable .)
    MINUS           reduce using rule 19 (primaryexp -> variable .)
    TIMES           reduce using rule 19 (primaryexp -> variable .)
    DIVIDE          reduce using rule 19 (primaryexp -> variable .)
    MOD             reduce using rule 19 (primaryexp -> variable .)
    POW             reduce using rule 19 (primaryexp -> variable .)
    SELECT          reduce using rule 19 (primaryexp -> variable .)
    COLON           reduce using rule 19 (primaryexp -> variable .)
    AND             reduce using rule 19 (primaryexp -> variable .)
    OR              reduce using rule 19 (primaryexp -> variable .)
    LT              reduce using rule 19 (primaryexp -> variable .)
    GT              reduce using rule 19 (primaryexp -> variable .)
    LTE             reduce using rule 19 (primaryexp -> variable .)
    GTE             reduce using rule 19 (primaryexp -> variable .)
    EQUALITY        reduce using rule 19 (primaryexp -> variable .)
    INEQUALITY      reduce using rule 19 (primaryexp -> variable .)
    SEMI_COLON      reduce using rule 19 (primaryexp -> variable .)
    COMMA           reduce using rule 19 (primaryexp -> variable .)
    $end            reduce using rule 19 (primaryexp -> variable .)
    RBRACE          reduce using rule 19 (primaryexp -> variable .)
    RPAREN          reduce using rule 19 (primaryexp -> variable .)
    RSPAREN         reduce using rule 19 (primaryexp -> variable .)


state 17

    (20) primaryexp -> string .

    PRIVATE_ID      reduce using rule 20 (primaryexp -> string .)
    GLOBAL_ID       reduce using rule 20 (primaryexp -> string .)
    PLUS            reduce using rule 20 (primaryexp -> string .)
    MINUS           reduce using rule 20 (primaryexp -> string .)
    TIMES           reduce using rule 20 (primaryexp -> string .)
    DIVIDE          reduce using rule 20 (primaryexp -> string .)
    MOD             reduce using rule 20 (primaryexp -> string .)
    POW             reduce using rule 20 (primaryexp -> string .)
    SELECT          reduce using rule 20 (primaryexp -> string .)
    COLON           reduce using rule 20 (primaryexp -> string .)
    AND             reduce using rule 20 (primaryexp -> string .)
    OR              reduce using rule 20 (primaryexp -> string .)
    LT              reduce using rule 20 (primaryexp -> string .)
    GT              reduce using rule 20 (primaryexp -> string .)
    LTE             reduce using rule 20 (primaryexp -> string .)
    GTE             reduce using rule 20 (primaryexp -> string .)
    EQUALITY        reduce using rule 20 (primaryexp -> string .)
    INEQUALITY      reduce using rule 20 (primaryexp -> string .)
    SEMI_COLON      reduce using rule 20 (primaryexp -> string .)
    COMMA           reduce using rule 20 (primaryexp -> string .)
    $end            reduce using rule 20 (primaryexp -> string .)
    RBRACE          reduce using rule 20 (primaryexp -> string .)
    RPAREN          reduce using rule 20 (primaryexp -> string .)
    RSPAREN         reduce using rule 20 (primaryexp -> string .)


state 18

    (21) primaryexp -> bracedexp .

    PRIVATE_ID      reduce using rule 21 (primaryexp -> bracedexp .)
    GLOBAL_ID       reduce using rule 21 (primaryexp -> bracedexp .)
    PLUS            reduce using rule 21 (primaryexp -> bracedexp .)
    MINUS           reduce using rule 21 (primaryexp -> bracedexp .)
    TIMES           reduce using rule 21 (primaryexp -> bracedexp .)
    DIVIDE          reduce using rule 21 (primaryexp -> bracedexp .)
    MOD             reduce using rule 21 (primaryexp -> bracedexp .)
    POW             reduce using rule 21 (primaryexp -> bracedexp .)
    SELECT          reduce using rule 21 (primaryexp -> bracedexp .)
    COLON           reduce using rule 21 (primaryexp -> bracedexp .)
    AND             reduce using rule 21 (primaryexp -> bracedexp .)
    OR              reduce using rule 21 (primaryexp -> bracedexp .)
    LT              reduce using rule 21 (primaryexp -> bracedexp .)
    GT              reduce using rule 21 (primaryexp -> bracedexp .)
    LTE             reduce using rule 21 (primaryexp -> bracedexp .)
    GTE             reduce using rule 21 (primaryexp -> bracedexp .)
    EQUALITY        reduce using rule 21 (primaryexp -> bracedexp .)
    INEQUALITY      reduce using rule 21 (primaryexp -> bracedexp .)
    SEMI_COLON      reduce using rule 21 (primaryexp -> bracedexp .)
    COMMA           reduce using rule 21 (primaryexp -> bracedexp .)
    $end            reduce using rule 21 (primaryexp -> bracedexp .)
    RBRACE          reduce using rule 21 (primaryexp -> bracedexp .)
    RPAREN          reduce using rule 21 (primaryexp -> bracedexp .)
    RSPAREN         reduce using rule 21 (primaryexp -> bracedexp .)


state 19

    (22) primaryexp -> LPAREN . binaryexp RPAREN
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    binaryexp                      shift and go to state 60
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 20

    (23) primaryexp -> array .

    PRIVATE_ID      reduce using rule 23 (primaryexp -> array .)
    GLOBAL_ID       reduce using rule 23 (primaryexp -> array .)
    PLUS            reduce using rule 23 (primaryexp -> array .)
    MINUS           reduce using rule 23 (primaryexp -> array .)
    TIMES           reduce using rule 23 (primaryexp -> array .)
    DIVIDE          reduce using rule 23 (primaryexp -> array .)
    MOD             reduce using rule 23 (primaryexp -> array .)
    POW             reduce using rule 23 (primaryexp -> array .)
    SELECT          reduce using rule 23 (primaryexp -> array .)
    COLON           reduce using rule 23 (primaryexp -> array .)
    AND             reduce using rule 23 (primaryexp -> array .)
    OR              reduce using rule 23 (primaryexp -> array .)
    LT              reduce using rule 23 (primaryexp -> array .)
    GT              reduce using rule 23 (primaryexp -> array .)
    LTE             reduce using rule 23 (primaryexp -> array .)
    GTE             reduce using rule 23 (primaryexp -> array .)
    EQUALITY        reduce using rule 23 (primaryexp -> array .)
    INEQUALITY      reduce using rule 23 (primaryexp -> array .)
    SEMI_COLON      reduce using rule 23 (primaryexp -> array .)
    COMMA           reduce using rule 23 (primaryexp -> array .)
    $end            reduce using rule 23 (primaryexp -> array .)
    RBRACE          reduce using rule 23 (primaryexp -> array .)
    RPAREN          reduce using rule 23 (primaryexp -> array .)
    RSPAREN         reduce using rule 23 (primaryexp -> array .)


state 21

    (58) number -> NUMBER_REAL .

    PRIVATE_ID      reduce using rule 58 (number -> NUMBER_REAL .)
    GLOBAL_ID       reduce using rule 58 (number -> NUMBER_REAL .)
    PLUS            reduce using rule 58 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 58 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 58 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 58 (number -> NUMBER_REAL .)
    MOD             reduce using rule 58 (number -> NUMBER_REAL .)
    POW             reduce using rule 58 (number -> NUMBER_REAL .)
    SELECT          reduce using rule 58 (number -> NUMBER_REAL .)
    COLON           reduce using rule 58 (number -> NUMBER_REAL .)
    AND             reduce using rule 58 (number -> NUMBER_REAL .)
    OR              reduce using rule 58 (number -> NUMBER_REAL .)
    LT              reduce using rule 58 (number -> NUMBER_REAL .)
    GT              reduce using rule 58 (number -> NUMBER_REAL .)
    LTE             reduce using rule 58 (number -> NUMBER_REAL .)
    GTE             reduce using rule 58 (number -> NUMBER_REAL .)
    EQUALITY        reduce using rule 58 (number -> NUMBER_REAL .)
    INEQUALITY      reduce using rule 58 (number -> NUMBER_REAL .)
    SEMI_COLON      reduce using rule 58 (number -> NUMBER_REAL .)
    COMMA           reduce using rule 58 (number -> NUMBER_REAL .)
    $end            reduce using rule 58 (number -> NUMBER_REAL .)
    RBRACE          reduce using rule 58 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 58 (number -> NUMBER_REAL .)
    RSPAREN         reduce using rule 58 (number -> NUMBER_REAL .)


state 22

    (59) number -> NUMBER_EXP .

    PRIVATE_ID      reduce using rule 59 (number -> NUMBER_EXP .)
    GLOBAL_ID       reduce using rule 59 (number -> NUMBER_EXP .)
    PLUS            reduce using rule 59 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 59 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 59 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 59 (number -> NUMBER_EXP .)
    MOD             reduce using rule 59 (number -> NUMBER_EXP .)
    POW             reduce using rule 59 (number -> NUMBER_EXP .)
    SELECT          reduce using rule 59 (number -> NUMBER_EXP .)
    COLON           reduce using rule 59 (number -> NUMBER_EXP .)
    AND             reduce using rule 59 (number -> NUMBER_EXP .)
    OR              reduce using rule 59 (number -> NUMBER_EXP .)
    LT              reduce using rule 59 (number -> NUMBER_EXP .)
    GT              reduce using rule 59 (number -> NUMBER_EXP .)
    LTE             reduce using rule 59 (number -> NUMBER_EXP .)
    GTE             reduce using rule 59 (number -> NUMBER_EXP .)
    EQUALITY        reduce using rule 59 (number -> NUMBER_EXP .)
    INEQUALITY      reduce using rule 59 (number -> NUMBER_EXP .)
    SEMI_COLON      reduce using rule 59 (number -> NUMBER_EXP .)
    COMMA           reduce using rule 59 (number -> NUMBER_EXP .)
    $end            reduce using rule 59 (number -> NUMBER_EXP .)
    RBRACE          reduce using rule 59 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 59 (number -> NUMBER_EXP .)
    RSPAREN         reduce using rule 59 (number -> NUMBER_EXP .)


state 23

    (60) number -> NUMBER_HEX .

    PRIVATE_ID      reduce using rule 60 (number -> NUMBER_HEX .)
    GLOBAL_ID       reduce using rule 60 (number -> NUMBER_HEX .)
    PLUS            reduce using rule 60 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 60 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 60 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 60 (number -> NUMBER_HEX .)
    MOD             reduce using rule 60 (number -> NUMBER_HEX .)
    POW             reduce using rule 60 (number -> NUMBER_HEX .)
    SELECT          reduce using rule 60 (number -> NUMBER_HEX .)
    COLON           reduce using rule 60 (number -> NUMBER_HEX .)
    AND             reduce using rule 60 (number -> NUMBER_HEX .)
    OR              reduce using rule 60 (number -> NUMBER_HEX .)
    LT              reduce using rule 60 (number -> NUMBER_HEX .)
    GT              reduce using rule 60 (number -> NUMBER_HEX .)
    LTE             reduce using rule 60 (number -> NUMBER_HEX .)
    GTE             reduce using rule 60 (number -> NUMBER_HEX .)
    EQUALITY        reduce using rule 60 (number -> NUMBER_HEX .)
    INEQUALITY      reduce using rule 60 (number -> NUMBER_HEX .)
    SEMI_COLON      reduce using rule 60 (number -> NUMBER_HEX .)
    COMMA           reduce using rule 60 (number -> NUMBER_HEX .)
    $end            reduce using rule 60 (number -> NUMBER_HEX .)
    RBRACE          reduce using rule 60 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 60 (number -> NUMBER_HEX .)
    RSPAREN         reduce using rule 60 (number -> NUMBER_HEX .)


state 24

    (31) unaryexp -> PLUS . primaryexp
    (38) punctuation -> PLUS .
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 38 (punctuation -> PLUS .)
    GLOBAL_ID       reduce using rule 38 (punctuation -> PLUS .)
    PLUS            reduce using rule 38 (punctuation -> PLUS .)
    MINUS           reduce using rule 38 (punctuation -> PLUS .)
    COLON           reduce using rule 38 (punctuation -> PLUS .)
    AND             reduce using rule 38 (punctuation -> PLUS .)
    OR              reduce using rule 38 (punctuation -> PLUS .)
    LT              reduce using rule 38 (punctuation -> PLUS .)
    GT              reduce using rule 38 (punctuation -> PLUS .)
    LTE             reduce using rule 38 (punctuation -> PLUS .)
    GTE             reduce using rule 38 (punctuation -> PLUS .)
    EQUALITY        reduce using rule 38 (punctuation -> PLUS .)
    INEQUALITY      reduce using rule 38 (punctuation -> PLUS .)
    SEMI_COLON      reduce using rule 38 (punctuation -> PLUS .)
    COMMA           reduce using rule 38 (punctuation -> PLUS .)
    $end            reduce using rule 38 (punctuation -> PLUS .)
    RBRACE          reduce using rule 38 (punctuation -> PLUS .)
    RPAREN          reduce using rule 38 (punctuation -> PLUS .)
    RSPAREN         reduce using rule 38 (punctuation -> PLUS .)
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36

  ! TIMES           [ reduce using rule 38 (punctuation -> PLUS .) ]
  ! DIVIDE          [ reduce using rule 38 (punctuation -> PLUS .) ]
  ! MOD             [ reduce using rule 38 (punctuation -> PLUS .) ]
  ! POW             [ reduce using rule 38 (punctuation -> PLUS .) ]
  ! SELECT          [ reduce using rule 38 (punctuation -> PLUS .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! PRIVATE_ID      [ shift and go to state 11 ]
  ! GLOBAL_ID       [ shift and go to state 12 ]
  ! COLON           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LTE             [ shift and go to state 44 ]
  ! GTE             [ shift and go to state 45 ]
  ! EQUALITY        [ shift and go to state 46 ]
  ! INEQUALITY      [ shift and go to state 47 ]

    primaryexp                     shift and go to state 61
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    operator                       shift and go to state 6
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 25

    (32) unaryexp -> MINUS . primaryexp
    (39) punctuation -> MINUS .
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    PRIVATE_ID      reduce using rule 39 (punctuation -> MINUS .)
    GLOBAL_ID       reduce using rule 39 (punctuation -> MINUS .)
    PLUS            reduce using rule 39 (punctuation -> MINUS .)
    MINUS           reduce using rule 39 (punctuation -> MINUS .)
    COLON           reduce using rule 39 (punctuation -> MINUS .)
    AND             reduce using rule 39 (punctuation -> MINUS .)
    OR              reduce using rule 39 (punctuation -> MINUS .)
    LT              reduce using rule 39 (punctuation -> MINUS .)
    GT              reduce using rule 39 (punctuation -> MINUS .)
    LTE             reduce using rule 39 (punctuation -> MINUS .)
    GTE             reduce using rule 39 (punctuation -> MINUS .)
    EQUALITY        reduce using rule 39 (punctuation -> MINUS .)
    INEQUALITY      reduce using rule 39 (punctuation -> MINUS .)
    SEMI_COLON      reduce using rule 39 (punctuation -> MINUS .)
    COMMA           reduce using rule 39 (punctuation -> MINUS .)
    $end            reduce using rule 39 (punctuation -> MINUS .)
    RBRACE          reduce using rule 39 (punctuation -> MINUS .)
    RPAREN          reduce using rule 39 (punctuation -> MINUS .)
    RSPAREN         reduce using rule 39 (punctuation -> MINUS .)
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36

  ! TIMES           [ reduce using rule 39 (punctuation -> MINUS .) ]
  ! DIVIDE          [ reduce using rule 39 (punctuation -> MINUS .) ]
  ! MOD             [ reduce using rule 39 (punctuation -> MINUS .) ]
  ! POW             [ reduce using rule 39 (punctuation -> MINUS .) ]
  ! SELECT          [ reduce using rule 39 (punctuation -> MINUS .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! PRIVATE_ID      [ shift and go to state 11 ]
  ! GLOBAL_ID       [ shift and go to state 12 ]
  ! COLON           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LTE             [ shift and go to state 44 ]
  ! GTE             [ shift and go to state 45 ]
  ! EQUALITY        [ shift and go to state 46 ]
  ! INEQUALITY      [ shift and go to state 47 ]

    primaryexp                     shift and go to state 62
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    operator                       shift and go to state 6
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 26

    (33) unaryexp -> NOT . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    primaryexp                     shift and go to state 63
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    operator                       shift and go to state 6
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 27

    (61) string -> STRING_SINGLE .

    PRIVATE_ID      reduce using rule 61 (string -> STRING_SINGLE .)
    GLOBAL_ID       reduce using rule 61 (string -> STRING_SINGLE .)
    PLUS            reduce using rule 61 (string -> STRING_SINGLE .)
    MINUS           reduce using rule 61 (string -> STRING_SINGLE .)
    TIMES           reduce using rule 61 (string -> STRING_SINGLE .)
    DIVIDE          reduce using rule 61 (string -> STRING_SINGLE .)
    MOD             reduce using rule 61 (string -> STRING_SINGLE .)
    POW             reduce using rule 61 (string -> STRING_SINGLE .)
    SELECT          reduce using rule 61 (string -> STRING_SINGLE .)
    COLON           reduce using rule 61 (string -> STRING_SINGLE .)
    AND             reduce using rule 61 (string -> STRING_SINGLE .)
    OR              reduce using rule 61 (string -> STRING_SINGLE .)
    LT              reduce using rule 61 (string -> STRING_SINGLE .)
    GT              reduce using rule 61 (string -> STRING_SINGLE .)
    LTE             reduce using rule 61 (string -> STRING_SINGLE .)
    GTE             reduce using rule 61 (string -> STRING_SINGLE .)
    EQUALITY        reduce using rule 61 (string -> STRING_SINGLE .)
    INEQUALITY      reduce using rule 61 (string -> STRING_SINGLE .)
    SEMI_COLON      reduce using rule 61 (string -> STRING_SINGLE .)
    COMMA           reduce using rule 61 (string -> STRING_SINGLE .)
    $end            reduce using rule 61 (string -> STRING_SINGLE .)
    RBRACE          reduce using rule 61 (string -> STRING_SINGLE .)
    RPAREN          reduce using rule 61 (string -> STRING_SINGLE .)
    RSPAREN         reduce using rule 61 (string -> STRING_SINGLE .)


state 28

    (62) string -> STRING_DOUBLE .

    PRIVATE_ID      reduce using rule 62 (string -> STRING_DOUBLE .)
    GLOBAL_ID       reduce using rule 62 (string -> STRING_DOUBLE .)
    PLUS            reduce using rule 62 (string -> STRING_DOUBLE .)
    MINUS           reduce using rule 62 (string -> STRING_DOUBLE .)
    TIMES           reduce using rule 62 (string -> STRING_DOUBLE .)
    DIVIDE          reduce using rule 62 (string -> STRING_DOUBLE .)
    MOD             reduce using rule 62 (string -> STRING_DOUBLE .)
    POW             reduce using rule 62 (string -> STRING_DOUBLE .)
    SELECT          reduce using rule 62 (string -> STRING_DOUBLE .)
    COLON           reduce using rule 62 (string -> STRING_DOUBLE .)
    AND             reduce using rule 62 (string -> STRING_DOUBLE .)
    OR              reduce using rule 62 (string -> STRING_DOUBLE .)
    LT              reduce using rule 62 (string -> STRING_DOUBLE .)
    GT              reduce using rule 62 (string -> STRING_DOUBLE .)
    LTE             reduce using rule 62 (string -> STRING_DOUBLE .)
    GTE             reduce using rule 62 (string -> STRING_DOUBLE .)
    EQUALITY        reduce using rule 62 (string -> STRING_DOUBLE .)
    INEQUALITY      reduce using rule 62 (string -> STRING_DOUBLE .)
    SEMI_COLON      reduce using rule 62 (string -> STRING_DOUBLE .)
    COMMA           reduce using rule 62 (string -> STRING_DOUBLE .)
    $end            reduce using rule 62 (string -> STRING_DOUBLE .)
    RBRACE          reduce using rule 62 (string -> STRING_DOUBLE .)
    RPAREN          reduce using rule 62 (string -> STRING_DOUBLE .)
    RSPAREN         reduce using rule 62 (string -> STRING_DOUBLE .)


state 29

    (24) bracedexp -> LBRACE . new_scope code RBRACE
    (25) new_scope -> .

    PRIVATE         reduce using rule 25 (new_scope -> .)
    PRIVATE_ID      reduce using rule 25 (new_scope -> .)
    GLOBAL_ID       reduce using rule 25 (new_scope -> .)
    LPAREN          reduce using rule 25 (new_scope -> .)
    NUMBER_REAL     reduce using rule 25 (new_scope -> .)
    NUMBER_EXP      reduce using rule 25 (new_scope -> .)
    NUMBER_HEX      reduce using rule 25 (new_scope -> .)
    PLUS            reduce using rule 25 (new_scope -> .)
    MINUS           reduce using rule 25 (new_scope -> .)
    NOT             reduce using rule 25 (new_scope -> .)
    STRING_SINGLE   reduce using rule 25 (new_scope -> .)
    STRING_DOUBLE   reduce using rule 25 (new_scope -> .)
    LBRACE          reduce using rule 25 (new_scope -> .)
    LSPAREN         reduce using rule 25 (new_scope -> .)
    TIMES           reduce using rule 25 (new_scope -> .)
    DIVIDE          reduce using rule 25 (new_scope -> .)
    MOD             reduce using rule 25 (new_scope -> .)
    POW             reduce using rule 25 (new_scope -> .)
    SELECT          reduce using rule 25 (new_scope -> .)
    COLON           reduce using rule 25 (new_scope -> .)
    AND             reduce using rule 25 (new_scope -> .)
    OR              reduce using rule 25 (new_scope -> .)
    LT              reduce using rule 25 (new_scope -> .)
    GT              reduce using rule 25 (new_scope -> .)
    LTE             reduce using rule 25 (new_scope -> .)
    GTE             reduce using rule 25 (new_scope -> .)
    EQUALITY        reduce using rule 25 (new_scope -> .)
    INEQUALITY      reduce using rule 25 (new_scope -> .)
    RBRACE          reduce using rule 25 (new_scope -> .)

    new_scope                      shift and go to state 64

state 30

    (26) array -> LSPAREN . RSPAREN
    (27) array -> LSPAREN . arrayelement RSPAREN
    (28) arrayelement -> . binaryexp
    (29) arrayelement -> . binaryexp COMMA arrayelement
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    RSPAREN         shift and go to state 65
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    arrayelement                   shift and go to state 66
    binaryexp                      shift and go to state 67
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 31

    (37) operator -> punctuation .

    PRIVATE_ID      reduce using rule 37 (operator -> punctuation .)
    GLOBAL_ID       reduce using rule 37 (operator -> punctuation .)
    PLUS            reduce using rule 37 (operator -> punctuation .)
    MINUS           reduce using rule 37 (operator -> punctuation .)
    TIMES           reduce using rule 37 (operator -> punctuation .)
    DIVIDE          reduce using rule 37 (operator -> punctuation .)
    MOD             reduce using rule 37 (operator -> punctuation .)
    POW             reduce using rule 37 (operator -> punctuation .)
    SELECT          reduce using rule 37 (operator -> punctuation .)
    COLON           reduce using rule 37 (operator -> punctuation .)
    AND             reduce using rule 37 (operator -> punctuation .)
    OR              reduce using rule 37 (operator -> punctuation .)
    LT              reduce using rule 37 (operator -> punctuation .)
    GT              reduce using rule 37 (operator -> punctuation .)
    LTE             reduce using rule 37 (operator -> punctuation .)
    GTE             reduce using rule 37 (operator -> punctuation .)
    EQUALITY        reduce using rule 37 (operator -> punctuation .)
    INEQUALITY      reduce using rule 37 (operator -> punctuation .)
    SEMI_COLON      reduce using rule 37 (operator -> punctuation .)
    COMMA           reduce using rule 37 (operator -> punctuation .)
    $end            reduce using rule 37 (operator -> punctuation .)
    LPAREN          reduce using rule 37 (operator -> punctuation .)
    NUMBER_REAL     reduce using rule 37 (operator -> punctuation .)
    NUMBER_EXP      reduce using rule 37 (operator -> punctuation .)
    NUMBER_HEX      reduce using rule 37 (operator -> punctuation .)
    NOT             reduce using rule 37 (operator -> punctuation .)
    STRING_SINGLE   reduce using rule 37 (operator -> punctuation .)
    STRING_DOUBLE   reduce using rule 37 (operator -> punctuation .)
    LBRACE          reduce using rule 37 (operator -> punctuation .)
    LSPAREN         reduce using rule 37 (operator -> punctuation .)
    RBRACE          reduce using rule 37 (operator -> punctuation .)
    RPAREN          reduce using rule 37 (operator -> punctuation .)
    RSPAREN         reduce using rule 37 (operator -> punctuation .)


state 32

    (40) punctuation -> TIMES .

    PRIVATE_ID      reduce using rule 40 (punctuation -> TIMES .)
    GLOBAL_ID       reduce using rule 40 (punctuation -> TIMES .)
    PLUS            reduce using rule 40 (punctuation -> TIMES .)
    MINUS           reduce using rule 40 (punctuation -> TIMES .)
    TIMES           reduce using rule 40 (punctuation -> TIMES .)
    DIVIDE          reduce using rule 40 (punctuation -> TIMES .)
    MOD             reduce using rule 40 (punctuation -> TIMES .)
    POW             reduce using rule 40 (punctuation -> TIMES .)
    SELECT          reduce using rule 40 (punctuation -> TIMES .)
    COLON           reduce using rule 40 (punctuation -> TIMES .)
    AND             reduce using rule 40 (punctuation -> TIMES .)
    OR              reduce using rule 40 (punctuation -> TIMES .)
    LT              reduce using rule 40 (punctuation -> TIMES .)
    GT              reduce using rule 40 (punctuation -> TIMES .)
    LTE             reduce using rule 40 (punctuation -> TIMES .)
    GTE             reduce using rule 40 (punctuation -> TIMES .)
    EQUALITY        reduce using rule 40 (punctuation -> TIMES .)
    INEQUALITY      reduce using rule 40 (punctuation -> TIMES .)
    SEMI_COLON      reduce using rule 40 (punctuation -> TIMES .)
    COMMA           reduce using rule 40 (punctuation -> TIMES .)
    $end            reduce using rule 40 (punctuation -> TIMES .)
    LPAREN          reduce using rule 40 (punctuation -> TIMES .)
    NUMBER_REAL     reduce using rule 40 (punctuation -> TIMES .)
    NUMBER_EXP      reduce using rule 40 (punctuation -> TIMES .)
    NUMBER_HEX      reduce using rule 40 (punctuation -> TIMES .)
    NOT             reduce using rule 40 (punctuation -> TIMES .)
    STRING_SINGLE   reduce using rule 40 (punctuation -> TIMES .)
    STRING_DOUBLE   reduce using rule 40 (punctuation -> TIMES .)
    LBRACE          reduce using rule 40 (punctuation -> TIMES .)
    LSPAREN         reduce using rule 40 (punctuation -> TIMES .)
    RBRACE          reduce using rule 40 (punctuation -> TIMES .)
    RPAREN          reduce using rule 40 (punctuation -> TIMES .)
    RSPAREN         reduce using rule 40 (punctuation -> TIMES .)


state 33

    (41) punctuation -> DIVIDE .
    (57) configaccessor -> DIVIDE .

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for MINUS resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for TIMES resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for MOD resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for POW resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for SELECT resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for COLON resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for AND resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for OR resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LT resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GT resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LTE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for GTE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for $end resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_REAL resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_EXP resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NUMBER_HEX resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for NOT resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STRING_SINGLE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for STRING_DOUBLE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (punctuation -> DIVIDE .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 41 (punctuation -> DIVIDE .)
    PRIVATE_ID      reduce using rule 41 (punctuation -> DIVIDE .)
    GLOBAL_ID       reduce using rule 41 (punctuation -> DIVIDE .)
    PLUS            reduce using rule 41 (punctuation -> DIVIDE .)
    MINUS           reduce using rule 41 (punctuation -> DIVIDE .)
    TIMES           reduce using rule 41 (punctuation -> DIVIDE .)
    DIVIDE          reduce using rule 41 (punctuation -> DIVIDE .)
    MOD             reduce using rule 41 (punctuation -> DIVIDE .)
    POW             reduce using rule 41 (punctuation -> DIVIDE .)
    SELECT          reduce using rule 41 (punctuation -> DIVIDE .)
    COLON           reduce using rule 41 (punctuation -> DIVIDE .)
    AND             reduce using rule 41 (punctuation -> DIVIDE .)
    OR              reduce using rule 41 (punctuation -> DIVIDE .)
    LT              reduce using rule 41 (punctuation -> DIVIDE .)
    GT              reduce using rule 41 (punctuation -> DIVIDE .)
    LTE             reduce using rule 41 (punctuation -> DIVIDE .)
    GTE             reduce using rule 41 (punctuation -> DIVIDE .)
    EQUALITY        reduce using rule 41 (punctuation -> DIVIDE .)
    INEQUALITY      reduce using rule 41 (punctuation -> DIVIDE .)
    SEMI_COLON      reduce using rule 41 (punctuation -> DIVIDE .)
    COMMA           reduce using rule 41 (punctuation -> DIVIDE .)
    $end            reduce using rule 41 (punctuation -> DIVIDE .)
    LPAREN          reduce using rule 41 (punctuation -> DIVIDE .)
    NUMBER_REAL     reduce using rule 41 (punctuation -> DIVIDE .)
    NUMBER_EXP      reduce using rule 41 (punctuation -> DIVIDE .)
    NUMBER_HEX      reduce using rule 41 (punctuation -> DIVIDE .)
    NOT             reduce using rule 41 (punctuation -> DIVIDE .)
    STRING_SINGLE   reduce using rule 41 (punctuation -> DIVIDE .)
    STRING_DOUBLE   reduce using rule 41 (punctuation -> DIVIDE .)
    LBRACE          reduce using rule 41 (punctuation -> DIVIDE .)
    LSPAREN         reduce using rule 41 (punctuation -> DIVIDE .)
    RBRACE          reduce using rule 41 (punctuation -> DIVIDE .)
    RPAREN          reduce using rule 41 (punctuation -> DIVIDE .)
    RSPAREN         reduce using rule 41 (punctuation -> DIVIDE .)

  ! PRIVATE_ID      [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! GLOBAL_ID       [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! PLUS            [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! MINUS           [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! TIMES           [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! DIVIDE          [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! MOD             [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! POW             [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! SELECT          [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! COLON           [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! AND             [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! OR              [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! LT              [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! GT              [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! LTE             [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! GTE             [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! EQUALITY        [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! INEQUALITY      [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! SEMI_COLON      [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! COMMA           [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! $end            [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! LPAREN          [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! NUMBER_REAL     [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! NUMBER_EXP      [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! NUMBER_HEX      [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! NOT             [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! STRING_SINGLE   [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! STRING_DOUBLE   [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! LBRACE          [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! LSPAREN         [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! RBRACE          [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! RPAREN          [ reduce using rule 57 (configaccessor -> DIVIDE .) ]
  ! RSPAREN         [ reduce using rule 57 (configaccessor -> DIVIDE .) ]


state 34

    (42) punctuation -> MOD .

    PRIVATE_ID      reduce using rule 42 (punctuation -> MOD .)
    GLOBAL_ID       reduce using rule 42 (punctuation -> MOD .)
    PLUS            reduce using rule 42 (punctuation -> MOD .)
    MINUS           reduce using rule 42 (punctuation -> MOD .)
    TIMES           reduce using rule 42 (punctuation -> MOD .)
    DIVIDE          reduce using rule 42 (punctuation -> MOD .)
    MOD             reduce using rule 42 (punctuation -> MOD .)
    POW             reduce using rule 42 (punctuation -> MOD .)
    SELECT          reduce using rule 42 (punctuation -> MOD .)
    COLON           reduce using rule 42 (punctuation -> MOD .)
    AND             reduce using rule 42 (punctuation -> MOD .)
    OR              reduce using rule 42 (punctuation -> MOD .)
    LT              reduce using rule 42 (punctuation -> MOD .)
    GT              reduce using rule 42 (punctuation -> MOD .)
    LTE             reduce using rule 42 (punctuation -> MOD .)
    GTE             reduce using rule 42 (punctuation -> MOD .)
    EQUALITY        reduce using rule 42 (punctuation -> MOD .)
    INEQUALITY      reduce using rule 42 (punctuation -> MOD .)
    SEMI_COLON      reduce using rule 42 (punctuation -> MOD .)
    COMMA           reduce using rule 42 (punctuation -> MOD .)
    $end            reduce using rule 42 (punctuation -> MOD .)
    LPAREN          reduce using rule 42 (punctuation -> MOD .)
    NUMBER_REAL     reduce using rule 42 (punctuation -> MOD .)
    NUMBER_EXP      reduce using rule 42 (punctuation -> MOD .)
    NUMBER_HEX      reduce using rule 42 (punctuation -> MOD .)
    NOT             reduce using rule 42 (punctuation -> MOD .)
    STRING_SINGLE   reduce using rule 42 (punctuation -> MOD .)
    STRING_DOUBLE   reduce using rule 42 (punctuation -> MOD .)
    LBRACE          reduce using rule 42 (punctuation -> MOD .)
    LSPAREN         reduce using rule 42 (punctuation -> MOD .)
    RBRACE          reduce using rule 42 (punctuation -> MOD .)
    RPAREN          reduce using rule 42 (punctuation -> MOD .)
    RSPAREN         reduce using rule 42 (punctuation -> MOD .)


state 35

    (43) punctuation -> POW .

    PRIVATE_ID      reduce using rule 43 (punctuation -> POW .)
    GLOBAL_ID       reduce using rule 43 (punctuation -> POW .)
    PLUS            reduce using rule 43 (punctuation -> POW .)
    MINUS           reduce using rule 43 (punctuation -> POW .)
    TIMES           reduce using rule 43 (punctuation -> POW .)
    DIVIDE          reduce using rule 43 (punctuation -> POW .)
    MOD             reduce using rule 43 (punctuation -> POW .)
    POW             reduce using rule 43 (punctuation -> POW .)
    SELECT          reduce using rule 43 (punctuation -> POW .)
    COLON           reduce using rule 43 (punctuation -> POW .)
    AND             reduce using rule 43 (punctuation -> POW .)
    OR              reduce using rule 43 (punctuation -> POW .)
    LT              reduce using rule 43 (punctuation -> POW .)
    GT              reduce using rule 43 (punctuation -> POW .)
    LTE             reduce using rule 43 (punctuation -> POW .)
    GTE             reduce using rule 43 (punctuation -> POW .)
    EQUALITY        reduce using rule 43 (punctuation -> POW .)
    INEQUALITY      reduce using rule 43 (punctuation -> POW .)
    SEMI_COLON      reduce using rule 43 (punctuation -> POW .)
    COMMA           reduce using rule 43 (punctuation -> POW .)
    $end            reduce using rule 43 (punctuation -> POW .)
    LPAREN          reduce using rule 43 (punctuation -> POW .)
    NUMBER_REAL     reduce using rule 43 (punctuation -> POW .)
    NUMBER_EXP      reduce using rule 43 (punctuation -> POW .)
    NUMBER_HEX      reduce using rule 43 (punctuation -> POW .)
    NOT             reduce using rule 43 (punctuation -> POW .)
    STRING_SINGLE   reduce using rule 43 (punctuation -> POW .)
    STRING_DOUBLE   reduce using rule 43 (punctuation -> POW .)
    LBRACE          reduce using rule 43 (punctuation -> POW .)
    LSPAREN         reduce using rule 43 (punctuation -> POW .)
    RBRACE          reduce using rule 43 (punctuation -> POW .)
    RPAREN          reduce using rule 43 (punctuation -> POW .)
    RSPAREN         reduce using rule 43 (punctuation -> POW .)


state 36

    (44) punctuation -> SELECT .

    PRIVATE_ID      reduce using rule 44 (punctuation -> SELECT .)
    GLOBAL_ID       reduce using rule 44 (punctuation -> SELECT .)
    PLUS            reduce using rule 44 (punctuation -> SELECT .)
    MINUS           reduce using rule 44 (punctuation -> SELECT .)
    TIMES           reduce using rule 44 (punctuation -> SELECT .)
    DIVIDE          reduce using rule 44 (punctuation -> SELECT .)
    MOD             reduce using rule 44 (punctuation -> SELECT .)
    POW             reduce using rule 44 (punctuation -> SELECT .)
    SELECT          reduce using rule 44 (punctuation -> SELECT .)
    COLON           reduce using rule 44 (punctuation -> SELECT .)
    AND             reduce using rule 44 (punctuation -> SELECT .)
    OR              reduce using rule 44 (punctuation -> SELECT .)
    LT              reduce using rule 44 (punctuation -> SELECT .)
    GT              reduce using rule 44 (punctuation -> SELECT .)
    LTE             reduce using rule 44 (punctuation -> SELECT .)
    GTE             reduce using rule 44 (punctuation -> SELECT .)
    EQUALITY        reduce using rule 44 (punctuation -> SELECT .)
    INEQUALITY      reduce using rule 44 (punctuation -> SELECT .)
    SEMI_COLON      reduce using rule 44 (punctuation -> SELECT .)
    COMMA           reduce using rule 44 (punctuation -> SELECT .)
    $end            reduce using rule 44 (punctuation -> SELECT .)
    LPAREN          reduce using rule 44 (punctuation -> SELECT .)
    NUMBER_REAL     reduce using rule 44 (punctuation -> SELECT .)
    NUMBER_EXP      reduce using rule 44 (punctuation -> SELECT .)
    NUMBER_HEX      reduce using rule 44 (punctuation -> SELECT .)
    NOT             reduce using rule 44 (punctuation -> SELECT .)
    STRING_SINGLE   reduce using rule 44 (punctuation -> SELECT .)
    STRING_DOUBLE   reduce using rule 44 (punctuation -> SELECT .)
    LBRACE          reduce using rule 44 (punctuation -> SELECT .)
    LSPAREN         reduce using rule 44 (punctuation -> SELECT .)
    RBRACE          reduce using rule 44 (punctuation -> SELECT .)
    RPAREN          reduce using rule 44 (punctuation -> SELECT .)
    RSPAREN         reduce using rule 44 (punctuation -> SELECT .)


state 37

    (45) punctuation -> COLON .

    PRIVATE_ID      reduce using rule 45 (punctuation -> COLON .)
    GLOBAL_ID       reduce using rule 45 (punctuation -> COLON .)
    PLUS            reduce using rule 45 (punctuation -> COLON .)
    MINUS           reduce using rule 45 (punctuation -> COLON .)
    TIMES           reduce using rule 45 (punctuation -> COLON .)
    DIVIDE          reduce using rule 45 (punctuation -> COLON .)
    MOD             reduce using rule 45 (punctuation -> COLON .)
    POW             reduce using rule 45 (punctuation -> COLON .)
    SELECT          reduce using rule 45 (punctuation -> COLON .)
    COLON           reduce using rule 45 (punctuation -> COLON .)
    AND             reduce using rule 45 (punctuation -> COLON .)
    OR              reduce using rule 45 (punctuation -> COLON .)
    LT              reduce using rule 45 (punctuation -> COLON .)
    GT              reduce using rule 45 (punctuation -> COLON .)
    LTE             reduce using rule 45 (punctuation -> COLON .)
    GTE             reduce using rule 45 (punctuation -> COLON .)
    EQUALITY        reduce using rule 45 (punctuation -> COLON .)
    INEQUALITY      reduce using rule 45 (punctuation -> COLON .)
    SEMI_COLON      reduce using rule 45 (punctuation -> COLON .)
    COMMA           reduce using rule 45 (punctuation -> COLON .)
    $end            reduce using rule 45 (punctuation -> COLON .)
    LPAREN          reduce using rule 45 (punctuation -> COLON .)
    NUMBER_REAL     reduce using rule 45 (punctuation -> COLON .)
    NUMBER_EXP      reduce using rule 45 (punctuation -> COLON .)
    NUMBER_HEX      reduce using rule 45 (punctuation -> COLON .)
    NOT             reduce using rule 45 (punctuation -> COLON .)
    STRING_SINGLE   reduce using rule 45 (punctuation -> COLON .)
    STRING_DOUBLE   reduce using rule 45 (punctuation -> COLON .)
    LBRACE          reduce using rule 45 (punctuation -> COLON .)
    LSPAREN         reduce using rule 45 (punctuation -> COLON .)
    RBRACE          reduce using rule 45 (punctuation -> COLON .)
    RPAREN          reduce using rule 45 (punctuation -> COLON .)
    RSPAREN         reduce using rule 45 (punctuation -> COLON .)


state 38

    (46) punctuation -> comparisonoperator .

    PRIVATE_ID      reduce using rule 46 (punctuation -> comparisonoperator .)
    GLOBAL_ID       reduce using rule 46 (punctuation -> comparisonoperator .)
    PLUS            reduce using rule 46 (punctuation -> comparisonoperator .)
    MINUS           reduce using rule 46 (punctuation -> comparisonoperator .)
    TIMES           reduce using rule 46 (punctuation -> comparisonoperator .)
    DIVIDE          reduce using rule 46 (punctuation -> comparisonoperator .)
    MOD             reduce using rule 46 (punctuation -> comparisonoperator .)
    POW             reduce using rule 46 (punctuation -> comparisonoperator .)
    SELECT          reduce using rule 46 (punctuation -> comparisonoperator .)
    COLON           reduce using rule 46 (punctuation -> comparisonoperator .)
    AND             reduce using rule 46 (punctuation -> comparisonoperator .)
    OR              reduce using rule 46 (punctuation -> comparisonoperator .)
    LT              reduce using rule 46 (punctuation -> comparisonoperator .)
    GT              reduce using rule 46 (punctuation -> comparisonoperator .)
    LTE             reduce using rule 46 (punctuation -> comparisonoperator .)
    GTE             reduce using rule 46 (punctuation -> comparisonoperator .)
    EQUALITY        reduce using rule 46 (punctuation -> comparisonoperator .)
    INEQUALITY      reduce using rule 46 (punctuation -> comparisonoperator .)
    SEMI_COLON      reduce using rule 46 (punctuation -> comparisonoperator .)
    COMMA           reduce using rule 46 (punctuation -> comparisonoperator .)
    $end            reduce using rule 46 (punctuation -> comparisonoperator .)
    LPAREN          reduce using rule 46 (punctuation -> comparisonoperator .)
    NUMBER_REAL     reduce using rule 46 (punctuation -> comparisonoperator .)
    NUMBER_EXP      reduce using rule 46 (punctuation -> comparisonoperator .)
    NUMBER_HEX      reduce using rule 46 (punctuation -> comparisonoperator .)
    NOT             reduce using rule 46 (punctuation -> comparisonoperator .)
    STRING_SINGLE   reduce using rule 46 (punctuation -> comparisonoperator .)
    STRING_DOUBLE   reduce using rule 46 (punctuation -> comparisonoperator .)
    LBRACE          reduce using rule 46 (punctuation -> comparisonoperator .)
    LSPAREN         reduce using rule 46 (punctuation -> comparisonoperator .)
    RBRACE          reduce using rule 46 (punctuation -> comparisonoperator .)
    RPAREN          reduce using rule 46 (punctuation -> comparisonoperator .)
    RSPAREN         reduce using rule 46 (punctuation -> comparisonoperator .)


state 39

    (47) punctuation -> AND .

    PRIVATE_ID      reduce using rule 47 (punctuation -> AND .)
    GLOBAL_ID       reduce using rule 47 (punctuation -> AND .)
    PLUS            reduce using rule 47 (punctuation -> AND .)
    MINUS           reduce using rule 47 (punctuation -> AND .)
    TIMES           reduce using rule 47 (punctuation -> AND .)
    DIVIDE          reduce using rule 47 (punctuation -> AND .)
    MOD             reduce using rule 47 (punctuation -> AND .)
    POW             reduce using rule 47 (punctuation -> AND .)
    SELECT          reduce using rule 47 (punctuation -> AND .)
    COLON           reduce using rule 47 (punctuation -> AND .)
    AND             reduce using rule 47 (punctuation -> AND .)
    OR              reduce using rule 47 (punctuation -> AND .)
    LT              reduce using rule 47 (punctuation -> AND .)
    GT              reduce using rule 47 (punctuation -> AND .)
    LTE             reduce using rule 47 (punctuation -> AND .)
    GTE             reduce using rule 47 (punctuation -> AND .)
    EQUALITY        reduce using rule 47 (punctuation -> AND .)
    INEQUALITY      reduce using rule 47 (punctuation -> AND .)
    SEMI_COLON      reduce using rule 47 (punctuation -> AND .)
    COMMA           reduce using rule 47 (punctuation -> AND .)
    $end            reduce using rule 47 (punctuation -> AND .)
    LPAREN          reduce using rule 47 (punctuation -> AND .)
    NUMBER_REAL     reduce using rule 47 (punctuation -> AND .)
    NUMBER_EXP      reduce using rule 47 (punctuation -> AND .)
    NUMBER_HEX      reduce using rule 47 (punctuation -> AND .)
    NOT             reduce using rule 47 (punctuation -> AND .)
    STRING_SINGLE   reduce using rule 47 (punctuation -> AND .)
    STRING_DOUBLE   reduce using rule 47 (punctuation -> AND .)
    LBRACE          reduce using rule 47 (punctuation -> AND .)
    LSPAREN         reduce using rule 47 (punctuation -> AND .)
    RBRACE          reduce using rule 47 (punctuation -> AND .)
    RPAREN          reduce using rule 47 (punctuation -> AND .)
    RSPAREN         reduce using rule 47 (punctuation -> AND .)


state 40

    (48) punctuation -> OR .

    PRIVATE_ID      reduce using rule 48 (punctuation -> OR .)
    GLOBAL_ID       reduce using rule 48 (punctuation -> OR .)
    PLUS            reduce using rule 48 (punctuation -> OR .)
    MINUS           reduce using rule 48 (punctuation -> OR .)
    TIMES           reduce using rule 48 (punctuation -> OR .)
    DIVIDE          reduce using rule 48 (punctuation -> OR .)
    MOD             reduce using rule 48 (punctuation -> OR .)
    POW             reduce using rule 48 (punctuation -> OR .)
    SELECT          reduce using rule 48 (punctuation -> OR .)
    COLON           reduce using rule 48 (punctuation -> OR .)
    AND             reduce using rule 48 (punctuation -> OR .)
    OR              reduce using rule 48 (punctuation -> OR .)
    LT              reduce using rule 48 (punctuation -> OR .)
    GT              reduce using rule 48 (punctuation -> OR .)
    LTE             reduce using rule 48 (punctuation -> OR .)
    GTE             reduce using rule 48 (punctuation -> OR .)
    EQUALITY        reduce using rule 48 (punctuation -> OR .)
    INEQUALITY      reduce using rule 48 (punctuation -> OR .)
    SEMI_COLON      reduce using rule 48 (punctuation -> OR .)
    COMMA           reduce using rule 48 (punctuation -> OR .)
    $end            reduce using rule 48 (punctuation -> OR .)
    LPAREN          reduce using rule 48 (punctuation -> OR .)
    NUMBER_REAL     reduce using rule 48 (punctuation -> OR .)
    NUMBER_EXP      reduce using rule 48 (punctuation -> OR .)
    NUMBER_HEX      reduce using rule 48 (punctuation -> OR .)
    NOT             reduce using rule 48 (punctuation -> OR .)
    STRING_SINGLE   reduce using rule 48 (punctuation -> OR .)
    STRING_DOUBLE   reduce using rule 48 (punctuation -> OR .)
    LBRACE          reduce using rule 48 (punctuation -> OR .)
    LSPAREN         reduce using rule 48 (punctuation -> OR .)
    RBRACE          reduce using rule 48 (punctuation -> OR .)
    RPAREN          reduce using rule 48 (punctuation -> OR .)
    RSPAREN         reduce using rule 48 (punctuation -> OR .)


state 41

    (49) punctuation -> configaccessor .

    PRIVATE_ID      reduce using rule 49 (punctuation -> configaccessor .)
    GLOBAL_ID       reduce using rule 49 (punctuation -> configaccessor .)
    PLUS            reduce using rule 49 (punctuation -> configaccessor .)
    MINUS           reduce using rule 49 (punctuation -> configaccessor .)
    TIMES           reduce using rule 49 (punctuation -> configaccessor .)
    DIVIDE          reduce using rule 49 (punctuation -> configaccessor .)
    MOD             reduce using rule 49 (punctuation -> configaccessor .)
    POW             reduce using rule 49 (punctuation -> configaccessor .)
    SELECT          reduce using rule 49 (punctuation -> configaccessor .)
    COLON           reduce using rule 49 (punctuation -> configaccessor .)
    AND             reduce using rule 49 (punctuation -> configaccessor .)
    OR              reduce using rule 49 (punctuation -> configaccessor .)
    LT              reduce using rule 49 (punctuation -> configaccessor .)
    GT              reduce using rule 49 (punctuation -> configaccessor .)
    LTE             reduce using rule 49 (punctuation -> configaccessor .)
    GTE             reduce using rule 49 (punctuation -> configaccessor .)
    EQUALITY        reduce using rule 49 (punctuation -> configaccessor .)
    INEQUALITY      reduce using rule 49 (punctuation -> configaccessor .)
    SEMI_COLON      reduce using rule 49 (punctuation -> configaccessor .)
    COMMA           reduce using rule 49 (punctuation -> configaccessor .)
    $end            reduce using rule 49 (punctuation -> configaccessor .)
    LPAREN          reduce using rule 49 (punctuation -> configaccessor .)
    NUMBER_REAL     reduce using rule 49 (punctuation -> configaccessor .)
    NUMBER_EXP      reduce using rule 49 (punctuation -> configaccessor .)
    NUMBER_HEX      reduce using rule 49 (punctuation -> configaccessor .)
    NOT             reduce using rule 49 (punctuation -> configaccessor .)
    STRING_SINGLE   reduce using rule 49 (punctuation -> configaccessor .)
    STRING_DOUBLE   reduce using rule 49 (punctuation -> configaccessor .)
    LBRACE          reduce using rule 49 (punctuation -> configaccessor .)
    LSPAREN         reduce using rule 49 (punctuation -> configaccessor .)
    RBRACE          reduce using rule 49 (punctuation -> configaccessor .)
    RPAREN          reduce using rule 49 (punctuation -> configaccessor .)
    RSPAREN         reduce using rule 49 (punctuation -> configaccessor .)


state 42

    (50) comparisonoperator -> LT .

    PRIVATE_ID      reduce using rule 50 (comparisonoperator -> LT .)
    GLOBAL_ID       reduce using rule 50 (comparisonoperator -> LT .)
    PLUS            reduce using rule 50 (comparisonoperator -> LT .)
    MINUS           reduce using rule 50 (comparisonoperator -> LT .)
    TIMES           reduce using rule 50 (comparisonoperator -> LT .)
    DIVIDE          reduce using rule 50 (comparisonoperator -> LT .)
    MOD             reduce using rule 50 (comparisonoperator -> LT .)
    POW             reduce using rule 50 (comparisonoperator -> LT .)
    SELECT          reduce using rule 50 (comparisonoperator -> LT .)
    COLON           reduce using rule 50 (comparisonoperator -> LT .)
    AND             reduce using rule 50 (comparisonoperator -> LT .)
    OR              reduce using rule 50 (comparisonoperator -> LT .)
    LT              reduce using rule 50 (comparisonoperator -> LT .)
    GT              reduce using rule 50 (comparisonoperator -> LT .)
    LTE             reduce using rule 50 (comparisonoperator -> LT .)
    GTE             reduce using rule 50 (comparisonoperator -> LT .)
    EQUALITY        reduce using rule 50 (comparisonoperator -> LT .)
    INEQUALITY      reduce using rule 50 (comparisonoperator -> LT .)
    SEMI_COLON      reduce using rule 50 (comparisonoperator -> LT .)
    COMMA           reduce using rule 50 (comparisonoperator -> LT .)
    $end            reduce using rule 50 (comparisonoperator -> LT .)
    LPAREN          reduce using rule 50 (comparisonoperator -> LT .)
    NUMBER_REAL     reduce using rule 50 (comparisonoperator -> LT .)
    NUMBER_EXP      reduce using rule 50 (comparisonoperator -> LT .)
    NUMBER_HEX      reduce using rule 50 (comparisonoperator -> LT .)
    NOT             reduce using rule 50 (comparisonoperator -> LT .)
    STRING_SINGLE   reduce using rule 50 (comparisonoperator -> LT .)
    STRING_DOUBLE   reduce using rule 50 (comparisonoperator -> LT .)
    LBRACE          reduce using rule 50 (comparisonoperator -> LT .)
    LSPAREN         reduce using rule 50 (comparisonoperator -> LT .)
    RBRACE          reduce using rule 50 (comparisonoperator -> LT .)
    RPAREN          reduce using rule 50 (comparisonoperator -> LT .)
    RSPAREN         reduce using rule 50 (comparisonoperator -> LT .)


state 43

    (51) comparisonoperator -> GT .
    (56) configaccessor -> GT . GT

  ! shift/reduce conflict for GT resolved as shift
    PRIVATE_ID      reduce using rule 51 (comparisonoperator -> GT .)
    GLOBAL_ID       reduce using rule 51 (comparisonoperator -> GT .)
    PLUS            reduce using rule 51 (comparisonoperator -> GT .)
    MINUS           reduce using rule 51 (comparisonoperator -> GT .)
    TIMES           reduce using rule 51 (comparisonoperator -> GT .)
    DIVIDE          reduce using rule 51 (comparisonoperator -> GT .)
    MOD             reduce using rule 51 (comparisonoperator -> GT .)
    POW             reduce using rule 51 (comparisonoperator -> GT .)
    SELECT          reduce using rule 51 (comparisonoperator -> GT .)
    COLON           reduce using rule 51 (comparisonoperator -> GT .)
    AND             reduce using rule 51 (comparisonoperator -> GT .)
    OR              reduce using rule 51 (comparisonoperator -> GT .)
    LT              reduce using rule 51 (comparisonoperator -> GT .)
    LTE             reduce using rule 51 (comparisonoperator -> GT .)
    GTE             reduce using rule 51 (comparisonoperator -> GT .)
    EQUALITY        reduce using rule 51 (comparisonoperator -> GT .)
    INEQUALITY      reduce using rule 51 (comparisonoperator -> GT .)
    SEMI_COLON      reduce using rule 51 (comparisonoperator -> GT .)
    COMMA           reduce using rule 51 (comparisonoperator -> GT .)
    $end            reduce using rule 51 (comparisonoperator -> GT .)
    LPAREN          reduce using rule 51 (comparisonoperator -> GT .)
    NUMBER_REAL     reduce using rule 51 (comparisonoperator -> GT .)
    NUMBER_EXP      reduce using rule 51 (comparisonoperator -> GT .)
    NUMBER_HEX      reduce using rule 51 (comparisonoperator -> GT .)
    NOT             reduce using rule 51 (comparisonoperator -> GT .)
    STRING_SINGLE   reduce using rule 51 (comparisonoperator -> GT .)
    STRING_DOUBLE   reduce using rule 51 (comparisonoperator -> GT .)
    LBRACE          reduce using rule 51 (comparisonoperator -> GT .)
    LSPAREN         reduce using rule 51 (comparisonoperator -> GT .)
    RBRACE          reduce using rule 51 (comparisonoperator -> GT .)
    RPAREN          reduce using rule 51 (comparisonoperator -> GT .)
    RSPAREN         reduce using rule 51 (comparisonoperator -> GT .)
    GT              shift and go to state 68

  ! GT              [ reduce using rule 51 (comparisonoperator -> GT .) ]


state 44

    (52) comparisonoperator -> LTE .

    PRIVATE_ID      reduce using rule 52 (comparisonoperator -> LTE .)
    GLOBAL_ID       reduce using rule 52 (comparisonoperator -> LTE .)
    PLUS            reduce using rule 52 (comparisonoperator -> LTE .)
    MINUS           reduce using rule 52 (comparisonoperator -> LTE .)
    TIMES           reduce using rule 52 (comparisonoperator -> LTE .)
    DIVIDE          reduce using rule 52 (comparisonoperator -> LTE .)
    MOD             reduce using rule 52 (comparisonoperator -> LTE .)
    POW             reduce using rule 52 (comparisonoperator -> LTE .)
    SELECT          reduce using rule 52 (comparisonoperator -> LTE .)
    COLON           reduce using rule 52 (comparisonoperator -> LTE .)
    AND             reduce using rule 52 (comparisonoperator -> LTE .)
    OR              reduce using rule 52 (comparisonoperator -> LTE .)
    LT              reduce using rule 52 (comparisonoperator -> LTE .)
    GT              reduce using rule 52 (comparisonoperator -> LTE .)
    LTE             reduce using rule 52 (comparisonoperator -> LTE .)
    GTE             reduce using rule 52 (comparisonoperator -> LTE .)
    EQUALITY        reduce using rule 52 (comparisonoperator -> LTE .)
    INEQUALITY      reduce using rule 52 (comparisonoperator -> LTE .)
    SEMI_COLON      reduce using rule 52 (comparisonoperator -> LTE .)
    COMMA           reduce using rule 52 (comparisonoperator -> LTE .)
    $end            reduce using rule 52 (comparisonoperator -> LTE .)
    LPAREN          reduce using rule 52 (comparisonoperator -> LTE .)
    NUMBER_REAL     reduce using rule 52 (comparisonoperator -> LTE .)
    NUMBER_EXP      reduce using rule 52 (comparisonoperator -> LTE .)
    NUMBER_HEX      reduce using rule 52 (comparisonoperator -> LTE .)
    NOT             reduce using rule 52 (comparisonoperator -> LTE .)
    STRING_SINGLE   reduce using rule 52 (comparisonoperator -> LTE .)
    STRING_DOUBLE   reduce using rule 52 (comparisonoperator -> LTE .)
    LBRACE          reduce using rule 52 (comparisonoperator -> LTE .)
    LSPAREN         reduce using rule 52 (comparisonoperator -> LTE .)
    RBRACE          reduce using rule 52 (comparisonoperator -> LTE .)
    RPAREN          reduce using rule 52 (comparisonoperator -> LTE .)
    RSPAREN         reduce using rule 52 (comparisonoperator -> LTE .)


state 45

    (53) comparisonoperator -> GTE .

    PRIVATE_ID      reduce using rule 53 (comparisonoperator -> GTE .)
    GLOBAL_ID       reduce using rule 53 (comparisonoperator -> GTE .)
    PLUS            reduce using rule 53 (comparisonoperator -> GTE .)
    MINUS           reduce using rule 53 (comparisonoperator -> GTE .)
    TIMES           reduce using rule 53 (comparisonoperator -> GTE .)
    DIVIDE          reduce using rule 53 (comparisonoperator -> GTE .)
    MOD             reduce using rule 53 (comparisonoperator -> GTE .)
    POW             reduce using rule 53 (comparisonoperator -> GTE .)
    SELECT          reduce using rule 53 (comparisonoperator -> GTE .)
    COLON           reduce using rule 53 (comparisonoperator -> GTE .)
    AND             reduce using rule 53 (comparisonoperator -> GTE .)
    OR              reduce using rule 53 (comparisonoperator -> GTE .)
    LT              reduce using rule 53 (comparisonoperator -> GTE .)
    GT              reduce using rule 53 (comparisonoperator -> GTE .)
    LTE             reduce using rule 53 (comparisonoperator -> GTE .)
    GTE             reduce using rule 53 (comparisonoperator -> GTE .)
    EQUALITY        reduce using rule 53 (comparisonoperator -> GTE .)
    INEQUALITY      reduce using rule 53 (comparisonoperator -> GTE .)
    SEMI_COLON      reduce using rule 53 (comparisonoperator -> GTE .)
    COMMA           reduce using rule 53 (comparisonoperator -> GTE .)
    $end            reduce using rule 53 (comparisonoperator -> GTE .)
    LPAREN          reduce using rule 53 (comparisonoperator -> GTE .)
    NUMBER_REAL     reduce using rule 53 (comparisonoperator -> GTE .)
    NUMBER_EXP      reduce using rule 53 (comparisonoperator -> GTE .)
    NUMBER_HEX      reduce using rule 53 (comparisonoperator -> GTE .)
    NOT             reduce using rule 53 (comparisonoperator -> GTE .)
    STRING_SINGLE   reduce using rule 53 (comparisonoperator -> GTE .)
    STRING_DOUBLE   reduce using rule 53 (comparisonoperator -> GTE .)
    LBRACE          reduce using rule 53 (comparisonoperator -> GTE .)
    LSPAREN         reduce using rule 53 (comparisonoperator -> GTE .)
    RBRACE          reduce using rule 53 (comparisonoperator -> GTE .)
    RPAREN          reduce using rule 53 (comparisonoperator -> GTE .)
    RSPAREN         reduce using rule 53 (comparisonoperator -> GTE .)


state 46

    (54) comparisonoperator -> EQUALITY .

    PRIVATE_ID      reduce using rule 54 (comparisonoperator -> EQUALITY .)
    GLOBAL_ID       reduce using rule 54 (comparisonoperator -> EQUALITY .)
    PLUS            reduce using rule 54 (comparisonoperator -> EQUALITY .)
    MINUS           reduce using rule 54 (comparisonoperator -> EQUALITY .)
    TIMES           reduce using rule 54 (comparisonoperator -> EQUALITY .)
    DIVIDE          reduce using rule 54 (comparisonoperator -> EQUALITY .)
    MOD             reduce using rule 54 (comparisonoperator -> EQUALITY .)
    POW             reduce using rule 54 (comparisonoperator -> EQUALITY .)
    SELECT          reduce using rule 54 (comparisonoperator -> EQUALITY .)
    COLON           reduce using rule 54 (comparisonoperator -> EQUALITY .)
    AND             reduce using rule 54 (comparisonoperator -> EQUALITY .)
    OR              reduce using rule 54 (comparisonoperator -> EQUALITY .)
    LT              reduce using rule 54 (comparisonoperator -> EQUALITY .)
    GT              reduce using rule 54 (comparisonoperator -> EQUALITY .)
    LTE             reduce using rule 54 (comparisonoperator -> EQUALITY .)
    GTE             reduce using rule 54 (comparisonoperator -> EQUALITY .)
    EQUALITY        reduce using rule 54 (comparisonoperator -> EQUALITY .)
    INEQUALITY      reduce using rule 54 (comparisonoperator -> EQUALITY .)
    SEMI_COLON      reduce using rule 54 (comparisonoperator -> EQUALITY .)
    COMMA           reduce using rule 54 (comparisonoperator -> EQUALITY .)
    $end            reduce using rule 54 (comparisonoperator -> EQUALITY .)
    LPAREN          reduce using rule 54 (comparisonoperator -> EQUALITY .)
    NUMBER_REAL     reduce using rule 54 (comparisonoperator -> EQUALITY .)
    NUMBER_EXP      reduce using rule 54 (comparisonoperator -> EQUALITY .)
    NUMBER_HEX      reduce using rule 54 (comparisonoperator -> EQUALITY .)
    NOT             reduce using rule 54 (comparisonoperator -> EQUALITY .)
    STRING_SINGLE   reduce using rule 54 (comparisonoperator -> EQUALITY .)
    STRING_DOUBLE   reduce using rule 54 (comparisonoperator -> EQUALITY .)
    LBRACE          reduce using rule 54 (comparisonoperator -> EQUALITY .)
    LSPAREN         reduce using rule 54 (comparisonoperator -> EQUALITY .)
    RBRACE          reduce using rule 54 (comparisonoperator -> EQUALITY .)
    RPAREN          reduce using rule 54 (comparisonoperator -> EQUALITY .)
    RSPAREN         reduce using rule 54 (comparisonoperator -> EQUALITY .)


state 47

    (55) comparisonoperator -> INEQUALITY .

    PRIVATE_ID      reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    GLOBAL_ID       reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    PLUS            reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    MINUS           reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    TIMES           reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    DIVIDE          reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    MOD             reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    POW             reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    SELECT          reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    COLON           reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    AND             reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    OR              reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    LT              reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    GT              reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    LTE             reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    GTE             reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    EQUALITY        reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    INEQUALITY      reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    SEMI_COLON      reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    COMMA           reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    $end            reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    LPAREN          reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    NUMBER_REAL     reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    NUMBER_EXP      reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    NUMBER_HEX      reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    NOT             reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    STRING_SINGLE   reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    STRING_DOUBLE   reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    LBRACE          reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    LSPAREN         reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    RBRACE          reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    RPAREN          reduce using rule 55 (comparisonoperator -> INEQUALITY .)
    RSPAREN         reduce using rule 55 (comparisonoperator -> INEQUALITY .)


state 48

    (3) code -> statement terminator . code
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (63) empty -> .
    (4) statement -> . assignment
    (5) statement -> . binaryexp
    (6) statement -> . binaryexp operator binaryexp
    (9) assignment -> . definition EQUAL binaryexp
    (10) assignment -> . identifier EQUAL binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (11) definition -> . PRIVATE PRIVATE_ID
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    $end            reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    PRIVATE         shift and go to state 10
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    statement                      shift and go to state 3
    code                           shift and go to state 69
    empty                          shift and go to state 2
    assignment                     shift and go to state 4
    binaryexp                      shift and go to state 5
    operator                       shift and go to state 6
    definition                     shift and go to state 7
    identifier                     shift and go to state 8
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 49

    (7) terminator -> SEMI_COLON .

    PRIVATE         reduce using rule 7 (terminator -> SEMI_COLON .)
    PRIVATE_ID      reduce using rule 7 (terminator -> SEMI_COLON .)
    GLOBAL_ID       reduce using rule 7 (terminator -> SEMI_COLON .)
    LPAREN          reduce using rule 7 (terminator -> SEMI_COLON .)
    NUMBER_REAL     reduce using rule 7 (terminator -> SEMI_COLON .)
    NUMBER_EXP      reduce using rule 7 (terminator -> SEMI_COLON .)
    NUMBER_HEX      reduce using rule 7 (terminator -> SEMI_COLON .)
    PLUS            reduce using rule 7 (terminator -> SEMI_COLON .)
    MINUS           reduce using rule 7 (terminator -> SEMI_COLON .)
    NOT             reduce using rule 7 (terminator -> SEMI_COLON .)
    STRING_SINGLE   reduce using rule 7 (terminator -> SEMI_COLON .)
    STRING_DOUBLE   reduce using rule 7 (terminator -> SEMI_COLON .)
    LBRACE          reduce using rule 7 (terminator -> SEMI_COLON .)
    LSPAREN         reduce using rule 7 (terminator -> SEMI_COLON .)
    TIMES           reduce using rule 7 (terminator -> SEMI_COLON .)
    DIVIDE          reduce using rule 7 (terminator -> SEMI_COLON .)
    MOD             reduce using rule 7 (terminator -> SEMI_COLON .)
    POW             reduce using rule 7 (terminator -> SEMI_COLON .)
    SELECT          reduce using rule 7 (terminator -> SEMI_COLON .)
    COLON           reduce using rule 7 (terminator -> SEMI_COLON .)
    AND             reduce using rule 7 (terminator -> SEMI_COLON .)
    OR              reduce using rule 7 (terminator -> SEMI_COLON .)
    LT              reduce using rule 7 (terminator -> SEMI_COLON .)
    GT              reduce using rule 7 (terminator -> SEMI_COLON .)
    LTE             reduce using rule 7 (terminator -> SEMI_COLON .)
    GTE             reduce using rule 7 (terminator -> SEMI_COLON .)
    EQUALITY        reduce using rule 7 (terminator -> SEMI_COLON .)
    INEQUALITY      reduce using rule 7 (terminator -> SEMI_COLON .)
    $end            reduce using rule 7 (terminator -> SEMI_COLON .)
    RBRACE          reduce using rule 7 (terminator -> SEMI_COLON .)


state 50

    (8) terminator -> COMMA .

    PRIVATE         reduce using rule 8 (terminator -> COMMA .)
    PRIVATE_ID      reduce using rule 8 (terminator -> COMMA .)
    GLOBAL_ID       reduce using rule 8 (terminator -> COMMA .)
    LPAREN          reduce using rule 8 (terminator -> COMMA .)
    NUMBER_REAL     reduce using rule 8 (terminator -> COMMA .)
    NUMBER_EXP      reduce using rule 8 (terminator -> COMMA .)
    NUMBER_HEX      reduce using rule 8 (terminator -> COMMA .)
    PLUS            reduce using rule 8 (terminator -> COMMA .)
    MINUS           reduce using rule 8 (terminator -> COMMA .)
    NOT             reduce using rule 8 (terminator -> COMMA .)
    STRING_SINGLE   reduce using rule 8 (terminator -> COMMA .)
    STRING_DOUBLE   reduce using rule 8 (terminator -> COMMA .)
    LBRACE          reduce using rule 8 (terminator -> COMMA .)
    LSPAREN         reduce using rule 8 (terminator -> COMMA .)
    TIMES           reduce using rule 8 (terminator -> COMMA .)
    DIVIDE          reduce using rule 8 (terminator -> COMMA .)
    MOD             reduce using rule 8 (terminator -> COMMA .)
    POW             reduce using rule 8 (terminator -> COMMA .)
    SELECT          reduce using rule 8 (terminator -> COMMA .)
    COLON           reduce using rule 8 (terminator -> COMMA .)
    AND             reduce using rule 8 (terminator -> COMMA .)
    OR              reduce using rule 8 (terminator -> COMMA .)
    LT              reduce using rule 8 (terminator -> COMMA .)
    GT              reduce using rule 8 (terminator -> COMMA .)
    LTE             reduce using rule 8 (terminator -> COMMA .)
    GTE             reduce using rule 8 (terminator -> COMMA .)
    EQUALITY        reduce using rule 8 (terminator -> COMMA .)
    INEQUALITY      reduce using rule 8 (terminator -> COMMA .)
    $end            reduce using rule 8 (terminator -> COMMA .)
    RBRACE          reduce using rule 8 (terminator -> COMMA .)


state 51

    (6) statement -> binaryexp operator . binaryexp
    (14) binaryexp -> binaryexp operator . binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    binaryexp                      shift and go to state 70
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 52

    (36) operator -> identifier .

    LPAREN          reduce using rule 36 (operator -> identifier .)
    NUMBER_REAL     reduce using rule 36 (operator -> identifier .)
    NUMBER_EXP      reduce using rule 36 (operator -> identifier .)
    NUMBER_HEX      reduce using rule 36 (operator -> identifier .)
    PLUS            reduce using rule 36 (operator -> identifier .)
    MINUS           reduce using rule 36 (operator -> identifier .)
    NOT             reduce using rule 36 (operator -> identifier .)
    STRING_SINGLE   reduce using rule 36 (operator -> identifier .)
    STRING_DOUBLE   reduce using rule 36 (operator -> identifier .)
    LBRACE          reduce using rule 36 (operator -> identifier .)
    LSPAREN         reduce using rule 36 (operator -> identifier .)
    PRIVATE_ID      reduce using rule 36 (operator -> identifier .)
    GLOBAL_ID       reduce using rule 36 (operator -> identifier .)
    TIMES           reduce using rule 36 (operator -> identifier .)
    DIVIDE          reduce using rule 36 (operator -> identifier .)
    MOD             reduce using rule 36 (operator -> identifier .)
    POW             reduce using rule 36 (operator -> identifier .)
    SELECT          reduce using rule 36 (operator -> identifier .)
    COLON           reduce using rule 36 (operator -> identifier .)
    AND             reduce using rule 36 (operator -> identifier .)
    OR              reduce using rule 36 (operator -> identifier .)
    LT              reduce using rule 36 (operator -> identifier .)
    GT              reduce using rule 36 (operator -> identifier .)
    LTE             reduce using rule 36 (operator -> identifier .)
    GTE             reduce using rule 36 (operator -> identifier .)
    EQUALITY        reduce using rule 36 (operator -> identifier .)
    INEQUALITY      reduce using rule 36 (operator -> identifier .)


state 53

    (38) punctuation -> PLUS .

    LPAREN          reduce using rule 38 (punctuation -> PLUS .)
    NUMBER_REAL     reduce using rule 38 (punctuation -> PLUS .)
    NUMBER_EXP      reduce using rule 38 (punctuation -> PLUS .)
    NUMBER_HEX      reduce using rule 38 (punctuation -> PLUS .)
    PLUS            reduce using rule 38 (punctuation -> PLUS .)
    MINUS           reduce using rule 38 (punctuation -> PLUS .)
    NOT             reduce using rule 38 (punctuation -> PLUS .)
    STRING_SINGLE   reduce using rule 38 (punctuation -> PLUS .)
    STRING_DOUBLE   reduce using rule 38 (punctuation -> PLUS .)
    LBRACE          reduce using rule 38 (punctuation -> PLUS .)
    LSPAREN         reduce using rule 38 (punctuation -> PLUS .)
    PRIVATE_ID      reduce using rule 38 (punctuation -> PLUS .)
    GLOBAL_ID       reduce using rule 38 (punctuation -> PLUS .)
    TIMES           reduce using rule 38 (punctuation -> PLUS .)
    DIVIDE          reduce using rule 38 (punctuation -> PLUS .)
    MOD             reduce using rule 38 (punctuation -> PLUS .)
    POW             reduce using rule 38 (punctuation -> PLUS .)
    SELECT          reduce using rule 38 (punctuation -> PLUS .)
    COLON           reduce using rule 38 (punctuation -> PLUS .)
    AND             reduce using rule 38 (punctuation -> PLUS .)
    OR              reduce using rule 38 (punctuation -> PLUS .)
    LT              reduce using rule 38 (punctuation -> PLUS .)
    GT              reduce using rule 38 (punctuation -> PLUS .)
    LTE             reduce using rule 38 (punctuation -> PLUS .)
    GTE             reduce using rule 38 (punctuation -> PLUS .)
    EQUALITY        reduce using rule 38 (punctuation -> PLUS .)
    INEQUALITY      reduce using rule 38 (punctuation -> PLUS .)


state 54

    (39) punctuation -> MINUS .

    LPAREN          reduce using rule 39 (punctuation -> MINUS .)
    NUMBER_REAL     reduce using rule 39 (punctuation -> MINUS .)
    NUMBER_EXP      reduce using rule 39 (punctuation -> MINUS .)
    NUMBER_HEX      reduce using rule 39 (punctuation -> MINUS .)
    PLUS            reduce using rule 39 (punctuation -> MINUS .)
    MINUS           reduce using rule 39 (punctuation -> MINUS .)
    NOT             reduce using rule 39 (punctuation -> MINUS .)
    STRING_SINGLE   reduce using rule 39 (punctuation -> MINUS .)
    STRING_DOUBLE   reduce using rule 39 (punctuation -> MINUS .)
    LBRACE          reduce using rule 39 (punctuation -> MINUS .)
    LSPAREN         reduce using rule 39 (punctuation -> MINUS .)
    PRIVATE_ID      reduce using rule 39 (punctuation -> MINUS .)
    GLOBAL_ID       reduce using rule 39 (punctuation -> MINUS .)
    TIMES           reduce using rule 39 (punctuation -> MINUS .)
    DIVIDE          reduce using rule 39 (punctuation -> MINUS .)
    MOD             reduce using rule 39 (punctuation -> MINUS .)
    POW             reduce using rule 39 (punctuation -> MINUS .)
    SELECT          reduce using rule 39 (punctuation -> MINUS .)
    COLON           reduce using rule 39 (punctuation -> MINUS .)
    AND             reduce using rule 39 (punctuation -> MINUS .)
    OR              reduce using rule 39 (punctuation -> MINUS .)
    LT              reduce using rule 39 (punctuation -> MINUS .)
    GT              reduce using rule 39 (punctuation -> MINUS .)
    LTE             reduce using rule 39 (punctuation -> MINUS .)
    GTE             reduce using rule 39 (punctuation -> MINUS .)
    EQUALITY        reduce using rule 39 (punctuation -> MINUS .)
    INEQUALITY      reduce using rule 39 (punctuation -> MINUS .)


state 55

    (9) assignment -> definition EQUAL . binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    binaryexp                      shift and go to state 71
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 56

    (34) unaryexp -> identifier . primaryexp
    (35) variable -> identifier .
    (36) operator -> identifier .
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

  ! reduce/reduce conflict for PRIVATE_ID resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for GLOBAL_ID resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for MOD resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for POW resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for SELECT resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for AND resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for OR resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for LT resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for GT resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for LTE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for GTE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for EQUALITY resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for $end resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for RBRACE resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (variable -> identifier .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 35 (variable -> identifier .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PRIVATE_ID resolved as shift
  ! shift/reduce conflict for GLOBAL_ID resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
    SEMI_COLON      reduce using rule 35 (variable -> identifier .)
    COMMA           reduce using rule 35 (variable -> identifier .)
    $end            reduce using rule 35 (variable -> identifier .)
    RBRACE          reduce using rule 35 (variable -> identifier .)
    RPAREN          reduce using rule 35 (variable -> identifier .)
    RSPAREN         reduce using rule 35 (variable -> identifier .)
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

  ! PRIVATE_ID      [ reduce using rule 35 (variable -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 35 (variable -> identifier .) ]
  ! PLUS            [ reduce using rule 35 (variable -> identifier .) ]
  ! MINUS           [ reduce using rule 35 (variable -> identifier .) ]
  ! TIMES           [ reduce using rule 35 (variable -> identifier .) ]
  ! DIVIDE          [ reduce using rule 35 (variable -> identifier .) ]
  ! MOD             [ reduce using rule 35 (variable -> identifier .) ]
  ! POW             [ reduce using rule 35 (variable -> identifier .) ]
  ! SELECT          [ reduce using rule 35 (variable -> identifier .) ]
  ! COLON           [ reduce using rule 35 (variable -> identifier .) ]
  ! AND             [ reduce using rule 35 (variable -> identifier .) ]
  ! OR              [ reduce using rule 35 (variable -> identifier .) ]
  ! LT              [ reduce using rule 35 (variable -> identifier .) ]
  ! GT              [ reduce using rule 35 (variable -> identifier .) ]
  ! LTE             [ reduce using rule 35 (variable -> identifier .) ]
  ! GTE             [ reduce using rule 35 (variable -> identifier .) ]
  ! EQUALITY        [ reduce using rule 35 (variable -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 35 (variable -> identifier .) ]
  ! PRIVATE_ID      [ reduce using rule 36 (operator -> identifier .) ]
  ! GLOBAL_ID       [ reduce using rule 36 (operator -> identifier .) ]
  ! PLUS            [ reduce using rule 36 (operator -> identifier .) ]
  ! MINUS           [ reduce using rule 36 (operator -> identifier .) ]
  ! TIMES           [ reduce using rule 36 (operator -> identifier .) ]
  ! DIVIDE          [ reduce using rule 36 (operator -> identifier .) ]
  ! MOD             [ reduce using rule 36 (operator -> identifier .) ]
  ! POW             [ reduce using rule 36 (operator -> identifier .) ]
  ! SELECT          [ reduce using rule 36 (operator -> identifier .) ]
  ! COLON           [ reduce using rule 36 (operator -> identifier .) ]
  ! AND             [ reduce using rule 36 (operator -> identifier .) ]
  ! OR              [ reduce using rule 36 (operator -> identifier .) ]
  ! LT              [ reduce using rule 36 (operator -> identifier .) ]
  ! GT              [ reduce using rule 36 (operator -> identifier .) ]
  ! LTE             [ reduce using rule 36 (operator -> identifier .) ]
  ! GTE             [ reduce using rule 36 (operator -> identifier .) ]
  ! EQUALITY        [ reduce using rule 36 (operator -> identifier .) ]
  ! INEQUALITY      [ reduce using rule 36 (operator -> identifier .) ]
  ! SEMI_COLON      [ reduce using rule 36 (operator -> identifier .) ]
  ! COMMA           [ reduce using rule 36 (operator -> identifier .) ]
  ! $end            [ reduce using rule 36 (operator -> identifier .) ]
  ! RBRACE          [ reduce using rule 36 (operator -> identifier .) ]
  ! RPAREN          [ reduce using rule 36 (operator -> identifier .) ]
  ! RSPAREN         [ reduce using rule 36 (operator -> identifier .) ]

    identifier                     shift and go to state 56
    primaryexp                     shift and go to state 58
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    operator                       shift and go to state 6
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 57

    (10) assignment -> identifier EQUAL . binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    identifier                     shift and go to state 56
    binaryexp                      shift and go to state 72
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 58

    (34) unaryexp -> identifier primaryexp .

    PRIVATE_ID      reduce using rule 34 (unaryexp -> identifier primaryexp .)
    GLOBAL_ID       reduce using rule 34 (unaryexp -> identifier primaryexp .)
    PLUS            reduce using rule 34 (unaryexp -> identifier primaryexp .)
    MINUS           reduce using rule 34 (unaryexp -> identifier primaryexp .)
    TIMES           reduce using rule 34 (unaryexp -> identifier primaryexp .)
    DIVIDE          reduce using rule 34 (unaryexp -> identifier primaryexp .)
    MOD             reduce using rule 34 (unaryexp -> identifier primaryexp .)
    POW             reduce using rule 34 (unaryexp -> identifier primaryexp .)
    SELECT          reduce using rule 34 (unaryexp -> identifier primaryexp .)
    COLON           reduce using rule 34 (unaryexp -> identifier primaryexp .)
    AND             reduce using rule 34 (unaryexp -> identifier primaryexp .)
    OR              reduce using rule 34 (unaryexp -> identifier primaryexp .)
    LT              reduce using rule 34 (unaryexp -> identifier primaryexp .)
    GT              reduce using rule 34 (unaryexp -> identifier primaryexp .)
    LTE             reduce using rule 34 (unaryexp -> identifier primaryexp .)
    GTE             reduce using rule 34 (unaryexp -> identifier primaryexp .)
    EQUALITY        reduce using rule 34 (unaryexp -> identifier primaryexp .)
    INEQUALITY      reduce using rule 34 (unaryexp -> identifier primaryexp .)
    SEMI_COLON      reduce using rule 34 (unaryexp -> identifier primaryexp .)
    COMMA           reduce using rule 34 (unaryexp -> identifier primaryexp .)
    $end            reduce using rule 34 (unaryexp -> identifier primaryexp .)
    RBRACE          reduce using rule 34 (unaryexp -> identifier primaryexp .)
    RPAREN          reduce using rule 34 (unaryexp -> identifier primaryexp .)
    RSPAREN         reduce using rule 34 (unaryexp -> identifier primaryexp .)


state 59

    (11) definition -> PRIVATE PRIVATE_ID .

    EQUAL           reduce using rule 11 (definition -> PRIVATE PRIVATE_ID .)


state 60

    (22) primaryexp -> LPAREN binaryexp . RPAREN
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    RPAREN          shift and go to state 73
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    operator                       shift and go to state 74
    identifier                     shift and go to state 52
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 61

    (31) unaryexp -> PLUS primaryexp .

    PRIVATE_ID      reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    GLOBAL_ID       reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    PLUS            reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    MINUS           reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    TIMES           reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    DIVIDE          reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    MOD             reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    POW             reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    SELECT          reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    COLON           reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    AND             reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    OR              reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    LT              reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    GT              reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    LTE             reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    GTE             reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    EQUALITY        reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    INEQUALITY      reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    SEMI_COLON      reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    COMMA           reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    $end            reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    RBRACE          reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    RPAREN          reduce using rule 31 (unaryexp -> PLUS primaryexp .)
    RSPAREN         reduce using rule 31 (unaryexp -> PLUS primaryexp .)


state 62

    (32) unaryexp -> MINUS primaryexp .

    PRIVATE_ID      reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    GLOBAL_ID       reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    PLUS            reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    MINUS           reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    TIMES           reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    DIVIDE          reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    MOD             reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    POW             reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    SELECT          reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    COLON           reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    AND             reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    OR              reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    LT              reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    GT              reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    LTE             reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    GTE             reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    EQUALITY        reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    INEQUALITY      reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    SEMI_COLON      reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    COMMA           reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    $end            reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    RBRACE          reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    RPAREN          reduce using rule 32 (unaryexp -> MINUS primaryexp .)
    RSPAREN         reduce using rule 32 (unaryexp -> MINUS primaryexp .)


state 63

    (33) unaryexp -> NOT primaryexp .

    PRIVATE_ID      reduce using rule 33 (unaryexp -> NOT primaryexp .)
    GLOBAL_ID       reduce using rule 33 (unaryexp -> NOT primaryexp .)
    PLUS            reduce using rule 33 (unaryexp -> NOT primaryexp .)
    MINUS           reduce using rule 33 (unaryexp -> NOT primaryexp .)
    TIMES           reduce using rule 33 (unaryexp -> NOT primaryexp .)
    DIVIDE          reduce using rule 33 (unaryexp -> NOT primaryexp .)
    MOD             reduce using rule 33 (unaryexp -> NOT primaryexp .)
    POW             reduce using rule 33 (unaryexp -> NOT primaryexp .)
    SELECT          reduce using rule 33 (unaryexp -> NOT primaryexp .)
    COLON           reduce using rule 33 (unaryexp -> NOT primaryexp .)
    AND             reduce using rule 33 (unaryexp -> NOT primaryexp .)
    OR              reduce using rule 33 (unaryexp -> NOT primaryexp .)
    LT              reduce using rule 33 (unaryexp -> NOT primaryexp .)
    GT              reduce using rule 33 (unaryexp -> NOT primaryexp .)
    LTE             reduce using rule 33 (unaryexp -> NOT primaryexp .)
    GTE             reduce using rule 33 (unaryexp -> NOT primaryexp .)
    EQUALITY        reduce using rule 33 (unaryexp -> NOT primaryexp .)
    INEQUALITY      reduce using rule 33 (unaryexp -> NOT primaryexp .)
    SEMI_COLON      reduce using rule 33 (unaryexp -> NOT primaryexp .)
    COMMA           reduce using rule 33 (unaryexp -> NOT primaryexp .)
    $end            reduce using rule 33 (unaryexp -> NOT primaryexp .)
    RBRACE          reduce using rule 33 (unaryexp -> NOT primaryexp .)
    RPAREN          reduce using rule 33 (unaryexp -> NOT primaryexp .)
    RSPAREN         reduce using rule 33 (unaryexp -> NOT primaryexp .)


state 64

    (24) bracedexp -> LBRACE new_scope . code RBRACE
    (1) code -> . empty
    (2) code -> . statement
    (3) code -> . statement terminator code
    (63) empty -> .
    (4) statement -> . assignment
    (5) statement -> . binaryexp
    (6) statement -> . binaryexp operator binaryexp
    (9) assignment -> . definition EQUAL binaryexp
    (10) assignment -> . identifier EQUAL binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (11) definition -> . PRIVATE PRIVATE_ID
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    RBRACE          reduce using rule 63 (empty -> .)
    PRIVATE         shift and go to state 10
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    code                           shift and go to state 75
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    binaryexp                      shift and go to state 5
    operator                       shift and go to state 6
    definition                     shift and go to state 7
    identifier                     shift and go to state 8
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 65

    (26) array -> LSPAREN RSPAREN .

    PRIVATE_ID      reduce using rule 26 (array -> LSPAREN RSPAREN .)
    GLOBAL_ID       reduce using rule 26 (array -> LSPAREN RSPAREN .)
    PLUS            reduce using rule 26 (array -> LSPAREN RSPAREN .)
    MINUS           reduce using rule 26 (array -> LSPAREN RSPAREN .)
    TIMES           reduce using rule 26 (array -> LSPAREN RSPAREN .)
    DIVIDE          reduce using rule 26 (array -> LSPAREN RSPAREN .)
    MOD             reduce using rule 26 (array -> LSPAREN RSPAREN .)
    POW             reduce using rule 26 (array -> LSPAREN RSPAREN .)
    SELECT          reduce using rule 26 (array -> LSPAREN RSPAREN .)
    COLON           reduce using rule 26 (array -> LSPAREN RSPAREN .)
    AND             reduce using rule 26 (array -> LSPAREN RSPAREN .)
    OR              reduce using rule 26 (array -> LSPAREN RSPAREN .)
    LT              reduce using rule 26 (array -> LSPAREN RSPAREN .)
    GT              reduce using rule 26 (array -> LSPAREN RSPAREN .)
    LTE             reduce using rule 26 (array -> LSPAREN RSPAREN .)
    GTE             reduce using rule 26 (array -> LSPAREN RSPAREN .)
    EQUALITY        reduce using rule 26 (array -> LSPAREN RSPAREN .)
    INEQUALITY      reduce using rule 26 (array -> LSPAREN RSPAREN .)
    SEMI_COLON      reduce using rule 26 (array -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 26 (array -> LSPAREN RSPAREN .)
    $end            reduce using rule 26 (array -> LSPAREN RSPAREN .)
    RBRACE          reduce using rule 26 (array -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 26 (array -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 26 (array -> LSPAREN RSPAREN .)


state 66

    (27) array -> LSPAREN arrayelement . RSPAREN

    RSPAREN         shift and go to state 76


state 67

    (28) arrayelement -> binaryexp .
    (29) arrayelement -> binaryexp . COMMA arrayelement
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    RSPAREN         reduce using rule 28 (arrayelement -> binaryexp .)
    COMMA           shift and go to state 77
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    operator                       shift and go to state 74
    identifier                     shift and go to state 52
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 68

    (56) configaccessor -> GT GT .

    PRIVATE_ID      reduce using rule 56 (configaccessor -> GT GT .)
    GLOBAL_ID       reduce using rule 56 (configaccessor -> GT GT .)
    PLUS            reduce using rule 56 (configaccessor -> GT GT .)
    MINUS           reduce using rule 56 (configaccessor -> GT GT .)
    TIMES           reduce using rule 56 (configaccessor -> GT GT .)
    DIVIDE          reduce using rule 56 (configaccessor -> GT GT .)
    MOD             reduce using rule 56 (configaccessor -> GT GT .)
    POW             reduce using rule 56 (configaccessor -> GT GT .)
    SELECT          reduce using rule 56 (configaccessor -> GT GT .)
    COLON           reduce using rule 56 (configaccessor -> GT GT .)
    AND             reduce using rule 56 (configaccessor -> GT GT .)
    OR              reduce using rule 56 (configaccessor -> GT GT .)
    LT              reduce using rule 56 (configaccessor -> GT GT .)
    GT              reduce using rule 56 (configaccessor -> GT GT .)
    LTE             reduce using rule 56 (configaccessor -> GT GT .)
    GTE             reduce using rule 56 (configaccessor -> GT GT .)
    EQUALITY        reduce using rule 56 (configaccessor -> GT GT .)
    INEQUALITY      reduce using rule 56 (configaccessor -> GT GT .)
    SEMI_COLON      reduce using rule 56 (configaccessor -> GT GT .)
    COMMA           reduce using rule 56 (configaccessor -> GT GT .)
    $end            reduce using rule 56 (configaccessor -> GT GT .)
    LPAREN          reduce using rule 56 (configaccessor -> GT GT .)
    NUMBER_REAL     reduce using rule 56 (configaccessor -> GT GT .)
    NUMBER_EXP      reduce using rule 56 (configaccessor -> GT GT .)
    NUMBER_HEX      reduce using rule 56 (configaccessor -> GT GT .)
    NOT             reduce using rule 56 (configaccessor -> GT GT .)
    STRING_SINGLE   reduce using rule 56 (configaccessor -> GT GT .)
    STRING_DOUBLE   reduce using rule 56 (configaccessor -> GT GT .)
    LBRACE          reduce using rule 56 (configaccessor -> GT GT .)
    LSPAREN         reduce using rule 56 (configaccessor -> GT GT .)
    RBRACE          reduce using rule 56 (configaccessor -> GT GT .)
    RPAREN          reduce using rule 56 (configaccessor -> GT GT .)
    RSPAREN         reduce using rule 56 (configaccessor -> GT GT .)


state 69

    (3) code -> statement terminator code .

    $end            reduce using rule 3 (code -> statement terminator code .)
    RBRACE          reduce using rule 3 (code -> statement terminator code .)


state 70

    (6) statement -> binaryexp operator binaryexp .
    (14) binaryexp -> binaryexp operator binaryexp .
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

  ! reduce/reduce conflict for SEMI_COLON resolved using rule 6 (statement -> binaryexp operator binaryexp .)
  ! reduce/reduce conflict for COMMA resolved using rule 6 (statement -> binaryexp operator binaryexp .)
  ! reduce/reduce conflict for $end resolved using rule 6 (statement -> binaryexp operator binaryexp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 6 (statement -> binaryexp operator binaryexp .)
    SEMI_COLON      reduce using rule 6 (statement -> binaryexp operator binaryexp .)
    COMMA           reduce using rule 6 (statement -> binaryexp operator binaryexp .)
    $end            reduce using rule 6 (statement -> binaryexp operator binaryexp .)
    RBRACE          reduce using rule 6 (statement -> binaryexp operator binaryexp .)
    PRIVATE_ID      reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    GLOBAL_ID       reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    COLON           reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    AND             reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    OR              reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    LT              reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    GT              reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    LTE             reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    GTE             reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    EQUALITY        reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    INEQUALITY      reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36

  ! PLUS            [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MINUS           [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! TIMES           [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! DIVIDE          [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MOD             [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! POW             [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SELECT          [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SEMI_COLON      [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! COMMA           [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! $end            [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! RBRACE          [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! PRIVATE_ID      [ shift and go to state 11 ]
  ! GLOBAL_ID       [ shift and go to state 12 ]
  ! COLON           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LTE             [ shift and go to state 44 ]
  ! GTE             [ shift and go to state 45 ]
  ! EQUALITY        [ shift and go to state 46 ]
  ! INEQUALITY      [ shift and go to state 47 ]

    operator                       shift and go to state 74
    identifier                     shift and go to state 52
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 71

    (9) assignment -> definition EQUAL binaryexp .
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 9 (assignment -> definition EQUAL binaryexp .)
    COMMA           reduce using rule 9 (assignment -> definition EQUAL binaryexp .)
    $end            reduce using rule 9 (assignment -> definition EQUAL binaryexp .)
    RBRACE          reduce using rule 9 (assignment -> definition EQUAL binaryexp .)
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    operator                       shift and go to state 74
    identifier                     shift and go to state 52
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 72

    (10) assignment -> identifier EQUAL binaryexp .
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    SEMI_COLON      reduce using rule 10 (assignment -> identifier EQUAL binaryexp .)
    COMMA           reduce using rule 10 (assignment -> identifier EQUAL binaryexp .)
    $end            reduce using rule 10 (assignment -> identifier EQUAL binaryexp .)
    RBRACE          reduce using rule 10 (assignment -> identifier EQUAL binaryexp .)
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    identifier                     shift and go to state 52
    operator                       shift and go to state 74
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 73

    (22) primaryexp -> LPAREN binaryexp RPAREN .

    PRIVATE_ID      reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    GLOBAL_ID       reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    PLUS            reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    MINUS           reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    TIMES           reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    DIVIDE          reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    MOD             reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    POW             reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    SELECT          reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    COLON           reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    AND             reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    OR              reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    LT              reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    GT              reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    LTE             reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    GTE             reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    EQUALITY        reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    INEQUALITY      reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    SEMI_COLON      reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    COMMA           reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    $end            reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    RBRACE          reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    RPAREN          reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)
    RSPAREN         reduce using rule 22 (primaryexp -> LPAREN binaryexp RPAREN .)


state 74

    (14) binaryexp -> binaryexp operator . binaryexp
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    binaryexp                      shift and go to state 78
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 75

    (24) bracedexp -> LBRACE new_scope code . RBRACE

    RBRACE          shift and go to state 79


state 76

    (27) array -> LSPAREN arrayelement RSPAREN .

    PRIVATE_ID      reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    GLOBAL_ID       reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    PLUS            reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    MINUS           reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    TIMES           reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    DIVIDE          reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    MOD             reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    POW             reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    SELECT          reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    COLON           reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    AND             reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    OR              reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    LT              reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    GT              reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    LTE             reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    GTE             reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    EQUALITY        reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    INEQUALITY      reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    SEMI_COLON      reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    COMMA           reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    $end            reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    RBRACE          reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    RPAREN          reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)
    RSPAREN         reduce using rule 27 (array -> LSPAREN arrayelement RSPAREN .)


state 77

    (29) arrayelement -> binaryexp COMMA . arrayelement
    (28) arrayelement -> . binaryexp
    (29) arrayelement -> . binaryexp COMMA arrayelement
    (14) binaryexp -> . binaryexp operator binaryexp
    (15) binaryexp -> . primaryexp
    (16) primaryexp -> . number
    (17) primaryexp -> . unaryexp
    (18) primaryexp -> . nularexp
    (19) primaryexp -> . variable
    (20) primaryexp -> . string
    (21) primaryexp -> . bracedexp
    (22) primaryexp -> . LPAREN binaryexp RPAREN
    (23) primaryexp -> . array
    (58) number -> . NUMBER_REAL
    (59) number -> . NUMBER_EXP
    (60) number -> . NUMBER_HEX
    (31) unaryexp -> . PLUS primaryexp
    (32) unaryexp -> . MINUS primaryexp
    (33) unaryexp -> . NOT primaryexp
    (34) unaryexp -> . identifier primaryexp
    (30) nularexp -> . operator
    (35) variable -> . identifier
    (61) string -> . STRING_SINGLE
    (62) string -> . STRING_DOUBLE
    (24) bracedexp -> . LBRACE new_scope code RBRACE
    (26) array -> . LSPAREN RSPAREN
    (27) array -> . LSPAREN arrayelement RSPAREN
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    LPAREN          shift and go to state 19
    NUMBER_REAL     shift and go to state 21
    NUMBER_EXP      shift and go to state 22
    NUMBER_HEX      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 26
    STRING_SINGLE   shift and go to state 27
    STRING_DOUBLE   shift and go to state 28
    LBRACE          shift and go to state 29
    LSPAREN         shift and go to state 30
    PRIVATE_ID      shift and go to state 11
    GLOBAL_ID       shift and go to state 12
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36
    COLON           shift and go to state 37
    AND             shift and go to state 39
    OR              shift and go to state 40
    LT              shift and go to state 42
    GT              shift and go to state 43
    LTE             shift and go to state 44
    GTE             shift and go to state 45
    EQUALITY        shift and go to state 46
    INEQUALITY      shift and go to state 47

    binaryexp                      shift and go to state 67
    arrayelement                   shift and go to state 80
    operator                       shift and go to state 6
    primaryexp                     shift and go to state 9
    number                         shift and go to state 13
    unaryexp                       shift and go to state 14
    nularexp                       shift and go to state 15
    variable                       shift and go to state 16
    string                         shift and go to state 17
    bracedexp                      shift and go to state 18
    array                          shift and go to state 20
    identifier                     shift and go to state 56
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 78

    (14) binaryexp -> binaryexp operator binaryexp .
    (14) binaryexp -> binaryexp . operator binaryexp
    (36) operator -> . identifier
    (37) operator -> . punctuation
    (12) identifier -> . PRIVATE_ID
    (13) identifier -> . GLOBAL_ID
    (38) punctuation -> . PLUS
    (39) punctuation -> . MINUS
    (40) punctuation -> . TIMES
    (41) punctuation -> . DIVIDE
    (42) punctuation -> . MOD
    (43) punctuation -> . POW
    (44) punctuation -> . SELECT
    (45) punctuation -> . COLON
    (46) punctuation -> . comparisonoperator
    (47) punctuation -> . AND
    (48) punctuation -> . OR
    (49) punctuation -> . configaccessor
    (50) comparisonoperator -> . LT
    (51) comparisonoperator -> . GT
    (52) comparisonoperator -> . LTE
    (53) comparisonoperator -> . GTE
    (54) comparisonoperator -> . EQUALITY
    (55) comparisonoperator -> . INEQUALITY
    (56) configaccessor -> . GT GT
    (57) configaccessor -> . DIVIDE

    RPAREN          reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    PRIVATE_ID      reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    GLOBAL_ID       reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    COLON           reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    AND             reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    OR              reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    LT              reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    GT              reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    LTE             reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    GTE             reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    EQUALITY        reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    INEQUALITY      reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    COMMA           reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    RSPAREN         reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    SEMI_COLON      reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    $end            reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    RBRACE          reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    POW             shift and go to state 35
    SELECT          shift and go to state 36

  ! PLUS            [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MINUS           [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! TIMES           [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! DIVIDE          [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! MOD             [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! POW             [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! SELECT          [ reduce using rule 14 (binaryexp -> binaryexp operator binaryexp .) ]
  ! PRIVATE_ID      [ shift and go to state 11 ]
  ! GLOBAL_ID       [ shift and go to state 12 ]
  ! COLON           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! LT              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! LTE             [ shift and go to state 44 ]
  ! GTE             [ shift and go to state 45 ]
  ! EQUALITY        [ shift and go to state 46 ]
  ! INEQUALITY      [ shift and go to state 47 ]

    operator                       shift and go to state 74
    identifier                     shift and go to state 52
    punctuation                    shift and go to state 31
    comparisonoperator             shift and go to state 38
    configaccessor                 shift and go to state 41

state 79

    (24) bracedexp -> LBRACE new_scope code RBRACE .

    PRIVATE_ID      reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    GLOBAL_ID       reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    PLUS            reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    MINUS           reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    TIMES           reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    DIVIDE          reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    MOD             reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    POW             reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    SELECT          reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    COLON           reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    AND             reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    OR              reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    LT              reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    GT              reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    LTE             reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    GTE             reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    EQUALITY        reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    INEQUALITY      reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    SEMI_COLON      reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    COMMA           reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    $end            reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    RBRACE          reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    RPAREN          reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)
    RSPAREN         reduce using rule 24 (bracedexp -> LBRACE new_scope code RBRACE .)


state 80

    (29) arrayelement -> binaryexp COMMA arrayelement .

    RSPAREN         reduce using rule 29 (arrayelement -> binaryexp COMMA arrayelement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 8 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 8 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 8 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 8 resolved as shift
WARNING: shift/reduce conflict for MOD in state 8 resolved as shift
WARNING: shift/reduce conflict for POW in state 8 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 8 resolved as shift
WARNING: shift/reduce conflict for COLON in state 8 resolved as shift
WARNING: shift/reduce conflict for AND in state 8 resolved as shift
WARNING: shift/reduce conflict for OR in state 8 resolved as shift
WARNING: shift/reduce conflict for LT in state 8 resolved as shift
WARNING: shift/reduce conflict for GT in state 8 resolved as shift
WARNING: shift/reduce conflict for LTE in state 8 resolved as shift
WARNING: shift/reduce conflict for GTE in state 8 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 8 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 8 resolved as shift
WARNING: shift/reduce conflict for GT in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for PRIVATE_ID in state 56 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_ID in state 56 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for MOD in state 56 resolved as shift
WARNING: shift/reduce conflict for POW in state 56 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 56 resolved as shift
WARNING: shift/reduce conflict for COLON in state 56 resolved as shift
WARNING: shift/reduce conflict for AND in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 56 resolved as shift
WARNING: shift/reduce conflict for LT in state 56 resolved as shift
WARNING: shift/reduce conflict for GT in state 56 resolved as shift
WARNING: shift/reduce conflict for LTE in state 56 resolved as shift
WARNING: shift/reduce conflict for GTE in state 56 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 56 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 56 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (variable -> identifier)
WARNING: rejected rule (operator -> identifier) in state 8
WARNING: reduce/reduce conflict in state 33 resolved using rule (punctuation -> DIVIDE)
WARNING: rejected rule (configaccessor -> DIVIDE) in state 33
WARNING: reduce/reduce conflict in state 56 resolved using rule (variable -> identifier)
WARNING: rejected rule (operator -> identifier) in state 56
WARNING: reduce/reduce conflict in state 70 resolved using rule (statement -> binaryexp operator binaryexp)
WARNING: rejected rule (binaryexp -> binaryexp operator binaryexp) in state 70
WARNING: Rule (configaccessor -> DIVIDE) is never reduced
