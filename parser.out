Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOL
    COLON
    COMMA
    COMMENT_MULTI
    COMMENT_SINGLE
    ELSE
    EQUAL
    FOR
    GLOBAL_ID
    GT
    IF
    LBRACE
    LSPAREN
    LT
    MOD
    NEWLINE
    NOT
    OR
    POW
    PRIVATE
    PRIVATE_ID
    RBRACE
    RSPAREN
    SELECT
    SEMI_COLON
    STRING_DOUBLE
    STRING_SINGLE
    SWITCH
    WHILE
    WITH

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> number
Rule 7     expression -> MINUS expression
Rule 8     number -> NUMBER_REAL
Rule 9     number -> NUMBER_HEX
Rule 10    number -> NUMBER_EXP
Rule 11    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 
COLON                : 
COMMA                : 
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
DIVIDE               : 4
ELSE                 : 
EQUAL                : 
FOR                  : 
GLOBAL_ID            : 
GT                   : 
IF                   : 
LBRACE               : 
LPAREN               : 5
LSPAREN              : 
LT                   : 
MINUS                : 2 7
MOD                  : 
NEWLINE              : 
NOT                  : 
NUMBER_EXP           : 10
NUMBER_HEX           : 9
NUMBER_REAL          : 8
OR                   : 
PLUS                 : 1
POW                  : 
PRIVATE              : 
PRIVATE_ID           : 
RBRACE               : 
RPAREN               : 5
RSPAREN              : 
SELECT               : 
SEMI_COLON           : 
STRING_DOUBLE        : 
STRING_SINGLE        : 
SWITCH               : 
TIMES                : 3
WHILE                : 
WITH                 : 
error                : 

Nonterminals, with rules where they appear

empty                : 
expression           : 1 1 2 2 3 3 4 4 5 7 0
number               : 6

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 1
    number                         shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 2

    (7) expression -> MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 12
    number                         shift and go to state 4

state 3

    (5) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 13
    number                         shift and go to state 4

state 4

    (6) expression -> number .

    PLUS            reduce using rule 6 (expression -> number .)
    MINUS           reduce using rule 6 (expression -> number .)
    TIMES           reduce using rule 6 (expression -> number .)
    DIVIDE          reduce using rule 6 (expression -> number .)
    $end            reduce using rule 6 (expression -> number .)
    RPAREN          reduce using rule 6 (expression -> number .)


state 5

    (8) number -> NUMBER_REAL .

    PLUS            reduce using rule 8 (number -> NUMBER_REAL .)
    MINUS           reduce using rule 8 (number -> NUMBER_REAL .)
    TIMES           reduce using rule 8 (number -> NUMBER_REAL .)
    DIVIDE          reduce using rule 8 (number -> NUMBER_REAL .)
    $end            reduce using rule 8 (number -> NUMBER_REAL .)
    RPAREN          reduce using rule 8 (number -> NUMBER_REAL .)


state 6

    (9) number -> NUMBER_HEX .

    PLUS            reduce using rule 9 (number -> NUMBER_HEX .)
    MINUS           reduce using rule 9 (number -> NUMBER_HEX .)
    TIMES           reduce using rule 9 (number -> NUMBER_HEX .)
    DIVIDE          reduce using rule 9 (number -> NUMBER_HEX .)
    $end            reduce using rule 9 (number -> NUMBER_HEX .)
    RPAREN          reduce using rule 9 (number -> NUMBER_HEX .)


state 7

    (10) number -> NUMBER_EXP .

    PLUS            reduce using rule 10 (number -> NUMBER_EXP .)
    MINUS           reduce using rule 10 (number -> NUMBER_EXP .)
    TIMES           reduce using rule 10 (number -> NUMBER_EXP .)
    DIVIDE          reduce using rule 10 (number -> NUMBER_EXP .)
    $end            reduce using rule 10 (number -> NUMBER_EXP .)
    RPAREN          reduce using rule 10 (number -> NUMBER_EXP .)


state 8

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 14
    number                         shift and go to state 4

state 9

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 15
    number                         shift and go to state 4

state 10

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 16
    number                         shift and go to state 4

state 11

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . number
    (7) expression -> . MINUS expression
    (8) number -> . NUMBER_REAL
    (9) number -> . NUMBER_HEX
    (10) number -> . NUMBER_EXP

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER_REAL     shift and go to state 5
    NUMBER_HEX      shift and go to state 6
    NUMBER_EXP      shift and go to state 7

    expression                     shift and go to state 17
    number                         shift and go to state 4

state 12

    (7) expression -> MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> MINUS expression .)
    MINUS           reduce using rule 7 (expression -> MINUS expression .)
    TIMES           reduce using rule 7 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 7 (expression -> MINUS expression .)
    $end            reduce using rule 7 (expression -> MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 13

    (5) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 18
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 14

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 15

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 16

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 17

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 18

    (5) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)

